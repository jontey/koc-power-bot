if (!g_js_strings) {
    var g_js_strings = new Object()
}
g_js_strings.errorcode = new Object();
g_js_strings.errorcode.err_default = 'Something has gone wrong! Please try again, or refresh if this message reappears<br><br><a onclick="HelpDesk.show(4);return false;">See this error a lot? Let us know</a>';
g_js_strings.errorcode.err_0 = 'An Unexpected Error has occurred. Please try again later, or refresh if this message reappears<br><br><a onclick="HelpDesk.show(4);return false;">See this error a lot? Let us know</a>';
g_js_strings.errorcode.err_1 = 'A Fatal Error was encountered. Please refresh the page<br><br><a onclick="HelpDesk.show(4);return false;">See this error a lot? Let us know</a>';
g_js_strings.errorcode.err_2 = "Construction is already starting or is in progress";
g_js_strings.errorcode.err_3 = 'Unknown issue when updating your game, please try again later<br><br><a onclick="HelpDesk.show(4);return false;">See this error a lot? Let us know</a>';
g_js_strings.errorcode.err_4 = "You have insufficient %1$s! You currently have %2$s %3$s";
g_js_strings.errorcode.err_4b = "Your %1$s is not high enough level. You currently have %2$s";
g_js_strings.errorcode.err_4c = "You do not have enough %1$s. You currently have %2$s";
g_js_strings.errorcode.err_4z = "Requirements not met";
g_js_strings.errorcode.err_5 = 'There is a problem with the City. Please try again <br><br><br><a onclick="HelpDesk.show(4);return false;">See this error a lot? Let us know</a>';
g_js_strings.errorcode.err_6 = "Training queue of this City is full!";
g_js_strings.errorcode.err_7 = "You cannot perform this action again until %1$s";
g_js_strings.errorcode.err_8 = 'Kingdoms of Camelot is not able to process your request due to excess traffic. Please wait to try again. <br><br><a onclick="HelpDesk.show(4);return false;">See this error a lot? Let us know</a>';
g_js_strings.errorcode.err_50 = "Name is already taken! Please choose another";
g_js_strings.errorcode.err_51 = "Character names must be 3~15 letters with no spaces";
g_js_strings.errorcode.err_52 = "This name is not allowed. Please choose another";
g_js_strings.errorcode.err_53 = "No player found";
g_js_strings.errorcode.err_61 = "Not allowed to access this report";
g_js_strings.errorcode.err_62 = "No report exists on this page";
g_js_strings.errorcode.err_63 = "That report does not exist.";
g_js_strings.errorcode.err_101 = "That building does not seem to exist. Please refresh if this message reappears";
g_js_strings.errorcode.err_102 = "Another building already exists on that spot! If you cannot see it, please refresh the page";
g_js_strings.errorcode.err_102b = "Can only use a Portal to a free Plain";
g_js_strings.errorcode.err_103 = "Cannot change to specified level. You are currently at level %1$s. Please reload the page if this is not the level shown in the game";
g_js_strings.errorcode.err_103b = "Buildings can only be destroyed when their level is greater than 1";
g_js_strings.errorcode.err_104 = "Cannot perform this action on target location.";
g_js_strings.errorcode.err_105 = "The building you are trying to upgrade does not appear to exist in that location. Please try again later, or refresh the page";
g_js_strings.errorcode.err_106 = "Only one building of this type is allowed per City";
g_js_strings.errorcode.err_111 = "This City is already researching!";
g_js_strings.errorcode.err_112 = "This technology is already being researched!";
g_js_strings.errorcode.err_121 = "There is no space available for this Fortification";
g_js_strings.errorcode.err_121b = "Load capacity exceeded";
g_js_strings.errorcode.err_121c = "You have exceeded the number of transactions allowed by your Market level";
g_js_strings.errorcode.err_131 = "Cancellation can not be done at this time";
g_js_strings.errorcode.err_151 = "You cannot destroy this building until it is done being worked on";
g_js_strings.errorcode.err_152 = "You cannot destroy this building while it is in use";
g_js_strings.errorcode.err_201 = "Invalid destination specified";
g_js_strings.errorcode.err_202 = 'No info on starting location<br><br><br><a onclick="HelpDesk.show(4);return false;">See this error a lot? Let us know</a>';
g_js_strings.errorcode.err_203 = 'No info on destination location<br><br><br><a onclick="HelpDesk.show(4);return false;">See this error a lot? Let us know</a>';
g_js_strings.errorcode.err_204 = "Cannot March to yourself";
g_js_strings.errorcode.err_205 = 'Unknown issue. Cannot march to this location.<br><br><br><a onclick="HelpDesk.show(4);return false;">See this error a lot? Let us know</a>';
g_js_strings.errorcode.err_206 = 'Cannot perform this action on target. Please try again later <br><br><br><a onclick="HelpDesk.show(4);return false;">See this error a lot? Let us know</a>';
g_js_strings.errorcode.err_207 = "You cannot Attack or Scout another player City while in Beginner Protection, Truce, or Vacation mode";
g_js_strings.errorcode.err_207b = "You cannot use Dove of Peace while under Beginner Protection or if you are already under Truce mode";
g_js_strings.errorcode.err_208 = "You cannot Attack or Scout another player City that is in Beginner Protection, Truce, or Vacation mode.";
g_js_strings.errorcode.err_209 = "You cannot Attack or Scout a member of your alliance.";
g_js_strings.errorcode.err_210 = "Maximum allowed marches reached at current Rally Point level";
g_js_strings.errorcode.err_211 = "Maximum Troops exceeded for current Rally Point level. Use an Aura of Command or Aura of Conquest to increase your Maximum Troops";
g_js_strings.errorcode.err_212 = "Unable to use target Knight. Knight must be idle to be used. If you receive this message in error, please refresh the game";
g_js_strings.errorcode.err_213 = "Unable to use target Knight. Knight must be in the City to be used. If you receive this message in error, please refresh the game";
g_js_strings.errorcode.err_214 = "Friend is already a Knight!";
g_js_strings.errorcode.err_215 = "The selected person does not appear to be your friend according to Facebook. Please try again later";
g_js_strings.errorcode.err_216 = 'The Skill point you are saving are the same or lower than current Skill points. If this disagrees with what the Knight\'s Hall shows you, please refresh the page<br><br><a onclick="HelpDesk.show(4);return false;">See this error a lot? Let us know</a>';
g_js_strings.errorcode.err_217 = "Knight has no Unassigned Skill Points";
g_js_strings.errorcode.err_251 = "Requested March does not exist";
g_js_strings.errorcode.err_252 = "Match info does not match";
g_js_strings.errorcode.err_301 = "Cannot abandon last City!";
g_js_strings.errorcode.err_311 = "Cannot have Troops still on a March";
g_js_strings.errorcode.err_312 = "Cannot have outstanding Market transactions";
g_js_strings.errorcode.err_320 = "You may not build more than 10 Cities at this time";
g_js_strings.errorcode.err_330 = "You may not increase a Knight's loyalty above 100";
g_js_strings.errorcode.err_401 = "Tile info does not match";
g_js_strings.errorcode.err_402 = "No available Plains in the selected Province";
g_js_strings.errorcode.err_403 = "Situation at target Plain has changed";
g_js_strings.errorcode.err_404 = "You must build on a Plain you control";
g_js_strings.errorcode.err_501 = "Please quit the current Alliance before creating an Alliance";
g_js_strings.errorcode.err_601 = "You cannot help with your own project.";
g_js_strings.errorcode.err_602 = "Could not complete request, Player not found.";
g_js_strings.errorcode.err_603 = "%1$s %2$s is not in your alliance.";
g_js_strings.errorcode.err_604 = "%1$s %2$s's Kingdom does not need help.";
g_js_strings.errorcode.err_605 = "%1$s %2$s's project has already been completed.";
g_js_strings.errorcode.err_606 = "%1$s %2$s's project has received the maximum amount of help.";
g_js_strings.errorcode.err_607 = "You already helped with %1$s %2$s's project.";
g_js_strings.errorcode.err_608 = "There is something wrong with your request. Cannot process.";
g_js_strings.errorcode.err_1001 = "Your Facebook session has expired. The page will now refresh to restore your session";
g_js_strings.commonstr = new Object();
g_js_strings.commonstr.abandon = "Abandon";
g_js_strings.commonstr.aborting = "Aborting";
g_js_strings.commonstr.actions = "Actions";
g_js_strings.commonstr.alchemystic = "Alchemystic";
g_js_strings.commonstr.all = "All";
g_js_strings.commonstr.max = "Max";
g_js_strings.commonstr.alliance = "Alliance";
g_js_strings.commonstr.alliances = "Alliances";
g_js_strings.commonstr.amount = "Amount";
g_js_strings.commonstr.amt = "Amt";
g_js_strings.commonstr.apply = "Apply";
g_js_strings.commonstr.appoint = "Appoint";
g_js_strings.commonstr.approve = "Approve";
g_js_strings.commonstr.assist = "Assist";
g_js_strings.commonstr.assign = "Assign";
g_js_strings.commonstr.attack = "Attack";
g_js_strings.commonstr.attacker = "Attacker";
g_js_strings.commonstr.attackers = "Attackers";
g_js_strings.commonstr.attacking = "Attacking";
g_js_strings.commonstr.army = "Army";
g_js_strings.commonstr.atk = "Atk";
g_js_strings.commonstr.back = "Back";
g_js_strings.commonstr.ballistae = "Ballistae";
g_js_strings.commonstr.barbariancamp = "Barbarian Camp";
g_js_strings.commonstr.barbarians = "Barbarians";
g_js_strings.commonstr.bog = "Bog";
g_js_strings.commonstr.build = "Build";
g_js_strings.commonstr.building = "Building";
g_js_strings.commonstr.buildings = "Buildings";
g_js_strings.commonstr.boost = "Boost";
g_js_strings.commonstr.buy = "Buy";
g_js_strings.commonstr.buyitem = "Buy Item";
g_js_strings.commonstr.buymore = "Buy More";
g_js_strings.commonstr.buying = "Buying";
g_js_strings.commonstr.cancel = "Cancel";
g_js_strings.commonstr.cancelconstruct = "Cancel Construction";
g_js_strings.commonstr.cancelled = "Cancelled";
g_js_strings.commonstr.chancellor = "Chancellor";
g_js_strings.commonstr.chat = "Chat";
g_js_strings.commonstr.chest = "Chest";
g_js_strings.commonstr.choose = "Choose";
g_js_strings.commonstr.city = "City";
g_js_strings.commonstr.cities = "Cities";
g_js_strings.commonstr.claim = "Claim";
g_js_strings.commonstr.claimedexc = "Claimed!";
g_js_strings.commonstr.close = "Close";
g_js_strings.commonstr.com = "Com";
g_js_strings.commonstr.combat = "Combat";
g_js_strings.commonstr.completedexc = "Completed!";
g_js_strings.commonstr.compose = "Compose";
g_js_strings.commonstr.conquered = "Conquered";
g_js_strings.commonstr.construction = "Construction";
g_js_strings.commonstr.coordinates = "Coordinates";
g_js_strings.commonstr.cost = "Cost";
g_js_strings.commonstr.count = "Count";
g_js_strings.commonstr.court = "Court";
g_js_strings.commonstr.crest = "Crest";
g_js_strings.commonstr.current = "current";
g_js_strings.commonstr.date = "Date";
g_js_strings.commonstr.days = "Days";
g_js_strings.commonstr.decontruct = "Deconstruct";
g_js_strings.commonstr.defeat = "Defeat";
g_js_strings.commonstr.defend = "Defend";
g_js_strings.commonstr.defenders = "Defenders";
g_js_strings.commonstr.defending = "Defending";
g_js_strings.commonstr.defense = "Defense";
g_js_strings.commonstr.deletetx = "Delete";
g_js_strings.commonstr.demote = "Demote";
g_js_strings.commonstr.description = "Description";
g_js_strings.commonstr.destroy = "Destroy";
g_js_strings.commonstr.disaster = "Disaster";
g_js_strings.commonstr.dismiss = "Dismiss";
g_js_strings.commonstr.distance = "Distance";
g_js_strings.commonstr.downward = "Downward";
g_js_strings.commonstr.edit = "Edit";
g_js_strings.commonstr.efficiency = "Efficiency";
g_js_strings.commonstr.encamped = "Encamped";
g_js_strings.commonstr.ends = "Ends";
g_js_strings.commonstr.enemy = "Enemy";
g_js_strings.commonstr.equip = "Equip";
g_js_strings.commonstr.estimatedtime = "Estimated Time";
g_js_strings.commonstr.error = "Error";
g_js_strings.commonstr.experience = "Experience";
g_js_strings.commonstr.eventtx = "Event";
g_js_strings.commonstr.featured = "Featured";
g_js_strings.commonstr.feedback = "Feedback";
g_js_strings.commonstr.first = "First";
g_js_strings.commonstr.food = "Food";
g_js_strings.commonstr.fortx = "For";
g_js_strings.commonstr.foreman = "Foreman";
g_js_strings.commonstr.fortification = "Fortification";
g_js_strings.commonstr.founder = "Founder";
g_js_strings.commonstr.fought = "Fought";
g_js_strings.commonstr.friend = "Friend";
g_js_strings.commonstr.friendly = "Friendly";
g_js_strings.commonstr.friends = "Friends";
g_js_strings.commonstr.from = "From";
g_js_strings.commonstr.gems = "Gems";
g_js_strings.commonstr.general = "General";
g_js_strings.commonstr.get = "Get";
g_js_strings.commonstr.getmore = "Get More";
g_js_strings.commonstr.gift = "Gift";
g_js_strings.commonstr.global = "Global";
g_js_strings.commonstr.glory = "Glory";
g_js_strings.commonstr.gold = "Gold";
g_js_strings.commonstr.goldperhour = "Gold/Hour";
g_js_strings.commonstr.grassland = "Grassland";
g_js_strings.commonstr.happiness = "Happiness";
g_js_strings.commonstr.help = "Help";
g_js_strings.commonstr.hills = "Hills";
g_js_strings.commonstr.hire = "Hire";
g_js_strings.commonstr.host = "Host";
g_js_strings.commonstr.hostile = "Hostile";
g_js_strings.commonstr.idle = "Idle";
g_js_strings.commonstr.ignore = "Ignore";
g_js_strings.commonstr.impending = "Impending";
g_js_strings.commonstr.inbox = "Inbox";
g_js_strings.commonstr.info = "Info";
g_js_strings.commonstr.intabbr = "Int";
g_js_strings.commonstr.intelligence = "Intelligence";
g_js_strings.commonstr.intermediates = "Intermediates";
g_js_strings.commonstr.invalid = "Invalid";
g_js_strings.commonstr.invite = "Invite";
g_js_strings.commonstr.invited = "Invited";
g_js_strings.commonstr.items = "Items";
g_js_strings.commonstr.killed = "Killed";
g_js_strings.commonstr.knight = "Knight";
g_js_strings.commonstr.lady = "Lady";
g_js_strings.commonstr.ladylord = "Lady/Lord";
g_js_strings.commonstr.lake = "Lake";
g_js_strings.commonstr.leaderboard = "Leaderboard";
g_js_strings.commonstr.leaders = "Leaders";
g_js_strings.commonstr.leave = "Leave";
g_js_strings.commonstr.level = "Level";
g_js_strings.commonstr.levels = "Levels";
g_js_strings.commonstr.life = "Life";
g_js_strings.commonstr.limit = "Limit";
g_js_strings.commonstr.loadingddd = "Loading...";
g_js_strings.commonstr.location = "Location";
g_js_strings.commonstr.lord = "Lord";
g_js_strings.commonstr.loot = "Loot";
g_js_strings.commonstr.loyalty = "Loyalty";
g_js_strings.commonstr.lv = "Lv.";
g_js_strings.commonstr.lvl = "Lvl";
g_js_strings.commonstr.manual = "Manual";
g_js_strings.commonstr.march = "March";
g_js_strings.commonstr.marching = "Marching";
g_js_strings.commonstr.marshal = "Marshal";
g_js_strings.commonstr.member = "Member";
g_js_strings.commonstr.members = "Members";
g_js_strings.commonstr.mercenary = "Mercenary";
g_js_strings.commonstr.mercenaries = "Mercenaries";
g_js_strings.commonstr.message = "Message";
g_js_strings.commonstr.messagevb = "Message";
g_js_strings.commonstr.might = "Might";
g_js_strings.commonstr.militiamen = "Militiamen";
g_js_strings.commonstr.max = "Max";
g_js_strings.commonstr.maximum = "Maximum";
g_js_strings.commonstr.mountain = "Mountain";
g_js_strings.commonstr.nametx = "Name";
g_js_strings.commonstr.neutral = "Neutral";
g_js_strings.commonstr.next = "Next";
g_js_strings.commonstr.no = "No";
g_js_strings.commonstr.noknight = "No Knight";
g_js_strings.commonstr.none = "None";
g_js_strings.commonstr.normal = "Normal";
g_js_strings.commonstr.note = "Note";
g_js_strings.commonstr.nothanks = "No Thanks";
g_js_strings.commonstr.novices = "Novices";
g_js_strings.commonstr.obtain = "Obtain";
g_js_strings.commonstr.officer = "Officer";
g_js_strings.commonstr.offline = "Offline";
g_js_strings.commonstr.oftx = "of";
g_js_strings.commonstr.ok = "OK";
g_js_strings.commonstr.online = "online";
g_js_strings.commonstr.other = "Other";
g_js_strings.commonstr.ore = "Ore";
g_js_strings.commonstr.outbox = "Outbox";
g_js_strings.commonstr.overview = "Overview";
g_js_strings.commonstr.owned = "Owned";
g_js_strings.commonstr.page = "Page";
g_js_strings.commonstr.pending = "Pending";
g_js_strings.commonstr.pikemen = "Pikemen";
g_js_strings.commonstr.plain = "Plain";
g_js_strings.commonstr.player = "Player";
g_js_strings.commonstr.plundered = "Plundered";
g_js_strings.commonstr.pol = "Pol";
g_js_strings.commonstr.politics = "Politics";
g_js_strings.commonstr.population = "Population";
g_js_strings.commonstr.position = "Position";
g_js_strings.commonstr.post = "Post";
g_js_strings.commonstr.posttowall = "Post to Wall";
g_js_strings.commonstr.prev = "Prev";
g_js_strings.commonstr.previous = "Previous";
g_js_strings.commonstr.production = "Production";
g_js_strings.commonstr.profile = "Profile";
g_js_strings.commonstr.promote = "Promote";
g_js_strings.commonstr.province = "Province";
g_js_strings.commonstr.purchase = "Purchase";
g_js_strings.commonstr.purchased = "Purchased";
g_js_strings.commonstr.quantity = "Quantity";
g_js_strings.commonstr.raid = "Raid";
g_js_strings.commonstr.range = "Range";
g_js_strings.commonstr.rank = "Rank";
g_js_strings.commonstr.ranking = "Ranking";
g_js_strings.commonstr.reassign = "Reassign";
g_js_strings.commonstr.recall = "Recall";
g_js_strings.commonstr.reinforce = "Reinforce";
g_js_strings.commonstr.reinforced = "Reinforced";
g_js_strings.commonstr.reject = "Reject";
g_js_strings.commonstr.remove = "Remove";
g_js_strings.commonstr.rename = "Rename";
g_js_strings.commonstr.replace = "Replace";
g_js_strings.commonstr.report = "Report";
g_js_strings.commonstr.reports = "Reports";
g_js_strings.commonstr.reply = "Reply";
g_js_strings.commonstr.requested = "Requested";
g_js_strings.commonstr.required = "Required";
g_js_strings.commonstr.requirement = "Requirement";
g_js_strings.commonstr.requirements = "Requirements";
g_js_strings.commonstr.res = "Res";
g_js_strings.commonstr.research = "Research";
g_js_strings.commonstr.resource = "Resource";
g_js_strings.commonstr.resourcefulness = "Resourcefulness";
g_js_strings.commonstr.resources = "Resources";
g_js_strings.commonstr.returning = "Returning";
g_js_strings.commonstr.reward = "Reward";
g_js_strings.commonstr.roles = "Roles";
g_js_strings.commonstr.ruin = "Ruin";
g_js_strings.commonstr.salary = "Salary";
g_js_strings.commonstr.salaries = "Salaries";
g_js_strings.commonstr.save = "Save";
g_js_strings.commonstr.says = "Says";
g_js_strings.commonstr.scout = "Scout";
g_js_strings.commonstr.scouting = "Scouting";
g_js_strings.commonstr.search = "Search";
g_js_strings.commonstr.select = "Select";
g_js_strings.commonstr.sell = "Sell";
g_js_strings.commonstr.selling = "Selling";
g_js_strings.commonstr.send = "Send";
g_js_strings.commonstr.sendtofriends = "Send to Friends";
g_js_strings.commonstr.set = "Set";
g_js_strings.commonstr.get = "Get";
g_js_strings.commonstr.share = "Share";
g_js_strings.commonstr.sharetowall = "Share to Wall";
g_js_strings.commonstr.shop = "Shop";
g_js_strings.commonstr.silence = "Silence";
g_js_strings.commonstr.skills = "Skills";
g_js_strings.commonstr.skip = "Skip";
g_js_strings.commonstr.sold = "Sold";
g_js_strings.commonstr.space = "Space";
g_js_strings.commonstr.speed = "Speed";
g_js_strings.commonstr.speedup = "Speed Up";
g_js_strings.commonstr.instantfinish = "Instant Finish";
g_js_strings.commonstr.stable = "Stable";
g_js_strings.commonstr.stat = "Stat";
g_js_strings.commonstr.status = "Status";
g_js_strings.commonstr.steward = "Steward";
g_js_strings.commonstr.stone = "Stone";
g_js_strings.commonstr.subject = "Subject";
g_js_strings.commonstr.submit = "Submit";
g_js_strings.commonstr.subscribe = "Subscribe";
g_js_strings.commonstr.survived = "Survived";
g_js_strings.commonstr.swordsmen = "Swordsmen";
g_js_strings.commonstr.target = "Target";
g_js_strings.commonstr.tech = "Tech";
g_js_strings.commonstr.technology = "Technology";
g_js_strings.commonstr.time = "Time";
g_js_strings.commonstr.timeremaining = "Time Remaining";
g_js_strings.commonstr.title = "Title";
g_js_strings.commonstr.train = "Train";
g_js_strings.commonstr.totx = "To";
g_js_strings.commonstr.tournament = "Tournament";
g_js_strings.commonstr.train = "Train";
g_js_strings.commonstr.transactions = "Transactions";
g_js_strings.commonstr.transform = "Transform";
g_js_strings.commonstr.transport = "Transport";
g_js_strings.commonstr.transporting = "Transporting";
g_js_strings.commonstr.traps = "Traps";
g_js_strings.commonstr.troops = "Troops";
g_js_strings.commonstr.truce = "Truce";
g_js_strings.commonstr.tutorial = "Tutorial";
g_js_strings.commonstr.type = "Type";
g_js_strings.commonstr.unassign = "Un-Assign";
g_js_strings.commonstr.undefined = "Undefined";
g_js_strings.commonstr.unequip = "Unequip";
g_js_strings.commonstr.upgrade = "Upgrade";
g_js_strings.commonstr.upkeep = "Upkeep";
g_js_strings.commonstr.upward = "Upward";
g_js_strings.commonstr.use = "Use";
g_js_strings.commonstr.vacation = "View";
g_js_strings.commonstr.veterans = "Veterans";
g_js_strings.commonstr.vicechancellor = "Vice Chancellor";
g_js_strings.commonstr.victory = "Victory";
g_js_strings.commonstr.view = "View";
g_js_strings.commonstr.viewcourt = "View Court";
g_js_strings.commonstr.viewmap = "View Map";
g_js_strings.commonstr.visit = "Visit";
g_js_strings.commonstr.wilderness = "Wilderness";
g_js_strings.commonstr.winner = "Winner";
g_js_strings.commonstr.woods = "Woods";
g_js_strings.commonstr.workers = "Workers";
g_js_strings.commonstr.xp = "XP";
g_js_strings.commonstr.yes = "Yes";
g_js_strings.commonstr.yield = "Yield";
g_js_strings.commonstr.youneed = "You Need";
g_js_strings.commonstr.youown = "You Own";
g_js_strings.commonstr.yours = "Yours";
g_js_strings.commonstr.wood = "Wood";
g_js_strings.commonstr.inventory = "Inventory";
g_js_strings.modaltitles = new Object();
g_js_strings.modaltitles.abandoncity = "Abandon City";
g_js_strings.modaltitles.alliance = "Alliance";
g_js_strings.modaltitles.alliancerequest = "Alliance Request";
g_js_strings.modaltitles.appointknight = "Appoint Knight";
g_js_strings.modaltitles.assignrole = "Assign Role";
g_js_strings.modaltitles.assignskills = "Assign Skills";
g_js_strings.modaltitles.blockuser = "Block User";
g_js_strings.modaltitles.buildingnewcity = "Building a New City";
g_js_strings.modaltitles.buildings = "Buildings";
g_js_strings.modaltitles.changedomain = "Change Domain";
g_js_strings.modaltitles.changetaxrate = "Change Tax Rate";
g_js_strings.modaltitles.collectgold = "Collect Gold";
g_js_strings.modaltitles.confirmbuy = "Confirm Buy";
g_js_strings.modaltitles.confirmsale = "Confirm Sale";
g_js_strings.modaltitles.continuesetup = "Continue Setup";
g_js_strings.modaltitles.court = "Court";
g_js_strings.modaltitles.courtlyaction = "Courtly Action";
g_js_strings.modaltitles.deconstructbuild = "Deconstruct Building?";
g_js_strings.modaltitles.cancelconstructbuild = "Cancel Construction?";
g_js_strings.modaltitles.deleteall = "Delete All";
g_js_strings.modaltitles.destroybuild = "Destroy Building?";
g_js_strings.modaltitles.discussion = "Discussion";
g_js_strings.modaltitles.dismissknight = "Dismiss Knight";
g_js_strings.modaltitles.error = "Error!";
g_js_strings.modaltitles.excesstraffic = "Excess Traffic";
g_js_strings.modaltitles.exitbeginnerprotection = "Exit Beginner Protection";
g_js_strings.modaltitles.getmoregems = "Get More Gems";
g_js_strings.modaltitles.giftitem = "Gift an Item";
g_js_strings.modaltitles.helprequest = "Help Request";
g_js_strings.modaltitles.helprequestsent = "Help Request Sent";
g_js_strings.modaltitles.ignoreuser = "Ignore User";
g_js_strings.modaltitles.impatks = "Impending Attacks";
g_js_strings.modaltitles.inchapp = "Increase Happiness";
g_js_strings.modaltitles.knightrewarded = "Knight Rewarded!";
g_js_strings.modaltitles.knightroleassigned = "Knight Assignment";
g_js_strings.modaltitles.leaderboard = "Leaderboard";
g_js_strings.modaltitles.renamecelebration = "Renaming Celebration";
g_js_strings.modaltitles.magiccloak = "Magic Cloak";
g_js_strings.modaltitles.marchinformation = "March Information";
g_js_strings.modaltitles.marchtroops = "March Troops";
g_js_strings.modaltitles.mmb = "Merlin&#39;s Magical Boxes";
g_js_strings.modaltitles.memberdetails = "Member Details";
g_js_strings.modaltitles.messages = "Messages";
g_js_strings.modaltitles.namenewcity = "Name New City";
g_js_strings.modaltitles.notice = "Notice";
g_js_strings.modaltitles.pickavatar = "Pick an Avatar";
g_js_strings.modaltitles.profile = "Profile";
g_js_strings.modaltitles.quests = "Quests";
g_js_strings.modaltitles.renameuser = "Rename User";
g_js_strings.modaltitles.rewardknight = "Reward Knight";
g_js_strings.modaltitles.selectitem = "Select Item";
g_js_strings.modaltitles.sendmessage = "Send Message";
g_js_strings.modaltitles.shop = "Shop";
g_js_strings.modaltitles.silenceuser = "Silence User";
g_js_strings.modaltitles.speedup = "Speed Up";
g_js_strings.modaltitles.speedupmarkettransaction = "Speed up market transaction";
g_js_strings.modaltitles.tournaments = "Tournaments";
g_js_strings.modaltitles.userprofile = "User Profile";
g_js_strings.modaltitles.usersettings = "User Settings";
g_js_strings.modaltitles.wildernessdefense = "Wilderness Defense";
g_js_strings.modal_openBarracks = new Object();
g_js_strings.modal_openBarracks.trainttl = "Train Troops";
g_js_strings.modal_openBarracks.trainingttl = "In Training";
g_js_strings.modal_openBarracks.youown = "You Own";
g_js_strings.modal_openBarracks.dismiss = "Dismiss";
g_js_strings.modal_openBarracks.curintrain = "Currently in Training";
g_js_strings.modal_openBarracks.waittrain = "Troops Waiting to be Trained";
g_js_strings.modal_barracks_dismiss = new Object();
g_js_strings.modal_barracks_dismiss.dismisstroops = "Dismiss Troops";
g_js_strings.modal_barracks_dismiss_confirm = new Object();
g_js_strings.modal_barracks_dismiss_confirm.areyousure = "Dismiss these troops?";
g_js_strings.modal_barracks_dismiss_confirm.confirmttl = "Dismiss Troops Confirmation";
g_js_strings.modal_barracks_train = new Object();
g_js_strings.modal_barracks_train.attack = "Attack";
g_js_strings.modal_barracks_train.speed = "Speed";
g_js_strings.modal_barracks_train.defense = "Defense";
g_js_strings.modal_barracks_train.range = "Range";
g_js_strings.modal_barracks_train.life = "Life";
g_js_strings.modal_barracks_train.load = "Load";
g_js_strings.modal_barracks_train.maximum = "Maximum";
g_js_strings.modal_barracks_train.numtotrain = "# of Troops to Train";
g_js_strings.modal_barracks_train.traintime = "Training Time";
g_js_strings.modal_barracks_train.timereduction = "Time Reduction";
g_js_strings.modal_barracks_train.starttraining = "Start Training";
g_js_strings.modal_barracks_trainingtab = new Object();
g_js_strings.modal_barracks_trainingtab.esttime = "Estimated Time";
g_js_strings.modal_barracks_trainingtab.totaltraintime = "Total Training Time";
g_js_strings.modal_barracks_trainingtab.esttimeremain = "Estimated Time Remaining";
g_js_strings.modal_barracks_trainingtab.completetxt = "Complete";
g_js_strings.modal_attack = new Object();
g_js_strings.modal_attack.marchtype = "March Type";
g_js_strings.modal_attack.marchtextattack = "This type is used when you are attacking a Wilderness or another player.";
g_js_strings.modal_attack.marchtexttransport = "This type is used when you want to transport resources to a location.";
g_js_strings.modal_attack.marchtextscout = "This type is used when you are scouting a Wilderness or another player.";
g_js_strings.modal_attack.marchtextreinforce = "This type is used when you want to send more Troops or resources to a location.";
g_js_strings.modal_attack.marchtextreassign = "This type is used when you want to move Troops between your Cities.";
g_js_strings.modal_attack.availabletroops = "Available Troops";
g_js_strings.modal_attack.thisisabarbarianraid = "This is a Barbarian Raid";
g_js_strings.modal_attack.thisisabarbarianraidtooltip = "Barbarian Raids can be unlocked at Level 20. Barbarian Raids allow you to loot Barbarian Camps automatically. Raids can be saved by clicking 'Raid and Save' below. The Knight and Troops saved to this raid will be dedicated to raiding the Barbarian Camp location. Raids can be managed from the Rally Point under the 'Barbarian Raids' tab.";
g_js_strings.modal_attack.barbarianraidhelpp1 = "Selecting this check box will allow you to save scheduled Raids against a Barbarian Camp of your choosing. Saved Raids can be accessed, managed, and changed via the Rally Point.";
g_js_strings.modal_attack.barbarianraidhelpp2 = "Raids will continuously attack Barbarian Camps, but must be reset at least once a day from the Rally Point for continuous Raiding.";
g_js_strings.modal_attack.barbarianraidhelpp3 = "Beware when you commit your troops for battle in Raids: this strategy can only work against Barbarian Camps, the Troops and Knights dedicated to the Raid will be locked until the Raid is deleted, and all Raids will have a minimum march time of just under 3 minutes. In addition, you can only have as many active Raids and Marches as your Rally Point can allow.";
g_js_strings.modal_attack.selecttroopstext = "Select the number of troops you&#39;d like to send";
g_js_strings.modal_attack.displayscoutonly = "Display Scout Troops only";
g_js_strings.modal_attack.displayingscoutonly = "Displaying Scout Troops only";
g_js_strings.modal_attack.displaysupplyonly = "Display Supply Troops only";
g_js_strings.modal_attack.selectedtroops = "Troops Selected";
g_js_strings.modal_attack.resouresselected = "Resources Selected";
g_js_strings.modal_attack.maxtroops = "Maximum Troops";
g_js_strings.modal_attack.reqfood = "Required Food";
g_js_strings.modal_attack.loadcapacity = "Load Capacity";
g_js_strings.modal_attack.loadvac = "Load Vacancy";
g_js_strings.modal_attack.applyaura = "Apply Aura of Command";
g_js_strings.modal_attack.applyspot = "Apply spot to increase personnel limit by 25%. You own";
g_js_strings.modal_attack.applyauraspot = "Apply Aura of Command to increase your Maximum Troops on this march by 25%.";
g_js_strings.modal_attack.marchto = "March To";
g_js_strings.modal_attack.applyauraconquestspot = "Apply Aura of Conquest to increase your Maximum Troops on this march by 50%.";
g_js_strings.modal_attack.selecttotransport = "Select Items to Transport";
g_js_strings.modal_attack.selecttarget = "Select Target";
g_js_strings.modal_attack.dord = "Or ";
g_js_strings.modal_attack.inpcoor = "input coordinates";
g_js_strings.modal_attack.selbookmark = "select from Bookmarks";
g_js_strings.modal_attack.availableknights = "Available Knights";
g_js_strings.modal_attack.availableresources = "Available Resources";
g_js_strings.modal_attack.chooseknight = "Choose the knight with the best attack skills.";
g_js_strings.modal_attack.chooseknightlead = "Choose Knight to lead the attack";
g_js_strings.modal_attack.dchooseknightd = "--Choose a Knight--";
g_js_strings.modal_attack.noknightavailable = "--No Knights Available--";
g_js_strings.modal_attack.betterattackhint = "The better the attack skills, the better they will do.";
g_js_strings.modal_attack.speedboosts = "Speed Boosts";
g_js_strings.modal_attack.marchboosts = "March Boosts";
g_js_strings.modal_attack.attackboosts = "Attack Boosts";
g_js_strings.modal_attack.defenseboosts = "Defense Boosts";
g_js_strings.modal_attack.idleknightshint = "Only Idle knights - those not already leading a march and not already assigned to a role - are allowed to lead a march.";
g_js_strings.modal_attack.decreasemarch = "Decrease March Time to Target";
g_js_strings.modal_attack.increaseattack = "Increase Attack Efforts";
g_js_strings.modal_attack.overmarch = "At the current city's rally point level, additional marches cannot be sent out. <br/>Please try a different city, upgrade rally point, or recall and wait for outside marches to return.";
g_js_strings.modal_attack.overmarch21 = "At the current city's rally point level, additional marches and raids cannot be sent out.";
g_js_strings.modal_attack.overmarch22 = "Please try a different city, upgrade rally point, delete raids, or recall and wait for outside marches to return.";
g_js_strings.modal_attack.estimatedmarchtime = "Estimated March Time";
g_js_strings.modal_attack.youhave = "You have";
g_js_strings.modal_attack.raidandsave = "Raid and Save";
g_js_strings.modal_attack_target_dropdown = new Object();
g_js_strings.modal_attack_target_dropdown.choosebookmark = "Choose Bookmark";
g_js_strings.modal_questions = new Object();
g_js_strings.modal_questions.question = "Are you sure?";
g_js_strings.modal_questions.abandon = "Are you sure you want to abandon that ";
g_js_strings.attack_generateincoming = new Object();
g_js_strings.attack_generateincoming.impendingattack = "Impending Attack!";
g_js_strings.attack_generateincoming.estimatedarrival = "Estimated Arrival";
g_js_strings.attack_generateincoming.lostreadguide = "Lost? Read the Guide!";
g_js_strings.attack_generateincoming.protecteddays = "You are protected for %1$s more days and cannot attack or be attacked by players.";
g_js_strings.attack_generateincoming.unprotecteddays = "You are no longer under beginner protection and can be attacked by other players.";
g_js_strings.attack_viewimpending_view = new Object();
g_js_strings.attack_viewimpending_view.upgradetoseeinfo = "Upgrade Watch Tower";
g_js_strings.attack_viewimpending_view.armysize = "Army Size";
g_js_strings.attack_viewimpending_view.knightcomlvl = "Knight Combat Level";
g_js_strings.attack_viewimpending_view.incomingtroops = "Incoming Troops";
g_js_strings.attack_viewimpending_view.techlevels = "Research Levels";
g_js_strings.attack_viewimpending_view.troophideoption = "Remember that you can set your troops to defend or hide them in sanctuary by choosing &#39;Hide troops in sanctuary&#39; or &#39;Order troops to defend city&#39; after you have clicked on your Castle in the City view.";
g_js_strings.attack_viewimpending_view.gotowatchtower = "Go to Watch Tower";
g_js_strings.attack_generatequeue = new Object();
g_js_strings.attack_generatequeue.waitreport = "Waiting for Report";
g_js_strings.attack_generatequeue.raidstopped = "Raid Stopped";
g_js_strings.attack_generatequeue.raidresting = "Raid Resting";
g_js_strings.modal_wilderness_buildcity = new Object();
g_js_strings.modal_wilderness_buildcity.namecity = "Name Your City";
g_js_strings.modal_attack_do = new Object();
g_js_strings.modal_attack_do.sendtroop = "You must send at least one troop on a march";
g_js_strings.modal_attack_do.transportitem = "You must transport something";
g_js_strings.modal_attack_do.sendscout = "You must send at least one Scout";
g_js_strings.modal_attack_do.sendknight = "You must send a Knight on Attack";
g_js_strings.modal_attack_do.specifytarget = "You must specify a valid target for a march";
g_js_strings.modal_attack_do.selectbarbariancamps = "You have selected a target that is not a Barbarian Camp. Barbarian Raids can only be conducted against Barbarian Camps.";
g_js_strings.modal_attack_check = new Object();
g_js_strings.modal_attack_check.warning = "Warning! You are in danger of losing the Mists of Avalon!";
g_js_strings.modal_attack_check.warningdesc = "If you attack or scout a player-controlled territory while you are under the Mists of Avalon, the Mists will dissipate and your territories will be visible to all players. Do you still wish to attack?";
g_js_strings.modal_attack_check.marchon = "March On";
g_js_strings.modal_attack_check.canmarch = "Cancel March";
g_js_strings.modal_build_help_tooltip = new Object();
g_js_strings.modal_build_help_tooltip.friendbuildtimedesc = "For each friend that clicks on your feed, the build time will be reduced by one minute, up to a maximum of a 10 minute reduction.";
g_js_strings.modal_build_help_tooltip.newfriendbuildtimedesc = "For each friend that clicks on your feed, the build time will be reduced by either 1 minute or 1% whichever is greater. Up to 10 friends can speed up your build.";
g_js_strings.modal_build_help_tooltip.newfriendbuildtimedesc1 = "Share a story to your wall asking your friends for help with your build. For each friend that clicks on your wall story, the remaining time will be reduced by either 1 minute or 1% whichever is greater, up to ten times";
g_js_strings.modal_build_demolish = new Object();
g_js_strings.modal_build_demolish.deconstructiondesc = "Deconstruction takes time and gives back few resources for buildings of level higher than 1";
g_js_strings.modal_build_demolish.destroydesc = "Destroy building immediately using Dragon's Stomp. You will not get any resources out of this destruction.";
g_js_strings.modal_build = new Object();
g_js_strings.modal_build.usedragon = "Uses 1 Dragon&#39;s Stomp";
g_js_strings.modal_build.abandoncity = "Abandon City";
g_js_strings.modal_build.divineinsp = "Divine Inspiration";
g_js_strings.modal_build.divineprov = "Divine Providence";
g_js_strings.modal_build.withhelp = "with Help";
g_js_strings.modal_build.andshare = "and Share";
g_js_strings.modal_build.buildandshare = "Build and Share";
g_js_strings.modal_build.upgradeandshare = "Upgrade and Share";
g_js_strings.modal_build.buildandaskhelp = "Build and ask for help";
g_js_strings.modal_build.upgradeandaskhelp = "Upgrade and ask for help";
g_js_strings.modal_build.sharemessagebuildorresearch = "Share a message to your wall and alliance chat asking for help reducing your build or research time.";
g_js_strings.modal_build.manualbuild = "Manual Build";
g_js_strings.modal_build.manualupgrade = "Manual Upgrade";
g_js_strings.modal_build.buildtime = "Build Time";
g_js_strings.modal_build.asquickas = "as quick as";
g_js_strings.modal_build.timeremaining = "Time Remanining";
g_js_strings.modal_build.cancelcurrconstuct = "Cancel Current Construction";
g_js_strings.modal_build.buildoneattime = "You can only build one<br/>building at a time.";
g_js_strings.modal_build.reqnotmet = "Requirements for this<br/>building have not been met.";
g_js_strings.modal_build.reducebuildtimedesc = "Reduce build time when you ask your friends to help. For each friend that clicks on your feed, the build time will be reduced by one minute, up to a maximum of a 10 minute reduction.";
g_js_strings.modal_build.newreducebuildtimedesc = "Reduce build time when you ask your friends to help. For each friend that clicks on your feed, the build time will be reduced by either 1 minute or 1% whichever is greater. Up to 10 friends can speed up your build.";
g_js_strings.modal_build.newbuilding = "New Building";
g_js_strings.modal_build.whatsthis = "what&#39;s this?";
g_js_strings.modal_build.whatsthiscontent = "Reduce build or research time by sharing a story to your Wall and to your Alliance chat asking for help.  For each friend or Alliance member that clicks on the provided link, the build or research time will reduced by one minute or 1% (whichever is greater) up to a maximum of 5 friends and 5 Alliance members.";
g_js_strings.modal_build.mintime = "Min. time";
g_js_strings.deconstructBuilding = new Object();
g_js_strings.deconstructBuilding.lvl1deconstructdesc = "Level 1 buildings can be deconstructed immediately and no resources are returned back";
g_js_strings.deconstructBuilding.deconstructtakes = "Deconstructing this building takes %1$s and you will get";
g_js_strings.deconstructBuilding.deconstructinvalid = "Deconstruction is not valid";
g_js_strings.destructBuilding = new Object();
g_js_strings.destructBuilding.needtodestruct = "You need %1$s to destroy this building immediately.";
g_js_strings.destructbuildingconfirm = new Object();
g_js_strings.destructbuildingconfirm.builddestroyed = "Building Destroyed!";
g_js_strings.cancelTraining = new Object();
g_js_strings.cancelTraining.canceltrainingtitle = "Cancel Training?";
g_js_strings.cancelTraining.canceltraining = "Cancel Training";
g_js_strings.cancelTraining.canceltrainingtakes = "Cancelling this training will get";
g_js_strings.cancelFortification = new Object();
g_js_strings.cancelFortification.cancelfortificationtitle = "Cancel Fortification?";
g_js_strings.cancelFortification.cancelfortification = "Cancel Fortification";
g_js_strings.cancelFortification.cancelfortificationtakes = "Cancelling this fortification will get";
g_js_strings.cancelconstruction = new Object();
g_js_strings.cancelconstruction.cancelconstructiontitle = "Cancel Construction?";
g_js_strings.cancelconstruction.cancelconstruction = "Cancel Construction";
g_js_strings.cancelconstruction.cancelconstructiontakes = "Cancelling this construction will get";
g_js_strings.cancelconstruction.cancelconstructionloseitem = "Warning: cancelling this construction will NOT return {itemName}!";
g_js_strings.loyalBoost_modal = new Object();
g_js_strings.loyalBoost_modal.rewardknight = "Reward your knight to increase loyalty";
g_js_strings.loyalBoost_modal.rewardwith = "Reward with";
g_js_strings.loyalBoost_modal.rewardknightgolddesc = "Reward knight with %1$s Gold to increase his/her loyalty by 5";
g_js_strings.loyalBoost_modal.notenoughgold = "You don't have enough Gold for this.";
g_js_strings.loyalBoost_modal.skillpointsapplied = "Skill Points applied";
g_js_strings.reward_confirm_modal = new Object();
g_js_strings.reward_confirm_modal.increasedbygold = "%1$s Gold has increased knight's loyalty by %2$s";
g_js_strings.reward_confirm_modal.increasedbytrophy = "%1$s has increased knight's loyalty by %2$s";
g_js_strings.assign_role_modal = new Object();
g_js_strings.assign_role_modal.assignroles = "Assign Roles";
g_js_strings.assign_role_modal.currentrole = "Current Role";
g_js_strings.assign_role_modal.foremandesc = "This Knight will use their Politics to help build your city more quickly.";
g_js_strings.assign_role_modal.marshaldesc = "This Knight will use their Combat to help quicken the training of your troops.";
g_js_strings.assign_role_modal.alchedesc = "This Knight will use their Intelligence to help run your Alchemist Lab.";
g_js_strings.assign_role_modal.stewarddesc = "This Knight will use their Resourcefulness to improve your Resource production.";
g_js_strings.assign_role_modal.roleconfirm = "You have assigned %1$s as %2$s's %3$s.";
g_js_strings.assign_role_modal.keepittoyourself = "Keep it to yourself";
g_js_strings.dismiss_modal = new Object();
g_js_strings.dismiss_modal.dismissknightconfirm = "Are you sure you want to dismiss Knight %1$s?";
g_js_strings.assign_skill_modal = new Object();
g_js_strings.assign_skill_modal.assignedskills = "Assigned Skills";
g_js_strings.assign_skill_modal.skillptsunassigned = "Skill Points Unassigned";
g_js_strings.assign_skill_modal.redistributeskills = "Re-distribute Skills";
g_js_strings.assign_skill_modal.foremantooltip = "Helps your Foreman increase your Construction speed";
g_js_strings.assign_skill_modal.marshaltooltip = "Helps your Marshal increase your Training speed, and helps any Knight involved in combat to better lend their power to your Troops";
g_js_strings.assign_skill_modal.alchetooltip = "Helps your Alchemystic increase your Research speed";
g_js_strings.assign_skill_modal.stewardtooltip = "Helps your Steward increase your Resource Production";
g_js_strings.modal_openAlchemy = new Object();
g_js_strings.modal_openAlchemy.resitms = "Research Items";
g_js_strings.modal_openAlchemy.currentlyres = "Currently being researched.";
g_js_strings.modal_openAlchemy.reshelp = "Research with Help";
g_js_strings.modal_openAlchemy.res_share = "Research and Share";
g_js_strings.modal_openAlchemy.reshelp_tooltip = "Share a story to your wall asking your friends for help with your research. For each friend that clicks on your wall story, the remaining time will be reduced by either 1 minute or 1% whichever is greater, up to ten times!";
g_js_strings.modal_openAlchemy.resalone = "Research Alone";
g_js_strings.modal_openAlchemy.reqnotmet = "Requirements not met.";
g_js_strings.modal_openAlchemy.maxres = "Maximum Research Level.";
g_js_strings.showMyKnights = new Object();
g_js_strings.showMyKnights.unasspts = "Unassigned Skill Points";
g_js_strings.showMyKnights.xpnextlvl = "%1$s XP to next level";
g_js_strings.showMyKnights.increasexp = "Increase XP";
g_js_strings.showMyKnights.assignskill = "Assign Skill";
g_js_strings.showMyKnights.assignrole = "Assign Role";
g_js_strings.openCastle = new Object();
g_js_strings.openCastle.inchappiness = "Increase Happiness";
g_js_strings.openCastle.incgold = "Increase Gold";
g_js_strings.openCastle.chgtaxrate = "Change Tax Rate";
g_js_strings.openCastle.hidesanct = "Hide troops in sanctuary.";
g_js_strings.openCastle.orderdefend = "Order troops to defend city.";
g_js_strings.openCastle.resprod = "Resource Production";
g_js_strings.openCastle.baseprod = "Base Production";
g_js_strings.openCastle.knightbonus = "Knight Bonus";
g_js_strings.openCastle.resbonus = "Research Bonus";
g_js_strings.openCastle.wildbonus = "Wilderness Bonus";
g_js_strings.openCastle.provbonus = "Providence Bonus";
g_js_strings.openCastle.itembonus = "Item Bonus";
g_js_strings.openCastle.totalprod = "Total Production";
g_js_strings.changeTax = new Object();
g_js_strings.changeTax.changetaxdesc = "Change the % of tax that you collect from your population.";
g_js_strings.changeTax.newtaxrate = "New Tax Rate";
g_js_strings.changeTax.entertaxrate = "Enter a Tax Rate between 0 and 100";
g_js_strings.changeTax.taxrate = "Tax Rate";
g_js_strings.modal_change_tax = new Object();
g_js_strings.modal_change_tax.taxratenochangealert = "We were unable to change your tax rate.  Please try again later.";
g_js_strings.modal_change_tax_confirm = new Object();
g_js_strings.modal_change_tax_confirm.yourtaxrate = "Your Tax Rate is now";
g_js_strings.raiseGold = new Object();
g_js_strings.raiseGold.notenoughgold = "You don&#39;t have enough Happiness to raise gold.";
g_js_strings.raiseGold.collectgolddesc = "Collect Gold from your subjects.  This will decrease their Happiness.";
g_js_strings.raiseGold.goldcollected = "Gold to be Collected";
g_js_strings.raiseGold.happdecreased = "Happiness to be Decreased";
g_js_strings.modal_raise_gold_confirm = new Object();
g_js_strings.modal_raise_gold_confirm.yourgoldinc = "Your gold has increased to";
g_js_strings.increaseHappiness = new Object();
g_js_strings.increaseHappiness.increasehappdesc = "Increase the happiness of the people in your kingdom.";
g_js_strings.increaseHappiness.happinc = "Happiness Increase";
g_js_strings.modal_increase_happiness_confirm = new Object();
g_js_strings.modal_increase_happiness_confirm.yourhapp = "Your happiness is now";
g_js_strings.openKnights = new Object();
g_js_strings.openKnights.appknights = "Appoint Knights";
g_js_strings.openKnights.myknights = "My Knights";
g_js_strings.openKnights.resheading = "Resource-<br/>fulness";
g_js_strings.openKnights.intheading = "Intelli-<br/>gence";
g_js_strings.openKnights.goldhourly = "gold hourly";
g_js_strings.openKnights.playerskills = "Knights who are players of the game will gain +5 to all Skills.";
g_js_strings.openKnights.friendsplaykofc = "Friends who play Kingdoms of Camelot make better knights.";
g_js_strings.modal_appoint = new Object();
g_js_strings.modal_appoint.appointasknight = "Appoint this person as a knight?";
g_js_strings.modal_appoint.appointfee = "Appointment Fee";
g_js_strings.modal_appoint.knightskills = "Appointment Fee";
g_js_strings.modal_appoint.knightskillsdesc = "As your knights gain skill points, you can distribute it among their skills.";
g_js_strings.modal_appoint.appointknight = "Appoint as Knight";
g_js_strings.modal_appoint.notplayer = "%1$s is not a player.";
g_js_strings.modal_appoint.notplayerdesc = "Players get +5 to all skill points when they join.";
g_js_strings.modal_appoint.inviteappointknight = "Invite & Appoint as Knight";
g_js_strings.modal_appoint.knightslevelup = "Knights who play will level up twice as fast.";
g_js_strings.inviteKnight = new Object();
g_js_strings.inviteKnight.invitemessageswaves = "Hail friend! Think you have what it takes to be the mightiest Lord or Lady around? Come join me in Kingdoms of Camelot at http://apps.facebook.com/kingdomsofcamelot/?entrypt=swaves, where you can grow your kingdom before your eyes, browse the map for lands to conquer, and strategically grow your army to become the mightiest Lord or Lady in Camelot!";
g_js_strings.inviteKnight.invitemessage = "Hail friend! Think you have what it takes to be the mightiest Lord or Lady around? Come join me in Kingdoms of Camelot at http://apps.facebook.com/kingdomsofcamelot, where you can grow your kingdom before your eyes, browse the map for lands to conquer, and strategically grow your army to become the mightiest Lord or Lady in Camelot!";
g_js_strings.inviteKnight.invitesubj = "Join Kingdoms of Camelot";
g_js_strings.inviteKnight.unabletopay = "Unable to pay the costs";
g_js_strings.appointKnight = new Object();
g_js_strings.appointKnight.knightsuccess = "This person was successfully knighted!";
g_js_strings.modal_buildnew = new Object();
g_js_strings.modal_buildnew.whatbuild = "What do you want to build?";
g_js_strings.modal_buildnew.clicktoview = "Click %1$sSelect%2$s to view requirements and building information";
g_js_strings.modal_buildnew.reqnotmet = "Requirements<br/>not met";
g_js_strings.modal_buildnew.viewinfo = "View Info";
g_js_strings.protect_off_confirm = new Object();
g_js_strings.protect_off_confirm.lvlupwarning = "By upgrading to a Level 5 Castle, you will exit Beginner Protection.  Would you like to build anyway?";
g_js_strings.showMyWilderness = new Object();
g_js_strings.showMyWilderness.conqueredwild = "Conquered Wilds";
g_js_strings.modal_openRallypoint = new Object();
g_js_strings.modal_openRallypoint.mytroops = "My Troops";
g_js_strings.modal_openRallypoint.troopmove = "Troop Movement";
g_js_strings.modal_openRallypoint.raidtooltip = "Unlock at Level 20";
g_js_strings.modal_openRallypoint.marchtroops = "March Troops";
g_js_strings.modal_openRallypoint_movement = new Object();
g_js_strings.modal_openRallypoint_movement.marchtype = "March Type";
g_js_strings.modal_openRallypoint_movement.tgtloc = "Target Location";
g_js_strings.view_march = new Object();
g_js_strings.view_march.rescarr = "Resources carried";
g_js_strings.openEmbassy = new Object();
g_js_strings.openEmbassy.viewall = "View Alliances";
g_js_strings.openEmbassy.encampall = "Encamped Allies";
g_js_strings.openEmbassy.sentfrom = "Sent From";
g_js_strings.openEmbassy.senthome = "Send Home";
g_js_strings.openEmbassy.noallcamp = "No Allies Encamped";
g_js_strings.kickout_allies = new Object();
g_js_strings.kickout_allies.troopshome = "Troops sent home!";
g_js_strings.modal_marketplace = new Object();
g_js_strings.modal_marketplace.currmkt = "Current Market";
g_js_strings.modal_marketplace.youract = "Your Account";
g_js_strings.modal_marketplace.provincedesc = "This market serves all Lords and Ladies in your province";
g_js_strings.modal_marketplace.provincerestr = "Please note, you will only see transactions within this Province.";
g_js_strings.modal_marketplace.resamt = "Resource Amount";
g_js_strings.modal_marketplace.roundingdesc = "Transaction amounts will be rounded down to the nearest 1,000 resources.";
g_js_strings.modal_marketplace.unitprice = "Unit Price";
g_js_strings.modal_marketplace.tradefee = "Market Tax";
g_js_strings.modal_marketplace.percdesc = "0.5% of the Total Price will be charged for every transaction.";
g_js_strings.modal_marketplace.totalcost = "Total Cost";
g_js_strings.modal_marketplace.pendingoffers = "Pending Offers";
g_js_strings.modal_marketplace.tradestatus = "Trading Status";
g_js_strings.modal_marketplace.newpercdesc = "Market Tax: 0.5% of the Sale Price for each posting";
g_js_strings.modal_marketplace_cancel = new Object();
g_js_strings.modal_marketplace_cancel.transcancel = "Transaction Cancelled!";
g_js_strings.modal_marketplace_viewtransactions = new Object();
g_js_strings.modal_marketplace_viewtransactions.totalprice = "Total Price";
g_js_strings.modal_marketplace_viewtransactions.amttraded = "Amount Traded";
g_js_strings.modal_marketplace_viewtransactions.esttime = "Estimated Time";
g_js_strings.modal_marketplace_buysell = new Object();
g_js_strings.modal_marketplace_buysell.totalcost = "Total Cost";
g_js_strings.modal_marketplace_buysell.totalearned = "Total Earned";
g_js_strings.modal_marketplace_changerec = new Object();
g_js_strings.modal_marketplace_changerec.numrequested = "%1$s requested";
g_js_strings.modal_marketplace_changerec.numsale = "%1$s for sale";
g_js_strings.modal_marketplace_bidoffer = new Object();
g_js_strings.modal_marketplace_bidoffer.invalidprice = "Invalid price";
g_js_strings.modal_marketplace_bidoffer.invalidamt = "Invalid amount";
g_js_strings.modal_marketplace_bidoffer.buyink = "You must buy at least 1,000 resources.";
g_js_strings.modal_marketplace_bidoffer.sellink = "You must sell at least 1,000 resources.";
g_js_strings.modal_marketplace_bidoffer.greaterthan = "Unit price must be greater than 0.";
g_js_strings.modal_marketplace_bidoffer.atleast = "Unit price must be at least 0.001.";
g_js_strings.modal_marketplace_bidoffer.tradesub = "Trade Submitted!";
g_js_strings.modal_marketplace_bidoffer.nogold = "Not enough gold for trade.";
g_js_strings.modal_marketplace_bidoffer.noresource = "Not enough resources for trade.";
g_js_strings.modal_marketplace_bidoffer.nogoldfortax = "You do not have enough Gold for the Tax";
g_js_strings.modal_marketplace_bidoffer.noresourceforsale = "You do not have enough %1$s to make this Sale";
g_js_strings.modal_marketplace_bidoffer.nogoldforpurchase = "You do not have enough Gold for this purchase";
g_js_strings.market_update_num_of_transaction = new Object();
g_js_strings.market_update_num_of_transaction.maxtransac = "You cannot engage in any more transactions.";
g_js_strings.market_update_num_of_transaction.upgrademarket = "Upgrade your %1$s to unlock more transactions.";
g_js_strings.modal_quests = new Object();
g_js_strings.modal_quests.enlistfriends = "Enlist Friends";
g_js_strings.modal_quests.askhelp = "Ask for Help";
g_js_strings.modal_quests.buildcott = "Build a Cottage";
g_js_strings.modal_quests.domexpan = "Domain Expansion";
g_js_strings.modal_quests.buildfarm = "Build a Farm";
g_js_strings.modal_quests.questdesc = "Quest Description";
g_js_strings.modal_quests.buildfarmdesc = "Loyal subjects need Food, and a place to work. Build a Farm to solve both problems at once!";
g_js_strings.modal_quests.questobj = "Quest Objective";
g_js_strings.modal_quests.farlvl1 = "Farm reaches level 1";
g_js_strings.modal_quests.questrwd = "Quest Reward";
g_js_strings.modal_quests.getrwd = "Get Reward";
g_js_strings.modal_quests.squireandfood = "Squire&#39;s Hourglass 1<br/>Food 100";
g_js_strings.modal_quests.andshare = "and share";
g_js_strings.modal_quests.andnotshare = "without sharing";
g_js_strings.quest_string_objective = new Object();
g_js_strings.quest_string_objective.areachlvlb = "%1$s reaches level %2$s.";
g_js_strings.quest_string_objective.raisegolda = "Raise gold income to %1$s.";
g_js_strings.quest_string_objective.raisepopa = "Raise population cap to %1$s.";
g_js_strings.quest_string_objective.increaseaprodb = "Increase %1$s Base Production to %2$s.";
g_js_strings.quest_string_objective.conqueraofb = "Conquer a %1$s of Level %2$s or greater.";
g_js_strings.quest_string_objective.constructabbdgs = "Construct a total of %1$s %2$s buildings.";
g_js_strings.quest_string_objective.buildsecond = "Build a second city";
g_js_strings.quest_string_objective.mightreachesa = "Might reaches %1$s.";
g_js_strings.quest_string_objective.appointfriendknight = "Appoint a friend as a Knight in the Knights&#39; Hall";
g_js_strings.quest_string_objective.appointknightrole = "Appoint a Knight as your Foreman, Steward, Marshal, or Alchemystic";
g_js_strings.quest_string_objective.changetaxrate = "Change your Tax Rate to 20%";
g_js_strings.quest_string_objective.secondcity = "Have 10 of your friends playing Kingdoms of Camelot.";
g_js_strings.quest_string_objective.changetaxrate = "Change your Tax Rate to 20%";
g_js_strings.quest_string_objective.obtain4a2b1c = "Obtain 4 %1$s, 2 %2$s, 1 %2$s.";
g_js_strings.quest_string_objective.obtain4a3b1c = "Obtain 4 %1$s, 3 %2$s, 1 %2$s.";
g_js_strings.quest_string_objective.obtain4a3b2c = "Obtain 4 %1$s, 3 %2$s, 2 %2$s.";
g_js_strings.quest_string_objective.citybuildreinforce = "Reinforce a %1$s with 250 %2$s carrying 10,000 each of %3$s, %4$s, %5$s, %6$s, and %7$s.";
g_js_strings.popOverShareLayer = new Object();
g_js_strings.popOverShareLayer.sharetitle = "You've collected your reward!";
g_js_strings.popOverShareLayer.sharedesc = "Now share a bonus chest with your friends.  Each chest contains 20,000 free resources!";
g_js_strings.modal_tourny_changetab = new Object();
g_js_strings.modal_tourny_changetab.notourny = "There are no tournaments for this tab currently.";
g_js_strings.modal_tourny_changetab.lordladyname = "Lord/Lady Name";
g_js_strings.changeview_court_content = new Object();
g_js_strings.changeview_court_content.havefeast = "Have a Feast";
g_js_strings.changeview_court_content.gohunt = "Go Hunting";
g_js_strings.changeview_court_content.commsculpt = "Commission Sculpture";
g_js_strings.changeview_court_content.inspectmines = "Inspect Mines";
g_js_strings.changeview_court_content.bonusfood = "bonus to food";
g_js_strings.changeview_court_content.bonuswood = "bonus to wood";
g_js_strings.changeview_court_content.bonusstone = "bonus to stone";
g_js_strings.changeview_court_content.bonusore = "bonus to ore";
g_js_strings.changeview_court_content.numofcities = "# of Cities";
g_js_strings.changeview_court_content.givegift = "Give Gift";
g_js_strings.changeview_court_content.invitealli = "Invite to Alliance";
g_js_strings.changeview_court_content.myitems = "My Items";
g_js_strings.changeview_court_content.courtlyactions = "Courtly Action";
g_js_strings.changeview_court_content.invitedesc = "%1$s %2$s, I cordially invite you to do one of these royal activites with me:";
g_js_strings.changeview_court_content.viewfbprofile = "View Facebook Profile";
g_js_strings.MapObject = new Object();
g_js_strings.MapObject.bcitydesc = "Barbarian Camps contain invaders and can be scouted or attacked.";
g_js_strings.MapObject.lakedesc = "Conquering these Lakes increases your<br/>Food production by ";
g_js_strings.MapObject.woodsdesc = "Conquering these Woods increases your<br/>Wood production by ";
g_js_strings.MapObject.grassdesc = "Conquering these Grasslands increases your<br/>Food production by ";
g_js_strings.MapObject.hillsdesc = "Conquering these Hills increases your<br/>Stone production by ";
g_js_strings.MapObject.mtndesc = "Conquering these Mountains increases your<br/>Ore production by ";
g_js_strings.MapObject.plaindesc = "You can build cities on Plains.";
g_js_strings.MapObject.ruindesc = "Conquering these Ruins increases your<br/>Stone production by ";
g_js_strings.MapObject.bogdesc = "Bogs are impenetrable, and cannot be attacked.";
g_js_strings.MapObject.begprotect = "Beginner Protection";
g_js_strings.MapObject.cityname = "City Name";
g_js_strings.MapObject.bcitydesc2 = "Barbarian Camps contain invaders and can be scouted or attacked.";
g_js_strings.MapObject.lakedesc2 = "Conquer to receive %1$s to food production";
g_js_strings.MapObject.woodsdesc2 = "Conquer to receive %1$s to wood production";
g_js_strings.MapObject.grassdesc2 = "Conquer to receive %1$s to food production";
g_js_strings.MapObject.hillsdesc2 = "Conquer to receive %1$s to stone production";
g_js_strings.MapObject.mtndesc2 = "Conquer to receive %1$s to ore production";
g_js_strings.MapObject.plaindesc2 = "You can build cities on Plains.";
g_js_strings.MapObject.bogdesc2 = "Bogs are impenetrable and cannot be attacked.";
g_js_strings.MapObject.ownedby = "Owned By";
g_js_strings.MapObject.ownedbyyou = "Owned By You";
g_js_strings.modal_messages = new Object();
g_js_strings.modal_messages.viewreports = "View Reports";
g_js_strings.modal_messages.backinbox = "Back to Inbox";
g_js_strings.modal_messages.blockuser = "Block this user";
g_js_strings.modal_messages.markread = "Mark as Read";
g_js_strings.modal_messages.markunread = "Mark as Unread";
g_js_strings.modal_messages.deleteall = "Delete All";
g_js_strings.modal_messages.unchkall = "Uncheck All";
g_js_strings.modal_messages.chkall = "Check All";
g_js_strings.modal_messages.msgsettings = "Message Settings";
g_js_strings.modal_messages_send = new Object();
g_js_strings.modal_messages_send.enterexistingname = "Please enter an existing username.";
g_js_strings.modal_messages_send.oopscompose = "Oops - Email Error";
g_js_strings.modal_messages_send.msgsent = "Message Sent!";
g_js_strings.modal_messages_viewtrades_view = new Object();
g_js_strings.modal_messages_viewtrades_view.fromatob = "from %1$s to %2$s";
g_js_strings.modal_messages_viewtrades_view.unitprice = "Unit Price";
g_js_strings.modal_messages_viewtrades_view.costofa = "Cost of %1$s";
g_js_strings.modal_messages_viewtrades_view.mktfee = "Marketplace Fee";
g_js_strings.modal_messages_viewtrades_view.totalgold = "Total Gold Spent";
g_js_strings.modal_messages_viewtrades_view.res30min = "Resources take 30 minutes to arrive.";
g_js_strings.modal_messages_viewtrades_view.goldearned = "Gold earned over this period";
g_js_strings.modal_messages_viewtrades = new Object();
g_js_strings.modal_messages_viewtrades.viewmarch = "View March Reports";
g_js_strings.modal_messages_viewtrades.viewtroop = "View Troop Reports";
g_js_strings.modal_messages_viewtrades.viewdisaster = "View City Reports";
g_js_strings.modal_messages_viewtrades.viewmkt = "Market Trades";
g_js_strings.modal_messages_viewtrades.viewrpt = "View Report";
g_js_strings.modal_messages_viewtrades.notrades = "No Trades!";
g_js_strings.modal_messages_viewdisasterreports = new Object();
g_js_strings.modal_messages_viewdisasterreports.viewmkttrades = "View Market Trades";
g_js_strings.modal_messages_viewdisasterreports.disasterrpts = "City Reports";
g_js_strings.modal_messages_viewdisasterreports.troopsdeserted = "Troops Deserted!";
g_js_strings.modal_messages_viewdisasterreports.troopsrecovered = "Troops Recovered";
g_js_strings.modal_messages_viewdisasterreports.rewardmsg = "Reward bonus for battle on %1$s";
g_js_strings.modal_messages_viewdisasterreports.helpedmsg = "%1$s people helped you search the battlefield and found the following survivors and resources:";
g_js_strings.modal_messages_viewdisasterreports.helpedmsg_1 = "%1$s of your friends helped you search the battlefield and found the following survivors and resources:";
g_js_strings.modal_messages_viewdesertionreports = new Object();
g_js_strings.modal_messages_viewdesertionreports.cityunableprovideenoughfood = "<span class='highlightedText'>Your City, {city.name},</span> was unable to provide enough food to feed your army attached to that city! As a result of your inability to keep your troops rationed, a number of them have <span class='highlightedText'>deserted at {date}.</span>";
g_js_strings.modal_messages_viewdesertionreports.cityunableprovideenoughfoodyourcity = "Your City";
g_js_strings.modal_messages_viewdesertionreports.cityunableprovideenoughfoodmain = "was unable to provide enough food to feed your army attached to that city! As a result of your inability to keep your troops rationed, a number of them have";
g_js_strings.modal_messages_viewdesertionreports.cityunableprovideenoughfooddesertedat = "deserted at";
g_js_strings.modal_messages_viewdesertionreports.lost = "Lost";
g_js_strings.modal_messages_viewdesertionreports.attimeofdesertion = "At time of desertion:";
g_js_strings.modal_messages_viewdesertionreports.produced = "Produced:";
g_js_strings.modal_messages_viewdesertionreports.foodproduced = "Food Produced";
g_js_strings.modal_messages_viewdesertionreports.consumed = "Consumed:";
g_js_strings.modal_messages_viewdesertionreports.foodconsumed = "Food Consumed";
g_js_strings.modal_messages_viewdesertionreports.deficit = "deficit:";
g_js_strings.modal_messages_viewdesertionreports.fooddeficit = "deficit";
g_js_strings.modal_messages_viewdesertionreports.note = "Note:";
g_js_strings.modal_messages_viewdesertionreports.youwillcontinuetolosetroops = "You will continue to lose troops regularly until your food production exceeds your Food consumption for this particular city.";
g_js_strings.modal_messages_viewdesertionreports.waystoimprove = "Ways to improve food production!";
g_js_strings.modal_messages_viewdesertionreports.havehighlevelwilderness = "Make sure you have as many high level Wilderness that provide food bonuses (Grassland and Lakes) as you can.";
g_js_strings.modal_messages_viewdesertionreports.havegoodnumberoffarms = "Make sure you have a good number of farms in any city that has troops attached to it.";
g_js_strings.modal_messages_viewdesertionreports.haveknightassignedsteward = "Make sure your city has a knight assigned to the Steward role with high Resourcefulness.";
g_js_strings.modal_messages_viewdesertionreports.armynottoobig = "Make sure your army isn't too big for your city to sustain.";
g_js_strings.modal_messages_viewdesertionreports.trooptypes = "Troop Types";
g_js_strings.modal_messages_viewdesertionreports.beforedesertion = "Before Desertion";
g_js_strings.modal_messages_viewdesertionreports.afterdesertion = "After Desertion";
g_js_strings.modal_messages_viewdesertionreports.troopslost = "Troop Lost";
g_js_strings.modal_messages_viewreports = new Object();
g_js_strings.modal_messages_viewreports.marchrpt = "March Reports";
g_js_strings.modal_messages_viewreports.trooprpt = "Troop Reports";
g_js_strings.modal_messages_viewreports.attackedby = "Attacked By";
g_js_strings.modal_messages_viewreports.nomarchrpts = "You do not have any march reports";
g_js_strings.modal_messages_viewreports_view = new Object();
g_js_strings.modal_messages_viewreports_view.scoutingat = "Scouting at";
g_js_strings.modal_messages_viewreports_view.antiscoutingat = "Anti-Scouting at ";
g_js_strings.modal_messages_viewreports_view.transpto = "Transport to";
g_js_strings.modal_messages_viewreports_view.battleat = "Battle at";
g_js_strings.modal_messages_viewreports_view.cannotbeconq = "This wilderness cannot be conquered because you must upgrade your Castle or abandon another wilderness";
g_js_strings.modal_messages_viewreports_view.scoutrpt = "Scouting Report";
g_js_strings.modal_messages_viewreports_view.nounits = "No Units";
g_js_strings.modal_messages_viewreports_view.scoutfail = "Scouting Failed";
g_js_strings.modal_messages_viewreports_view.eagleeyes = "Research higher levels of Eagle Eyes to get more detailed information";
g_js_strings.modal_messages_viewreports_view.battlerpt = "Battle Report";
g_js_strings.modal_messages_viewreports_view.nowallbreach = "Attackers did not breach the walls.";
g_js_strings.modal_messages_viewreports_view.nosecuredwilderness = "The Attackers did not secure the Wilderness.";
g_js_strings.modal_messages_viewreports_view.wallbreach = "Attackers breached the walls.";
g_js_strings.modal_messages_viewreports_view.securedwilderness = "The Attackers secured the Wilderness.";
g_js_strings.modal_messages_viewreports_view.percdamage = "% damage done to walls.";
g_js_strings.modal_messages_viewreports_view.wildernesspercsec = "% of the Wilderness has been secured";
g_js_strings.modal_messages_viewreports_view.pendingcancel = "All pending Market transactions have been canceled";
g_js_strings.modal_messages_viewreports_view.knightskills = "Knight Combat Skill";
g_js_strings.modal_messages_viewreports_view.attackboosted = "Attack Boosted";
g_js_strings.modal_messages_viewreports_view.defenseboosted = "Defense Boosted";
g_js_strings.modal_messages_viewreports_view.overwhelmedinbattle = "Your troops were overwhelmed in battle. Unable to determine enemy strength.";
g_js_strings.modal_messages_viewreports_view.notroopsdef = "No Troops Defended";
g_js_strings.modal_messages_viewreports_view.reportno = "Report No:";
g_js_strings.modal_messages_viewreports_view.lastlogin = "Last Login";
g_js_strings.modal_messages_viewreports_view.knightcomabtlv = "Knight Combat Level";
g_js_strings.modal_messages_viewreports_view.sharevictory = "Share Victory";
g_js_strings.modal_messages_viewreports_view.recovertroops = "Recover Troops";
g_js_strings.modal_messages_viewreports_view.sharetorecovertroops = "Share to Recover Troops";
g_js_strings.modal_messages_viewreports_view.getmoreloot = "Get more loot";
g_js_strings.modal_messages_viewreports_view.findlosttroops = "Find lost troops";
g_js_strings.modal_messages_viewreports_view.searchthebattlefield = "Search the battlefield";
g_js_strings.modal_messages_viewreports_view.soundthecall = "Sound the Call!";
g_js_strings.modal_messages_viewreports_view.backtoreports = "Back to Reports";
g_js_strings.modal_messages_viewreports_view.askforhelp = "Ask for Help";
g_js_strings.modal_messages_viewreinforcedreports = new Object();
g_js_strings.modal_messages_viewreinforcedreports.reinforcementreceived = "You've Received Reinforcements!";
g_js_strings.modal_messages_viewreinforcedreports.alliancemember = "Alliance member:";
g_js_strings.modal_messages_viewreinforcedreports.reinforcedyouwith = "Reinforced you with:";
g_js_strings.modal_messages_viewreinforcedreports.number = "Number";
g_js_strings.modal_messages_viewreinforcedreports.note = "<p>Note: Reinforcements will consume your city's food as if they were your own troops. If your city runs out of food, reinforcements will leave and your troops will desert.</p><p>Reinforcement troops can be sent home to conserve food.</p>";
g_js_strings.modal_messages_viewreinforcedreports.sendtroopshome = "Send Troops Home";
g_js_strings.modal_messages_viewreinforcedreports.sendtroopshomeconfirm = "%1$s troops from player %2$s will be sent home to City %3$s";
g_js_strings.modal_messages_viewreports_view.incentive_paragraph = "Share word of your glorious success! Lament your army's defeat! Ask your friends to help you search the battlefield for troops and war machines that were destroyed or for resources your soldiers missed the first time around. Up to 5 Facebook friends can help you search over the 24 hour period following the battle. After a day has passed, your troops will arrive bearing their spoils of war. (In order to receive a bonus, you have to have lost at least a certain number of troops and/or gotten some resources in the battle.)";
g_js_strings.modal_messages_viewreports_view.incentive_msg_default = "Search the battlefield with your friends for lost troops!  When friends click on the Feed in your Facebook Stream they will help you search for troops that were missing in action after the battle.  You'll recover a portion of the killed troops up to five times The troops will arrive home 1 day after the battle occurred.";
g_js_strings.modal_messages_viewreports_view.incentive_msg_attack_wilderness_barbarian_win = "Search the battlefield with your friends for lost troops and extra loot!  When friends click on the Feed in your Facebook Stream they will help you search for troops that were missing in action after the battle.  You'll recover a portion of the killed troops and a % of the resources you received for every friend who helps you search, up to five times. The troops and loot will arrive home 1 day after the battle occurred.";
g_js_strings.modal_messages_viewreports_view.incentive_msg_attack_wilderness_barbarian_lose = "Search the battlefield with your friends!  When friends click on the Feed in your Facebook Stream they will help you search for troops that were missing in action after the battle.  You'll recover a portion of the killed troops for every friend who helps you search, up to five times.  The troops will arrive home 1 day after the battle occurred.";
g_js_strings.modal_messages_viewreports_view.incentive_msg_attacked_enemy_win = "Search the battlefield with your friends for extra loot and any lost troops!  When friends click on the Feed in your Facebook Stream they will help you search for troops that were missing in action after the battle.  You'll recover a portion of the killed troops and a % of the resources you received for every friend who helps you search, up to five times.  The troops and loot will arrive home 1 day after the battle occurred.";
g_js_strings.modal_messages_viewreports_view.incentive_msg_attacked_enemy_lose = "Search the battlefield with your friends for lost troops!  When friends click on the Feed in your Facebook Stream they will help you search for troops that were missing in action after the battle.  You'll recover a portion of the killed troops up to five times The troops will arrive home 1 day after the battle occurred.";
g_js_strings.modal_messages_viewreports_view.incentive_msg_attack_by_enemy_win = "Search the battlefield with your friends for lost troops!  When friends click on the Feed in your Facebook Stream they will help you search for troops that were missing in action after the battle.  You'll recover a portion of the killed troops up to five times The troops will arrive home 1 day after the battle occurred.";
g_js_strings.modal_messages_viewreports_view.incentive_msg_attack_by_enemy_lose = "Search the battlefield with your friends for lost troops!  When friends click on the Feed in your Facebook Stream they will help you search for troops that were missing in action after the battle.  You'll recover a portion of the killed troops up to five times The troops will arrive home 1 day after the battle occurred.";
g_js_strings.modal_messages_viewreports_view.incentive_msg_main_norec = "Ask your friends to help you search the battlefield for lost troops!";
g_js_strings.modal_messages_viewreports_view.incentive_msg_main_sharestory = "Share a story to your wall asking your friends to help you search the battlefield for lost troops!";
g_js_strings.modal_messages_viewreports_view.incentive_msg_main_winwithrec = "Ask your friends to help you search for extra loot or recover lost troops!";
g_js_strings.modal_messages_viewreports_view.incentive_msg_main_sharestorywithrec = "Share a story to your wall asking your friends to help you search for extra loot or recover lost troops!";
g_js_strings.modal_messages_viewreports_view.incentive_msg_hover_numassist = "Up to 5 friends can assist you in searching the battlefield.";
g_js_strings.modal_messages_viewreports_view.incentive_msg_hover_norec = "Any troops recovered will arrive one day after the battle occurred.";
g_js_strings.modal_messages_viewreports_view.incentive_msg_hover_winwithrec = "Any resources or troops found will arrive one day after the battle occurred!";
g_js_strings.modal_messages_viewreports_view.attack_result_wilderness_barbarian_win = "You were victorious!";
g_js_strings.modal_messages_viewreports_view.attack_result_wilderness_barbarian_lose = "You have been defeated!";
g_js_strings.modal_messages_viewreports_view.attack_result_attacked_enemy_win = "You were victorious!";
g_js_strings.modal_messages_viewreports_view.attack_result_attacked_enemy_lose = "You were defeated!";
g_js_strings.modal_messages_viewreports_view.attack_result_attack_by_enemy_win = "You defended successfully!";
g_js_strings.modal_messages_viewreports_view.attack_result_attack_by_enemy_lose = "You were defeated!";
g_js_strings.modal_messages_listshow = new Object();
g_js_strings.modal_messages_listshow.nosubject = "&lt;No Subject&gt;";
g_js_strings.modal_messages_listshow.nomsg = "Currently you do not have any messages";
g_js_strings.modal_block_user_confirm = new Object();
g_js_strings.modal_block_user_confirm.blockuserconfirm = "Are you sure you want to block this user permanently?";
g_js_strings.tutorialDecree = new Object();
g_js_strings.tutorialDecree.getrwd = "Get Reward";
g_js_strings.tutorialDecree.donotshowtut = "Do not show me the Tutorial again.";
g_js_strings.tutorialCheck = new Object();
g_js_strings.tutorialCheck.clickforcott = "Click here to build a Cottage";
g_js_strings.tutorialCheck.clickforcott_a = "First, let's build a cottage. <br/><br/>Cottages house people to work your fields and train as troops.<br/><br/> Click here to begin.";
g_js_strings.tutorialCheck.clickforquests = "Complete Quests to build a mighty Kingdom. Click here to claim your Reward for building a Sawmill.";
g_js_strings.tutorialCheck.clickforquests_a = "By building a sawmill you've completed a quest<br/><br/>This has earned you a reward.<br/><br/>Click &#34;Quests&#34; to claim it.";
g_js_strings.tutorialCheck.clickforfield = "Click here for the Field View where you can build Farms, Sawmills, Quarries, and Mines to gather Resources, which are used to Build your City, Train new Troops, and conduct Research.";
g_js_strings.tutorialCheck.clickforsawmill = "Click here, then choose the Sawmill";
g_js_strings.tutorialCheck.clickforsawmill_a = "Generating resources lets you construct buildings and train troops.<br/><br/>Let’s generate wood by constructing a sawmill.<br/><br/>Click here to build a sawmill.";
g_js_strings.tutorialCheck.clickformyitems = "Click here to view the Items you own.";
g_js_strings.tutorialCheck.clickopenchest = "Click here to open the Chest and claim your Items. To gain more Items in the future, visit the Shop!";
g_js_strings.tutorialCheck.clickheresawmill = "Click here to choose a sawmill.";
g_js_strings.tutorialCheck.clickheresawmill_a = "Click &#34;Select&#34; to choose a sawmill.";
g_js_strings.tutorialCheck.buildingtimeline = "Below is the building timer.<br/><br/>Your sawmill takes 15 seconds to construct.<br/><br/>Later on, you can use hourglasses from the shop to speed up builds.";
g_js_strings.tutorialCheck.clickherecottage = "Click here to choose a cottage.";
g_js_strings.tutorialCheck.clickherecottage_a = "Click &#34;Select&#34; to choose a cottage.";
g_js_strings.tutorialCheck.clickbuildhelp = "Click on Build with Help to get help from your Friends and shorten your build time.";
g_js_strings.tutorialCheck.clickbuildnohelp = "Click the Manual Build button to construct your Sawmill.";
g_js_strings.tutorialCheck.clickbuildnohelp_a = "Click &#34;Build&#34; to construct your sawmill.";
g_js_strings.tutorialCheck.clickforcity = "Click here for the City View, where you can Train your Troops, Raise your Knights, Populate your City, Research in the Alchemy lab, and more!";
g_js_strings.tutorialCheck.clickforcity_a = "Now let's use your resources to expand your city.<br/><br/>Click &#34;City&#34; to see your castle and its buildings.";
g_js_strings.tutorialCheck.clickforshare = "Use this option to show off your progress and get your Reward!";
g_js_strings.tutorialCheck.clickforreward = "Claim your quest reward!";
g_js_strings.tutorialCheck.clickclosetofieldview = "Click &#34;Close&#34; to return to the field view.";
g_js_strings.tutorialCheck.clickbuildnohelpcottage = "Click &#34;Build&#34; to construct your cottage.";
g_js_strings.tutorialDecreeCheck = new Object();
g_js_strings.tutorialDecreeCheck.scoutdecree = "You've been scouted by enemy troops! When you&#39;ve been successfully scouted, the enemy is able to see your Troop levels, as well as how many resources you currently have. Scouting often comes just before an attack, so now may be a good time to upgrade your Storehouse, prepare your Defenses, and train your Troops. Click on the Wall to build defensive units, such as traps to stop your enemy&#39;s melee Troops.";
g_js_strings.tutorialDecreeCheck.plunderdecree = "Your put up a valiant defense, but your enemy was able to overtake your Walls! This means that the enemy has taken your Gold and Resources, and destroyed your Defensive units. If your gates were open, this also means that all of your Troops were killed. To prevent this in the future, be sure to upgrade your Walls, build more Defensive units, and protect your Resources with higher level Storehouses.";
g_js_strings.tutorialDecreeCheck.courtdecree = "The Court is the reception area for other Lords. When visiting another Lord, youcan take Courtly Actions with your host, such as Hunting or Inspecting the Mines. Taking these Courtly Actions will grant both you and the host a gift of the appropriate Resource for the action. You may decorate your own Court with items that enhance the look of your Court for visiting Lords, and items that will increase the gifts received from Courtly Actions. Items are available for purchase in the Shop.";
g_js_strings.tutorialFTE = new Object();
g_js_strings.tutorialFTE.clickforsawmill = "Click here to build a sawmill";
g_js_strings.tutorialFTE.clickforquests = "Click here for Quests";
g_js_strings.tutorialFTE.clickforcity = "Click here for the City view";
g_js_strings.tutorialFTE.clickforcott = "Click here to build a Cottage";
g_js_strings.tutorialMerlinTutorial = new Object();
g_js_strings.tutorialMerlinTutorial.merlin0 = "I am Merlin, and Arthur has sent me to guide you in becoming a mighty %1$s!";
g_js_strings.tutorialMerlinTutorial.merlin0a = "<span class='descTitle'>Welcome to your kingdom my %1$s.</span><br/><br/>I will show how to construct buildings and obtain resources, which will allow you to build an army and rule the realm!";
g_js_strings.tutorialMerlinTutorial.merlin1 = "Increase your Might by Building and Upgrading Buildings, Training your Troops in the Barracks, and Researching in the Alchemy Lab.";
g_js_strings.tutorialMerlinTutorial.merlin2 = "To begin your new Kingdom, I have awarded you a New City Chest, and 10 Gems. Go to My Items to open the Chest.";
g_js_strings.tutorialMerlinTutorial.merlin3 = "This is the Map View. Your City is in the center, and around you are Wildernesses to conquer, other Cities to ally with or Attack, and Barbarian Camps to be plundered and driven from our lands.";
g_js_strings.tutorialMerlinTutorial.merlin4 = "Let's follow the recommended quest and build a Cottage for your subjects.";
g_js_strings.tutorialMerlinTutorial.merlin5 = "Congratulations, you have reached enough Might to become Level Two! You are now on your way to running a mighty Kingdom.";
g_js_strings.tutorialMerlinTutorial.merlin5a = "<span class='descTitle'>Congratulations, you've got the basics for building a kingdom!</span><br/><br/>Now, follow the <b>Quest</b> recommendations to expand your city and train an army. <br/><br/> Once you have an army, you can explore the <b>Map</b> view and conquer new territories!";
g_js_strings.tutorialMerlinTutorial.merlin6 = "If you ever get lost, remember to follow the Quests. Now claim your title and Quest Reward, and grow strong enough to gain Arthur's favor!";
g_js_strings.tutorialMerlinTutorial.merlin6b = "If are ever lost, check the Recommended Quest. Now, you should continue adding new buildings to make a strong castle and gain Arthur's favor!";
g_js_strings.tutorialMerlinTutorial.merlin7 = "If you are ever lost, check the Recommended Quest. Now, you should continue adding new buildings to make a strong castle and gain Arthur's favor!";
g_js_strings.tutorialMerlinTutorial.merlin10 = "This will end Merlin's help in building your City. Are you sure?";
g_js_strings.tutorialMerlinTutorial.merlin10a = "<span class='descTitle'>Are you sure you want to skip?</span><br/>This will end my help in building your City!";
g_js_strings.tutorialMerlinTutorial.skiptutorial = "Skip Tutorial";
g_js_strings.modal_openWalls = new Object();
g_js_strings.modal_openWalls.builddefenses = "Build Defenses";
g_js_strings.modal_openWalls.defqueue = "Defenses Queue";
g_js_strings.modal_openWalls.walldef = "Wall Defense";
g_js_strings.modal_openWalls.fielddef = "Field Defense";
g_js_strings.modal_openWalls.underconstruct = "Currently under construction";
g_js_strings.modal_openWalls.waitforconstruct = "Waiting to be Constructed";
g_js_strings.modal_walls_trainingtab = new Object();
g_js_strings.modal_walls_trainingtab.estdtime = "Estimated Time";
g_js_strings.modal_walls_train = new Object();
g_js_strings.modal_walls_train.numdefbuild = "# of Def to Build";
g_js_strings.modal_walls_train.consttime = "Construction Time";
g_js_strings.modal_walls_train.usesiege = "Use Siege Master's Tools and reduce this by";
g_js_strings.modal_walls_train.starttrain = "Start Training";
g_js_strings.modal_myitems = new Object();
g_js_strings.modal_myitems.getmoreitems = "Get More Items";
g_js_strings.modal_myitems.ownnogeneral = "You own no General Items. These items will help increase your power.";
g_js_strings.modal_myitems.ownnoattack = "You own no Combat Items. These items will help combat abilities.";
g_js_strings.modal_myitems.ownnospeedup = "You own no Speedup Items. These items will help reduce your build and research time.";
g_js_strings.modal_myitems.ownnoprod = "You own no Resource Items. These items will help increase your resource production rate.";
g_js_strings.modal_myitems.ownnochest = "You own no Chest Items. These items are packages of items that help you in the game.";
g_js_strings.modal_myitems.ownnocourt = "You own no Court Items. These items are for your court and guests to enjoy.";
g_js_strings.modal_myitems.myitems = "My Items";
g_js_strings.modal_myitems_use_teleportprovince = new Object();
g_js_strings.modal_myitems_use_teleportprovince.yourcurrentprov = "Your Current Province";
g_js_strings.modal_myitems_use_teleportprovince.newprov = "New Province";
g_js_strings.modal_myitems_use_teleportprovince_do = new Object();
g_js_strings.modal_myitems_use_teleportprovince_do.aused = "%1$s used!";
g_js_strings.modal_myitems_use_teleportprovince_do.teleportto = "Teleported to";
g_js_strings.modal_myitems_use_teleport = new Object();
g_js_strings.modal_myitems_use_teleport.currentcoor = "Your Current Coordinates";
g_js_strings.modal_rename_celebration = new Object();
g_js_strings.modal_rename_celebration.currentcity = "Current City Name";
g_js_strings.modal_rename_celebration.newcityname = "New City Name";
g_js_strings.modal_rename_celebration.entername = "Please enter a character name that has 3-15 letters with no spaces.";
g_js_strings.modal_get_cloak_name = new Object();
g_js_strings.modal_get_cloak_name.yourcurrentname = "Your Current name is";
g_js_strings.modal_get_cloak_name.newname = "New Name";
g_js_strings.setNewDisplayName = new Object();
g_js_strings.setNewDisplayName.entername = "Please enter a character name that has 3-15 letters with no spaces.";
g_js_strings.modal_chest_itemusage = new Object();
g_js_strings.modal_chest_itemusage.itemsgained = "Items Gained";
g_js_strings.modal_volunteer_gain = new Object();
g_js_strings.modal_volunteer_gain.unitsgained = "Units Gained";
g_js_strings.modal_knight_info = new Object();
g_js_strings.modal_knight_info.knightname = "Knight Name";
g_js_strings.modal_knight_info.knightskills = "Knight Skills";
g_js_strings.modal_knight_info.entername = "Enter name for the knight (3-15 characters)";
g_js_strings.modal_myitems_use = new Object();
g_js_strings.modal_myitems_use.aadded = "%1$s added!";
g_js_strings.modal_myitems_use.uused = "%1$s used!";
g_js_strings.modal_shop_buy_banner = new Object();
g_js_strings.modal_shop_buy_banner.banner_7thcitycomingsoon = "7th City Coming Soon!";
g_js_strings.modal_shop_buy_banner.banner_exclusiveitemsonkabam = "Buy new and exclusive items on Kabam.com!";
g_js_strings.modal_shop_buy = new Object();
g_js_strings.modal_shop_buy.purchasealert = "1 %1$s Purchased!";
g_js_strings.modal_shop_buy.nolongersale = "You just missed the sale! Continue to buy for %1$s?";
g_js_strings.modal_shop_buy_notenough = new Object();
g_js_strings.modal_shop_buy_notenough.notenoughgems = "You don&#39;t have enough gems to get that.";
g_js_strings.modal_shop_buy_notenough.thatsokay = "That&#39;s okay...";
g_js_strings.modal_shop_buy_notenough.getmoregems = "Get More Gems";
g_js_strings.modal_getgems = new Object();
g_js_strings.modal_getgems.purchasegems = "Purchase gems by Credit Card or PayPal";
g_js_strings.modal_getgems.purchasegemsa = "Purchase gems by %1$s";
g_js_strings.modal_getgems.purchasegemstitle = "Buy a Gem Package";
g_js_strings.modal_getgems.purchasegemsdescription = "Use Gems to purchase in-game items. Buy Gem packages with %1$s.";
g_js_strings.modal_getgems.selectbundle = "Select one of these bundles for a bonus";
g_js_strings.modal_getgems.purchaseaforb = "Buy %1$s gems for %3$s%2$s";
g_js_strings.modal_getgems.purchaseafordiscount = "Buy %1$s gems for <span class='originalprice'>%3$s%2$s</span> <span class='finalprice'>%3$s%4$s</span>";
g_js_strings.modal_getgems.bonusgems = "Bonus Gems";
g_js_strings.modal_getgems.singletransact = "In a single transaction";
g_js_strings.modal_getgems.gemsdirect = "Purchase Gems Directly";
g_js_strings.modal_getgems.gems1 = "50 Gems ($5)";
g_js_strings.modal_getgems.gems2 = "100 Gems ($10)";
g_js_strings.modal_getgems.gems3 = "200 Gems ($20)";
g_js_strings.modal_getgems.gems4 = "300 Gems ($30)";
g_js_strings.modal_getgems.gems5 = "525 Gems ($50)";
g_js_strings.modal_getgems.gems6 = "1100 Gems ($100)";
g_js_strings.modal_getgems.gems7 = "2800 Gems ($250)";
g_js_strings.modal_getgems.gems8 = "5750 Gems ($500)";
g_js_strings.modal_getgems.purchasenow = "Purchase Now";
g_js_strings.modal_getgems.obtaindesc = "Earn Gems from special offers";
g_js_strings.modal_getgems.gemoffer = "Other Ways to Get Gems";
g_js_strings.modal_getgems.obtainmobiledesc = "Obtain gems through Offers!";
g_js_strings.modal_getgems.obtainmobile = "Pay with Mobile";
g_js_strings.modal_getgems.linkcreditcards = "Credit Cards";
g_js_strings.modal_getgems.linkdebitcards = "Debit Cards";
g_js_strings.modal_getgems.linkgashmycard = "GASH & MyCard";
g_js_strings.modal_getgems.linkpaypal = "PayPal";
g_js_strings.modal_getgems.linkmobile = "Pay With Mobile";
g_js_strings.modal_getgems.linkoffers = "Offers";
g_js_strings.modal_getgems.pricesshown = "Prices shown in %1$s";
g_js_strings.modal_getgems.ordash = "-or-";
g_js_strings.modal_getgems.itemseparator = ", ";
g_js_strings.modal_getgems.itemseparatorlast = " or ";
g_js_strings.modal_getgems_direct = new Object();
g_js_strings.modal_getgems_direct.backtogem = "&lt;&lt;Back to Gem purchase options";
g_js_strings.modal_getgems_direct.clickforpaypal = "Click here to purchase by PayPal";
g_js_strings.modal_getgems_direct.needassistance = "Need Billing Assistance?";
g_js_strings.modal_getgems_check = new Object();
g_js_strings.modal_getgems_check.gemsupdated = "Gems Updated! If you are expecting a bonus chest, please refresh and check the Chest tab within My Items.";
g_js_strings.modal_shop_buy_gift = new Object();
g_js_strings.modal_shop_buy_gift.entername = "Please enter the Lord or Lady name of the person you wish to gift Offering of Affection to";
g_js_strings.modal_shop_buy_gift.nameerror = "Please enter a valid player name.";
g_js_strings.modal_shop_buy_gift_player_check = new Object();
g_js_strings.modal_shop_buy_gift_player_check.confirmgift = "Are you sure you want to purchase and send this gift to Lord/Lady %1$s?";
g_js_strings.modal_myitems_confirm_potion_mist = new Object();
g_js_strings.modal_myitems_confirm_potion_mist.mistwarning = "Please note: Using the Mists of Avalon while you are engaged in attack will still reveal your location to the person you are attacking in their Battle Report. Do you still wish to use the Mists?";
g_js_strings.modal_myitems_confirm_potion_mist.usemists = "Use Mists";
g_js_strings.modal_myitems_warning = "Warning!";
g_js_strings.vacationMode = {};
g_js_strings.vacationMode.modal_myitems_confirm_vacation3_msg = "You will be entering vacation mode for 3 days.  You will not be able to march (attack, reinforce, scout, reassign, transport) without ending vacation mode.  Once vacation mode has ended, you will not be able to restart it without using another item.   Do you still wish to continue?";
g_js_strings.vacationMode.modal_myitems_confirm_vacation7_msg = "You will be entering vacation mode for 7 days.  You will not be able to march (attack, reinforce, scout, reassign, transport) without ending vacation mode.  Once vacation mode has ended, you will not be able to restart it without using another item.   Do you still wish to continue?";
g_js_strings.vacationMode.modal_myitems_confirm_vacation3 = "<span class='warning'>Warning!</span> You will be entering vacation mode for 3 days.  You will not be able to march (attack, reinforce, scout, reassign, transport) without ending vacation mode.  Once vacation mode has ended, you will not be able to restart it without using another item.   Do you still wish to continue?";
g_js_strings.vacationMode.modal_myitems_confirm_vacation7 = "<span class='warning'>Warning!</span> You will be entering vacation mode for 7 days.  You will not be able to march (attack, reinforce, scout, reassign, transport) without ending vacation mode.  Once vacation mode has ended, you will not be able to restart it without using another item.   Do you still wish to continue?";
g_js_strings.vacationMode.modal_attack_vacation = "<span class='warning'>Warning!</span> By  sending out a march, you will end vacation mode immediately and you will not be able to restart it without using another item.  All benefits will immediately cease. You may be attacked. You will no longer be under the Mists of Avalon. You will no longer have reduced upkeep.   Do you still wish to continue?";
g_js_strings.modal_myitems_confirm_potion_mist.usevacation = "Enter Vacation Mode";
g_js_strings.modal_myitems_confirm_vacation_continue_button = "Continue";
g_js_strings.ignoreUserConfirm = new Object();
g_js_strings.ignoreUserConfirm.ignoreuser = "Are you sure you want to ignore this user?";
g_js_strings.silenceUserConfirm = new Object();
g_js_strings.silenceUserConfirm.silenceuser = "Are you sure you want to silence this user?";
g_js_strings.renameUserConfirm = new Object();
g_js_strings.renameUserConfirm.renameuser = "Are you sure you want to rename this user?";
g_js_strings.renameUser = new Object();
g_js_strings.renameUser.didnotwork = "Did not work, likely duplicate";
g_js_strings.getChat = new Object();
g_js_strings.getChat.whisperstoyou = "whispers to you";
g_js_strings.getChat.saystoalliance = "says to the alliance";
g_js_strings.getChat.chatrules = "Chat Rules";
g_js_strings.getChat.nobadlang = "No bad language. No personal attacks. No links. Use /username to whisper to another player. Respect the mods and each other and most importantly, have fun!";
g_js_strings.getChat.inactivemessage = "Hey! Your chat has gone idle and you've stopped receiving chats. Scroll over chat to retrieve chats and stay active.";
g_js_strings.sendChat = new Object();
g_js_strings.sendChat.talkingtoyourself = "You are talking to yourself because you are not in an alliance.";
g_js_strings.sendChat.joinorcreate = "Join or Create an Alliance!";
g_js_strings.sendChat.youtoalliance = "You say to your alliance";
g_js_strings.sendChat.saystoalliance = "says to the alliance";
g_js_strings.sendChat.maybenotonline = "may not be online.";
g_js_strings.sendChat.whispersto = "whispers to";
g_js_strings.comingsoon = new Object();
g_js_strings.comingsoon.comingsoon = "Coming Soon!";
g_js_strings.boosts_tooltip_fog = new Object();
g_js_strings.boosts_tooltip_fog.fog = "You are under Mists of Avalon";
g_js_strings.boosts_tooltip_production = new Object();
g_js_strings.boosts_tooltip_production.goldprodincrease = "Gold production increased by 100%";
g_js_strings.boosts_tooltip_production.aprodincrease = "%1$s production increased by 25%";
g_js_strings.boosts_tooltip_production.aleft = "%1$s left.";
g_js_strings.boosts_tooltip_combat = new Object();
g_js_strings.boosts_tooltip_combat.troopatkinc = "Troop attack increased by 20%";
g_js_strings.boosts_tooltip_combat.troopdefinc = "Troop defense increased by 20%";
g_js_strings.boosts_tooltip_combat.troopatkinc2 = "Troop attack increased by 50%";
g_js_strings.boosts_tooltip_combat.troopdefinc2 = "Troop defense increased by 50%";
g_js_strings.boosts_tooltip_combat.cityinpeace = "City in peacetime. You cannot attack or be attacked.";
g_js_strings.boosts_tooltip_combat.troopupkeepreduct = "Troop food upkeep reduced by 50%";
g_js_strings.boosts_tooltip_combat.loadincrease = "Troop load increased by 25%";
g_js_strings.boosts_tooltip_combat.troopreturnreduct = "Troop return time reduced by 50%";
g_js_strings.boosts_tooltip_combat.troophealthincrease = "Troop health increased by 10%";
g_js_strings.modal_addcityhelp = new Object();
g_js_strings.modal_addcityhelp.secondcityneed = "To build a second city you need to";
g_js_strings.modal_addcityhelp.secondcityitem1 = "Reach of title of Baronet (7) or higher.";
g_js_strings.modal_addcityhelp.secondcityitem2 = "Control a Plain";
g_js_strings.modal_addcityhelp.secondcityitem3 = "Have 250 Supply Troops encamped (reinforce) at that location";
g_js_strings.modal_addcityhelp.secondcityitem4 = "Have 10,000 EACH of Gold, Food, Wood, Stone, and Ore at that location (reinforce)";
g_js_strings.modal_addcityhelp.secondcityitem5 = "Click on that location to build city";
g_js_strings.modal_addcityhelp.secondcityitem6 = "Obtain a &#39;Second City Deed&#39; by completing the necessary quest or purchasing it in the shop.";
g_js_strings.modal_addcityhelp.thirdcityneed = "To build a third city you need to";
g_js_strings.modal_addcityhelp.thirdcityitem1 = "Obtain a &#39;Third City Deed&#39; by completing the necessary quest.";
g_js_strings.modal_addcityhelp.thirdcityitem2 = "Control a Plain";
g_js_strings.modal_addcityhelp.thirdcityitem3 = "Have 250 Supply Troops encamped (reinforce) at that location";
g_js_strings.modal_addcityhelp.thirdcityitem4 = "Have 10,000 EACH of Gold, Food, Wood, Stone, and Ore at that location (reinforce)";
g_js_strings.modal_addcityhelp.thirdcityitem5 = "Click on that location to build city";
g_js_strings.modal_addcityhelp.fourthcityneed = "To build a fourth city you need to";
g_js_strings.modal_addcityhelp.fourthcityitem1 = "Obtain a &#39;%1$s&#39; by completing the necessary quest.";
g_js_strings.modal_maptile = new Object();
g_js_strings.modal_maptile.bookmarkloc = "Bookmark Location";
g_js_strings.modal_maptile.viewcity = "View City";
g_js_strings.modal_maptile.visitcourt = "Visit Court";
g_js_strings.modal_maptile.barbarianinvasion = "Invasions of barbarians have become a threat to this province.  Conquer this city and you may receive a trophy!";
g_js_strings.modal_maptile.buildcity = "Build City";
g_js_strings.modal_maptile.viewtroops = "View Troops";
g_js_strings.modal_maptile.viewreinforcements = "View Reinforcements";
g_js_strings.modal_maptile.ownermisted = "The owner of this Wilderness is hidden in the Mists of Avalon.";
g_js_strings.modal_mmb = new Object();
g_js_strings.modal_mmb.playmmb = "Play Merlin&#39;s Magical Boxes";
g_js_strings.modal_mmb.gamechance = "The game of chance that could have you winning more than you could ever earn!";
g_js_strings.modal_mmb.everyonewins = "Everyone is a winner!";
g_js_strings.modal_mmb.usetokens = "Use Merlin&#39;s Magical Tokens to Play!";
g_js_strings.modal_mmb.magicaltokens = "Merlin&#39;s Magical Token";
g_js_strings.modal_mmb.playnow = "Play Now";
g_js_strings.modal_mmb.playlater = "Play Later";
g_js_strings.modal_mmb.youwon = "You Won!";
g_js_strings.modal_mmb.spin = "Spin!";
g_js_strings.modal_mmb.buymoregems = "Buy More Gems!";
g_js_strings.modal_mmb.playonfb = "Play on Kabam.com for one additional FREE token!";
g_js_strings.modal_mmb.playonkabam = "Playing on Kabam.com gives two tokens per day!";
g_js_strings.modal_mmb_game = new Object();
g_js_strings.modal_mmb_game.playfreedesc = "Play for FREE NOW or use tokens later to try your luck at winning items!";
g_js_strings.modal_mmb_game.pickbox = "Pick a box...  Any box...";
g_js_strings.modal_mmb_game.unlockgifts = "Send a gift to your friends to unlock more valuable prizes!";
g_js_strings.mmb_modal_confirm = new Object();
g_js_strings.mmb_modal_confirm.youwon = "You won...";
g_js_strings.mmb_modal_confirm.addedto = "This has been added to";
g_js_strings.mmb_modal_confirm.myitems = "My Items.";
g_js_strings.mmb_modal_confirm.beselfish = "Be Selfish";
g_js_strings.mmb_modal_confirm.shareupsell = "Share your good fortune with your friends and let them try their luck with FREE %1$s.";
g_js_strings.mmb_modal_confirm.sharemmtoken = "Share a free Merlin&#39;s Magical Token with your friends!";
g_js_strings.mmb_modal_confirm.sharefreetoken = "Share Free Token";
g_js_strings.modal_mmb_openbox = new Object();
g_js_strings.modal_mmb_openbox.youvewon = "You&#39;ve won...";
g_js_strings.modal_mmb_openbox.redtapestry = "Red Tapestry";
g_js_strings.showResourceTooltip = new Object();
g_js_strings.showResourceTooltip.caplimit = "Capacity Limit";
g_js_strings.showResourceTooltip.hrprod = "Hourly Production";
g_js_strings.showResourceTooltip.troopsupkeep = "Troops Upkeep";
g_js_strings.showHappyTooltip = new Object();
g_js_strings.showHappyTooltip.taxrate = "Tax Rate";
g_js_strings.showGoldTooltip = new Object();
g_js_strings.showGoldTooltip.taxrev = "Tax Revenue";
g_js_strings.showGoldTooltip.knsal = "Knights&#39; Salary";
g_js_strings.showGoldTooltip.netincome = "Net Income";
g_js_strings.showPopTooltip = new Object();
g_js_strings.showPopTooltip.poplimit = "Population Limit";
g_js_strings.showPopTooltip.currpop = "Current Population";
g_js_strings.showPopTooltip.lbrforce = "Labor Force";
g_js_strings.showPopTooltip.idlepop = "Idle Population";
g_js_strings.showPopTooltip.poptrend = "Population Trend";
g_js_strings.showAddCityTooltip = new Object();
g_js_strings.showAddCityTooltip.addcities = "Add cities to increase resources.";
g_js_strings.showCityTooltip = new Object();
g_js_strings.showCityTooltip.foodsupply = "Food Supply";
g_js_strings.directory_changetab = new Object();
g_js_strings.directory_changetab.tourncoming = "Tournaments are coming soon.";
g_js_strings.directory_changetab.viewdet = "View Details";
g_js_strings.directory_changetab.generousgifts = "Be a generous Lord or Lady<br/>and send gifts to your friends!";
g_js_strings.directory_changetab.sendgifts = "Send Gifts";
g_js_strings.directory_changetab.updateinterval = "List updated every 1~2 hours";
g_js_strings.getMessageWindow = new Object();
g_js_strings.getMessageWindow.sendmessage = "Send Message";
g_js_strings.sendMessageModule = new Object();
g_js_strings.sendMessageModule.msgsent = "Message sent";
g_js_strings.sendMessageModule.retrydesc = "Problem in sending the message. Please Retry";
g_js_strings.modal_speedup = new Object();
g_js_strings.modal_speedup.askhelp = "Ask for Help";
g_js_strings.modal_speedup.askhelpdesc = "For every friend that gives you help, 1 min will be taken off the remaining time.";
g_js_strings.modal_speedup.newaskhelpdesc = "Every friend who helps will reduce the build time by 1 minute or 1%, whichever is greater.";
g_js_strings.modal_speedup.buildresearchaskhelpdesc = "Every friend who helps will reduce the build or research time by 1 minute or 1%, whichever is greater.";
g_js_strings.cityaction_abandonprompt = new Object();
g_js_strings.cityaction_abandonprompt.abandona = "Are you sure you want to abandon %1$s?";
g_js_strings.cityaction_abandonprompt.confirmdesc = "To confirm that you <b>REALLY</b> want to abandon this city,<br/>please type the name of this city backwards.";
g_js_strings.cityaction_abandonprompt_confirm = new Object();
g_js_strings.cityaction_abandonprompt_confirm.typename = "Please type the name of this city backwards to abandon it";
g_js_strings.changedomain_prompt = new Object();
g_js_strings.changedomain_prompt.selectdomain = "Select an Existing Domain";
g_js_strings.changedomain_prompt.enterdomain = "Enter Domain";
g_js_strings.changedomain_prompt.dord = "- or -";
g_js_strings.changedomain_prompt.createcity = "Create a city on another domain";
g_js_strings.getUserSettings = new Object();
g_js_strings.getUserSettings.userset = "User Settings";
g_js_strings.getUserSettings.defaultchat = "Default Chat Tab";
g_js_strings.getUserSettings.chatignore = "Chat Ignore List";
g_js_strings.getUserSettings.msgblock = "Message Block List";
g_js_strings.getUserSettings.changelang = "Change Language";
g_js_strings.getUserSettings.savelang = "Save Language";
g_js_strings.modal_help_request = new Object();
g_js_strings.modal_help_request.choosecat = "Please choose a category";
g_js_strings.modal_help_request.dsetcatd = "-- Select Category --";
g_js_strings.modal_help_request.billissue = "Billing Issues";
g_js_strings.modal_help_request.bugreport = "Bug Report";
g_js_strings.modal_help_request.gamequestion = "Game Question";
g_js_strings.modal_help_request.featsugg = "Feature Suggestion";
g_js_strings.modal_help_request.report = "Report Abuse / Cheating";
g_js_strings.modal_help_request.gemsbill = "";
g_js_strings.modal_help_request.userrpt = "User Report";
g_js_strings.modal_help_request.selcat = "You must select a category";
g_js_strings.modal_help_request.descprob = "Please describe your problem";
g_js_strings.modal_help_request.mustdescprob = "You must describe your problem";
g_js_strings.modal_help_request.enterem = "Please enter your email address";
g_js_strings.modal_help_request.mustenterem = "You must enter a valid email address";
g_js_strings.sendHelpRequest = new Object();
g_js_strings.sendHelpRequest.thankyou = "Your help request has been sent. Due to the high volume of tickets we receive, you may experience a delay of a few days before you receive a response.<br/><br/>Please check out our support site for answers to many commonly asked questions and to check the status of your report.";
g_js_strings.pop_action_feed_modal = new Object();
g_js_strings.pop_action_feed_modal.fairedesc2 = "Send a Travelling Faire to a Friend's Kingdom and all of their cities will get +50 Happiness!";
g_js_strings.pop_action_feed_modal.faireShareButton = "Share Travelling Faire";
g_js_strings.pop_action_feed_modal.cordialvisitcourtdesc = "%1$s has cordially invited you to visit their Court!";
g_js_strings.pop_treasure_chest_modal = new Object();
g_js_strings.pop_treasure_chest_modal.chestdesc = "You found a treasure chest! Unfortunately, you don't have anyone in your employ who can break the lock. One of your friends may have just the person!";
g_js_strings.pop_treasure_chest_modal.givefriend = "Give to a Friend";
g_js_strings.pop_treasure_chest_modal.sharewithfriends = "Share with Friends";
g_js_strings.getNextAvailableCase = new Object();
g_js_strings.getNextAvailableCase.allidesc = "Defending your city is much easier as part of an Alliance! Band together with your fellow players for mutual help. Click the Alliance button to see current alliances, or start your own!";
g_js_strings.getNextAvailableCase.frienddesc = "Getting a Second City is important to provide resources, give you more troops and to raise your might! Invite your friends to play and help you get your Second City Deed today!";
g_js_strings.getNextAvailableCase.expanddesc = "Expansion is important! You should consider building a new city to expand your glorious empire!";
g_js_strings.getNextAvailableCase.resourcedesc = "To increase your Resource production, take over Wildernesses around you! Go to the Map View and click on the Woods, Hills, etc. around your City to learn more. Lower level Wildernesses have fewer protectors, and require you to send fewer Troops when you attack.";
g_js_strings.getNextAvailableCase.appointdesc = "Appoint your Friends as Knights to help grow your city! Knights can be assigned to Roles to speed up your city's growth, and are necessary to lead attacks against Wildernesses, Barbarian Camps, and your enemies. Appoint Knights in your Knights' Hall.";
g_js_strings.getNextAvailableCase.troopdesc = "In order to grow your Kingdom, you need Troops! Troops can be trained in the Barracks, and will let you take over Wildernesses, plunder Barbarian Camps, set up new cities, and destroy your enemies.";
g_js_strings.getNextAvailableCase.researchdesc = "Research in the Alchemy Lab to improve your city! Research can improve your Resource production, unlock new Troops, increase your combat abilities, and more.";
g_js_strings.getNextAvailableCase.invitefriends = "Invite Friends";
g_js_strings.pop_castle_two_modal = new Object();
g_js_strings.pop_castle_two_modal.castledesc = "Your Kingdom is advancing nicely! Why not recommend Kingdoms of Camelot to some friends? You can grow your might alongside each other and band together for help.";
g_js_strings.pop_castle_two_modal.castlerecommend = "Recommend to Friends";
g_js_strings.popViralModalUEP = new Object();
g_js_strings.popViralModalUEP.inviteyourfriends = "Invite your Friends";
g_js_strings.popViralModalUEP.sendfreegifts = "Send Free Gifts";
g_js_strings.popViralModalUEP.invitedesc = "Ask Your friends to play Kingdoms of Camelot with you! It's more fun to compete against your Friends.";
g_js_strings.popViralModalUEP.attractalliesdesc = "Allies will protect you as your Kingdom grows in might. Invite your Friends to build their own Kingdoms!";
g_js_strings.popViralModalUEP.giftreminddesc = "Send free Gifts to your friends everyday to get ahead of your enemies.";
g_js_strings.pop_suggest_invite_modal = new Object();
g_js_strings.pop_suggest_invite_modal.invitedesc = "Like Kingdoms of Camelot? Invite some friends to play with you.";
g_js_strings.pop_suggest_invite_modal.invitefriend = "Invite Friends";
g_js_strings.postToAllianceChat = new Object();
g_js_strings.postToAllianceChat.helpmebuild = "I need help building my lv. %1$s %2$s.";
g_js_strings.postToAllianceChat.helpmersch = "I need help advancing my %1$s research to lv. %2$s";
g_js_strings.postToAllianceChat.clicktobuild = "Click here to reduce the build time.";
g_js_strings.postToAllianceChat.clicktorsch = "Click here to reduce the research time.";
g_js_strings.claimAllianceChatHelp = new Object();
g_js_strings.claimAllianceChatHelp.helpCount = "You are # %1$s of 5 to help %2$s %3$s!";
g_js_strings.timestr = new Object();
g_js_strings.timestr.times = "s";
g_js_strings.timestr.timesec = "sec";
g_js_strings.timestr.timemin = "min";
g_js_strings.timestr.timem = "m";
g_js_strings.timestr.timehr = "hr";
g_js_strings.timestr.timeh = "h";
g_js_strings.timestr.timeday = "day";
g_js_strings.timestr.timed = "d";
g_js_strings.checkoutofdate = new Object();
g_js_strings.checkoutofdate.reloadconfirm = "Your game may be out of date. Reload Kingdoms of Camelot?";
g_js_strings.upg_tch = new Object();
g_js_strings.upg_tch.unableres = "unable to research";
g_js_strings.buildaction = new Object();
g_js_strings.buildaction.cannotbuild = "cannot build";
g_js_strings.deleteaction = new Object();
g_js_strings.deleteaction.somethingwentwrong = "Something went wrong please retry";
g_js_strings.update_queue = new Object();
g_js_strings.update_queue.frhelp = "Friends helping";
g_js_strings.update_queue.allihelp = "Alliance helping";
g_js_strings.update_queue.akbatc = "%1$sk %2$s at %3$s";
g_js_strings.update_queue.troopqueue = "Troop Groups Queued";
g_js_strings.init = new Object();
g_js_strings.init.tutorialcont = "You may be in the middle of a tutorial. Continue?";
g_js_strings.init.main_beginnnerupsell_hoverexc = "Get the %1$s to start your City on the winning path!";
g_js_strings.recommendFriendsModule = new Object();
g_js_strings.recommendFriendsModule.recommendmember = "Recommend an Alliance Member";
g_js_strings.recommendFriendsModule.selectfromfriend = "Select from your friends";
g_js_strings.recommendFriendsModule.yourfriendsona = "These are your friends on %1$s";
g_js_strings.recommendFriendsModule.sorrynofriends = "Sorry none of your friends are playing on this server";
g_js_strings.recommendFriendsModule.searchplayers = "Search For Players";
g_js_strings.recommendFriendsModule.selectedplayers = "Selected Players";
g_js_strings.recommendFriendsModule.recselplayers = "Recommend Selected Players";
g_js_strings.recommendSelectedFriends = new Object();
g_js_strings.recommendSelectedFriends.aalreadyrec = "%1$s have already been recommended.";
g_js_strings.recommendSelectedFriends.recsuccess = "Recommendation Successful";
g_js_strings.recommendSelectedFriends.sorrynorec = "Sorry can not make recommendation at this moment.";
g_js_strings.recommendSelectedFriends.playersrch = "Player Search";
g_js_strings.friendsTabInAllianceInvite = new Object();
g_js_strings.friendsTabInAllianceInvite.makealliancestrong = "Make your alliance strong with your friends.";
g_js_strings.friendsTabInAllianceInvite.subjecttxt = "Invitation to join %1$s alliance in Kingdoms of Camelot";
g_js_strings.friendsTabInAllianceInvite.msgtxt = "%1$s has invited you to join his alliance %2$s on %3$s&#39;s domain in Kingdoms of Camelot! Click here to join the alliance %4$s";
g_js_strings.friendsTabInAllianceInvite.existingplayers = "Existing Players";
g_js_strings.friendsTabInAllianceInvite.pendinginv = "Pending Invitation";
g_js_strings.searchTabInAllianceInvite = new Object();
g_js_strings.searchTabInAllianceInvite.messagetoinvite = "Message Players you want to Invite<br/>";
g_js_strings.searchPlayersByName = new Object();
g_js_strings.searchPlayersByName.atleast3char = "Player name must have alteast 3 characters in length";
g_js_strings.searchPlayersByName.allinvite = "Alliance Invite";
g_js_strings.searchPlayersByName.youareinvited = "You have been invited to join my alliance";
g_js_strings.searchPlayersByName.abinkocjoinc = "%1$s %2$s in Kingdoms of Camelot. Join Alliance: %3$s";
g_js_strings.searchPlayersByName.mbrofall = "Member of your alliance";
g_js_strings.searchPlayersByName.srynoplayers = "Sorry no players found on the name %1$s";
g_js_strings.searchPlayersByName.nouserfound = "No user found";
g_js_strings.showCreateAlliance = new Object();
g_js_strings.showCreateAlliance.allinameinstruct = "Alliance Name can only contain letters, numbers, spaces and &quot;_&quot;.";
g_js_strings.showCreateAlliance.alliname = "Alliance Name";
g_js_strings.showCreateAlliance.createalli = "Create An Alliance";
g_js_strings.allianceInfo = new Object();
g_js_strings.allianceInfo.leavealli = "Leave Alliance";
g_js_strings.allianceInfo.curralli = "Current Alliance";
g_js_strings.allianceInfo.recommby = "Recommended By";
g_js_strings.allianceInfo.allidiplomacy = "Alliance Diplomacy";
g_js_strings.allianceInfo.setdiplomacy = "Set Diplomacy";
g_js_strings.allianceInfo.allicreated = "Alliance Created";
g_js_strings.allianceInfo.currentlynoalli = "You currently aren't in any Alliance.";
g_js_strings.allianceInfo.alliprotectdesc = "Alliances will help you protect your city during war.";
g_js_strings.allianceInfo.browsealli = "Browse Alliances";
g_js_strings.allianceInfo.musthaveembassylvl2 = "You must have an Embassy of Level 2 to create your own Alliance";
g_js_strings.allianceInfo.andlvl1tojoin = "and Level 1 to join any Alliance";
g_js_strings.allianceInfo.createalli = "Create An Alliance";
g_js_strings.allianceInfo.startown = "Want to start your own?";
g_js_strings.allianceInfo.alliinvites = "Alliance Invites";
g_js_strings.allianceInfo.pendingreq = "Pending Requests";
g_js_strings.allianceInfo.cancelreq = "Cancel Request";
g_js_strings.allianceInfo.reqdon = "Requested on";
g_js_strings.allianceInfo.joinalli = "Join Alliance";
g_js_strings.allianceInfo.nothanks = "No Thanks";
g_js_strings.allianceInfo.ainvitedyoutob = "%1$s invited you to %2$s";
g_js_strings.allianceInfo.pendmbrs = "Pending Members";
g_js_strings.getDiplomacy = new Object();
g_js_strings.getDiplomacy.sorrynoalli = "Sorry no alliances found for this type";
g_js_strings.getDiplomacy.alliname = "Alliance Name";
g_js_strings.getDiplomacy.friendlytowardsthem = "Friendly Towards Them";
g_js_strings.getDiplomacy.friendlytoyou = "Friendly To You";
g_js_strings.getDiplomacy.awaitingtheiracceptance = "Awaiting their acceptance";
g_js_strings.getDiplomacy.awaitingleaderacceptance = "Awaiting your leader's acceptance";
g_js_strings.getDiplomacy.acceptancepending = "Acceptance pending";
g_js_strings.getDiplomacy.leaderacceptancepending = "Leader's acceptance pending";
g_js_strings.actionOnAllianceInvitations = new Object();
g_js_strings.actionOnAllianceInvitations.leavecurralli = "Leave your current alliance before you join a new alliance<br/>";
g_js_strings.actionOnAllianceInvitations.congratsyoujoinedalli = "Congratulations, You have joined the alliance %1$s";
g_js_strings.leaveAllianceConfirmationContent = new Object();
g_js_strings.leaveAllianceConfirmationContent.curralli = "Current Alliance";
g_js_strings.leaveAllianceConfirmationContent.chancellorsnotleave = "Chancellors can not leave the alliance when there are members in it. You must resign your position as chancellor in order to leave the alliance <br/>";
g_js_strings.leaveAllianceConfirmationContent.resignchancellors = "Resign as Chancellor";
g_js_strings.leaveAllianceConfirmationContent.noteonlyperson = "Note: You are the only person in this alliance, leaving this alliance will cause the alliance to be deleted.<br/>";
g_js_strings.leaveAllianceConfirmationContent.liketoleave = "Would you like to leave?";
g_js_strings.resignAlliance = new Object();
g_js_strings.resignAlliance.chancellorresignation = "Chancellor Resignation Process";
g_js_strings.resignAlliance.selectnewchancellor = "Select any one of the alliance members to become a chancellor.";
g_js_strings.resignAlliance.youvicechancellor = "You will become vice chancellor";
g_js_strings.resignAlliance.assignnewchancellor = "Assign new chancellor";
g_js_strings.leaveAlliance = new Object();
g_js_strings.leaveAlliance.allianceaterminated = "Your alliance with %1$s has been terminated";
g_js_strings.assignNewChancellor = new Object();
g_js_strings.assignNewChancellor.newchancellorisa = "You have been resigned as a chancellor. The new chancellor is alliance with %1$s";
g_js_strings.cancelCurrentAllianceRequest = new Object();
g_js_strings.cancelCurrentAllianceRequest.suretocancel = "Are you sure you want to cancel this request?";
g_js_strings.getDirectoryTabAllianceMembers = new Object();
g_js_strings.getDirectoryTabAllianceMembers.viewallmbrs = "View all members";
g_js_strings.getDirectoryTabAllianceMembers.sorrynoofficersa = "Sorry no officers found for the alliance %1$s";
g_js_strings.getDirectoryTabAllianceMembers.jointosee = "Join an alliance to view officers of that alliance here.";
g_js_strings.membersInfo = new Object();
g_js_strings.membersInfo.allilarger = "Want to make the alliance larger?";
g_js_strings.membersInfo.recommalli = "Recommend Friends to Alliance";
g_js_strings.membersInfo.invitealli = "Invite to Alliance";
g_js_strings.membersInfo.msgeveryone = "Message Everyone";
g_js_strings.membersInfo.allilimit = "Your alliance has reached the member limit of 100";
g_js_strings.membersInfo.lastonline = "Last Online";
g_js_strings.membersInfo.youmustbelong = "You need to belong to an alliance to view the members in it.";
g_js_strings.showMemberInfo = new Object();
g_js_strings.showMemberInfo.fbname = "Facebook Name";
g_js_strings.showMemberInfo.datejoinedalli = "Date Joined in Alliance";
g_js_strings.showMemberInfo.daysincurrpos = "Days in the current position";
g_js_strings.confirmActionOnMember = new Object();
g_js_strings.confirmActionOnMember.promoteatob = "Promote %1$s to %2$s";
g_js_strings.confirmActionOnMember.demotetovicechancellor = "This action will demote you to vice chancellor";
g_js_strings.confirmActionOnMember.demoteatob = "Promote %1$s to %2$s";
g_js_strings.confirmActionOnMember.wanttoremovea = "Are you sure you want to remove %1$s from the alliance";
g_js_strings.allianceList = new Object();
g_js_strings.allianceList.reqjoin = "Request To Join";
g_js_strings.allianceList.allifull = "Alliance is Full";
g_js_strings.confirmRequestToJoin = new Object();
g_js_strings.confirmRequestToJoin.youhaverequestwitha = "You have an existing request with this alliance %1$s";
g_js_strings.confirmRequestToJoin.cancelwithaandreqb = "You may only request to join one Alliance at a time. Do you want to cancel your current request with the alliance %1$s and request to join the alliance %2$s ";
g_js_strings.htmlAllianceRequest = new Object();
g_js_strings.htmlAllianceRequest.sendrequest = "Send your request to join alliance";
g_js_strings.htmlAllianceRequest.pendingdrop = "Any pending requests will be dropped";
g_js_strings.htmlAllianceRequest.reqtojoinallia = "Request to join your alliance %1$s";
g_js_strings.htmlAllianceRequest.interestinjoining = "I am interested in joining your alliance";
g_js_strings.htmlAllianceRequest.mystandings = "My Standings";
g_js_strings.htmlAllianceRequest.thanksforconsidering = "Thanks for considering my request";
g_js_strings.showAllianceInfo = new Object();
g_js_strings.showAllianceInfo.backtolist = "Back to Alliance List";
g_js_strings.optionsInAlliance = new Object();
g_js_strings.optionsInAlliance.optionsapply = "Options are applied only to alliance member";
g_js_strings.optionsInAlliance.leavealli = "Leave Alliance";
g_js_strings.getInfoForAnUser = new Object();
g_js_strings.getInfoForAnUser.visitcourt = "Visit Court";
g_js_strings.getInfoForAnUser.sorryprobs = "Sorry, problem in getting player details";
g_js_strings.setDiplomacyWindow = new Object();
g_js_strings.setDiplomacyWindow.backalli = "Back to Alliance";
g_js_strings.setDiplomacyWindow.srchalli = "Search for alliance";
g_js_strings.setDiplomacyWindow.setalli = "Set Alliance to";
g_js_strings.setDiplomacyWindow.setdiplo = "Set Diplomacy";
g_js_strings.getAllianceSearchResults = new Object();
g_js_strings.getAllianceSearchResults.entryatleast3 = "Your search entry must be at least 3 characters.";
g_js_strings.getAllianceSearchResults.currdiplo = "Current Diplomacy";
g_js_strings.getAllianceSearchResults.noresults = "There were no results for your search";
g_js_strings.setAllianceDiplomacies = new Object();
g_js_strings.setAllianceDiplomacies.choosediplo = "Please choose a diplomacy status";
g_js_strings.setAllianceDiplomacies.selectatleastone = "Select at least one alliance";
g_js_strings.setAllianceDiplomacies.diplosuccess = "Alliance diplomacy successfully changed";
g_js_strings.modal_alliance = new Object();
g_js_strings.modal_alliance.alliinfo = "Alliance Info";
g_js_strings.modal_alliance.allilist = "Alliance List";
g_js_strings.showClearingTooltip = new Object();
g_js_strings.showClearingTooltip.bdgsite = "Building Site";
g_js_strings.modal_fow_leaderboard = new Object();
g_js_strings.modal_fow_leaderboard.nomatcherr = "No matches were found.  Try Again.";
g_js_strings.modal_fow_leaderboard.searchuser = "Search for User";
g_js_strings.modal_fow_leaderboard.finduser = "Find User";
g_js_strings.modal_fow_leaderboard.searchalli = "Search for Alliance";
g_js_strings.modal_fow_leaderboard.findalli = "Find Alliance";
g_js_strings.modal_fow_leaderboard.backtoleader = "Back to Leaderboard";
g_js_strings.modal_fow_leaderboard.updatemsg = "Leaderboard updated daily";
g_js_strings.modal_fow_leaderboard.emptyessage = "Leaderboard coming soon!";
g_js_strings.getAllianceSearch = new Object();
g_js_strings.getAllianceSearch.searcherrmsg = "You must enter an alliance name that is at least 3 characters.";
g_js_strings.modal_list_alliance = new Object();
g_js_strings.modal_list_alliance.playername = "Player Name";
g_js_strings.modal_list_alliance.offrank = "Officer Rank";
g_js_strings.getUserSearch = new Object();
g_js_strings.getUserSearch.searcherrmsg = "You must enter a user name with at least 3 characters.";
g_js_strings.initializeProgressBar = new Object();
g_js_strings.initializeProgressBar.get12 = "Get <b>TWELVE</b> free Gems just for completing the setup process!";
g_js_strings.initializeProgressBar.get12gems = "Get <b>12 FREE Gems</b> just for completing the setup process!";
g_js_strings.initializeProgressBar.completetxt = "complete!";
g_js_strings.initializeProgressBar.contsetup = "Continue<br>Setup";
g_js_strings.initializeProgressBar.install = "Install";
g_js_strings.initializeProgressBar.bookmark = "Bookmark";
g_js_strings.initializeProgressBar.fan = "Fan";
g_js_strings.initializeProgressBar.permissions = "Permissions";
g_js_strings.initializeProgressBar.subscribe = "Subscribe";
g_js_strings.initializeProgressBar.joinAlliance = "Join An Alliance";
g_js_strings.modal_progress_actions = new Object();
g_js_strings.modal_progress_actions.subscribetxt = "Subscribe to the Kingdoms of Camelot newsletter";
g_js_strings.modal_progress_actions.publishper = "Publish Permission";
g_js_strings.modal_progress_actions.enabletxt = "Enable permissions for Kingdoms of Camelot";
g_js_strings.modal_progress_actions.becomefan = "Become a Fan";
g_js_strings.modal_progress_actions.becometxt = "Become a fan of Kingdoms of Camelot";
g_js_strings.modal_progress_actions.addbook = "Add Bookmark";
g_js_strings.modal_progress_actions.bookmarktxt = "Bookmark Kingdoms of Camelot";
g_js_strings.modal_progress_actions.installtxt = "Install Kingdoms of Camelot";
g_js_strings.modal_progress_actions.updatestatus = "Update Status";
g_js_strings.modal_progress_actions.remindlater = "Remind Me Later";
g_js_strings.modal_progress_actions.pressbutton = "* Press the &quot;%1$s&quot; button to check your setup status.";
g_js_strings.modal_progress_actions.upto24 = "** Status may take up to 24 hours to update.";
g_js_strings.modal_progress_actions.joinAlliance = "Build an Embassy and Join an Alliance";
g_js_strings.modal_gems_gained = new Object();
g_js_strings.modal_gems_gained.msg1 = "You got a gem! Great work! Keep it up!";
g_js_strings.modal_gems_gained.msg2 = "Good work! You got two gems! Keep going!";
g_js_strings.modal_gems_gained.msg3 = "Nearly there! You got three gems! Only one step left!";
g_js_strings.modal_gems_gained.msg4 = "Well done! You completed the setup process and gained six gems!";
g_js_strings.modal_gems_not_gained = new Object();
g_js_strings.modal_gems_not_gained.uhoh = "Uh oh. You didn't get any gems. If you completed a step, this means that either you hit &quot;Cancel&quot; instead of accept, or Facebook simply hasn't updated yet and you should try again in a few hours.";
g_js_strings.barbarian = new Object();
g_js_strings.barbarian.atthegates = "Barbarians at the Gates!";
g_js_strings.barbarian.atthegatesdesc = "The Barbarians have attacked this city! For each Player who helps defend, the defending Player stands a better chance of repelling the Barbarians. When ten Players are helping to defend, or the clock hits zero, the Barbarians and defending forces will battle!";
g_js_strings.barbarian.lendaid = "Lend Aid";
g_js_strings.barbarian.giveaid = "Players Giving Aid";
g_js_strings.barbarian.sendtroops = "Send Troops";
g_js_strings.barbarian.capped = "Your troops losses, win or lose, are capped at 25%.";
g_js_strings.barbarian.foreignaid = "Foreign Aid";
g_js_strings.barbarian.foreignaiddesc = "Foreign Aid is help from other Domains.";
g_js_strings.barbarian.invasionreport = "Barbarian Invasion Report";
g_js_strings.barbarian.invasionreportdesc = " 	From here you can track the progress of the Barbarians rampaging throughout the Domain. You can see your Allies and Friends who have cities in need of aid. You can also check and see if you have a City under attack! Lend them a hand to help slow the spread of the Barbarians in your Domain!";
g_js_strings.barbarian.invasionreportnote = "Your troops loses, win or lose, are capped at 25%.";
g_js_strings.barbarian.numofattacks = "%1$s Attacks";
g_js_strings.barbarian.barbarianprogress = "BARBARIAN PROGRESS";
g_js_strings.barbarian.youareunderattack = "You're Under Attack!";
g_js_strings.barbarian.clickheretodefend = "Click here to defend!";
g_js_strings.barbarian.alliesunderattack = "Allies under Attack";
g_js_strings.barbarian.friendsunderattack = "Friends under Attack";
g_js_strings.barbarian.kingarthurbrokerspeace = "King Arthur brokers peace!";
g_js_strings.barbarian.kingarthurbrokerspeacedesc = "King Arthur has worked to reach a peace accord with the Barbarians who have been rampaging throughout the Domain recently. For now, things are quiet, but the Barbarians are violent by their very nature, and the threat of invasion could return again at any time. Remain vigilant.";
g_js_strings.barbarian.attacksrepelled = "Attacks Repelled!";
g_js_strings.barbarian.attacksyourepelled = "Attacks you repelled!";
g_js_strings.barbarian.attacksalliancerepelled = "Attacks your Alliance repelled!";
g_js_strings.barbarian.attacksyouhelpedrepel = "Attacks you helped repel!";
g_js_strings.barbarian.mercenariesdispatched = "You've dispatched a small band of Mercenaries to help!";
g_js_strings.barbarian.helpmore = "Would you like to help more ?";
g_js_strings.barbarian.hiremercenaries = "Hire Mercenaries";
g_js_strings.barbarian.defendmyself = "Defend Myself";
g_js_strings.barbarian.troopfromcity = "What City do you want to take troops from?";
g_js_strings.barbarian.goldfromcity = "What City do you want to take the gold for the Mercenaries from?";
g_js_strings.barbarian.selectacity = "Select a City";
g_js_strings.barbarian.whatlevelofmercenaries = "What level of Mercenaries would you like to send?";
g_js_strings.barbarian.lightmercenaries = "Light Mercenaries";
g_js_strings.barbarian.lightmercenariesdesc = "Made up of mostly low-level troops, something is certainly better than nothing. Every bit helps defend.";
g_js_strings.barbarian.mediummercenaries = "Medium Mercenaries";
g_js_strings.barbarian.mediummercenariesdesc = "A bit more hardened of troops who have seen their share of battles and offer real help.";
g_js_strings.barbarian.heavymercenaries = "Heavy Mercenaries";
g_js_strings.barbarian.heavymercenariesdesc = "The elite of the elite, soldiers of fortune who turn the tide of any battle ... for a high price.";
g_js_strings.barbarian.selecttroops = "Select the number of troops you'd like to send";
g_js_strings.barbarian.cannotexceed = "The number of troops cannot exceed 100,000";
g_js_strings.barbarian.totaltroopsbeingdeployed = "Total troops being deployed:";
g_js_strings.barbarian.youhavedefended = "You have defended your city!";
g_js_strings.barbarian.mustsendatleast = "You must send at least 1 troop";
g_js_strings.barbarian.erroroccured = "Error occured";
g_js_strings.barbarian.callforhelp = "Call For Help!";
g_js_strings.barbarian.barbarianscomming = "Barbarians are coming!";
g_js_strings.barbarian.barbariansatthegates = "Barbarians At The Gates";
g_js_strings.barbarian.peacedeclared = "Peace";
g_js_strings.barbarian.buttoninvasionreport = "Invasion Report";
g_js_strings.barbarian.cannotgetalliesfriends = "Cannot get Allies and friends under attack";
g_js_strings.barbarian.havesenttroops = "You have sent troops to help your friend";
g_js_strings.barbarian.havesentmercenaries = "You have sent Mercenaries to help your friend";
g_js_strings.barbarian.errorcode = "Error Code: %1$s";
g_js_strings.barbarian.barbarianwin = "Barbarians defeated you";
g_js_strings.barbarian.barbarianlose = "You defeated Barbarians";
g_js_strings.barbarian.notenoughgold = "You do not have enough gold to send Mercenaries";
g_js_strings.barbarian.backtogame = "Back to Game";
g_js_strings.barbarian.youwereattackedrecently = "You were attacked recently.";
g_js_strings.barbarian.safeforatleast = "You are safe for at least:";
g_js_strings.barbarian.troopscapped = "Your troop losses, regardless of outcome, are capped at 25%.";
g_js_strings.barbarian.cityname = "City name";
g_js_strings.barbarian.playername = "Player name";
g_js_strings.modal_myitems_use_escape = new Object();
g_js_strings.modal_myitems_use_escape.currentcoor = "Your Current Coordinates";
g_js_strings.modal_myitems_use_escape.newcoor = "New Coordinates:";
g_js_strings.modal_myitems_use_escape.yourcurrentname = "Your Current name is";
g_js_strings.modal_myitems_use_escape.newname = "New Name";
g_js_strings.modal_myitems_use_escape_do = new Object();
g_js_strings.modal_myitems_use_escape_do.aused = "%1$s used!";
g_js_strings.modal_myitems_use_escape_do.teleportto = "Teleported to";
g_js_strings.modal_myitems_use_escape_do.namechangedto = "Name changed to";
g_js_strings.WildDefense = new Object();
g_js_strings.WildDefense.trapdesc = "Much like the modern land mine, these traps are buried around the wilderness, and deal damage to unsuspecting enemy attackers. Traps are destroyed when triggered, and will need to be rebuilt manually. Traps built in wildernesses are built immediately, and only cost Gold, not other resources.";
g_js_strings.WildDefense.mercdesc = "Soldiers of fortune who will defend your lands for you while your troops are away. The number of Mercenaries is determined by the level of the Wilderness they are defending. They automatically replenish hourly, and will completely desert if they cannot be paid.";
g_js_strings.WildDefense.costeach = "%1$s Gold each";
g_js_strings.WildDefense.costhour = "%1$s Gold/hr";
g_js_strings.WildDefense.nogold = "You do not have enough Gold to purchase those Traps.";
g_js_strings.WildDefense.nochange = "You did not change your Mercenary setting.";
g_js_strings.WildDefense.overmax = "You cannot build more than 1000 Traps per Wilderness.";
g_js_strings.WildDefense.validnumber = "Please enter a valid number.";
g_js_strings.WildDefense.mercnone = "None Hired";
g_js_strings.WildDefense.mercconfirm = "By hiring these mercenaries, you will be charged %1$s Gold immediately, and then %2$s Gold every hour. Do you still wish to hire %3$s Mercenaries?";
g_js_strings.WildDefense.mercconfirmnone = "Setting your Mercenaries to None will immediately dismiss your Mercenaries. Do you still wish to set your Mercenaries to None?";
g_js_strings.WildDefense.youhave = "You Have";
g_js_strings.WildDefense.atraps = "%1$s Traps";
g_js_strings.WildDefense.agold = "%1$s Gold";
g_js_strings.WildDefense.tobuild = "Traps to Build:";
g_js_strings.AddCity = new Object();
g_js_strings.AddCity.tobuilda = "To build your %1$s, you need to:";
g_js_strings.AddCity.obtainadeed = "Obtain a %1$s Deed";
g_js_strings.AddCity.controlplain = "Control a Plain";
g_js_strings.AddCity.reachlvl = "Reach Level 7 or Higher";
g_js_strings.AddCity.noqualseconddeed = "You do not own a Second City Deed. Invite more friends or purchase a Second City Deed from the shop.";
g_js_strings.AddCity.qualseconddeed = "You do not own a Second City Deed, but have the friends needed to obtain one. Click on Claim to get your Second City Deed.";
g_js_strings.AddCity.noqualthirddeed = "You do not own a Third City Deed. You need to obtain more Crests. Get Crests by attacking unowned Level 5 to 10 Wildernesses, or by purchasing Squire&#39;s Chests in the shop. Here is your current Crest count towards your Third City Deed:";
g_js_strings.AddCity.qualthirddeed = "You do not own a Third City Deed. You have obtained all the Crests you need, but have not claimed your Third City Deed. Click on Claim to get your Third City Deed.";
g_js_strings.AddCity.noqualfourthdeed = "You do not own a Fourth City Deed. You need to obtain more Crests. Get Crests by attacking unowned Level 6 to 10 Wildernesses, or by purchasing Squire&#39;s and Knight&#39;s Chests in the shop. Here is your current Crest count towards your Fourth City Deed:";
g_js_strings.AddCity.qualfourthdeed = "You do not own a Fourth City Deed. You have obtained all the Crests you need, but have not claimed your Fourth City Deed. Click on Claim to get your Fourth City Deed.";
g_js_strings.AddCity.noqualfifthdeed = "You do not own a Fifth City Deed. You need to obtain more Crests. Get Crests by attacking unowned Level 8 to 10 Wildernesses, or by purchasing Knight's and Lord's Chests in the shop. Here is your current Crest count towards your Fifth City Deed:";
g_js_strings.AddCity.qualfifthdeed = "You do not own a Fifth City Deed. You have obtained all the Crests you need, but have not claimed your Fifth City Deed. Click on Claim to get your Fifth City Deed.";
g_js_strings.AddCity.noqualsixthdeed = "You do not own a Sixth City Deed. You need to obtain more Crests and Seals. Get Seals by attacking unowned Level 8 to 10 Wildernesses, or by purchasing Fay's Chests in the shop. Here is your current Seal count towards your Sixth City Deed:";
g_js_strings.AddCity.qualsixthdeed = "You do not own a Sixth City Deed. You have obtained all the Crests you need, but have not claimed your Sixth City Deed. Click on Claim to get your Sixth City Deed.";
g_js_strings.AddCity.noqualseventhdeed = "You do not own a Seventh City Deed. You need to obtain more Seals. Get Seals by attacking unowned Level 8 to 10 Wildernesses, or by purchasing Chests in the shop. Here is your current Seal count towards your Seventh City Deed:";
g_js_strings.AddCity.qualseventhdeed = "You do not own a Seventh City Deed. You have obtained all the Crests you need, but have not claimed your Seventh City Deed. Click on Claim to get your Seventh City Deed.";
g_js_strings.AddCity.nolvlqual = "You are not yet Level 7 or higher.";
g_js_strings.AddCity.reachlvl = "Reach Level 7 or Higher";
g_js_strings.AddCity.noplainqual = "You do not control a Plain. Go to the map and conquer a Plain to build your New City upon it.";
g_js_strings.AddCity.selectplain = "Select the Plain and choose Build to start your New City!";
g_js_strings.postToProfile = new Object();
g_js_strings.postToProfile.textboxtitle = "Add a personal message for your friends";
g_js_strings.payment = new Object();
g_js_strings.payment.payment_heading = "Add Coins & Cash";
g_js_strings.payment.buy_epic_cash = "Buy Epic Cash";
g_js_strings.payment.buy_epic_coins = "Buy Epic Coins";
g_js_strings.payment.buy_coins = "Buy Coins";
g_js_strings.payment.back_to_purchase_options = "Back to Epic Cash and Coins purchase options";
g_js_strings.payment.epic_cash_for_cur_symbol = "Epic Cash for $";
g_js_strings.payment.coins_for_cur_symbol = "Coins for $";
g_js_strings.payment.get_better_stuff = "Get better stuff with your Epic Cash";
g_js_strings.payment.want_more_coins = "Want more coins? Buy some now!";
g_js_strings.payment.get_epic_cash_directly = "Get Epic Cash Directly";
g_js_strings.payment.other_ways_to_get_epic_cash = "Other Ways to get Epic Cash";
g_js_strings.payment.in_single_txn = "in a single transaction";
g_js_strings.towncrier = new Object();
g_js_strings.towncrier.newannoucement = "New Announcement!";
g_js_strings.towncrier.annoucementcaravan = "Announcement Caravan";
g_js_strings.towncrier.noannouncements = "There are no announcements.";
g_js_strings.recall = {};
g_js_strings.recall.header = "Recall Troops?";
g_js_strings.recall.ask = "Recalling troops will add 25% of the time they have been marching to their return march.  Are you sure you want to recall your troops?";
g_js_strings.recall.error = "Sorry! You cannot recall your troops with less than 1 minute remaining on the march.";
g_js_strings.shop = {};
g_js_strings.shop.newitem = "New!";
g_js_strings.shop.saleitem = "Sale!";
g_js_strings.incomingattack = {};
g_js_strings.incomingattack.attackrecalled = "Attack Recalled!";
g_js_strings.incomingattack.attackfromattackerrecalled = "Attack from %1$s has been recalled";
g_js_strings.incomingattack.unknown = "unknown";
g_js_strings.modal_auto_attack = {};
g_js_strings.modal_auto_attack.barbarianraids = "Barbarian Raids";
g_js_strings.modal_auto_attack.restartraidtimer = "Restart Raid Timer";
g_js_strings.modal_auto_attack.stopraidingiftrooplevelsarelessthan = "Stop Raiding if Troop levels are less than";
g_js_strings.modal_auto_attack.autodeletebattlereports = "Auto Delete Battle Reports";
g_js_strings.modal_auto_attack.addraid = "Add Raid";
g_js_strings.modal_auto_attack.resume = "Resume";
g_js_strings.modal_auto_attack.stopall = "Stop All";
g_js_strings.modal_auto_attack.resumeall = "Resume All";
g_js_strings.modal_auto_attack.youdonothaveanysavedraids = "You do not have any saved Raids";
g_js_strings.modal_auto_attack.addaraid = "Add a Raid";
g_js_strings.modal_auto_attack.now = "now";
g_js_strings.modal_auto_attack.stop = "Stop";
g_js_strings.modal_auto_attack.deleteraidconfirmtitle = "Delete Barbarian Raid";
g_js_strings.modal_auto_attack.deleteraidconfirmcontent = "Are you sure you want to delete this Barbarian Raid";
g_js_strings.modal_auto_attack.lastmarch = "Last March";
g_js_strings.modal_auto_attack.roundtrip = "Round Trip";
g_js_strings.modal_auto_attack.stopped = "Stopped";
g_js_strings.modal_auto_attack.insufficienttroops = "Insufficient Troops";
g_js_strings.modal_auto_attack.maxraidsexceeded = "Max Raids Exceeded";
g_js_strings.modal_auto_attack.timedout = "Timed Out";
g_js_strings.modal_auto_attack.resting = "Resting";
g_js_strings.modal_auto_attack.pausehelp = "This feature will cause that Raid to stop if the number of current troops within a Raid is less than the percentage of total troops originally committed to that Raid. This can happen if troops are lost during a Raid against the Barbarians. Setting this percentage lower will allow your Raid to continue with greater troop loses.";
g_js_strings.LevelUp = {};
g_js_strings.LevelUp.levelUp = "Level Up!";
g_js_strings.LevelUp.congratulations = "Congratulations! You reached Level %1$s";
g_js_strings.LevelUp.yourReward = "Your Reward";
g_js_strings.LevelUp.celebrate = "Celebrate";
g_js_strings.LevelUp.failedToClaimReward = "Failed to claim the reward, please try again later.";
g_js_strings.guardian = {};
g_js_strings.guardian.askForHelp = "Ask for help from friends";
g_js_strings.guardian.timeStr = "Time";
g_js_strings.guardian.upgradeStr = "Upgrade time left";
g_js_strings.guardian.cl1 = "Current Level";
g_js_strings.guardian.ul1 = "Upgrade Level";
g_js_strings.guardian.divineinsp = "Divine Ins.";
g_js_strings.guardian.description = "Your Guardian is the protector of your city. Its elemental powers increase your resource capabilities and strengthen the attributes of your troops.";
g_js_strings.guardian.cancel = "Guardian Construction canceled.";
g_js_strings.guardian.getResources = "You get the following resources when you cancel your guardian:";
g_js_strings.guardian.nameEmpty = "You need to enter a name before proceeding.";
g_js_strings.guardian.inventory = "Inventory";
g_js_strings.guardian.transformCost = "Cost: 1X Element Rebirth";
g_js_strings.wood_guardian = {};
g_js_strings.wood_guardian.description = "Your Guardian is the protector of your city. The Weald Fenrir increases your Wood resource capabilities and strengthens the HP attribute of your troops.";
g_js_strings.ore_guardian = {};
g_js_strings.ore_guardian.description = "Your Guardian is the protector of your city. The Iron Indrik increases your Ore resource capabilities and strengthens the Attack attribute of your troops.";
g_js_strings.guardian_item = {};
g_js_strings.guardian_item.title = "Change Name";
g_js_strings.guardian_item.description = "Choose a name for your guardian.  Names must be 15 characters or less.";
g_js_strings.guardian_item.use = "Use";
g_js_strings.guardian.create = "Please create a name that is only 1 - 15 letters and/or characters.";
g_js_strings.guardian.nospace = "Please create a name that is only 1 - 15 letters and/or characters, no spaces.";
g_js_strings.guardian.tooltipName = "Click here to change the name of your Guardian.";
g_js_strings.guardian.changeName = "First summon a Guardian and then click here to change its name.";
g_js_strings.guardian.tooltip = "Summon a Guardian to Protect Your City and Help You in Battle";
g_js_strings.guardian.donthave = "Renaming Ritual is required to change your Guardian's name. You can purchase this from the General section of the Shop.";
g_js_strings.guardian.release = "Are you sure you want to release your Guardian?  This will remove your Guardian and make your Guardian tile level 0.";
g_js_strings.guardian.release_text = "Release";
g_js_strings.guardian.buy_transform = "Buy and Transform";
g_js_strings.guardian_err = {};
g_js_strings.guardian_err.missItemFrInvt = "Item not in the inventory.";
g_js_strings.guardian_err.missItemFrEquip = "Item not in the equipment.";
g_js_strings.guardian_err.upgrading = "You cannot equip or unequip armor while your Guardian is upgrading.";
g_js_strings.guardian_err.invtFullWhenEquip = "You need to discard excess armor or purchase additional inventory slots before equipping your Guardian.";
g_js_strings.guardian_err.invtFullWhenUnequip = "You need to discard excess armor or purchase additional inventory slots before unequipping your Guardian.";
g_js_strings.guardian_err.notEnoughGems = "You do not have enough Gems to purchase this item.";
g_js_strings.guardian_err.getMore = "Get More Gems.";
g_js_strings.guardian.setBonus = {};
g_js_strings.guardian.setBonus.notavailable = "No set bonus";
g_js_strings.guardian.setBonus.simple_sustenance = "All Resource Production +2%";
g_js_strings.guardian.setBonus.durable_offense = "Troop Attack +5%";
g_js_strings.guardian.wood = {};
g_js_strings.guardian.wood.name = "Weald Fenrir";
g_js_strings.guardian.wood.fullName = "Weald Fenrir(Wood Guardian)";
g_js_strings.guardian.wood.attr = "Attribute: Troop HP";
g_js_strings.guardian.wood.res0 = "Resource: Wood";
g_js_strings.guardian.wood.res1 = "(Production + Cap)";
g_js_strings.guardian.wood.desc = "A towering beast of timber and tightly controlled fury, the Weald Fenrir stalks the borders of his territory.  His stolid presence inspires fortitude in allies and terror in foes.  When he lifts his paws, vines and flowers spring up beneath the shadow, and leave terrible gashes in his enemies.";
g_js_strings.guardian.choose_a_guardian = "Choose a Guardian";
g_js_strings.guardian.transform_a_guardian = "Transform a Guardian";
g_js_strings.guardian.are_you_sure = "Are you sure you want to use a Divine Inspiration?";
g_js_strings.guardian.ore = {};
g_js_strings.guardian.ore.name = "Iron Indrik";
g_js_strings.guardian.ore.fullName = "Iron Indrik(Ore Guardian)";
g_js_strings.guardian.ore.attr = "Attribute: Troop Attack";
g_js_strings.guardian.ore.res0 = "Resource: Ore";
g_js_strings.guardian.ore.res1 = "(Production + Cap)";
g_js_strings.guardian.ore.desc = "Magma flows in the Iron Indrik’s veins and where other creatures would have a streaming mane, the Indrik wears flame.  Black smoke billows and lava drips from his maw.  Spears cannot pierce his hematite hide.  Its fiery retaliation makes it a difficult beast to befriend and a dangerous enemy.";
g_js_strings.ImpendingAttacks = {};
g_js_strings.ImpendingAttacks.marchTypeFrom = "{marchType} from {genderTitle} {name}";
g_js_strings.ImpendingAttacks.targetCity = "{cityName} at {coordinate}";
g_js_strings.ImpendingAttacks.targetWilderness = "{wilderness} at {coordinate}";
g_js_strings.ImpendingAttacks.clickHereForMoreInfo = "click here for more info";
g_js_strings.ImpendingAttacks.clickHere = "Click Here";
g_js_strings.ImpendingAttacks.noIncomingAttacks = "No incoming attacks.";
g_js_strings.ImpendingAttacks.impengingAttackGoToCity = "Impending Attack! Go to city";
g_js_strings.ImpendingAttacks.recalled = "Recalled";
g_js_strings.ImpendingAttacks.incoming = "Incoming";
g_js_strings.ImpendingAttacks.askAllianceForHelpCity = "Help! My city {cityName} is under attack! Please send reinforcements to {coordinate}";
g_js_strings.ImpendingAttacks.askAllianceForHelpWilderness = "Help! My {wilderness} is under attack! Please send reinforcements to {coordinate}";
g_js_strings.ImpendingAttacks.watchTowerReport = "Watch Tower Report";
g_js_strings.ImpendingAttacks.takeAction = "Take action to give yourself the best advantage during an attack";
g_js_strings.ImpendingAttacks.buffs = "Buffs";
g_js_strings.ImpendingAttacks.fight = "Fight";
g_js_strings.ImpendingAttacks.troopSettings = "Troop Settings";
g_js_strings.ImpendingAttacks.troopSettingsTip = "This will bring you to the Castle, where you are able to order your troops to defend or hide.";
g_js_strings.ImpendingAttacks.buildDefensesTip = "This will bring you to the Wall, where you can begin building defensive units in anticipation of this attack.";
g_js_strings.ImpendingAttacks.trainTroopsTip = "This will bring you to the Barracks, where you can begin training troops in anticipation of this attack.";
g_js_strings.ImpendingAttacks.askForHelpTip = "This will automatically create a chat message to your alliance asking them to send reinforcements to this city.";
var buildingcost = {
    bdg0: ["Castle", 200, 3000, 2500, 100, 0, 0, 900,
    {
        b19: [0, -2]
    }, [], "The Castle is the center of your City! You can view and modify your Production Rates and Tax Rates, and Comfort or Levy your subjects. Each upgrade of the Castle allows you to conquer one more Wilderness and use three new Resource fields."],
    bdg1: ["Farm", 50, 300, 200, 150, 0, 0, 30, [],
        [], "Farms produce Food, important for buildings and for feeding your troops. Higher levels produce more Food."],
    bdg2: ["Sawmill", 100, 100, 250, 300, 0, 0, 45, [],
        [], "Sawmills produce Wood, necessary for buildings and for training troops."],
    bdg3: ["Quarry", 180, 500, 150, 400, 0, 0, 60, [],
        [], "Quarries produce Stone. Stone is the foundation of your buildings, allowing them to withstand attacks and time"],
    bdg4: ["Mine", 210, 600, 500, 200, 0, 0, 90, [],
        [], "Mines produce Ore, which is necessary to create any metal your city needs, from weapons to nails."],
    bdg5: ["Cottage", 100, 500, 100, 50, 0, 0, 30,
    {
        b0: [0, -1]
    }, [], "Cottages provide a place for your subjects to live. Upgrade to provide better cottages, and raise your Population."],
    bdg6: ["Tavern", 300, 2000, 1000, 400, 0, 0, 240,
    {
        b5: [1, 2]
    }, [], "The Tavern provides your subjects with a place to relax, and raises your city&#39;s Happiness, though never above 100%. Higher levels of Tavern provide greater benefits."],
    bdg7: ["Knights&#39; Hall", 400, 2500, 1200, 700, 0, 0, 360, [],
        [], "The Knights&#39; Hall is where you hire new Knights, appoint Knights to roles, and raise your Knights&#39; skills. Upgrade to increase the experience gained by your Knights each hour."],
    bdg8: ["Embassy", 200, 2000, 500, 300, 0, 0, 720, [],
        [], "The Embassy allows you to join and create Alliances, and to house allied troops sent to help you. Your Embassy must be level 2 to create an Alliance. A higher level Embassy will allow more troops to be garrisoned."],
    bdg9: ["Storehouse", 100, 1500, 1000, 300, 0, 0, 600, [],
        [], "The Storehouse protects your Food, Wood, Stone, and Ore from being Plundered by your enemies. Upgrade your Storehouse to protect more Resources."],
    bdg10: ["Market", 1000, 1000, 1000, 1000, 0, 0, 750, [],
        [], "The Market is a gathering spot for buying and selling Resources between players. Upgrade your Market to enact multiple transactions at the same time."],
    bdg11: ["Alchemy Lab", 120, 2500, 1500, 200, 0, 0, 480, [],
        [], "The Alchemy Lab is where to research new and better Technologies. Upgrading the Alchemy Lab allows your alchemists to engage in more complicated research."],
    bdg12: ["Rally Point", 100, 600, 2000, 250, 0, 0, 150, [],
        [], "Assemble your troops at the Rally Point to send out an Attack, Reinforce another city, or Scout and enemy location. Upgrade to send more troops."],
    bdg13: ["Barracks", 250, 1200, 1500, 500, 0, 0, 300, [],
        [], "Train your troops in the Barracks. Stronger troops require a higher level of Barracks. Building more Barracks will speed up Training."],
    bdg14: ["Watch Tower", 150, 1000, 3000, 300, 0, 0, 300,
    {
        b13: [1, 2]
    }, [], "The Watch Tower is used to send early warnings of invasions. The higher its level, the more detailed information you gain."],
    bdg15: ["Blacksmith", 125, 1000, 600, 1200, 0, 0, 180,
    {
        b4: [1, 3]
    }, [], "The Blacksmith creates all the metal weapons and armor for your troops. A higher level Blacksmith is needed for more advanced weaponry and armor."],
    bdg16: ["Workshop", 150, 1500, 500, 1500, 0, 0, 540, [],
        [], "The Workshop is necessary to build siege weapons, such as Ballistae, Trebuchets, and Catapults."],
    bdg17: ["Stable", 1200, 2000, 800, 1000, 0, 0, 270,
    {
        b1: [1, 5]
    }, [], "Stables are necessary to house the horses used by Cavalry and Heavy Cavalry. Upgrade your Stables to research higher levels of Alloy Horseshoes."],
    bdg18: ["Relief Station", 1500, 5000, 4500, 500, 0, 0, 3600,
    {
        b17: [1, 1]
    }, {
        t12: [0, 0]
    }, "The Relief Station helps your troops&#39; Speed when you&#39;re moving between your own and allies&#39; cities. Upgrade for better speed improvements."],
    bdg19: ["Wall", 3000, 1500, 10000, 500, 0, 0, 1800,
    {
        b16: [0, -1]
    }, [], "Walls provide your city with protection. Your Defensive units are built on your Wall. Higher levels allow you to build better Defensive units and increase your city&#39;s protection."],
    bdg50: ["Wood Guardian", 0, 0, 0, 0, 0, 0, 0, [],
        [], ""],
    bdg51: ["Ore Guardian", 0, 0, 0, 0, 0, 0, 0, [],
        [], ""]
};
var techcost = {
    tch1: ["Fertilizer", 500, 0, 0, 100, 1000, 0, 400,
    {
        b11: [1, 1],
        b1: [0, 0]
    }, [], "Each upgrade increases your Food production by 10%\r\n"],
    tch2: ["Logging", 0, 500, 0, 100, 1200, 0, 500,
    {
        b11: [1, 1],
        b2: [0, 0]
    }, [], "Each upgrade increases your Wood production by 10%\r\n"],
    tch3: ["Stoneworking", 0, 0, 500, 200, 1500, 0, 600,
    {
        b11: [1, 1],
        b3: [0, 0]
    }, [], "Each upgrade increases your Stone production by 10%\r\n"],
    tch4: ["Mining", 0, 0, 0, 800, 2000, 0, 700,
    {
        b11: [1, 1],
        b4: [0, 0]
    }, [], "Each upgrade increases your Ore production by 10%\r\n"],
    tch5: ["Geometry", 0, 500, 0, 500, 5000, 0, 900,
    {
        b11: [1, 3],
        b16: [0, 0]
    }, {
        t3: [1, 2]
    }, "Each upgrade increases the speed of construction on Siege Weapons by 10%\r\n"],
    tch6: ["Eagle Eyes", 300, 0, 0, 0, 2000, 0, 300,
    {
        b11: [1, 3]
    }, [], "Higher levels give you more detailed information when scouting\r\n"],
    tch8: ["Poisoned Edge", 800, 120, 200, 3000, 3000, 0, 1200,
    {
        b11: [1, 2],
        b13: [1, 2]
    }, [], "Each upgrade increases your troops&#39; attack by 5%\r\n"],
    tch9: ["Metal Alloys", 700, 150, 0, 300, 3500, 0, 1500,
    {
        b11: [1, 3],
        b15: [0, 0]
    }, {
        t4: [0, 0]
    }, "Each upgrade increases your troops&#39; defense by 5%\r\n"],
    tch10: ["Featherweight Powder", 500, 0, 200, 0, 3000, 0, 1600,
    {
        b11: [1, 4]
    }, [], "Each upgrade increases your troops&#39; load by 10%\r\n"],
    tch11: ["Magical Mapping", 600, 0, 0, 0, 3000, 0, 1800,
    {
        b11: [1, 4]
    }, [], "Each upgrade increases your infantry troops&#39; marching speed by 10%\r\n"],
    tch12: ["Alloy Horseshoes", 1000, 0, 0, 1000, 6000, 0, 2000,
    {
        b11: [1, 5],
        b17: [0, 0]
    }, {
        t9: [0, 0]
    }, "Each upgrade increases your horseback and siege weapon troops marching speed by 5%\r\n"],
    tch13: ["Fletching", 0, 800, 500, 600, 5000, 0, 2400,
    {
        b11: [1, 4]
    }, {
        t2: [1, 4]
    }, "Each upgrade increases your projectiles&#39; range by 5%\r\n"],
    tch14: ["Shrinking Powder", 0, 1200, 1000, 800, 2000, 0, 900,
    {
        b11: [1, 6],
        b9: [0, 0]
    }, {
        t2: [1, 3]
    }, "Each upgrade increases your Storehouse capacity by 10%\r\n"],
    tch15: ["Healing Potions", 1500, 0, 0, 0, 3600, 0, 1800,
    {
        b11: [1, 6]
    }, {
        t10: [1, 3]
    }, "Each upgrade increases your troops&#39; health by 5%\r\n"],
    tch16: ["Giant&#39;s Strength", 0, 2000, 2000, 2000, 5000, 0, 1800,
    {
        b11: [1, 5]
    }, {
        t2: [1, 5],
        t5: [1, 2]
    }, "Each upgrade increases your construction speed by 10%\r\n"]
};
var unitcost = {
    unt1: ["Supply Troop", 50, 150, 0, 10, 0, 1, 50,
    {
        b13: [1, 1]
    }, [], "Supply Troops are not very good at fighting, but can carry resources to your other cities or friends, or carry loot back when you plunder enemy cities."],
    unt2: ["Militiaman", 80, 100, 0, 50, 0, 1, 25,
    {
        b13: [1, 1]
    }, [], "Militiamen are citizens of your city who have some military training. They are a good beginning for your army, but no match for troops with true training."],
    unt3: ["Scout", 120, 200, 0, 150, 0, 1, 100,
    {
        b13: [1, 2]
    }, {
        t6: [1, 1]
    }, "Scouts move quickly, and bring back information about enemy positions and numbers, but are not strong fighters"],
    unt4: ["Pikeman", 150, 500, 0, 100, 0, 1, 150,
    {
        b13: [1, 2]
    }, {
        t8: [1, 1]
    }, "Pikemen are the most basic heavily trained troops. Their long pikes are very effective against horses."],
    unt5: ["Swordsman", 200, 150, 0, 400, 0, 1, 225,
    {
        b13: [1, 3],
        b15: [1, 1]
    }, {
        t9: [1, 1]
    }, "Swordsmen are well armored, and are the strongest melee troops. Their shields make them effective against Archers."],
    unt6: ["Archer", 300, 350, 0, 300, 0, 2, 350,
    {
        b13: [1, 4]
    }, {
        t13: [1, 1]
    }, "Archers can destroy the enemy&#39;s troops from a distance, but are vulnerable up close."],
    unt7: ["Cavalry", 1000, 600, 0, 500, 0, 3, 500,
    {
        b13: [1, 5],
        b17: [1, 1]
    }, {
        t12: [1, 1]
    }, "Cavalry troops move very quickly on horseback, and have devastating attacks."],
    unt8: ["Heavy Cavalry", 2000, 500, 0, 2500, 0, 6, 1500,
    {
        b13: [1, 7],
        b15: [1, 5],
        b17: [1, 5]
    }, {
        t12: [1, 5]
    }, "Heavy Cavalry are far more armored than regular Cavalry. This armor provides them defense and more power to their attacks, but costs them some speed."],
    unt9: ["Supply Wagon", 600, 1500, 0, 350, 0, 4, 1000,
    {
        b13: [1, 6],
        b17: [1, 1],
        b16: [1, 3]
    }, {
        t10: [1, 1],
        t5: [1, 3]
    }, "Supply Wagons are heavily fortified to carry anything you need through a raging battle, and not lose the cargo."],
    unt10: ["Ballista", 2500, 3000, 0, 1800, 0, 5, 3000,
    {
        b13: [1, 8],
        b17: [1, 2],
        b16: [1, 5]
    }, {
        t5: [1, 5],
        t13: [1, 6]
    }, "Ballistae fire huge arrow-like bolts at long ranges. They are effective against other siege weapons."],
    unt11: ["Battering Ram", 4000, 6000, 0, 1500, 0, 8, 4500,
    {
        b13: [1, 9],
        b15: [1, 5],
        b17: [1, 3],
        b16: [1, 7]
    }, {
        t9: [1, 8],
        t5: [1, 7]
    }, "A Battering Ram is a large log-like object, used for knocking down the enemy&#39;s defenses."],
    unt12: ["Catapult", 5000, 5000, 8000, 1200, 0, 10, 6000,
    {
        b13: [1, 10],
        b17: [1, 2],
        b16: [1, 9]
    }, {
        t5: [1, 10],
        t13: [1, 10]
    }, "Catapults throw large rocks from a huge distance. They are most effective against the enemy&#39;s defenses."]
};
var unitstats = {
    unt1: [200, 10, 3, 180, 10, 200],
    unt2: [400, 100, 13, 200, 20, 20],
    unt3: [20, 6, 1, 3000, 20, 5],
    unt4: [600, 300, 33, 300, 50, 40],
    unt5: [700, 200, 63, 275, 30, 30],
    unt6: [500, 240, 25, 250, 1200, 25],
    unt7: [1000, 500, 45, 1000, 100, 100],
    unt8: [2000, 700, 87, 750, 80, 80],
    unt9: [1400, 20, 15, 150, 10, 5000],
    unt10: [640, 900, 40, 100, 1400, 35],
    unt11: [10000, 500, 40, 120, 600, 45],
    unt12: [960, 1200, 50, 80, 1500, 75]
};
var fortcost = {
    frt53: ["Wall-Mounted Crossbows", 250, 2000, 750, 500, 0, 0, 180,
    {
        b19: [1, 6],
        b15: [1, 6]
    }, {
        t13: [1, 5]
    }, "High powered crossbows mounted at the best vantage point for shooting enemies"],
    frt55: ["Defensive Trebuchet", 500, 3500, 1800, 1200, 0, 0, 135,
    {
        b19: [1, 8],
        b15: [1, 8]
    }, {
        t13: [1, 7],
        t5: [1, 7]
    }, "Excellent at destroying enemy siege weapons, a trebuchet will only get one shot per battle and must then be rebuilt and reloaded"],
    frt60: ["Trap", 400, 800, 200, 400, 0, 0, 90,
    {
        b19: [1, 4],
        b15: [1, 4]
    }, {
        t8: [1, 2]
    }, "Much like the modern land mine, these traps are buried around the castle, and deal damage to unsuspecting enemy attackers"],
    frt61: ["Caltrops", 100, 0, 0, 400, 0, 0, 30,
    {
        b19: [1, 1]
    }, {
        t9: [1, 1]
    }, "Stops infantry troops from advancing until they are cleared.  Positioned at the maximum attack range of the defenders."],
    frt62: ["Spiked Barrier", 150, 750, 50, 0, 0, 0, 60,
    {
        b19: [1, 2],
        b15: [1, 2]
    }, {
        t2: [1, 2]
    }, "Stops horse units (including siege weapons) from advancing until they are cleared. Positioned at the maximum attack range of the defenders."]
};
var fortstats = {
    unt53: [2000, 600, 80, 0, 1300, 2],
    unt55: [0, 2550, 0, 0, 5000, 4],
    unt60: [0, 5000, 0, 0, 0, 4],
    unt61: [150, 650, 0, 0, 0, 1],
    unt62: [100, 1000, 50, 0, 0, 3]
};
var buildingmulti = {
    b1: 1,
    b2: 1,
    b3: 1,
    b4: 1,
    b5: 1,
    b13: 1
};
var resourceinfo = {
    "0": "Gold",
    "1": "Food",
    "2": "Wood",
    "3": "Stone",
    "4": "Ore",
    "5": "Population",
    "6": "Time",
    rec0: "Gold",
    rec1: "Food",
    rec2: "Wood",
    rec3: "Stone",
    rec4: "Ore",
    rec5: "Population",
    rec6: "Time"
};
var itemlist = {
    i1: {
        name: "Squire's Hourglass",
        description: "Shorten time by 1 minute.",
        price: 1,
        tradable: null,
        category: 2,
        subCategory: 0
    },
    i2: {
        name: "Knight's Hourglass",
        description: "Shorten time by 15 minute.",
        price: 5,
        tradable: null,
        category: 2,
        subCategory: 0
    },
    i3: {
        name: "Guinevere's Hourglass",
        description: "Shorten time by 1 hour.",
        price: 10,
        tradable: null,
        category: 2,
        subCategory: 0
    },
    i4: {
        name: "Morgana's Hourglass",
        description: "Shorten time by 2.5 hours.",
        price: 20,
        tradable: null,
        category: 2,
        subCategory: 0
    },
    i5: {
        name: "Arthur's Hourglass",
        description: "Shorten time by 8 hours.",
        price: 50,
        tradable: null,
        category: 2,
        subCategory: 0
    },
    i6: {
        name: "Merlin's Hourglass",
        description: "Shorten time by 15 hours.",
        price: 80,
        tradable: null,
        category: 2,
        subCategory: 0
    },
    i7: {
        name: "Divine Hourglass",
        description: "Shorten time by 24 hours.",
        price: 120,
        tradable: null,
        category: 2,
        subCategory: 0
    },
    i8: {
        name: "Epic Hourglass",
        description: "Shorten time by 2.5 days.",
        price: 275,
        tradable: null,
        category: 2,
        subCategory: 0
    },
    i9: {
        name: "Dragon's Stomp",
        description: "Demolish one of your buildings immediately.",
        price: 12,
        tradable: null,
        category: 1,
        subCategory: 0
    },
    i10: {
        name: "Legendary Hourglass",
        description: "Shorten time by 4 days.",
        price: 430,
        tradable: null,
        category: 2,
        subCategory: 0
    },
    i26: {
        name: "Siege Master's Tools",
        description: "Shorten the remaining time of construction of Defensive units by 30%.",
        price: 35,
        tradable: null,
        category: 2,
        subCategory: 0
    },
    i36: {
        name: "Lancelot's Tutelage",
        description: "Shorten the remaining time of troop training by 30%.",
        price: 30,
        tradable: null,
        category: 2,
        subCategory: 0
    },
    i37: {
        name: "Arthur's Tutelage",
        description: "Shorten the remaining time of troop training by 50%.",
        price: 100,
        tradable: null,
        category: 2,
        subCategory: 0
    },
    i38: {
        name: "Merlin's Tutelage",
        description: "Shorten the remaining time of troop training by 70%.",
        price: 150,
        tradable: null,
        category: 2,
        subCategory: 0
    },
    i49: {
        name: "Caravan Portal",
        description: "Completes one Market transportation.",
        price: 8,
        tradable: null,
        category: 2,
        subCategory: 0
    },
    i55: {
        name: "Green Griffin Wings",
        description: "Decreases the time of one March by 25%.",
        price: 8,
        tradable: null,
        category: 3,
        subCategory: 0
    },
    i57: {
        name: "Red Dragon Wings",
        description: "Decreases the time of one March by 50%.",
        price: 20,
        tradable: null,
        category: 3,
        subCategory: 0
    },
    i69: {
        name: "instant scout",
        description: "reserved by Rome",
        price: null,
        tradable: null,
        category: 0,
        subCategory: 0
    },
    i101: {
        name: "Day of Prosperity",
        description: "Increases gold from taxes by 100% for 24 hours.",
        price: 45,
        tradable: null,
        category: 4,
        subCategory: 0
    },
    i102: {
        name: "Week of Prosperity",
        description: "Increases gold from taxes by 100% for 7 days.",
        price: 280,
        tradable: null,
        category: 4,
        subCategory: 0
    },
    i111: {
        name: "Harvest Prayer",
        description: "Increases Food production by 25% for 24 hours.",
        price: 9,
        tradable: null,
        category: 4,
        subCategory: 0
    },
    i112: {
        name: "Harvest Sacrifice",
        description: "Increases Food production by 25% for 7 days.",
        price: 50,
        tradable: null,
        category: 4,
        subCategory: 0
    },
    i121: {
        name: "Druidic Blessing",
        description: "Increases Wood production by 25% for 24 hours.",
        price: 9,
        tradable: null,
        category: 4,
        subCategory: 0
    },
    i122: {
        name: "Druidic Ceremony",
        description: "Increases Wood production by 25% for 7 days.",
        price: 50,
        tradable: null,
        category: 4,
        subCategory: 0
    },
    i131: {
        name: "Gnomish Stone Cutter",
        description: "Increases Stone production by 25% for 24 hours.",
        price: 9,
        tradable: null,
        category: 4,
        subCategory: 0
    },
    i132: {
        name: "Gnomish Quarrying Team",
        description: "Increases Stone production by 25% for 7 days.",
        price: 50,
        tradable: null,
        category: 4,
        subCategory: 0
    },
    i141: {
        name: "Dwarven Mining Tools",
        description: "Increases Ore production by 25% for 24 hours.",
        price: 9,
        tradable: null,
        category: 4,
        subCategory: 0
    },
    i142: {
        name: "Dwarven Assistance",
        description: "Increases Ore production by 25% for 7 days.",
        price: 50,
        tradable: null,
        category: 4,
        subCategory: 0
    },
    i211: {
        name: "Rose of Charisma",
        description: "Increases a Knight's Politics by 25% when rewarded. Lasts for 7 days.",
        price: 40,
        tradable: null,
        category: 1,
        subCategory: 0
    },
    i221: {
        name: "Gauntlet of Courage",
        description: "Increases a Knight's Combat by 25% when rewarded. Lasts for 7 days.",
        price: 40,
        tradable: null,
        category: 1,
        subCategory: 0
    },
    i231: {
        name: "Mirror of Knowledge",
        description: "Increases a Knight's Intelligence by 25% when rewarded. Lasts for 7 days.",
        price: 40,
        tradable: null,
        category: 1,
        subCategory: 0
    },
    i241: {
        name: "Gloves of Gathering",
        description: "Increases a Knight's Resourcefulness by 25% when rewarded. Lasts for 7 days.",
        price: 40,
        tradable: null,
        category: 1,
        subCategory: 0
    },
    i261: {
        name: "Blood Lust",
        description: "Increases Attack of troops by 20% for 24 hours.",
        price: 10,
        tradable: null,
        category: 3,
        subCategory: 0
    },
    i262: {
        name: "Blood Frenzy",
        description: "Increases Attack of troops by 20% for 7 days.",
        price: 60,
        tradable: null,
        category: 3,
        subCategory: 0
    },
    i271: {
        name: "Barkskin",
        description: "Increases Defense of troops by 20% for 24 hours.",
        price: 10,
        tradable: null,
        category: 3,
        subCategory: 0
    },
    i272: {
        name: "Stoneskin",
        description: "Increases Defense of troops by 20% for 7 days.",
        price: 60,
        tradable: null,
        category: 3,
        subCategory: 0
    },
    i273: {
        name: "Horn of Plenty",
        description: "Reduce the Food Upkeep from Troops by 50% for 8 hours.",
        price: 40,
        tradable: null,
        category: 3,
        subCategory: 0
    },
    i274: {
        name: "Horn of Bounty",
        description: "Reduces the Food upkeep from Troops by 50% for 24 hours.",
        price: 110,
        tradable: null,
        category: 3,
        subCategory: 0
    },
    i275: {
        name: "Horn of Majesty",
        description: "Reduces the Food upkeep from Troops by 50% for 3 days.",
        price: 320,
        tradable: null,
        category: 3,
        subCategory: 0
    },
    i276: {
        name: "Reinforced Bags",
        description: "Increases troop carrying capacity by 25% for all marches that complete in the next hour.",
        price: 15,
        tradable: null,
        category: 3,
        subCategory: 0
    },
    i277: {
        name: "Sturdy Reinforced Bags",
        description: "Increases troop carrying capacity by 25% for all marches that complete in the next 2 hours.",
        price: 22,
        tradable: null,
        category: 3,
        subCategory: 0
    },
    i278: {
        name: "Heavily Reinforced Bags",
        description: "Increases troop carrying capacity by 25% for all marches that complete in the next 4 hours.",
        price: 40,
        tradable: null,
        category: 3,
        subCategory: 0
    },
    i279: {
        name: "Blue Eagle Wings",
        description: "Decreases the return time of troop marches by 50% for 1 hour. Only applies to return marches started during the 1 hour window.",
        price: 15,
        tradable: null,
        category: 3,
        subCategory: 0
    },
    i280: {
        name: "Blood Fury",
        description: "Increase Attack of troops by 50% for 4 hours.",
        price: 90,
        tradable: null,
        category: 3,
        subCategory: 0
    },
    i281: {
        name: "Iron Skin",
        description: "Increase Defense of troops by 50% for 4 hours.",
        price: 90,
        tradable: null,
        category: 3,
        subCategory: 0
    },
    i282: {
        name: "Staunch Banner",
        description: "Increase Health of troops by 10% for 24 hours",
        price: 12,
        tradable: null,
        category: 3,
        subCategory: 0
    },
    i283: {
        name: "Banner of Vigor",
        description: "Increase Health of troops by 10% for 7 days",
        price: 70,
        tradable: null,
        category: 3,
        subCategory: 0
    },
    i284: {
        name: "Horn of Samhain",
        description: "Reduce the Food Upkeep from Troops by 50% for 7 days",
        price: 735,
        tradable: null,
        category: 3,
        subCategory: 0
    },
    i351: {
        name: "Fertile Winds",
        description: "Adds 20% of your Population Limit or 100 Population, whichever is higher. Does not work if the current Population reaches the Population Limit.",
        price: 40,
        tradable: null,
        category: 1,
        subCategory: 0
    },
    i355: {
        name: "Mass Hypnosis",
        description: "Increases Happiness to 100.",
        price: 100,
        tradable: null,
        category: 1,
        subCategory: 0
    },
    i361: {
        name: "Train with Kay",
        description: "Increase Knight's experience by 1,000 or 8% of current level cap, whichever is greater.",
        price: 8,
        tradable: null,
        category: 1,
        subCategory: 0
    },
    i362: {
        name: "Train with Galahad",
        description: "Increase Knight's experience by 10,000 or 30% of current level cap, whichever is greater.",
        price: 30,
        tradable: null,
        category: 1,
        subCategory: 0
    },
    i363: {
        name: "Train with Arthur",
        description: "Increase Knight's experience by 100,000 or 100% of current level cap, whichever is greater",
        price: 100,
        tradable: null,
        category: 1,
        subCategory: 0
    },
    i401: {
        name: "Divine Inspiration",
        description: "Allows you to upgrade a building from lvl. 9 to lvl. 10, and some buildings to lvl. 11",
        price: 50,
        tradable: null,
        category: 1,
        subCategory: 0
    },
    i402: {
        name: "Divine Providence",
        description: "Allows you to upgrade your Castle from level 10 to 11",
        price: 200,
        tradable: null,
        category: 1,
        subCategory: 0
    },
    i403: {
        name: "Sacred Inspiration",
        description: "Allows you to upgrade your buildings from level 11 to 12",
        price: 55,
        tradable: null,
        category: 1,
        subCategory: 0
    },
    i404: {
        name: "Sacred Providence",
        description: "Allows you to upgrade your Castle from level 11 to 12",
        price: 220,
        tradable: null,
        category: 1,
        subCategory: 0
    },
    i501: {
        name: "Squire's Chest",
        description: "Contains between 1 and 3 Sir Bor's Crests, 1 and 3 Sir Ector's Crests, and 1 and 3 Sir Kay's Crests.",
        price: 90,
        tradable: null,
        category: 5,
        subCategory: 0
    },
    i502: {
        name: "Knight's Chest",
        description: "Contains between 1 and 3 Sir Bedivere's Crests, 1 and 3 Sir Gawain's Crests, and 1 and 3 Sir Percival's Crests.",
        price: 150,
        tradable: null,
        category: 5,
        subCategory: 0
    },
    i503: {
        name: "Lord's Chest",
        description: "Contains between 1 and 3 Sir Galahad's Crests, 1 and 3 Sir Lancelot's Crests, and 1 and 3 King Arthur's Crests.",
        price: 250,
        tradable: null,
        category: 5,
        subCategory: 0
    },
    i504: {
        name: "Fey's Chest",
        description: "Contains between 1 and 3 Morgana's Seals, 1 and 3 Mordred's Seals, and 1 and 3 Stag King's Seals.",
        price: 350,
        tradable: null,
        category: 5,
        subCategory: 0
    },
    i505: {
        name: "Avalon's Chest",
        description: "Contains between 1 and 3 Pendragon Seals, 1 and 3 Lady of the Lake's Seals, and 1 and 3 Merlin's Seals.",
        price: 400,
        tradable: null,
        category: 5,
        subCategory: 0
    },
    i511: {
        name: "Red Knight",
        description: "Grants you a Knight automatically raised to level 10-15 with skills randomly assigned.",
        price: null,
        tradable: null,
        category: 5,
        subCategory: 0
    },
    i512: {
        name: "Blue Knight",
        description: "Grants you a Knight automatically raised to level 16-25 with skills randomly assigned.",
        price: null,
        tradable: null,
        category: 5,
        subCategory: 0
    },
    i513: {
        name: "Black Knight",
        description: "Grants you a Knight automatically raised to level 26-35 with skills randomly assigned.",
        price: null,
        tradable: null,
        category: 5,
        subCategory: 0
    },
    i514: {
        name: "Green Knight",
        description: "Grants you a Knight automatically raised to level 36-50 with skills randomly assigned.",
        price: null,
        tradable: null,
        category: 5,
        subCategory: 0
    },
    i521: {
        name: "Young Volunteers",
        description: "Summons 100-250 Supply Troopers and 100-250 Militiamen.",
        price: null,
        tradable: null,
        category: 3,
        subCategory: 0
    },
    i522: {
        name: "Experienced Volunteers",
        description: "Summons 200-250 Scouts, 200-300 Pikemen, 150-250 Swordsmen, and 100-200 Archers.",
        price: null,
        tradable: null,
        category: 3,
        subCategory: 0
    },
    i523: {
        name: "Veteran Volunteers",
        description: "Summons 100-300 Cavalry, 100-200 Heavy Cavalry, and 200-450 Supply Wagons.",
        price: null,
        tradable: null,
        category: 3,
        subCategory: 0
    },
    i524: {
        name: "Siege Volunteers",
        description: "Summons 100-200 Ballistae, 100-200 Battering Rams, and 150-350 Catapults.",
        price: null,
        tradable: null,
        category: 3,
        subCategory: 0
    },
    i531: {
        name: "Mysterious Bounty",
        description: "Summons 2 bundles of 10,000 Gold, Food, Wood, Stone or Ore for your Kingdom.",
        price: null,
        tradable: null,
        category: 5,
        subCategory: 0
    },
    i598: {
        name: "Wheel Game Direct Play",
        description: "Used to track direct play for the wheel game in KoC, don't display on the frontend",
        price: 25,
        tradable: null,
        category: 0,
        subCategory: 0
    },
    i599: {
        name: "Merlin's Magical Tokens",
        description: "Gives you one chance to randomly win a rare item in Merlin's Magical Boxes.",
        price: 5,
        tradable: null,
        category: 1,
        subCategory: 0
    },
    i601: {
        name: "Sealed Orders",
        description: "Allows you to designate a building to be build or upgraded after your current construction completes.",
        price: null,
        tradable: null,
        category: 7,
        subCategory: 0
    },
    i610: {
        name: "Shifting Stones",
        description: "Rearrange the location of your buildings",
        price: null,
        tradable: null,
        category: 7,
        subCategory: 0
    },
    i711: {
        name: "Court Jester",
        description: "Improves the Food you get when players visit your Court",
        price: 100,
        tradable: null,
        category: 6,
        subCategory: 0
    },
    i721: {
        name: "Hunting Dogs",
        description: "Improves the Wood you get when players visit your Court",
        price: 100,
        tradable: null,
        category: 6,
        subCategory: 0
    },
    i731: {
        name: "Professional Sculptor",
        description: "Improves the Stone you get when players visit your Court",
        price: 100,
        tradable: null,
        category: 6,
        subCategory: 0
    },
    i741: {
        name: "Metallurgist",
        description: "Improves the Ore you get when players visit your Court",
        price: 100,
        tradable: null,
        category: 6,
        subCategory: 0
    },
    i801: {
        name: "Stained Glass Window 1",
        description: "A blue and red heart",
        price: 60,
        tradable: null,
        category: 6,
        subCategory: 800
    },
    i802: {
        name: "Stained Glass Window 2",
        description: "A gold cross",
        price: 60,
        tradable: null,
        category: 6,
        subCategory: 800
    },
    i803: {
        name: "Stained Glass Window 3",
        description: "A green griffon",
        price: 60,
        tradable: null,
        category: 6,
        subCategory: 800
    },
    i804: {
        name: "Stained Glass Window 4",
        description: "An apple tree",
        price: 60,
        tradable: null,
        category: 6,
        subCategory: 800
    },
    i805: {
        name: "Stained Glass Window 5",
        description: "A fire breathing dragon",
        price: 60,
        tradable: null,
        category: 6,
        subCategory: 800
    },
    i811: {
        name: "War Banner 1",
        description: "A coat of arms with crossed weapons",
        price: 50,
        tradable: null,
        category: 6,
        subCategory: 810
    },
    i812: {
        name: "War Banner 2",
        description: "A rearing lion",
        price: 50,
        tradable: null,
        category: 6,
        subCategory: 810
    },
    i813: {
        name: "War Banner 3",
        description: "A fleur-de-lis",
        price: 50,
        tradable: null,
        category: 6,
        subCategory: 810
    },
    i814: {
        name: "War Banner 4",
        description: "A double-headed eagle with laurels",
        price: 50,
        tradable: null,
        category: 6,
        subCategory: 810
    },
    i815: {
        name: "War Banner 5",
        description: "ITEM_TYPE_COURT_DECOR_BANNER5",
        price: null,
        tradable: null,
        category: 4,
        subCategory: 0
    },
    i821: {
        name: "Painting 1",
        description: "A queen in her royal robes",
        price: 50,
        tradable: null,
        category: 6,
        subCategory: 820
    },
    i822: {
        name: "Painting 2",
        description: "A boat on the ocean",
        price: 50,
        tradable: null,
        category: 6,
        subCategory: 820
    },
    i823: {
        name: "Painting 3",
        description: "A roaring dragon",
        price: 50,
        tradable: null,
        category: 6,
        subCategory: 820
    },
    i824: {
        name: "Painting 4",
        description: "A monk and nobleman walking",
        price: 50,
        tradable: null,
        category: 6,
        subCategory: 820
    },
    i825: {
        name: "Painting 5",
        description: "A knight on his steed",
        price: 50,
        tradable: null,
        category: 6,
        subCategory: 820
    },
    i831: {
        name: "Red Curtains",
        description: "Red Curtains to decorate your Court. Will change the banners on some of your City buildings",
        price: 25,
        tradable: null,
        category: 6,
        subCategory: 830
    },
    i832: {
        name: "Blue Curtains",
        description: "Blue Curtains to decorate your Court. Will change the banners on some of your City buildings",
        price: 25,
        tradable: null,
        category: 6,
        subCategory: 830
    },
    i833: {
        name: "Purple Curtains",
        description: "Purple Curtains to decorate your Court. Will change the banners on some of your City buildings",
        price: 25,
        tradable: null,
        category: 6,
        subCategory: 830
    },
    i834: {
        name: "Green Curtains",
        description: "Green Curtains to decorate your Court. Will change the banners on some of your City buildings",
        price: 25,
        tradable: null,
        category: 6,
        subCategory: 830
    },
    i835: {
        name: "Yellow Curtains",
        description: "Yellow Curtains to decorate your Court. Will change the banners on some of your City buildings",
        price: 25,
        tradable: null,
        category: 6,
        subCategory: 830
    },
    i841: {
        name: "Throne 1",
        description: "Small wooden throne",
        price: 20,
        tradable: null,
        category: 6,
        subCategory: 840
    },
    i842: {
        name: "Throne 2",
        description: "Medium wooden throne",
        price: 40,
        tradable: null,
        category: 6,
        subCategory: 840
    },
    i843: {
        name: "Throne 3",
        description: "Large wooden throne",
        price: 60,
        tradable: null,
        category: 6,
        subCategory: 840
    },
    i844: {
        name: "Throne 4",
        description: "Silver throne",
        price: 80,
        tradable: null,
        category: 6,
        subCategory: 840
    },
    i845: {
        name: "Throne 5",
        description: "Gold throne",
        price: 100,
        tradable: null,
        category: 6,
        subCategory: 840
    },
    i851: {
        name: "Weapons Rack 1",
        description: "A small amount of weapons",
        price: 20,
        tradable: null,
        category: 6,
        subCategory: 850
    },
    i852: {
        name: "Weapons Rack 2",
        description: "A small amount of weapons, including swords",
        price: 40,
        tradable: null,
        category: 6,
        subCategory: 850
    },
    i853: {
        name: "Weapons Rack 3",
        description: "A few  weapons",
        price: 60,
        tradable: null,
        category: 6,
        subCategory: 850
    },
    i854: {
        name: "Weapons Rack 4",
        description: "A large cache of weapons",
        price: 80,
        tradable: null,
        category: 6,
        subCategory: 850
    },
    i855: {
        name: "Weapons Rack 5",
        description: "Overflowing weapons racks",
        price: 100,
        tradable: null,
        category: 6,
        subCategory: 850
    },
    i860: {
        name: "USA Flag",
        description: "This flag will appear in your Court and in Chat to show your pride!",
        price: 20,
        tradable: null,
        category: 6,
        subCategory: 860
    },
    i861: {
        name: "United Kingdom Flag",
        description: "This flag will appear in your Court and in Chat to show your pride!",
        price: 20,
        tradable: null,
        category: 6,
        subCategory: 860
    },
    i862: {
        name: "Canada Flag",
        description: "This flag will appear in your Court and in Chat to show your pride!",
        price: 20,
        tradable: null,
        category: 6,
        subCategory: 860
    },
    i863: {
        name: "Australia Flag",
        description: "This flag will appear in your Court and in Chat to show your pride!",
        price: 20,
        tradable: null,
        category: 6,
        subCategory: 860
    },
    i864: {
        name: "Sweden Flag",
        description: "This flag will appear in your Court and in Chat to show your pride!",
        price: 20,
        tradable: null,
        category: 6,
        subCategory: 860
    },
    i865: {
        name: "Denmark Flag",
        description: "This flag will appear in your Court and in Chat to show your pride!",
        price: 20,
        tradable: null,
        category: 6,
        subCategory: 860
    },
    i866: {
        name: "Norway Flag",
        description: "This flag will appear in your Court and in Chat to show your pride!",
        price: 20,
        tradable: null,
        category: 6,
        subCategory: 860
    },
    i867: {
        name: "Italy Flag",
        description: "This flag will appear in your Court and in Chat to show your pride!",
        price: 20,
        tradable: null,
        category: 6,
        subCategory: 860
    },
    i868: {
        name: "Germany Flag",
        description: "This flag will appear in your Court and in Chat to show your pride!",
        price: 20,
        tradable: null,
        category: 6,
        subCategory: 860
    },
    i869: {
        name: "France Flag",
        description: "This flag will appear in your Court and in Chat to show your pride!",
        price: 20,
        tradable: null,
        category: 6,
        subCategory: 860
    },
    i870: {
        name: "Austria Flag",
        description: "This flag will appear in your Court and in Chat to show your pride!",
        price: 20,
        tradable: null,
        category: 6,
        subCategory: 860
    },
    i871: {
        name: "Greece Flag",
        description: "This flag will appear in your Court and in Chat to show your pride!",
        price: 20,
        tradable: null,
        category: 6,
        subCategory: 860
    },
    i872: {
        name: "Ireland Flag",
        description: "This flag will appear in your Court and in Chat to show your pride!",
        price: 20,
        tradable: null,
        category: 6,
        subCategory: 860
    },
    i873: {
        name: "Brazil Flag",
        description: "This flag will appear in your Court and in Chat to show your pride!",
        price: 20,
        tradable: null,
        category: 6,
        subCategory: 860
    },
    i874: {
        name: "Switzerland Flag",
        description: "This flag will appear in your Court and in Chat to show your pride!",
        price: 20,
        tradable: null,
        category: 6,
        subCategory: 860
    },
    i875: {
        name: "Finland Flag",
        description: "This flag will appear in your Court and in Chat to show your pride!",
        price: 20,
        tradable: null,
        category: 6,
        subCategory: 860
    },
    i876: {
        name: "Netherlands Flag",
        description: "This flag will appear in your Court and in Chat to show your pride!",
        price: 20,
        tradable: null,
        category: 6,
        subCategory: 860
    },
    i877: {
        name: "China Flag",
        description: "This flag will appear in your Court and in Chat to show your pride!",
        price: 20,
        tradable: null,
        category: 6,
        subCategory: 860
    },
    i878: {
        name: "Russia Flag",
        description: "This flag will appear in your Court and in Chat to show your pride!",
        price: 20,
        tradable: null,
        category: 6,
        subCategory: 860
    },
    i879: {
        name: "South Korea Flag",
        description: "This flag will appear in your Court and in Chat to show your pride!",
        price: 20,
        tradable: null,
        category: 6,
        subCategory: 860
    },
    i880: {
        name: "Pirate Flag",
        description: "Yarrr! This flag will appear in your Court and in Chat to show your Pirate pride!",
        price: 20,
        tradable: null,
        category: 6,
        subCategory: 860
    },
    i881: {
        name: "Taiwan (R.O.C.) Flag",
        description: "This flag will appear in your Court and in Chat to show your pride!",
        price: 20,
        tradable: null,
        category: 6,
        subCategory: 860
    },
    i882: {
        name: "Japan Flag",
        description: "This flag will appear in your Court and in Chat to show your pride!",
        price: 20,
        tradable: null,
        category: 6,
        subCategory: 860
    },
    i883: {
        name: "Spain Flag",
        description: "This flag will appear in your Court and in Chat to show your pride!",
        price: 20,
        tradable: null,
        category: 6,
        subCategory: 860
    },
    i884: {
        name: "Turkey Flag",
        description: "This flag will appear in your Court and in Chat to show your pride!",
        price: 20,
        tradable: null,
        category: 6,
        subCategory: 860
    },
    i885: {
        name: "England Flag",
        description: "This flag will appear in your Court and in Chat to show your pride!",
        price: 20,
        tradable: null,
        category: 6,
        subCategory: 860
    },
    i886: {
        name: "Scotland Flag",
        description: "This flag will appear in your Court and in Chat to show your pride!",
        price: 20,
        tradable: null,
        category: 6,
        subCategory: 860
    },
    i887: {
        name: "Wales Flag",
        description: "This flag will appear in your Court and in Chat to show your pride!",
        price: 20,
        tradable: null,
        category: 6,
        subCategory: 860
    },
    i888: {
        name: "Philippines Flag",
        description: "This flag will appear in your Court and in Chat to show your pride!",
        price: 20,
        tradable: null,
        category: 6,
        subCategory: 860
    },
    i889: {
        name: "Mexico Flag",
        description: "This flag will appear in your Court and in Chat to show your pride!",
        price: 20,
        tradable: null,
        category: 6,
        subCategory: 860
    },
    i890: {
        name: "Banner of Darkness",
        description: "This flag will appear in your Court and in Chat to show your pride!",
        price: 20,
        tradable: null,
        category: 6,
        subCategory: 860
    },
    i891: {
        name: "Hallowed Curtains",
        description: "Hallowed Curtains to decorate your Court. Will change the banners on your castle.",
        price: 25,
        tradable: null,
        category: 6,
        subCategory: 830
    },
    i892: {
        name: "Flag of Giving",
        description: "This flag will appear in your Couty and in Chat to show your pride",
        price: null,
        tradable: null,
        category: 6,
        subCategory: 860
    },
    i893: {
        name: "Fey Flag",
        description: "The Fey are coming to Camelot.  Are they Friend or Foe?",
        price: 20,
        tradable: null,
        category: 6,
        subCategory: 860
    },
    i901: {
        name: "Dove of Peace",
        description: "Grants your city 12 hours of peacetime. While at peace, you cannot attack or be attacked. You cannot use this item if you are currently being attacked or your troops are currently marching.",
        price: 30,
        tradable: null,
        category: 3,
        subCategory: 0
    },
    i902: {
        name: "Vacation Mode 3 days",
        description: "For a limited time only! Need to take a break? Deploy 3 days of vacation mode. Grants all your cities 3 days of peacetime, 50% reduction of troop upkeep, and deploys the Mists of Avalon.  Vacation Mode will end if you send out any type of march.",
        price: 445,
        tradable: null,
        category: 1,
        subCategory: 0
    },
    i903: {
        name: "Vacation Mode 7 days",
        description: "For a limited time only! Deploy 7 days of vacation mode. Grants all your cities 7 days of peacetime, 50% reduction of troop upkeep, and deploys the Mists of Avalon. Vacation Mode will end if you send out any type of march.",
        price: 970,
        tradable: null,
        category: 1,
        subCategory: 0
    },
    i911: {
        name: "Portal of Refuge",
        description: "Teleport your city to another location on the Map at random and places your Cities under Mists of Avalon for 7 days.",
        price: 30,
        tradable: null,
        category: 1,
        subCategory: 0
    },
    i912: {
        name: "Portal of Order",
        description: "Teleport your city to a specific location on the Map and places your Cities under Mists of Avalon for 7 days",
        price: 90,
        tradable: null,
        category: 1,
        subCategory: 0
    },
    i913: {
        name: "reserve for rome",
        description: "reserv for rome",
        price: null,
        tradable: null,
        category: 0,
        subCategory: 0
    },
    i914: {
        name: "no scout",
        description: "reserved by Rome",
        price: null,
        tradable: null,
        category: 0,
        subCategory: 0
    },
    i922: {
        name: "Merlin's Cloak",
        description: "Change your Lord or Lady name.",
        price: 90,
        tradable: null,
        category: 1,
        subCategory: 0
    },
    i923: {
        name: "Renaming Celebration",
        description: "Change the name of one of your Cities",
        price: 10,
        tradable: null,
        category: 1,
        subCategory: 0
    },
    i924: {
        name: "Merlin's Escape",
        description: "Teleport your city to a specific location and change your Lord or Lady name.",
        price: 150,
        tradable: null,
        category: 1,
        subCategory: 0
    },
    i925: {
        name: "diety changer",
        description: "RESERVED BY GOR",
        price: null,
        tradable: null,
        category: 0,
        subCategory: 0
    },
    i926: {
        name: "diety changer 2",
        description: "RESERVED BY GOR",
        price: null,
        tradable: null,
        category: 0,
        subCategory: 0
    },
    i931: {
        name: "Aura of Command",
        description: "Increases the maximum number of troops by 25% for one March.",
        price: 30,
        tradable: null,
        category: 3,
        subCategory: 0
    },
    i932: {
        name: "Aura Of Conquest",
        description: "Increases the maximum number of troops by 50% for one March.",
        price: 75,
        tradable: null,
        category: 3,
        subCategory: 0
    },
    i941: {
        name: "Fountain of Youth",
        description: "Allows you to re-allocate all of a single Knight's skill points gained since level 1. One Fountain of Youth is needed for every 10 levels.",
        price: 20,
        tradable: null,
        category: 1,
        subCategory: 0
    },
    i942: {
        name: "Fountain of Youth x5",
        description: "Allows you to re-allocate all of a single Knight's skill points gained since level 1. One Fountain of Youth is needed for every 10 levels.",
        price: 90,
        tradable: null,
        category: 5,
        subCategory: 0
    },
    i943: {
        name: "energy recharger",
        description: "RESERVED BY GOR",
        price: null,
        tradable: null,
        category: 0,
        subCategory: 0
    },
    i1001: {
        name: "1,000 Gold",
        description: "Deposits1,000 Gold into your city.",
        price: null,
        tradable: null,
        category: 4,
        subCategory: 0
    },
    i1002: {
        name: "5,000 Gold",
        description: "Deposits 5,000 Gold into your city.",
        price: null,
        tradable: null,
        category: 4,
        subCategory: 0
    },
    i1003: {
        name: "10,000 Gold",
        description: "Deposits 10,000 Gold into your city.",
        price: null,
        tradable: null,
        category: 4,
        subCategory: 0
    },
    i1004: {
        name: "20,000 Gold",
        description: "Deposits 20,000 Gold into your city.",
        price: null,
        tradable: null,
        category: 4,
        subCategory: 0
    },
    i1005: {
        name: "40,000 Gold",
        description: "Deposits 40,000 Gold into your city.",
        price: null,
        tradable: null,
        category: 4,
        subCategory: 0
    },
    i1006: {
        name: "60,000 Gold",
        description: "Deposits 60,000 Gold into your city.",
        price: null,
        tradable: null,
        category: 4,
        subCategory: 0
    },
    i1007: {
        name: "80,000 Gold",
        description: "Deposits 80,000 Gold into your city.",
        price: null,
        tradable: null,
        category: 4,
        subCategory: 0
    },
    i1008: {
        name: "100,000 Gold",
        description: "Deposits 100,000 Gold into your city.",
        price: null,
        tradable: null,
        category: 4,
        subCategory: 0
    },
    i1011: {
        name: "1,000 Food",
        description: "Deposits 1,000 Food into your city.",
        price: null,
        tradable: null,
        category: 4,
        subCategory: 0
    },
    i1012: {
        name: "5,000 Food",
        description: "Deposits 5,000 Food into your city.",
        price: null,
        tradable: null,
        category: 4,
        subCategory: 0
    },
    i1013: {
        name: "10,000 Food",
        description: "Deposits 10,000 Food into your city.",
        price: null,
        tradable: null,
        category: 4,
        subCategory: 0
    },
    i1014: {
        name: "20,000 Food",
        description: "Deposits 20,000 Food into your city.",
        price: 6,
        tradable: null,
        category: 4,
        subCategory: 0
    },
    i1015: {
        name: "40,000 Food",
        description: "Deposits 40,000 Food into your city.",
        price: 10,
        tradable: null,
        category: 4,
        subCategory: 0
    },
    i1016: {
        name: "60,000 Food",
        description: "Deposits 60,000 Food into your city.",
        price: 18,
        tradable: null,
        category: 4,
        subCategory: 0
    },
    i1017: {
        name: "80,000 Food",
        description: "Deposits 80,000 Food into your city.",
        price: 22,
        tradable: null,
        category: 4,
        subCategory: 0
    },
    i1018: {
        name: "100,000 Food",
        description: "Deposits 100,000 Food into your city.",
        price: 25,
        tradable: null,
        category: 4,
        subCategory: 0
    },
    i1021: {
        name: "1,000 Wood",
        description: "Deposits 1,000 Wood into your city.",
        price: null,
        tradable: null,
        category: 4,
        subCategory: 0
    },
    i1022: {
        name: "5,000 Wood",
        description: "Deposits 5,000 Wood into your city.",
        price: null,
        tradable: null,
        category: 4,
        subCategory: 0
    },
    i1023: {
        name: "10,000 Wood",
        description: "Deposits 10,000 Wood into your city.",
        price: null,
        tradable: null,
        category: 4,
        subCategory: 0
    },
    i1024: {
        name: "20,000 Wood",
        description: "Deposits 20,000 Wood into your city.",
        price: 6,
        tradable: null,
        category: 4,
        subCategory: 0
    },
    i1025: {
        name: "40,000 Wood",
        description: "Deposits 40,000 Wood into your city.",
        price: 10,
        tradable: null,
        category: 4,
        subCategory: 0
    },
    i1026: {
        name: "60,000 Wood",
        description: "Deposits 60,000 Wood into your city.",
        price: 18,
        tradable: null,
        category: 4,
        subCategory: 0
    },
    i1027: {
        name: "80,000 Wood",
        description: "Deposits 80,000 Wood into your city.",
        price: 22,
        tradable: null,
        category: 4,
        subCategory: 0
    },
    i1028: {
        name: "100,000 Wood",
        description: "Deposits 100,000 Wood into your city.",
        price: 25,
        tradable: null,
        category: 4,
        subCategory: 0
    },
    i1031: {
        name: "1,000 Stone",
        description: "Deposits 1,000 Stone into your city.",
        price: null,
        tradable: null,
        category: 4,
        subCategory: 0
    },
    i1032: {
        name: "5,000 Stone",
        description: "Deposits 5,000 Stone into your city.",
        price: null,
        tradable: null,
        category: 4,
        subCategory: 0
    },
    i1033: {
        name: "10,000 Stone",
        description: "Deposits 10,000 Stone into your city.",
        price: null,
        tradable: null,
        category: 4,
        subCategory: 0
    },
    i1034: {
        name: "20,000 Stone",
        description: "Deposits 20,000 Stone into your city.",
        price: 6,
        tradable: null,
        category: 4,
        subCategory: 0
    },
    i1035: {
        name: "40,000 Stone",
        description: "Deposits 40,000 Stone into your city.",
        price: 10,
        tradable: null,
        category: 4,
        subCategory: 0
    },
    i1036: {
        name: "60,000 Stone",
        description: "Deposits 60,000 Stone into your city.",
        price: 18,
        tradable: null,
        category: 4,
        subCategory: 0
    },
    i1037: {
        name: "80,000 Stone",
        description: "Deposits 80,000 Stone into your city.",
        price: 22,
        tradable: null,
        category: 4,
        subCategory: 0
    },
    i1038: {
        name: "100,000 Stone",
        description: "Deposits 100,000 Stone into your city.",
        price: 25,
        tradable: null,
        category: 4,
        subCategory: 0
    },
    i1041: {
        name: "1,000 Ore",
        description: "Deposits 1,000 Ore into your city.",
        price: null,
        tradable: null,
        category: 4,
        subCategory: 0
    },
    i1042: {
        name: "5,000 Ore",
        description: "Deposits 5,000 Ore into your city.",
        price: null,
        tradable: null,
        category: 4,
        subCategory: 0
    },
    i1043: {
        name: "10,000 Ore",
        description: "Deposits 10,000 Ore into your city.",
        price: null,
        tradable: null,
        category: 4,
        subCategory: 0
    },
    i1044: {
        name: "20,000 Ore",
        description: "Deposits 20,000 Ore into your city.",
        price: 6,
        tradable: null,
        category: 4,
        subCategory: 0
    },
    i1045: {
        name: "40,000 Ore",
        description: "Deposits 40,000 Ore into your city.",
        price: 10,
        tradable: null,
        category: 4,
        subCategory: 0
    },
    i1046: {
        name: "60,000 Ore",
        description: "Deposits 60,000 Ore into your city.",
        price: 18,
        tradable: null,
        category: 4,
        subCategory: 0
    },
    i1047: {
        name: "80,000 Ore",
        description: "Deposits 80,000 Ore into your city.",
        price: 22,
        tradable: null,
        category: 4,
        subCategory: 0
    },
    i1048: {
        name: "100,000 Ore",
        description: "Deposits 100,000 Ore into your city.",
        price: 25,
        tradable: null,
        category: 4,
        subCategory: 0
    },
    i1061: {
        name: "N/A",
        description: "ITEM_TYPE_INSTANT_GEM",
        price: null,
        tradable: null,
        category: 0,
        subCategory: 0
    },
    i1062: {
        name: "100 Gems",
        description: "100 Gems",
        price: 100,
        tradable: null,
        category: 0,
        subCategory: 0
    },
    i1101: {
        name: "Sir Bor's Crest",
        description: "Increases your Knight's loyalty by 5",
        price: null,
        tradable: null,
        category: 1,
        subCategory: 0
    },
    i1102: {
        name: "Sir Ector's Crest",
        description: "Increases your Knight's loyalty by 10",
        price: null,
        tradable: null,
        category: 1,
        subCategory: 0
    },
    i1103: {
        name: "Sir Kay's Crest",
        description: "Increases your Knight's loyalty by 15",
        price: null,
        tradable: null,
        category: 1,
        subCategory: 0
    },
    i1104: {
        name: "Sir Bedivere's Crest",
        description: "Increases your Knight's loyalty by 20",
        price: null,
        tradable: null,
        category: 1,
        subCategory: 0
    },
    i1105: {
        name: "Sir Gawain's Crest",
        description: "Increases your Knight's loyalty by 25",
        price: null,
        tradable: null,
        category: 1,
        subCategory: 0
    },
    i1106: {
        name: "Sir Percival's Crest",
        description: "Increases your Knight's loyalty by 30",
        price: null,
        tradable: null,
        category: 1,
        subCategory: 0
    },
    i1107: {
        name: "Sir Galahad's Crest",
        description: "Increases your Knight's loyalty by 40",
        price: null,
        tradable: null,
        category: 1,
        subCategory: 0
    },
    i1108: {
        name: "Sir Lancelot's Crest",
        description: "Increases your Knight's loyalty by 50",
        price: null,
        tradable: null,
        category: 1,
        subCategory: 0
    },
    i1109: {
        name: "King Arthur's Crest",
        description: "Increases your Knight's loyalty by 60",
        price: null,
        tradable: null,
        category: 1,
        subCategory: 0
    },
    i1110: {
        name: "Morgana's Seal",
        description: "Morgana's Seal",
        price: null,
        tradable: null,
        category: 1,
        subCategory: 0
    },
    i1111: {
        name: "Mordred's Seal",
        description: "Mordred's Seal",
        price: null,
        tradable: null,
        category: 1,
        subCategory: 0
    },
    i1112: {
        name: "Stag King's Seal",
        description: "Stag King's Seal",
        price: null,
        tradable: null,
        category: 1,
        subCategory: 0
    },
    i1113: {
        name: "Pendragon Seal",
        description: "Pendragon Seal",
        price: null,
        tradable: null,
        category: 1,
        subCategory: 0
    },
    i1114: {
        name: "Lady of the Lake's Seal",
        description: "Lady of the Lake's Seal",
        price: null,
        tradable: null,
        category: 1,
        subCategory: 0
    },
    i1115: {
        name: "Merlin's Seal",
        description: "Merlin's Seal",
        price: null,
        tradable: null,
        category: 1,
        subCategory: 0
    },
    i1202: {
        name: "Second City Deed",
        description: "Required to build a Second City.",
        price: 150,
        tradable: null,
        category: 6,
        subCategory: 0
    },
    i1203: {
        name: "Third City Deed",
        description: "Required to build a Third City.",
        price: 250,
        tradable: null,
        category: 6,
        subCategory: 0
    },
    i1204: {
        name: "Fourth City Deed",
        description: "Required to build a Fourth City.",
        price: 500,
        tradable: null,
        category: 6,
        subCategory: 0
    },
    i1205: {
        name: "Fifth City Deed",
        description: "Required to build a Fifth City.",
        price: 750,
        tradable: null,
        category: 6,
        subCategory: 0
    },
    i1206: {
        name: "Sixth City Deed",
        description: "Required to build a Sixth City.",
        price: 850,
        tradable: null,
        category: 6,
        subCategory: 0
    },
    i1207: {
        name: "Seventh City Deed",
        description: "Required to build a Seventh City.",
        price: 900,
        tradable: null,
        category: 6,
        subCategory: 0
    },
    i1208: {
        name: "Eighth City Deed",
        description: "Required to build a Eighth City.",
        price: null,
        tradable: null,
        category: 6,
        subCategory: 0
    },
    i1209: {
        name: "Ninth City Deed",
        description: "A deed that allows you to build a Ninth city. This item does not get consumed.",
        price: null,
        tradable: null,
        category: 6,
        subCategory: 0
    },
    i1210: {
        name: "Tenth City Deed",
        description: "A deed that allows you to build a Tenth city. This item does not get consumed.",
        price: null,
        tradable: null,
        category: 6,
        subCategory: 0
    },
    i1300: {
        name: "200 Supply Troops",
        description: "Summons 200 Supply Troops",
        price: null,
        tradable: null,
        category: 3,
        subCategory: 0
    },
    i1301: {
        name: "1000 Supply Troops",
        description: "Summons 1,000 Supply Troops",
        price: null,
        tradable: null,
        category: 3,
        subCategory: 0
    },
    i1310: {
        name: "200 Militiamen",
        description: "Summons 200 Miltiamen",
        price: null,
        tradable: null,
        category: 3,
        subCategory: 0
    },
    i1311: {
        name: "1000 Militiamen",
        description: "Summons 1,000 Miltiamen",
        price: null,
        tradable: null,
        category: 3,
        subCategory: 0
    },
    i1320: {
        name: "200 Scouts",
        description: "Summons 200 Scouts",
        price: null,
        tradable: null,
        category: 3,
        subCategory: 0
    },
    i1321: {
        name: "1000 Scouts",
        description: "Summons 1,000 Scouts",
        price: null,
        tradable: null,
        category: 3,
        subCategory: 0
    },
    i1330: {
        name: "200 Pikemen",
        description: "Summons 200 Pikemen",
        price: null,
        tradable: null,
        category: 3,
        subCategory: 0
    },
    i1331: {
        name: "1000 Pikemen",
        description: "Summons 1,000 Pikemen",
        price: null,
        tradable: null,
        category: 3,
        subCategory: 0
    },
    i1340: {
        name: "150 Swordsmen",
        description: "Summons 150 Swordsmen",
        price: null,
        tradable: null,
        category: 3,
        subCategory: 0
    },
    i1341: {
        name: "750 Swordsmen",
        description: "Summons 750 Swordsmen",
        price: null,
        tradable: null,
        category: 3,
        subCategory: 0
    },
    i1350: {
        name: "150 Archers",
        description: "Summons 150 Archers",
        price: null,
        tradable: null,
        category: 3,
        subCategory: 0
    },
    i1351: {
        name: "750 Archers",
        description: "Summons 750 Archers",
        price: null,
        tradable: null,
        category: 3,
        subCategory: 0
    },
    i1360: {
        name: "150 Calvary",
        description: "Summons 150 Cavlary",
        price: null,
        tradable: null,
        category: 3,
        subCategory: 0
    },
    i1361: {
        name: "750 Calvary",
        description: "Summons 750 Calvary",
        price: null,
        tradable: null,
        category: 3,
        subCategory: 0
    },
    i1370: {
        name: "100 Heavy Calvary",
        description: "Summons 100 Heavy Cavlary",
        price: null,
        tradable: null,
        category: 3,
        subCategory: 0
    },
    i1371: {
        name: "500 Heavy Calvary",
        description: "Summons 500 Heavy Calvary",
        price: null,
        tradable: null,
        category: 3,
        subCategory: 0
    },
    i1380: {
        name: "100 Supply Wagons",
        description: "Summons 100 Supply Wagons",
        price: null,
        tradable: null,
        category: 3,
        subCategory: 0
    },
    i1381: {
        name: "500 SupplyWagons",
        description: "Summons 500 Supply Wagons",
        price: null,
        tradable: null,
        category: 3,
        subCategory: 0
    },
    i1390: {
        name: "100 Ballistae",
        description: "Summons 100 Ballistae",
        price: null,
        tradable: null,
        category: 3,
        subCategory: 0
    },
    i1391: {
        name: "500 Ballistae",
        description: "Summons 500 Ballistae",
        price: null,
        tradable: null,
        category: 3,
        subCategory: 0
    },
    i1400: {
        name: "50 Battering Rams",
        description: "Summons 50 Battering Rams",
        price: null,
        tradable: null,
        category: 3,
        subCategory: 0
    },
    i1401: {
        name: "200 Battering Rams",
        description: "Summons 200 Battering Rams",
        price: null,
        tradable: null,
        category: 3,
        subCategory: 0
    },
    i1410: {
        name: "50 Catapults",
        description: "Summons 50 Catapults",
        price: null,
        tradable: null,
        category: 3,
        subCategory: 0
    },
    i1411: {
        name: "200 Catapults",
        description: "Summons 200 Catapults",
        price: null,
        tradable: null,
        category: 3,
        subCategory: 0
    },
    i2000: {
        name: "Renaming Ritual",
        description: "Change the name of your Guardian.",
        price: 10,
        tradable: null,
        category: 1,
        subCategory: 0
    },
    i2001: {
        name: "Elemental Rebirth",
        description: "Change the current Guardian, but maintain the current level",
        price: 10,
        tradable: null,
        category: 1,
        subCategory: 0
    },
    i2002: {
        name: "Obsidian Rune",
        description: "This rune allows you to summon the Iron Indrik to your city.  The Iron Indrik boosts your Ore production, \tcapacity and increases the Attack attribute of your marching troops.",
        price: 50,
        tradable: null,
        category: 1,
        subCategory: 0
    },
    i2003: {
        name: "Deluge Rune",
        description: "This rune allows you to summon the Viand Asherah to your city.  The Viand Asherah boosts your Food production and capacity.",
        price: 200,
        tradable: null,
        category: 1,
        subCategory: 0
    },
    i10000: {
        name: "Beginner's Package",
        description: "contains all the items needed to get your City started",
        price: null,
        tradable: null,
        category: 5,
        subCategory: 0
    },
    i10001: {
        name: "Page's Package.",
        description: "contains over 230 Gems worth of items to grow your City!",
        price: null,
        tradable: null,
        category: 5,
        subCategory: 0
    },
    i10002: {
        name: "Squire's Package.",
        description: "contains almost 350 Gems worth of items to grow your City!",
        price: null,
        tradable: null,
        category: 5,
        subCategory: 0
    },
    i10003: {
        name: "Knight's Package.",
        description: "contains over 750 Gems worth of items to grow your City!",
        price: null,
        tradable: null,
        category: 5,
        subCategory: 0
    },
    i10004: {
        name: "Harvest Gift",
        description: "Arthur has rewarded your contribution with a gift of his own to help you this Harvest Season.",
        price: null,
        tradable: null,
        category: 5,
        subCategory: 0
    },
    i10005: {
        name: "Harvest Prize",
        description: "Arthur has rewarded your contribution with a prize to help you this Harvest Season.",
        price: null,
        tradable: null,
        category: 5,
        subCategory: 0
    },
    i10006: {
        name: "Harvest Bounty",
        description: "Arthur has rewarded your generous contribution with a package to ensure a bountiful Harvest Season.",
        price: null,
        tradable: null,
        category: 5,
        subCategory: 0
    },
    i10007: {
        name: "Get Me Out of Here!",
        description: "For a quick escape, nothing beats Portals of Refuge and Doves of Peace. Contains: x2 Portal of Refuge, x2 Dove of Peace",
        price: 100,
        tradable: null,
        category: 5,
        subCategory: 0
    },
    i10008: {
        name: "Gaia's Bounty",
        description: "A collection of items sure to bestow Gaia's blessing upon your Resources. Contains: x5 Harvest Prayer, x5 Druidic Blessing, x5 Gnomish Stone Cutter, x5 Dwarven Mining Tools",
        price: 120,
        tradable: null,
        category: 5,
        subCategory: 0
    },
    i10009: {
        name: "Divine Ascension",
        description: "Let the Divine light shine upon your powerful City. Contains: x5 Divine Inspiration",
        price: 200,
        tradable: null,
        category: 5,
        subCategory: 0
    },
    i10010: {
        name: "Bountiful Season",
        description: "Increase your Resources for an entire fortnight! Contains: x2 Harvest Sacrifice, x2 Druidic Ceremony, x2 Gnomish Quarrying Team, x2 Dwarven Assistance",
        price: 340,
        tradable: null,
        category: 5,
        subCategory: 0
    },
    i10011: {
        name: "Magical Restoration",
        description: "Sometimes the only way to build up, is to first tear down. Dragon's Stomps and many Hourglasses are available here. Contains: x5 Dragon's Stomp, x10 Squire's Hourglass, x5 Knight's Hourglass, x5 Guinevere's Hourglass, x5 Morgana's Hourglass, x3 Arthur's Hourglass, x2 Merlin's Hourglass",
        price: 450,
        tradable: null,
        category: 5,
        subCategory: 0
    },
    i10012: {
        name: "Ice Storm Battle Chest",
        description: "This package contains some of Arthur's favorite items for the Winter Battle Season",
        price: null,
        tradable: null,
        category: 5,
        subCategory: 0
    },
    i10013: {
        name: "Frost Battle Chest",
        description: "This package contains some useful items for the Winter Battle Season",
        price: null,
        tradable: null,
        category: 5,
        subCategory: 0
    },
    i10014: {
        name: "Blizzard Battle Chest",
        description: "This package contains some of Arthur's most treasured items for the Winter Battle Season",
        price: null,
        tradable: null,
        category: 5,
        subCategory: 0
    },
    i10015: {
        name: "Page's Package",
        description: "This Package contains over 230 Gems worth of items to grow your City!",
        price: null,
        tradable: null,
        category: 5,
        subCategory: 0
    },
    i10016: {
        name: "Squire's Package",
        description: "This Package contains almost 350 Gems worth of items to grow your City!",
        price: null,
        tradable: null,
        category: 5,
        subCategory: 0
    },
    i10017: {
        name: "Knight's Package",
        description: "This Package contains over 750 Gems worth of items to grow your City!",
        price: null,
        tradable: null,
        category: 5,
        subCategory: 0
    },
    i10018: {
        name: "Haitian Relief Package",
        description: "100% of proceeds to be donated to the American Red Cross Haiti Relief and Development Fund. Includes 1 Young  Volunteers, 2 Merlin's Magical Tokens, and 5,000 of each Resource",
        price: null,
        tradable: null,
        category: 5,
        subCategory: 0
    },
    i10019: {
        name: "Offering of Affection",
        description: "A token of love that can be gifted to another player. Contains: X1 Rose of Charisma, X1 Dove of Peace, x1 Day of Prosperity, x1 Fountain of Youth, x1 Red Curtains",
        price: null,
        tradable: 1,
        category: 5,
        subCategory: 0
    },
    i10020: {
        name: "New City Chest",
        description: "A gift from Merlin to start building a mighty City",
        price: null,
        tradable: null,
        category: 5,
        subCategory: 0
    },
    i10021: {
        name: "Potion of Mist",
        description: "Covers your cities in the Mists of Avalon for one week; under the cover of Mists, your cities are harder to identify, but can still be attacked. Attacking players will clear the Mists from your cities.",
        price: 10,
        tradable: null,
        category: 1,
        subCategory: 0
    },
    i10022: {
        name: "Inactive Resource Chest",
        description: "Contains 1,000 of each Resource",
        price: null,
        tradable: null,
        category: 5,
        subCategory: 0
    },
    i10023: {
        name: "5th City Package",
        description: "Build up your 5th city faster!  Contains 5th city deed, x5 Divine Hourglass, x2 Knights Hourglass, x1 Merlin's Magical Token",
        price: 1250,
        tradable: null,
        category: 5,
        subCategory: 0
    },
    i10024: {
        name: "Wages of War",
        description: "Build your army to conquer your foes.  Contains x3 Dove of Peace, x3 Lancelot's Tutelage, x1 Horn of Majesty, x1 Divine Inspiration",
        price: null,
        tradable: null,
        category: 5,
        subCategory: 0
    },
    i10026: {
        name: "Chest of Charity",
        description: "Help those in need. 100% of proceeds will be donated to the Child\u2019s Play charity.  Contains x2 Merlin's Magical Token, x1 40,000 Ore, x1 Young Volunteers",
        price: 30,
        tradable: null,
        category: 5,
        subCategory: 0
    },
    i10027: {
        name: "6th City Package",
        description: "Build up your 5th city faster!  Contains x1 6th city deed, x1 Blue Eagle Wings, x1 Reinforced Bags, x1 Fey Flag, x1 Potions of Mist, x1 Divine Hourglass, x1 Portal of Order",
        price: 1080,
        tradable: null,
        category: 5,
        subCategory: 0
    },
    i10028: {
        name: "Call to Arms",
        description: "For a limited time only! Summons an army of over 2,000 troops to aid you in battle, including catapults and a random assortment of other units.",
        price: 350,
        tradable: null,
        category: 3,
        subCategory: 100
    },
    i10029: {
        name: "Mystery Chest",
        description: "Take a chance to obtain a powerful item.  You can win a Divine Inspiration, Horn of Bounty, Divine Hourglass or one of many other great items.",
        price: 35,
        tradable: null,
        category: 5,
        subCategory: 100
    },
    i10030: {
        name: "7th City Package",
        description: "For a limited time only! Be the first to get a 7th city and 2 NEW and EXCLUSIVE items! Contains x1 7th City Deed, x1 Blood Fury, x1 Ironskin, x1 Potion of Mist, x1 Portal of Order",
        price: 1080,
        tradable: null,
        category: 5,
        subCategory: 0
    },
    i10031: {
        name: "Chest of Order",
        description: "Establish order in your Kingdom: x3 Portal of Order",
        price: 240,
        tradable: null,
        category: 5,
        subCategory: 0
    },
    i10032: {
        name: "Divine Evocation",
        description: "Light up the Kingdom by building your cities to their maximum potential! Contains x1 Divine Providence, x2 Divine Inspirations, and x3 Divine Hourglasses.",
        price: 600,
        tradable: null,
        category: 5,
        subCategory: 0
    }
};
var shopOrder = [505, 599, 10021, 10029, 401, 911, 912, 924, 361, 362, 363, 231, 923, 355, 221, 922, 351, 941, 1, 211, 241, 2, 3, 4, 5, 6, 7, 8, 10, 9, 26, 49, 276, 277, 278, 273, 274, 275, 261, 262, 271, 272, 55, 57, 931, 901, 1015, 1025, 1035, 1045, 101, 102, 111, 112, 121, 122, 131, 132, 141, 142, 501, 502, 503, 504, 10023, 10027, 942, 10007, 10008, 10009, 10010, 10011, 1202, 1203, 1204, 1205, 1206, 711, 721, 731, 741, 801, 802, 803, 804, 805, 811, 812, 813, 814, 821, 822, 823, 824, 825, 831, 832, 833, 834, 835, 841, 842, 843, 844, 845, 851, 852, 853, 854, 855, 893, 860, 861, 885, 886, 887, 888, 889, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884];
var questlist = {
    q1002: {
        heading: "Build Your City",
        category: "City Expansion",
        name: "Castle Upgrade",
        preferredorder: "18",
        prerequisite: "1042",
        description: "Your City is growing in stature, and you need a Castle that reflects your new power! Upgrade your Castle to be able to upgrade your other buildings to a higher level. This is also a great time to test out using Speed Ups! Use your Squire&#39;s or Knight&#39;s Hourglass to reduce the time it takes to upgrade your Castle.",
        objective: ["1", "0", 2],
        reward: [
            [0, 2500, 12000, 5500, 2500, 0],
            [],
            [
                [2, 1]
            ],
            [0, 0, 0]
        ]
    },
    q1003: {
        heading: "Build Your City",
        category: "City Expansion",
        name: "Castle Upgrade",
        preferredorder: "35",
        prerequisite: "1002",
        description: "Your City is growing in stature, and you need a Castle that reflects your new power! Upgrade your Castle to be able to upgrade your other buildings to a higher level, open more Fields, and control more Wildernesses",
        objective: ["1", "0", 3],
        reward: [
            [0, 5000, 13000, 11000, 5000, 0],
            [],
            [],
            [0, 0, 0]
        ]
    },
    q1004: {
        heading: "Build Your City",
        category: "City Expansion",
        name: "Castle Upgrade",
        preferredorder: "52",
        prerequisite: "1003",
        description: "Your City is growing in stature, and you need a Castle that reflects your new power! Upgrade your Castle to be able to upgrade your other buildings to a higher level, open more Fields, and control more Wildernesses",
        objective: ["1", "0", 4],
        reward: [
            [0, 10000, 26000, 22000, 10000, 0],
            [],
            [],
            [0, 0, 0]
        ]
    },
    q1005: {
        heading: "Build Your City",
        category: "City Expansion",
        name: "Castle Upgrade",
        preferredorder: "61",
        prerequisite: "1004",
        description: "Your City is growing in stature, and you need a Castle that reflects your new power! Upgrade your Castle to be able to upgrade your other buildings to a higher level, open more Fields, and control more Wildernesses",
        objective: ["1", "0", 5],
        reward: [
            [0, 20000, 50000, 50000, 20000, 0],
            [],
            [],
            [0, 0, 0]
        ]
    },
    q1006: {
        heading: "Build Your City",
        category: "City Expansion",
        name: "Castle Upgrade",
        preferredorder: "65",
        prerequisite: "1005",
        description: "Your City is growing in stature, and you need a Castle that reflects your new power! Upgrade your Castle to be able to upgrade your other buildings to a higher level, open more Fields, and control more Wildernesses",
        objective: ["1", "0", 6],
        reward: [
            [0, 15000, 25000, 50000, 15000, 0],
            [],
            [],
            [0, 0, 0]
        ]
    },
    q1007: {
        heading: "Build Your City",
        category: "City Expansion",
        name: "Castle Upgrade",
        preferredorder: "67",
        prerequisite: "1006",
        description: "Your City is growing in stature, and you need a Castle that reflects your new power! Upgrade your Castle to be able to upgrade your other buildings to a higher level, open more Fields, and control more Wildernesses",
        objective: ["1", "0", 7],
        reward: [
            [0, 20000, 50000, 50000, 20000, 0],
            [],
            [],
            [0, 0, 0]
        ]
    },
    q1008: {
        heading: "Build Your City",
        category: "City Expansion",
        name: "Castle Upgrade",
        preferredorder: "71",
        prerequisite: "1007",
        description: "Your City is growing in stature, and you need a Castle that reflects your new power! Upgrade your Castle to be able to upgrade your other buildings to a higher level, open more Fields, and control more Wildernesses",
        objective: ["1", "0", 8],
        reward: [
            [0, 20000, 50000, 50000, 20000, 0],
            [],
            [],
            [0, 0, 0]
        ]
    },
    q1009: {
        heading: "Build Your City",
        category: "City Expansion",
        name: "Castle Upgrade",
        preferredorder: "80",
        prerequisite: "1008",
        description: "Your City is growing in stature, and you need a Castle that reflects your new power! Upgrade your Castle to be able to upgrade your other buildings to a higher level, open more Fields, and control more Wildernesses",
        objective: ["1", "0", 9],
        reward: [
            [0, 20000, 50000, 50000, 20000, 0],
            [],
            [],
            [0, 0, 0]
        ]
    },
    q1000: {
        heading: "Build Your City",
        category: "City Expansion",
        name: "Castle Upgrade",
        preferredorder: "88",
        prerequisite: "1009",
        description: "Your City is growing in stature, and you need a Castle that reflects your new power! Upgrade your Castle to be able to upgrade your other buildings to a higher level, open more Fields, and control more Wildernesses",
        objective: ["1", "0", 10],
        reward: [
            [0, 20000, 50000, 50000, 20000, 0],
            [],
            [],
            [0, 0, 0]
        ]
    },
    q1011: {
        heading: "Grow Your Resources",
        category: "Resource Gathering",
        name: "Farming",
        preferredorder: "4",
        prerequisite: "1021",
        description: "Food is used to keep your troops full, healthy, and ready to fight, and to feed your workers while they work on your buildings. <b>Go to the Field View</b> and build a Farm now to begin growing Food for your city.",
        objective: ["1", "1", 1],
        reward: [
            [0, 300, 2000, 1500, 1000, 0],
            [],
            [
                [1, 1]
            ],
            [0, 0, 0]
        ]
    },
    q1013: {
        heading: "Grow Your Resources",
        category: "Resource Gathering",
        name: "Greater Farming",
        preferredorder: "13",
        prerequisite: "1524",
        description: "While one Farm is enough to get your City started, you&#39;ll need more as your City grows. Build two more Farms to ensure you have a plentiful supply of Food. ",
        objective: ["15", "1", 3],
        reward: [
            [0, 600, 2000, 1500, 1000, 0],
            [],
            [],
            [0, 0, 0]
        ]
    },
    q1015: {
        heading: "Grow Your Resources",
        category: "Resource Gathering",
        name: "Upgrade Your Farm",
        preferredorder: "24",
        prerequisite: "1041",
        description: "Upgrade your Farms to level 3 to produce greater amounts of Food.",
        objective: ["1", "1", 3],
        reward: [
            [0, 1000, 5000, 3000, 2500, 0],
            [],
            [],
            [0, 0, 0]
        ]
    },
    q1021: {
        heading: "Grow Your Resources",
        category: "Resource Gathering",
        name: "Logging",
        preferredorder: "1",
        prerequisite: "",
        description: "You will need Wood to build more buildings and defenses, and train new troops. To gather usable Wood, build a Sawmill. Click on the Field view, then click on an empty lot and choose to build a Sawmill.",
        objective: ["1", "2", 1],
        reward: [
            [0, 600, 1000, 1500, 1500, 0],
            [],
            [
                [1, 1]
            ],
            [0, 0, 0]
        ]
    },
    q1025: {
        heading: "Grow Your Resources",
        category: "Resource Gathering",
        name: "Upgrade Your Sawmill",
        preferredorder: "26",
        prerequisite: "1041",
        description: "Upgrade your Sawmills to level 3 to produce greater amounts of Wood.",
        objective: ["1", "2", 3],
        reward: [
            [0, 2000, 2000, 3000, 3000, 0],
            [],
            [],
            [0, 0, 0]
        ]
    },
    q1031: {
        heading: "Grow Your Resources",
        category: "Resource Gathering",
        name: "Quarrying",
        preferredorder: "5",
        prerequisite: "1011",
        description: "Stone is the foundation of your buildings, allowing them to withstand attacks and time. To gather usable Stone, build a Quarry.",
        objective: ["1", "3", 1],
        reward: [
            [0, 900, 2250, 900, 1500, 0],
            [],
            [
                [1, 1]
            ],
            [0, 0, 0]
        ]
    },
    q1033: {
        heading: "Grow Your Resources",
        category: "Resource Gathering",
        name: "Greater Quarrying",
        preferredorder: "15",
        prerequisite: "1013",
        description: "While one Quarry is enough to get your City started, you&#39;ll need more as your City grows. Build two more Quarries to ensure you have a plentiful supply of Stone. ",
        objective: ["15", "3", 3],
        reward: [
            [0, 900, 2250, 900, 1500, 0],
            [],
            [],
            [0, 0, 0]
        ]
    },
    q1035: {
        heading: "Grow Your Resources",
        category: "Resource Gathering",
        name: "Quarry Upgrade",
        preferredorder: "22",
        prerequisite: "1041",
        description: "Upgrade your Quarries to level 3 to produce greater amounts of Stone.\r\n",
        objective: ["1", "3", 3],
        reward: [
            [0, 3000, 6000, 2000, 3000, 0],
            [],
            [],
            [0, 0, 0]
        ]
    },
    q1041: {
        heading: "Grow Your Resources",
        category: "Resource Gathering",
        name: "Mining",
        preferredorder: "6",
        prerequisite: "1031",
        description: "Ore is necessary to create any metal, from weapons to nails. To gather usable Ore, build a Mine.",
        objective: ["1", "4", 1],
        reward: [
            [0, 1500, 2400, 2250, 1500, 0],
            [],
            [
                [1, 1]
            ],
            [0, 0, 0]
        ]
    },
    q1042: {
        heading: "Grow Your Resources",
        category: "Resource Gathering",
        name: "Greater Mining",
        preferredorder: "17",
        prerequisite: "1033",
        description: "While one Mine is enough to get your City started, you&#39;ll need more as your City grows. Build one more Mine to ensure you have a plentiful supply of Ore. ",
        objective: ["15", "4", 2],
        reward: [
            [0, 1500, 2500, 2250, 1500, 0],
            [],
            [
                [1, 1]
            ],
            [0, 0, 0]
        ]
    },
    q1045: {
        heading: "Grow Your Resources",
        category: "Resource Gathering",
        name: "Ore Mine Upgrade",
        preferredorder: "28",
        prerequisite: "1041",
        description: "Upgrade your Mines to level 3 to produce greater amounts of Ore.",
        objective: ["1", "4", 3],
        reward: [
            [0, 4000, 6000, 5000, 3000, 0],
            [],
            [],
            [0, 0, 0]
        ]
    },
    q1051: {
        heading: "Build Your City",
        category: "Establish Your City",
        name: "Housing Subjects",
        preferredorder: "2",
        prerequisite: "1021",
        description: "Now that King Arthur has granted you a City, you&#39;ll need a place for your subjects to live! Build a Cottage to increase your Population.",
        objective: ["1", "5", 1],
        reward: [
            [0, 200, 1000, 200, 100, 0],
            [],
            [
                [1, 1],
                [599, 1]
            ],
            [0, 0, 0]
        ]
    },
    q1052: {
        heading: "Build Your City",
        category: "Establish Your City",
        name: "Upgrade Your Cottage",
        preferredorder: "21",
        prerequisite: "1071",
        description: "Now that you have more jobs to be done, you need more workers! Upgrade your cottage to increase your Population. Click on one of your Cottages and choose Upgrade.",
        objective: ["1", "5", 3],
        reward: [
            [50, 500, 2000, 500, 500, 0],
            [],
            [],
            [0, 0, 0]
        ]
    },
    q1061: {
        heading: "Build Your City",
        category: "Administration",
        name: "Improve Happiness",
        preferredorder: "25",
        prerequisite: "1041",
        description: "The Tavern provides your subjects with a place to relax, and increases your Happiness. Higher levels of Tavern provide larger reductions, but your Happiness can never exceed 100.",
        objective: ["1", "6", 1],
        reward: [
            [0, 1000, 15000, 1000, 750, 0],
            [],
            [],
            [0, 0, 0]
        ]
    },
    q1071: {
        heading: "Build Your City",
        category: "Knight Recruitment",
        name: "Knights&#39; Hall",
        preferredorder: "8",
        prerequisite: "1041",
        description: "Your City must have defenses to keep your people safe! Before you raise an army, you need people to lead it.  Go to the City View and Build a Knights&#39; Hall to be able to hire your friends as Knights.",
        objective: ["1", "7", 1],
        reward: [
            [0, 500, 2000, 1000, 500, 0],
            [],
            [],
            [0, 0, 0]
        ]
    },
    q1081: {
        heading: "Build Your City",
        category: "Alliance",
        name: "Embassy",
        preferredorder: "12",
        prerequisite: "1041",
        description: "An Embassy is necessary to join or create an Alliance, and to give Reinforcing Troops a place to stay.",
        objective: ["1", "8", 1],
        reward: [
            [0, 500, 2000, 1000, 5000, 0],
            [],
            [],
            [0, 0, 0]
        ]
    },
    q1091: {
        heading: "Build Your City",
        category: "Resource Management",
        name: "Storehouse",
        preferredorder: "31",
        prerequisite: "1041",
        description: "Upgrade your Storehouse to protect more Resources from being Plundered by your enemies.",
        objective: ["1", "9", 1],
        reward: [
            [0, 500, 2000, 1500, 500, 0],
            [],
            [],
            [0, 0, 0]
        ]
    },
    q1101: {
        heading: "Build Your City",
        category: "Trading",
        name: "Market",
        preferredorder: "30",
        prerequisite: "1071",
        description: "The Market is a gathering spot for buying and selling Resources between players. Upgrade your Market to enact multiple transactions at the same time.",
        objective: ["1", "10", 1],
        reward: [
            [0, 1500, 1500, 1500, 1500, 0],
            [],
            [],
            [0, 0, 0]
        ]
    },
    q1111: {
        heading: "Research",
        category: "Alchemical Research",
        name: "Alchemy Lab",
        preferredorder: "14",
        prerequisite: "1041",
        description: "Alchemy is the study of natural properties, and how to bend them to your will.  An alchemist can make Farms produce more Food, arrows fly further, and supplies to be lighter. Any good alchemist must have an Alchemy Lab, so build one now!",
        objective: ["1", "11", 1],
        reward: [
            [0, 150, 2500, 1500, 200, 0],
            [],
            [
                [2, 1]
            ],
            [0, 0, 0]
        ]
    },
    q1112: {
        heading: "Research",
        category: "Alchemical Research",
        name: "Alchemy Lab Upgrade",
        preferredorder: "27",
        prerequisite: "1111",
        description: "A higher level Alchemy Lab allows your alchemists to engage in more complicated research.",
        objective: ["1", "11", 2],
        reward: [
            [0, 300, 5000, 3000, 400, 0],
            [],
            [],
            [0, 0, 0]
        ]
    },
    q1113: {
        heading: "Research",
        category: "Alchemical Research",
        name: "Alchemy Lab Upgrade",
        preferredorder: "46",
        prerequisite: "1112",
        description: "A higher level Alchemy Lab allows your alchemists to engage in more complicated research.",
        objective: ["1", "11", 3],
        reward: [
            [0, 1000, 10000, 5000, 1000, 0],
            [],
            [],
            [0, 0, 0]
        ]
    },
    q1114: {
        heading: "Research",
        category: "Alchemical Research",
        name: "Alchemy Lab Upgrade",
        preferredorder: "51",
        prerequisite: "1113",
        description: "A higher level Alchemy Lab allows your alchemists to engage in more complicated research.",
        objective: ["1", "11", 4],
        reward: [
            [0, 1500, 15000, 7500, 1500, 0],
            [],
            [],
            [0, 0, 0]
        ]
    },
    q1115: {
        heading: "Research",
        category: "Alchemical Research",
        name: "Alchemy Lab Upgrade",
        preferredorder: "54",
        prerequisite: "1114",
        description: "A higher level Alchemy Lab allows your alchemists to engage in more complicated research.",
        objective: ["1", "11", 5],
        reward: [
            [0, 2000, 20000, 10000, 2000, 0],
            [],
            [],
            [0, 0, 0]
        ]
    },
    q1116: {
        heading: "Research",
        category: "Alchemical Research",
        name: "Alchemy Lab Upgrade",
        preferredorder: "58",
        prerequisite: "1115",
        description: "A higher level Alchemy Lab allows your alchemists to engage in more complicated research.",
        objective: ["1", "11", 6],
        reward: [
            [0, 2000, 20000, 10000, 2000, 0],
            [],
            [],
            [0, 0, 0]
        ]
    },
    q1117: {
        heading: "Research",
        category: "Alchemical Research",
        name: "Alchemy Lab Upgrade",
        preferredorder: "69",
        prerequisite: "1116",
        description: "A higher level Alchemy Lab allows your alchemists to engage in more complicated research.",
        objective: ["1", "11", 7],
        reward: [
            [0, 2000, 20000, 10000, 2000, 0],
            [],
            [],
            [0, 0, 0]
        ]
    },
    q1118: {
        heading: "Research",
        category: "Alchemical Research",
        name: "Alchemy Lab Upgrade",
        preferredorder: "76",
        prerequisite: "1117",
        description: "A higher level Alchemy Lab allows your alchemists to engage in more complicated research.",
        objective: ["1", "11", 8],
        reward: [
            [0, 2000, 20000, 10000, 2000, 0],
            [],
            [],
            [0, 0, 0]
        ]
    },
    q1119: {
        heading: "Research",
        category: "Alchemical Research",
        name: "Alchemy Lab Upgrade",
        preferredorder: "81",
        prerequisite: "1118",
        description: "A higher level Alchemy Lab allows your alchemists to engage in more complicated research.",
        objective: ["1", "11", 9],
        reward: [
            [0, 2000, 20000, 10000, 2000, 0],
            [],
            [],
            [0, 0, 0]
        ]
    },
    q1110: {
        heading: "Research",
        category: "Alchemical Research",
        name: "Alchemy Lab Upgrade",
        preferredorder: "86",
        prerequisite: "1119",
        description: "A higher level Alchemy Lab allows your alchemists to engage in more complicated research.",
        objective: ["1", "11", 10],
        reward: [
            [0, 2000, 20000, 10000, 2000, 0],
            [],
            [],
            [0, 0, 0]
        ]
    },
    q1121: {
        heading: "Raise Your Army",
        category: "Marching",
        name: "Rally Point",
        preferredorder: "32",
        prerequisite: "1131",
        description: "Your troops gather at the Rally Point before Marching out at your command. Upgrade your Rally Point to send more troops with each March, and to send more Marches at a time.",
        objective: ["1", "12", 1],
        reward: [
            [0, 500, 1000, 2000, 500, 0],
            [],
            [],
            [0, 0, 0]
        ]
    },
    q1131: {
        heading: "Raise Your Army",
        category: "Training",
        name: "Barracks",
        preferredorder: "16",
        prerequisite: "1041",
        description: "Your City is growing, and needs troops to defend and grow your land. Troops are trained at the Barracks.",
        objective: ["1", "13", 1],
        reward: [
            [0, 1000, 1200, 1500, 1000, 0],
            [],
            [],
            [0, 0, 0]
        ]
    },
    q1132: {
        heading: "Raise Your Army",
        category: "Improve Training",
        name: "Barracks Upgrade",
        preferredorder: "36",
        prerequisite: "1131",
        description: "Upgraded Barracks allow you to train more powerful Troops and speed up Training.",
        objective: ["1", "13", 2],
        reward: [
            [0, 2000, 2400, 3000, 2000, 0],
            [],
            [],
            [0, 0, 0]
        ]
    },
    q1133: {
        heading: "Raise Your Army",
        category: "Improve Training",
        name: "Barracks Upgrade",
        preferredorder: "49",
        prerequisite: "1132",
        description: "Upgraded Barracks allow you to train more powerful Troops and speed up Training.",
        objective: ["1", "13", 3],
        reward: [
            [0, 4000, 4800, 6000, 4000, 0],
            [],
            [],
            [0, 0, 0]
        ]
    },
    q1134: {
        heading: "Raise Your Army",
        category: "Improve Training",
        name: "Barracks Upgrade",
        preferredorder: "50",
        prerequisite: "1133",
        description: "Upgraded Barracks allow you to train more powerful Troops and speed up Training.",
        objective: ["1", "13", 4],
        reward: [
            [0, 6000, 8000, 8000, 6000, 0],
            [],
            [],
            [0, 0, 0]
        ]
    },
    q1135: {
        heading: "Raise Your Army",
        category: "Improve Training",
        name: "Barracks Upgrade",
        preferredorder: "55",
        prerequisite: "1134",
        description: "Upgraded Barracks allow you to train more powerful Troops and speed up Training.",
        objective: ["1", "13", 5],
        reward: [
            [0, 8000, 10000, 10000, 8000, 0],
            [],
            [],
            [0, 0, 0]
        ]
    },
    q1136: {
        heading: "Raise Your Army",
        category: "Improve Training",
        name: "Barracks Upgrade",
        preferredorder: "62",
        prerequisite: "1135",
        description: "Upgraded Barracks allow you to train more powerful Troops and speed up Training.",
        objective: ["1", "13", 6],
        reward: [
            [0, 8000, 10000, 10000, 8000, 0],
            [],
            [],
            [0, 0, 0]
        ]
    },
    q1137: {
        heading: "Raise Your Army",
        category: "Improve Training",
        name: "Barracks Upgrade",
        preferredorder: "70",
        prerequisite: "1136",
        description: "Upgraded Barracks allow you to train more powerful Troops and speed up Training.",
        objective: ["1", "13", 7],
        reward: [
            [0, 8000, 10000, 10000, 8000, 0],
            [],
            [],
            [0, 0, 0]
        ]
    },
    q1138: {
        heading: "Raise Your Army",
        category: "Improve Training",
        name: "Barracks Upgrade",
        preferredorder: "75",
        prerequisite: "1137",
        description: "Upgraded Barracks allow you to train more powerful Troops and speed up Training.",
        objective: ["1", "13", 8],
        reward: [
            [0, 8000, 10000, 10000, 8000, 0],
            [],
            [],
            [0, 0, 0]
        ]
    },
    q1139: {
        heading: "Raise Your Army",
        category: "Improve Training",
        name: "Barracks Upgrade",
        preferredorder: "83",
        prerequisite: "1138",
        description: "Upgraded Barracks allow you to train more powerful Troops and speed up Training.",
        objective: ["1", "13", 9],
        reward: [
            [0, 8000, 10000, 10000, 8000, 0],
            [],
            [],
            [0, 0, 0]
        ]
    },
    q1130: {
        heading: "Raise Your Army",
        category: "Improve Training",
        name: "Barracks Upgrade",
        preferredorder: "85",
        prerequisite: "1139",
        description: "Upgraded Barracks allow you to train more powerful Troops and speed up Training.",
        objective: ["1", "13", 10],
        reward: [
            [0, 8000, 10000, 10000, 8000, 0],
            [],
            [],
            [0, 0, 0]
        ]
    },
    q1141: {
        heading: "Defend Your City",
        category: "Alarming",
        name: "Watch Tower",
        preferredorder: "45",
        prerequisite: "1191",
        description: "Your Watch Tower allows you to see Incoming Attacks, and have time to prepare your defenses. Build your Watch Tower now!",
        objective: ["1", "14", 1],
        reward: [
            [0, 300, 2000, 6000, 600, 0],
            [],
            [],
            [0, 0, 0]
        ]
    },
    q1142: {
        heading: "Defend Your City",
        category: "Alarming",
        name: "Watch Tower",
        preferredorder: "53",
        prerequisite: "1141",
        description: "A higher level Watch Tower gives you more information on your attackers. Upgrade your Watch Tower now!",
        objective: ["1", "14", 2],
        reward: [
            [0, 300, 2000, 6000, 600, 0],
            [],
            [],
            [0, 0, 0]
        ]
    },
    q1143: {
        heading: "Defend Your City",
        category: "Alarming",
        name: "Watch Tower",
        preferredorder: "59",
        prerequisite: "1142",
        description: "A higher level Watch Tower gives you more information on your attackers. Upgrade your Watch Tower now!",
        objective: ["1", "14", 3],
        reward: [
            [0, 500, 4000, 8500, 1000, 0],
            [],
            [],
            [0, 0, 0]
        ]
    },
    q1144: {
        heading: "Defend Your City",
        category: "Alarming",
        name: "Watch Tower",
        preferredorder: "63",
        prerequisite: "1143",
        description: "A higher level Watch Tower gives you more information on your attackers. Upgrade your Watch Tower now!",
        objective: ["1", "14", 4],
        reward: [
            [0, 750, 6000, 12000, 2000, 0],
            [],
            [],
            [0, 0, 0]
        ]
    },
    q1145: {
        heading: "Defend Your City",
        category: "Alarming",
        name: "Watch Tower",
        preferredorder: "68",
        prerequisite: "1144",
        description: "A higher level Watch Tower gives you more information on your attackers. Upgrade your Watch Tower now!",
        objective: ["1", "14", 5],
        reward: [
            [0, 1000, 8000, 16000, 4000, 0],
            [],
            [],
            [0, 0, 0]
        ]
    },
    q1146: {
        heading: "Defend Your City",
        category: "Alarming",
        name: "Watch Tower",
        preferredorder: "73",
        prerequisite: "1145",
        description: "A higher level Watch Tower gives you more information on your attackers. Upgrade your Watch Tower now!",
        objective: ["1", "14", 6],
        reward: [
            [0, 1000, 10000, 20000, 5000, 0],
            [],
            [],
            [0, 0, 0]
        ]
    },
    q1147: {
        heading: "Defend Your City",
        category: "Alarming",
        name: "Watch Tower",
        preferredorder: "77",
        prerequisite: "1146",
        description: "A higher level Watch Tower gives you more information on your attackers. Upgrade your Watch Tower now!",
        objective: ["1", "14", 7],
        reward: [
            [0, 1000, 10000, 20000, 5000, 0],
            [],
            [],
            [0, 0, 0]
        ]
    },
    q1148: {
        heading: "Defend Your City",
        category: "Alarming",
        name: "Watch Tower",
        preferredorder: "79",
        prerequisite: "1147",
        description: "A higher level Watch Tower gives you more information on your attackers. Upgrade your Watch Tower now!",
        objective: ["1", "14", 8],
        reward: [
            [0, 1000, 10000, 20000, 5000, 0],
            [],
            [],
            [0, 0, 0]
        ]
    },
    q1149: {
        heading: "Defend Your City",
        category: "Alarming",
        name: "Watch Tower",
        preferredorder: "84",
        prerequisite: "1148",
        description: "A higher level Watch Tower gives you more information on your attackers. Upgrade your Watch Tower now!",
        objective: ["1", "14", 9],
        reward: [
            [0, 1000, 10000, 20000, 5000, 0],
            [],
            [],
            [0, 0, 0]
        ]
    },
    q1140: {
        heading: "Defend Your City",
        category: "Alarming",
        name: "Watch Tower",
        preferredorder: "89",
        prerequisite: "1149",
        description: "A higher level Watch Tower gives you more information on your attackers. Upgrade your Watch Tower now!",
        objective: ["1", "14", 10],
        reward: [
            [0, 1000, 10000, 20000, 5000, 0],
            [],
            [],
            [0, 0, 0]
        ]
    },
    q1151: {
        heading: "Build Your City",
        category: "Metals",
        name: "Blacksmith",
        preferredorder: "33",
        prerequisite: "1041",
        description: "In order to use more advanced metalworking techniques, you must build a Blacksmith. Build a Blacksmith to Research Metal Alloys, and to train Troops that require extensive armor.",
        objective: ["1", "15", 1],
        reward: [
            [0, 500, 1500, 2000, 1500, 0],
            [],
            [],
            [0, 0, 0]
        ]
    },
    q1161: {
        heading: "Defend Your City",
        category: "Defenses",
        name: "Workshop",
        preferredorder: "34",
        prerequisite: "1151",
        description: "In order to Upgrade your Walls, build a Workshop. The Workshop also allows you to build siege weapons such as Crossbows, Ballistae, and Catapults.",
        objective: ["1", "16", 1],
        reward: [
            [0, 1500, 5000, 5000, 5000, 0],
            [],
            [],
            [0, 0, 0]
        ]
    },
    q1171: {
        heading: "Build Your City",
        category: "Transportation",
        name: "Stable",
        preferredorder: "47",
        prerequisite: "1015",
        description: "Stables are necessary to house the horses used by Cavalry and Heavy Cavalry. Upgrade your Stables to research higher levels of Alloy Horseshoes.",
        objective: ["1", "17", 1],
        reward: [
            [0, 1500, 2000, 1000, 1000, 0],
            [],
            [],
            [0, 0, 0]
        ]
    },
    q1181: {
        heading: "Build Your City",
        category: "Transportation",
        name: "Relief Station",
        preferredorder: "56",
        prerequisite: "1171",
        description: "The Relief Station helps your Troops&#39; Speed when you are moving between your own and allied Cities. Upgrade for better Speed improvements.",
        objective: ["1", "18", 1],
        reward: [
            [0, 2000, 5000, 5000, 1000, 0],
            [],
            [],
            [0, 0, 0]
        ]
    },
    q1191: {
        heading: "Defend Your City",
        category: "Defenses",
        name: "Walls",
        preferredorder: "23",
        prerequisite: "1002",
        description: "Now is the time to erect your Walls!  They may not start out as much, but upgrading your Walls will provide your city with a better innate defense, and allow you to build better Defensive Units, such as Traps and Caltrops.",
        objective: ["1", "19", 1],
        reward: [
            [0, 3000, 2000, 10000, 2000, 0],
            [],
            [],
            [0, 0, 0]
        ]
    },
    q1192: {
        heading: "Defend Your City",
        category: "Defenses",
        name: "Walls Reinforcement",
        preferredorder: "33",
        prerequisite: "1191",
        description: "Upgrading your Walls will provide your city with a better innate defense, and allow you to build more and better Defensive Units.",
        objective: ["1", "19", 2],
        reward: [
            [0, 5000, 5000, 20000, 5000, 0],
            [],
            [],
            [0, 0, 0]
        ]
    },
    q1193: {
        heading: "Defend Your City",
        category: "Defenses",
        name: "Walls Reinforcement",
        preferredorder: "48",
        prerequisite: "1192",
        description: "Upgrading your Walls will provide your city with a better innate defense, and allow you to build more and better Defensive Units.",
        objective: ["1", "19", 3],
        reward: [
            [0, 10000, 10000, 50000, 10000, 0],
            [],
            [],
            [0, 0, 0]
        ]
    },
    q1194: {
        heading: "Defend Your City",
        category: "Defenses",
        name: "Walls Reinforcement",
        preferredorder: "60",
        prerequisite: "1193",
        description: "Upgrading your Walls will provide your city with a better innate defense, and allow you to build more and better Defensive Units.",
        objective: ["1", "19", 4],
        reward: [
            [0, 10000, 10000, 50000, 10000, 0],
            [],
            [],
            [0, 0, 0]
        ]
    },
    q1195: {
        heading: "Defend Your City",
        category: "Defenses",
        name: "Walls Reinforcement",
        preferredorder: "64",
        prerequisite: "1194",
        description: "Upgrading your Walls will provide your city with a better innate defense, and allow you to build more and better Defensive Units.",
        objective: ["1", "19", 5],
        reward: [
            [0, 10000, 10000, 50000, 10000, 0],
            [],
            [],
            [0, 0, 0]
        ]
    },
    q1196: {
        heading: "Defend Your City",
        category: "Defenses",
        name: "Walls Reinforcement",
        preferredorder: "66",
        prerequisite: "1195",
        description: "Upgrading your Walls will provide your city with a better innate defense, and allow you to build more and better Defensive Units.",
        objective: ["1", "19", 6],
        reward: [
            [0, 10000, 10000, 50000, 10000, 0],
            [],
            [],
            [0, 0, 0]
        ]
    },
    q1197: {
        heading: "Defend Your City",
        category: "Defenses",
        name: "Walls Reinforcement",
        preferredorder: "74",
        prerequisite: "1196",
        description: "Upgrading your Walls will provide your city with a better innate defense, and allow you to build more and better Defensive Units.",
        objective: ["1", "19", 7],
        reward: [
            [0, 10000, 10000, 50000, 10000, 0],
            [],
            [],
            [0, 0, 0]
        ]
    },
    q1198: {
        heading: "Defend Your City",
        category: "Defenses",
        name: "Walls Reinforcement",
        preferredorder: "78",
        prerequisite: "1197",
        description: "Upgrading your Walls will provide your city with a better innate defense, and allow you to build more and better Defensive Units.",
        objective: ["1", "19", 8],
        reward: [
            [0, 10000, 10000, 50000, 10000, 0],
            [],
            [],
            [0, 0, 0]
        ]
    },
    q1199: {
        heading: "Defend Your City",
        category: "Defenses",
        name: "Walls Reinforcement",
        preferredorder: "82",
        prerequisite: "1198",
        description: "Upgrading your Walls will provide your city with a better innate defense, and allow you to build more and better Defensive Units.",
        objective: ["1", "19", 9],
        reward: [
            [0, 10000, 10000, 50000, 10000, 0],
            [],
            [],
            [0, 0, 0]
        ]
    },
    q1190: {
        heading: "Defend Your City",
        category: "Defenses",
        name: "Walls Reinforcement",
        preferredorder: "87",
        prerequisite: "1199",
        description: "Upgrading your Walls will provide your city with a better innate defense, and allow you to build more and better Defensive Units.",
        objective: ["1", "19", 10],
        reward: [
            [0, 10000, 10000, 50000, 10000, 0],
            [],
            [],
            [0, 0, 0]
        ]
    },
    q1201: {
        heading: "Build Your City",
        category: "Guardian",
        name: "Welcome Your Guardian",
        preferredorder: "",
        prerequisite: "1201",
        description: "Summon a powerful Guardian to help strengthen your resources and troops",
        objective: ["1", "50", 1],
        reward: [
            [0, 2000, 2000, 2000, 2000, 0],
            [],
            [2000, 1],
            [0, 0, 0]
        ]
    },
    q1202: {
        heading: "Build Your City",
        category: "Guardian",
        name: "Strengthen Your Guardian",
        preferredorder: "",
        prerequisite: "1202",
        description: "A higher level Guardian can bestow more power to your resource production and troop strength",
        objective: ["1", "50", 2],
        reward: [
            [0, 4000, 4000, 4000, 4000, 0],
            [],
            [],
            [0, 0, 0]
        ]
    },
    q1203: {
        heading: "Build Your City",
        category: "Guardian",
        name: "Strengthen Your Guardian",
        preferredorder: "",
        prerequisite: "1203",
        description: "A higher level Guardian can bestow more power to your resource production and troop strength",
        objective: ["1", "50", 3],
        reward: [
            [0, 8000, 8000, 2000, 8000, 0],
            [],
            [],
            [0, 0, 0]
        ]
    },
    q1204: {
        heading: "Build Your City",
        category: "Guardian",
        name: "Strengthen Your Guardian",
        preferredorder: "",
        prerequisite: "1204",
        description: "A higher level Guardian can bestow more power to your resource production and troop strength",
        objective: ["1", "50", 4],
        reward: [
            [0, 14000, 14000, 14000, 14000, 0],
            [],
            [],
            [0, 0, 0]
        ]
    },
    q1205: {
        heading: "Build Your City",
        category: "Guardian",
        name: "Strengthen Your Guardian",
        preferredorder: "",
        prerequisite: "1205",
        description: "A higher level Guardian can bestow more power to your resource production and troop strength",
        objective: ["1", "50", 5],
        reward: [
            [0, 26000, 26000, 26000, 26000, 0],
            [],
            [],
            [0, 0, 0]
        ]
    },
    q1206: {
        heading: "Build Your City",
        category: "Guardian",
        name: "Strengthen Your Guardian",
        preferredorder: "",
        prerequisite: "1206",
        description: "A higher level Guardian can bestow more power to your resource production and troop strength",
        objective: ["1", "50", 6],
        reward: [
            [0, 50000, 50000, 50000, 50000, 0],
            [],
            [],
            [0, 0, 0]
        ]
    },
    q1207: {
        heading: "Build Your City",
        category: "Guardian",
        name: "Strengthen Your Guardian",
        preferredorder: "",
        prerequisite: "1207",
        description: "A higher level Guardian can bestow more power to your resource production and troop strength",
        objective: ["1", "50", 7],
        reward: [
            [0, 95000, 95000, 95000, 95000, 0],
            [],
            [],
            [0, 0, 0]
        ]
    },
    q1208: {
        heading: "Build Your City",
        category: "Guardian",
        name: "Strengthen Your Guardian",
        preferredorder: "",
        prerequisite: "1208",
        description: "A higher level Guardian can bestow more power to your resource production and troop strength",
        objective: ["1", "50", 8],
        reward: [
            [0, 180000, 180000, 180000, 180000, 0],
            [],
            [],
            [0, 0, 0]
        ]
    },
    q1209: {
        heading: "Build Your City",
        category: "Guardian",
        name: "Strengthen Your Guardian",
        preferredorder: "",
        prerequisite: "1209",
        description: "A higher level Guardian can bestow more power to your resource production and troop strength",
        objective: ["1", "50", 9],
        reward: [
            [0, 340000, 340000, 340000, 340000, 0],
            [],
            [],
            [0, 0, 0]
        ]
    },
    q1210: {
        heading: "Build Your City",
        category: "Guardian",
        name: "Strengthen Your Guardian",
        preferredorder: "",
        prerequisite: "1210",
        description: "A higher level Guardian can bestow more power to your resource production and troop strength",
        objective: ["1", "50", 10],
        reward: [
            [0, 648000, 648000, 648000, 648000, 0],
            [],
            [],
            [0, 0, 0]
        ]
    },
    q1212: {
        heading: "Build Your City",
        category: "Guardian",
        name: "Welcome Your Guardian",
        preferredorder: "",
        prerequisite: "1212",
        description: "Summon more Guardians to help strengthen your resources and troops",
        objective: ["999", ""],
        reward: [
            [0, 5000, 5000, 5000, 5000, 0],
            [],
            [2000, 1],
            [0, 0, 0]
        ]
    },
    q1213: {
        heading: "Build Your City",
        category: "Guardian",
        name: "Welcome Your Guardian",
        preferredorder: "",
        prerequisite: "1213",
        description: "Summon more Guardians to help strengthen your resources and troops",
        objective: ["999", ""],
        reward: [
            [0, 5000, 5000, 5000, 5000, 0],
            [],
            [2000, 1],
            [0, 0, 0]
        ]
    },
    q1214: {
        heading: "Build Your City",
        category: "Guardian",
        name: "Welcome Your Guardian",
        preferredorder: "",
        prerequisite: "1214",
        description: "Summon more Guardians to help strengthen your resources and troops",
        objective: ["999", ""],
        reward: [
            [0, 5000, 5000, 5000, 5000, 0],
            [],
            [2000, 1],
            [0, 0, 0]
        ]
    },
    q1215: {
        heading: "Build Your City",
        category: "Guardian",
        name: "Welcome Your Guardian",
        preferredorder: "",
        prerequisite: "1215",
        description: "Summon more Guardians to help strengthen your resources and troops",
        objective: ["999", ""],
        reward: [
            [0, 5000, 5000, 5000, 5000, 0],
            [],
            [2000, 1],
            [0, 0, 0]
        ]
    },
    q1216: {
        heading: "Build Your City",
        category: "Guardian",
        name: "Welcome Your Guardian",
        preferredorder: "",
        prerequisite: "1216",
        description: "Summon more Guardians to help strengthen your resources and troops",
        objective: ["999", ""],
        reward: [
            [0, 5000, 5000, 5000, 5000, 0],
            [],
            [2000, 1],
            [0, 0, 0]
        ]
    },
    q1217: {
        heading: "Build Your City",
        category: "Guardian",
        name: "Welcome Your Guardian",
        preferredorder: "",
        prerequisite: "1217",
        description: "Summon more Guardians to help strengthen your resources and troops",
        objective: ["999", ""],
        reward: [
            [0, 5000, 5000, 5000, 5000, 0],
            [],
            [2000, 1],
            [0, 0, 0]
        ]
    },
    q1502: {
        heading: "Expand Your Kingdom",
        category: "Second City",
        name: "Build Your Second City",
        preferredorder: "43",
        prerequisite: "7501",
        description: 'It is time to Build your Second City! Click the Plain you control in the Map View, then click the "Build City" button. Your Second City will use its own queue, so you may build in both cities at once!',
        objective: ["999", "", 2],
        reward: [
            [0, 50000, 0, 0, 0, 0],
            [],
            [],
            [0, 100, 0]
        ]
    },
    q1524: {
        heading: "Build Your City",
        category: "Resource Gathering",
        name: "Greater Logging",
        preferredorder: "11",
        prerequisite: "999002",
        description: "While one Sawmill is enough to get your City started, you&#39;ll need more as your City grows. Build three more Sawmills to ensure you have a plentiful supply of Wood. ",
        objective: ["15", "2", 4],
        reward: [
            [0, 2000, 3000, 4500, 4500, 0],
            [],
            [],
            [0, 0, 0]
        ]
    },
    q1553: {
        heading: "Build Your City",
        category: "Establish Your City",
        name: "Expand Your Cottages",
        preferredorder: "20",
        prerequisite: "1011",
        description: "Now that you have more jobs to be done, you need more workers! Build two more Cottages to increase your Population.",
        objective: ["15", "5", 3],
        reward: [
            [1000, 500, 2000, 500, 500, 0],
            [],
            [],
            [0, 0, 0]
        ]
    },
    q1632: {
        heading: "Raise Your Army",
        category: "Improve Training",
        name: "Expand Barracks",
        preferredorder: "44",
        prerequisite: "1131",
        description: "Additional Barracks increase the rate at which you Train your Troops, and increase your Training Queue size.",
        objective: ["15", "13", 2],
        reward: [
            [0, 1000, 1200, 1500, 1000, 0],
            [],
            [],
            [0, 0, 0]
        ]
    },
    q1633: {
        heading: "Building",
        category: "Improve Training",
        name: "Expand Barracks",
        preferredorder: "57",
        prerequisite: "1632",
        description: "Additional Barracks increase the rate at which you Train your Troops, and increase your Training Queue size.",
        objective: ["15", "13", 3],
        reward: [
            [0, 1000, 1200, 1500, 1000, 0],
            [],
            [],
            [0, 0, 0]
        ]
    },
    q1634: {
        heading: "Building",
        category: "Improve Training",
        name: "Expand Barracks",
        preferredorder: "72",
        prerequisite: "1633",
        description: "Additional Barracks increase the rate at which you Train your Troops, and increase your Training Queue size.",
        objective: ["15", "13", 4],
        reward: [
            [0, 1000, 1200, 1500, 1000, 0],
            [],
            [],
            [0, 0, 0]
        ]
    },
    q2011: {
        heading: "Research",
        category: "Alchemical Research",
        name: "Fertilizer",
        preferredorder: "",
        prerequisite: "1111",
        description: "Fertilizer will increase your Food Production. Order your alchemists to begin working with different mixtures!",
        objective: ["2", "1", 1],
        reward: [
            [2000, 0, 0, 0, 0, 0],
            [],
            [],
            [0, 0, 0]
        ]
    },
    q2021: {
        heading: "Research",
        category: "Alchemical Research",
        name: "Logging",
        preferredorder: "",
        prerequisite: "1111",
        description: "Engage your Alchemists in discovering better Logging techniques and tools to increase your Wood Production.",
        objective: ["2", "2", 1],
        reward: [
            [2000, 0, 0, 0, 0, 0],
            [],
            [],
            [0, 0, 0]
        ]
    },
    q2031: {
        heading: "Research",
        category: "Alchemical Research",
        name: "Stoneworking",
        preferredorder: "",
        prerequisite: "1111",
        description: "Stone can be softened with potions, or exploded with powders. Have your Alchemists get to work increasing your Stone Production!",
        objective: ["2", "3", 1],
        reward: [
            [3000, 0, 0, 0, 0, 0],
            [],
            [],
            [0, 0, 0]
        ]
    },
    q2041: {
        heading: "Research",
        category: "Alchemical Research",
        name: "Smelting",
        preferredorder: "",
        prerequisite: "1111",
        description: "Improving your Ore Production requires many arcane chemicals. Start your Alchemists down the path to purer metals!",
        objective: ["2", "4", 1],
        reward: [
            [4000, 0, 0, 0, 0, 0],
            [],
            [],
            [0, 0, 0]
        ]
    },
    q2051: {
        heading: "Research",
        category: "Alchemical Research",
        name: "Geometry",
        preferredorder: "",
        prerequisite: "1113",
        description: "Alchemists are not only early scientists, but mathematicians as well! A better understanding of Geometry will guide your Catapults and Ballistae to the enemy&#39;s most vulnerable point.",
        objective: ["2", "5", 1],
        reward: [
            [6000, 0, 0, 0, 0, 0],
            [],
            [],
            [0, 0, 0]
        ]
    },
    q2061: {
        heading: "Research",
        category: "Alchemical Research",
        name: "Eagle Eyes",
        preferredorder: "",
        prerequisite: "1113",
        description: "It is well known that salves placed on the eyes can give Scouts the eyes of eagles. Have your alchemists start concocting these potions!",
        objective: ["2", "6", 1],
        reward: [
            [7000, 0, 0, 0, 0, 0],
            [],
            [],
            [0, 0, 0]
        ]
    },
    q2081: {
        heading: "Research",
        category: "Alchemical Research",
        name: "Poisoned Edge",
        preferredorder: "",
        prerequisite: "1112",
        description: "Weapons are much more effective with the application of poison. Start the development of new poisons to destroy your enemies!",
        objective: ["2", "8", 1],
        reward: [
            [6000, 0, 0, 0, 0, 0],
            [],
            [],
            [0, 0, 0]
        ]
    },
    q2091: {
        heading: "Research",
        category: "Alchemical Research",
        name: "Metal Alloys",
        preferredorder: "",
        prerequisite: "1113",
        description: "Each metal has its own strengths and weaknesses. When properly combined, the strengths can be multiplied and the weaknesses diminished. Start your alchemists researching better Alloys for armor materials!",
        objective: ["2", "9", 1],
        reward: [
            [7000, 0, 0, 0, 0, 0],
            [],
            [],
            [0, 0, 0]
        ]
    },
    q2101: {
        heading: "Research",
        category: "Alchemical Research",
        name: "Featherweight Powder",
        preferredorder: "",
        prerequisite: "1114",
        description: "Lighter objects are easier to carry. Finding just the right combination of ingredients, your Alchemists can make items light as a feather.",
        objective: ["2", "10", 1],
        reward: [
            [6000, 0, 0, 0, 0, 0],
            [],
            [],
            [0, 0, 0]
        ]
    },
    q2111: {
        heading: "Research",
        category: "Alchemical Research",
        name: "Magical Mapping",
        preferredorder: "",
        prerequisite: "1114",
        description: "A properly prepared piece of parchment wants to become an accurate map. Have your Alchemists learn the art of creating better maps to help your Troops move more quickly across the Map!",
        objective: ["2", "11", 1],
        reward: [
            [6000, 0, 0, 0, 0, 0],
            [],
            [],
            [0, 0, 0]
        ]
    },
    q2121: {
        heading: "Research",
        category: "Alchemical Research",
        name: "Alloy Horseshoes",
        preferredorder: "",
        prerequisite: "1115",
        description: "A horse can break a leg by losing or breaking a shoe. Your Alchemists can develop new Alloy Horseshoes to keep your horses running faster, longer.",
        objective: ["2", "12", 1],
        reward: [
            [8000, 0, 0, 0, 0, 0],
            [],
            [],
            [0, 0, 0]
        ]
    },
    q2131: {
        heading: "Research",
        category: "Alchemical Research",
        name: "Fletching",
        preferredorder: "",
        prerequisite: "1114",
        description: "Fletching is the art of tying feathers to arrows. While duck feathers work well, have your Alchemists experiment with more interesting feathers, like those from a griffin or phoenix!",
        objective: ["2", "13", 1],
        reward: [
            [6000, 0, 0, 0, 0, 0],
            [],
            [],
            [0, 0, 0]
        ]
    },
    q2141: {
        heading: "Research",
        category: "Alchemical Research",
        name: "Shrinking Powder",
        preferredorder: "",
        prerequisite: "1116",
        description: "Is your Storehouse running out of room? Shrinking Powder will allow you to squeeze more resources into the same space. Start the research and protect your resources from attack.",
        objective: ["2", "14", 1],
        reward: [
            [4000, 0, 0, 0, 0, 0],
            [],
            [],
            [0, 0, 0]
        ]
    },
    q2151: {
        heading: "Research",
        category: "Alchemical Research",
        name: "Healing Potions",
        preferredorder: "",
        prerequisite: "1116",
        description: "Healing Potions will help your Troops keep fighting through terrible injuries. Have your Alchemists begin brewing now!",
        objective: ["2", "15", 1],
        reward: [
            [7200, 0, 0, 0, 0, 0],
            [],
            [],
            [0, 0, 0]
        ]
    },
    q2161: {
        heading: "Research",
        category: "Alchemical Research",
        name: "Giant&#39;s Strength",
        preferredorder: "",
        prerequisite: "1115",
        description: "Engage your Alchemists is distilling the Strength of Giants into a potion for your workers.",
        objective: ["2", "16", 1],
        reward: [
            [10000, 0, 0, 0, 0, 0],
            [],
            [],
            [0, 0, 0]
        ]
    },
    q3011: {
        heading: "Raise Your Army",
        category: "Train Your Troops",
        name: "Supply Troops",
        preferredorder: "",
        prerequisite: "1131",
        description: "Supply Troops are not very good at fighting, but can carry resources to other cities you and your friends own, or carry loot back when you plunder enemy cities. Click on the Barracks and train 10 Supply Troops.",
        objective: ["3", "1", 10],
        reward: [
            [0, 500, 1500, 0, 100, 0],
            [],
            [],
            [0, 0, 0]
        ]
    },
    q3012: {
        heading: "Expand Your Kingdom",
        category: "Second City",
        name: "Train 100 Supply Troops",
        preferredorder: "",
        prerequisite: "9999",
        description: "To begin building a Second City, you will need to take over a Plain on the Map. First, you must build an army! Start your army by training <b>100 Supply Troops</b> in your Barracks.",
        objective: ["3", "1", 100],
        reward: [
            [0, 0, 10000, 0, 0, 0],
            [
                [1, 100]
            ],
            [],
            [0, 0, 0]
        ]
    },
    q3013: {
        heading: "",
        category: "",
        name: "",
        preferredorder: "",
        prerequisite: "9999",
        description: "",
        objective: ["3", "1", 125],
        reward: [
            [0, 5000, 3000, 0, 0, 0],
            [
                [1, 125]
            ],
            [],
            [0, 0, 0]
        ]
    },
    q3021: {
        heading: "Raise Your Army",
        category: "Train Your Troops",
        name: "Militiamen",
        preferredorder: "",
        prerequisite: "1131",
        description: "Militiamen are citizens of your city who have some military training. They are a good beginning for your army, but no match for troops with true training. Click on the Barracks and train 10 Militiamen.",
        objective: ["3", "2", 10],
        reward: [
            [0, 800, 1000, 0, 500, 0],
            [],
            [],
            [0, 0, 0]
        ]
    },
    q3022: {
        heading: "Expand Your Kingdom",
        category: "Second City",
        name: "Train 50 Militiamen",
        preferredorder: "38",
        prerequisite: "8002",
        description: "To begin building a Second City, you will need to take over a Plain on the Map. First, you must build an army! Train <b>50 Militiamen</b> to continue building your army to take over a Plain for your Second City!",
        objective: ["3", "2", 50],
        reward: [
            [0, 5000, 0, 0, 0, 0],
            [
                [2, 50]
            ],
            [],
            [0, 0, 0]
        ]
    },
    q3031: {
        heading: "Raise Your Army",
        category: "Train Your Troops",
        name: "Scouts",
        preferredorder: "",
        prerequisite: "1132",
        description: "Scouts move quickly, and bring back information about enemy positions and numbers, but are not strong fighters. Click on the Barracks and train 10 Scouts.",
        objective: ["3", "3", 10],
        reward: [
            [0, 1200, 2000, 0, 1500, 0],
            [],
            [],
            [0, 0, 0]
        ]
    },
    q3032: {
        heading: "",
        category: "",
        name: "",
        preferredorder: "",
        prerequisite: "9999",
        description: "",
        objective: ["999", ""],
        reward: [
            [0, 0, 0, 0, 0, 0],
            [],
            [],
            [0, 0, 0]
        ]
    },
    q3041: {
        heading: "Raise Your Army",
        category: "Train Your Troops",
        name: "Pikemen",
        preferredorder: "",
        prerequisite: "1132",
        description: "Pikemen are the most basic heavily trained troops. Their long pikes are very effective against horses. Click on the Barracks and train 10 Pikemen. ",
        objective: ["3", "4", 10],
        reward: [
            [0, 1500, 5000, 0, 1000, 0],
            [],
            [],
            [0, 0, 0]
        ]
    },
    q3042: {
        heading: "Expand Your Kingdom",
        category: "Second City",
        name: "Train 25 Pikemen",
        preferredorder: "",
        prerequisite: "9999",
        description: "Train <b>25 Pikemen</b> to continue building your army to take over a Plain for your Second City! Please notice in the Training window that you must research Poisoned Edge to level 1 in order to train Pikemen.",
        objective: ["3", "4", 25],
        reward: [
            [0, 0, 10000, 0, 0, 0],
            [
                [4, 25]
            ],
            [],
            [0, 0, 0]
        ]
    },
    q3051: {
        heading: "Raise Your Army",
        category: "Train Your Troops",
        name: "Swordsmen",
        preferredorder: "",
        prerequisite: "1133",
        description: "Swordsmen are well armored, and are the strongest melee troops. Their shields make them effective against Archers. Click on the Barracks and train 10 Swordsmen.",
        objective: ["3", "5", 10],
        reward: [
            [0, 2000, 1500, 0, 4000, 0],
            [],
            [],
            [0, 0, 0]
        ]
    },
    q3061: {
        heading: "Raise Your Army",
        category: "Train Your Troops",
        name: "Archers",
        preferredorder: "",
        prerequisite: "1134",
        description: "Archers can destroy the enemy&#39;s troops from a distance, but are vulnerable up close. Click on the Barracks and train 10 Archers.",
        objective: ["3", "6", 10],
        reward: [
            [0, 3000, 3500, 3000, 0, 0],
            [],
            [],
            [0, 0, 0]
        ]
    },
    q3071: {
        heading: "Raise Your Army",
        category: "Train Your Troops",
        name: "Cavalry",
        preferredorder: "",
        prerequisite: "1135",
        description: "Cavalry troops move very quickly on horseback, and have devastating attacks. Click on the Barracks and train 10 Cavalry.",
        objective: ["3", "7", 10],
        reward: [
            [0, 10000, 6000, 0, 5000, 0],
            [],
            [],
            [0, 0, 0]
        ]
    },
    q3081: {
        heading: "Raise Your Army",
        category: "Train Your Troops",
        name: "Heavy Cavalry",
        preferredorder: "",
        prerequisite: "1137",
        description: "Heavy Cavalry are far more armored than regular Cavalry. This armor provides them defense and more power to their attacks, but costs them some speed. Click on the Barracks and train 10 Heavy Cavalry.",
        objective: ["3", "8", 10],
        reward: [
            [0, 20000, 5000, 0, 25000, 0],
            [],
            [],
            [0, 0, 0]
        ]
    },
    q3091: {
        heading: "Raise Your Army",
        category: "Train Your Troops",
        name: "Supply Wagon",
        preferredorder: "",
        prerequisite: "1136",
        description: "Supply Wagons are heavily fortified to carry anything you need through a raging battle, and not lose the cargo. Click on the Barracks and train 10 Supply Wagons",
        objective: ["3", "9", 10],
        reward: [
            [0, 6000, 15000, 0, 3500, 0],
            [],
            [],
            [0, 0, 0]
        ]
    },
    q3101: {
        heading: "Raise Your Army",
        category: "Train Your Troops",
        name: "Ballistae",
        preferredorder: "",
        prerequisite: "1138",
        description: "Ballistae fire huge arrow-like bolts at long ranges. They are effective against other siege weapons. Click on the Barracks and train 10 Ballistae.",
        objective: ["3", "10", 10],
        reward: [
            [0, 25000, 30000, 0, 18000, 0],
            [],
            [],
            [0, 0, 0]
        ]
    },
    q3111: {
        heading: "Raise Your Army",
        category: "Train Your Troops",
        name: "Battering Ram",
        preferredorder: "",
        prerequisite: "1139",
        description: "A Battering Ram is a large log-like object, used for knocking down the enemy&#39;s defenses. Click on the Barracks and train 10 Battering Rams.",
        objective: ["3", "11", 10],
        reward: [
            [0, 40000, 60000, 0, 16000, 0],
            [],
            [],
            [0, 0, 0]
        ]
    },
    q3121: {
        heading: "Raise Your Army",
        category: "Train Your Troops",
        name: "Catapult",
        preferredorder: "",
        prerequisite: "1130",
        description: "Catapults throw large rocks from a huge distance. They are most effective against the enemy&#39;s defenses. Click on the Barracks and train 10 Catapults.",
        objective: ["3", "12", 10],
        reward: [
            [0, 50000, 50000, 80000, 12000, 0],
            [],
            [],
            [0, 0, 0]
        ]
    },
    q5051: {
        heading: "Build Your City",
        category: "Population",
        name: "Population Growth",
        preferredorder: "",
        prerequisite: "1051",
        description: "As your city grows, so will your need for workers on your Resource fields and men to be Trained for battle. Your current Population is determined by your Population Limit and your Happiness. Build and upgrade your Cottages, build and upgrade your Tavern, or reduce your Tax Rate to increase your Population.\r\n",
        objective: ["5", "5", 150],
        reward: [
            [100, 100, 0, 0, 0, 0],
            [],
            [],
            [0, 10, 0]
        ]
    },
    q5052: {
        heading: "Build Your City",
        category: "Population",
        name: "Population Growth",
        preferredorder: "",
        prerequisite: "5051",
        description: "As your city grows, so will your need for workers on your Resource fields and men to be Trained for battle. Your current Population is determined by your Population Limit and your Happiness. Build and upgrade your Cottages, build and upgrade your Tavern, or reduce your Tax Rate to increase your Population.\r\n",
        objective: ["5", "5", 250],
        reward: [
            [200, 200, 0, 0, 0, 0],
            [],
            [],
            [0, 20, 0]
        ]
    },
    q5053: {
        heading: "Build Your City",
        category: "Population",
        name: "Population Growth",
        preferredorder: "",
        prerequisite: "5052",
        description: "As your city grows, so will your need for workers on your Resource fields and men to be Trained for battle. Your current Population is determined by your Population Limit and your Happiness. Build and upgrade your Cottages, build and upgrade your Tavern, or reduce your Tax Rate to increase your Population.\r\n",
        objective: ["5", "5", 500],
        reward: [
            [500, 500, 0, 0, 0, 0],
            [],
            [],
            [0, 20, 0]
        ]
    },
    q5054: {
        heading: "Build Your City",
        category: "Population",
        name: "Population Growth",
        preferredorder: "",
        prerequisite: "5053",
        description: "As your city grows, so will your need for workers on your Resource fields and men to be Trained for battle. Your current Population is determined by your Population Limit and your Happiness. Build and upgrade your Cottages, build and upgrade your Tavern, or reduce your Tax Rate to increase your Population.\r\n",
        objective: ["5", "5", 1000],
        reward: [
            [1000, 1000, 0, 0, 0, 0],
            [],
            [],
            [0, 100, 0]
        ]
    },
    q5055: {
        heading: "Build Your City",
        category: "Population",
        name: "Population Growth",
        preferredorder: "",
        prerequisite: "5054",
        description: "As your city grows, so will your need for workers on your Resource fields and men to be Trained for battle. Your current Population is determined by your Population Limit and your Happiness. Build and upgrade your Cottages, build and upgrade your Tavern, or reduce your Tax Rate to increase your Population.",
        objective: ["5", "5", 5000],
        reward: [
            [5000, 5000, 0, 0, 0, 0],
            [],
            [],
            [0, 500, 0]
        ]
    },
    q5056: {
        heading: "Build Your City",
        category: "Population",
        name: "Population Growth",
        preferredorder: "",
        prerequisite: "5055",
        description: "As your city grows, so will your need for workers on your Resource fields and men to be Trained for battle. Your current Population is determined by your Population Limit and your Happiness. Build and upgrade your Cottages, build and upgrade your Tavern, or reduce your Tax Rate to increase your Population.",
        objective: ["5", "5", 10000],
        reward: [
            [10000, 10000, 0, 0, 0, 0],
            [],
            [],
            [0, 1000, 0]
        ]
    },
    q5057: {
        heading: "Build Your City",
        category: "Population",
        name: "Population Growth",
        preferredorder: "",
        prerequisite: "5056",
        description: "As your city grows, so will your need for workers on your Resource fields and men to be Trained for battle. Your current Population is determined by your Population Limit and your Happiness. Build and upgrade your Cottages, build and upgrade your Tavern, or reduce your Tax Rate to increase your Population.\r\n",
        objective: ["5", "5", 40000],
        reward: [
            [50000, 50000, 0, 0, 0, 0],
            [],
            [],
            [0, 5000, 0]
        ]
    },
    q6001: {
        heading: "Administration",
        category: "Resource Management",
        name: "Tax Revenue",
        preferredorder: "",
        prerequisite: "999010",
        description: "Your Tax Revenue depends on your Tax Rate and your Population. Increase your Population to grow your tax base.",
        objective: ["6", "0", 500],
        reward: [
            [1000, 0, 0, 0, 0, 0],
            [],
            [],
            [0, 0, 0]
        ]
    },
    q6002: {
        heading: "Administration",
        category: "Resource Management",
        name: "Tax Revenue",
        preferredorder: "",
        prerequisite: "6001",
        description: "Your Tax Revenue depends on your Tax Rate and your Population. Increase your Population to grow your tax base.",
        objective: ["6", "0", 1000],
        reward: [
            [5000, 0, 0, 0, 0, 0],
            [],
            [],
            [0, 0, 0]
        ]
    },
    q6003: {
        heading: "Administration",
        category: "Resource Management",
        name: "Tax Revenue",
        preferredorder: "",
        prerequisite: "6002",
        description: "Your Tax Revenue depends on your Tax Rate and your Population. Increase your Population to grow your tax base.",
        objective: ["6", "0", 5000],
        reward: [
            [0, 10000, 0, 0, 0, 0],
            [],
            [],
            [0, 0, 0]
        ]
    },
    q6004: {
        heading: "Administration",
        category: "Resource Management",
        name: "Tax Revenue",
        preferredorder: "",
        prerequisite: "6003",
        description: "Your Tax Revenue depends on your Tax Rate and your Population. Increase your Population to grow your tax base.",
        objective: ["6", "0", 10000],
        reward: [
            [0, 25000, 0, 0, 0, 0],
            [],
            [],
            [0, 0, 0]
        ]
    },
    q6005: {
        heading: "Administration",
        category: "Resource Management",
        name: "Tax Revenue",
        preferredorder: "",
        prerequisite: "6004",
        description: "Your Tax Revenue depends on your Tax Rate and your Population. Increase your Population to grow your tax base.",
        objective: ["6", "0", 40000],
        reward: [
            [0, 100000, 0, 0, 0, 0],
            [],
            [],
            [0, 0, 0]
        ]
    },
    q6011: {
        heading: "Grow Your Resources",
        category: "Resource Management",
        name: "Food Production",
        preferredorder: "",
        prerequisite: "1011",
        description: "Increase your base production of Food to allow you to Train and feed troops and to construct more buildings. Build and Upgrade your Farms to increase your base production.",
        objective: ["6", "1", 1000],
        reward: [
            [0, 1000, 0, 0, 0, 0],
            [],
            [
                [111, 1]
            ],
            [0, 0, 0]
        ]
    },
    q6012: {
        heading: "Grow Your Resources",
        category: "Resource Management",
        name: "Food Production",
        preferredorder: "",
        prerequisite: "6011",
        description: "Increase your base production of Food to allow you to Train and feed troops and to construct more buildings. Build and Upgrade your Farms to increase your base production.",
        objective: ["6", "1", 5000],
        reward: [
            [0, 5000, 0, 0, 0, 0],
            [],
            [],
            [0, 0, 0]
        ]
    },
    q6013: {
        heading: "Grow Your Resources",
        category: "Resource Management",
        name: "Food Production",
        preferredorder: "",
        prerequisite: "6012",
        description: "Increase your base production of Food to allow you to Train and feed troops and to construct more buildings. Build and Upgrade your Farms to increase your base production.",
        objective: ["6", "1", 10000],
        reward: [
            [0, 10000, 0, 0, 0, 0],
            [],
            [],
            [0, 0, 0]
        ]
    },
    q6014: {
        heading: "Grow Your Resources",
        category: "Resource Management",
        name: "Food Production",
        preferredorder: "",
        prerequisite: "6013",
        description: "Increase your base production of Food to allow you to Train and feed troops and to construct more buildings. Build and Upgrade your Farms to increase your base production.",
        objective: ["6", "1", 50000],
        reward: [
            [0, 50000, 0, 0, 0, 0],
            [],
            [],
            [0, 0, 0]
        ]
    },
    q6021: {
        heading: "Grow Your Resources",
        category: "Resource Management",
        name: "Wood Production",
        preferredorder: "",
        prerequisite: "1021",
        description: "Increase your base production of Wood to allow you to Train and feed troops and to construct more buildings. Build and Upgrade your Sawmills to increase your base production.",
        objective: ["6", "2", 1000],
        reward: [
            [0, 0, 1000, 0, 0, 0],
            [],
            [
                [121, 1]
            ],
            [0, 0, 0]
        ]
    },
    q6022: {
        heading: "Grow Your Resources",
        category: "Resource Management",
        name: "Wood Production",
        preferredorder: "",
        prerequisite: "6021",
        description: "Increase your base production of Wood to allow you to Train and feed troops and to construct more buildings. Build and Upgrade your Sawmills to increase your base production.",
        objective: ["6", "2", 5000],
        reward: [
            [0, 0, 5000, 0, 0, 0],
            [],
            [],
            [0, 0, 0]
        ]
    },
    q6023: {
        heading: "Grow Your Resources",
        category: "Resource Management",
        name: "Wood Production",
        preferredorder: "",
        prerequisite: "6022",
        description: "Increase your base production of Wood to allow you to Train and feed troops and to construct more buildings. Build and Upgrade your Sawmills to increase your base production.",
        objective: ["6", "2", 10000],
        reward: [
            [0, 0, 10000, 0, 0, 0],
            [],
            [],
            [0, 0, 0]
        ]
    },
    q6024: {
        heading: "Grow Your Resources",
        category: "Resource Management",
        name: "Wood Production",
        preferredorder: "",
        prerequisite: "6023",
        description: "Increase your base production of Wood to allow you to Train and feed troops and to construct more buildings. Build and Upgrade your Sawmills to increase your base production.",
        objective: ["6", "2", 50000],
        reward: [
            [0, 0, 50000, 0, 0, 0],
            [],
            [],
            [0, 0, 0]
        ]
    },
    q6031: {
        heading: "Grow Your Resources",
        category: "Resource Management",
        name: "Stone Production",
        preferredorder: "",
        prerequisite: "1031",
        description: "Increase your base production of Stone to allow you to Train and feed troops and to construct more buildings. Build and Upgrade your Quarries to increase your base production.",
        objective: ["6", "3", 1000],
        reward: [
            [0, 0, 0, 1000, 0, 0],
            [],
            [
                [131, 1]
            ],
            [0, 0, 0]
        ]
    },
    q6032: {
        heading: "Grow Your Resources",
        category: "Resource Management",
        name: "Stone Production",
        preferredorder: "",
        prerequisite: "6031",
        description: "Increase your base production of Stone to allow you to Train and feed troops and to construct more buildings. Build and Upgrade your Quarries to increase your base production.",
        objective: ["6", "3", 5000],
        reward: [
            [0, 0, 0, 5000, 0, 0],
            [],
            [],
            [0, 0, 0]
        ]
    },
    q6033: {
        heading: "Grow Your Resources",
        category: "Resource Management",
        name: "Stone Production",
        preferredorder: "",
        prerequisite: "6032",
        description: "Increase your base production of Stone to allow you to Train and feed troops and to construct more buildings. Build and Upgrade your Quarries to increase your base production.",
        objective: ["6", "3", 10000],
        reward: [
            [0, 0, 0, 10000, 0, 0],
            [],
            [],
            [0, 0, 0]
        ]
    },
    q6034: {
        heading: "Grow Your Resources",
        category: "Resource Management",
        name: "Stone Production",
        preferredorder: "",
        prerequisite: "6033",
        description: "Increase your base production of Stone to allow you to Train and feed troops and to construct more buildings. Build and Upgrade your Quarries to increase your base production.",
        objective: ["6", "3", 50000],
        reward: [
            [0, 0, 0, 50000, 0, 0],
            [],
            [],
            [0, 0, 0]
        ]
    },
    q6041: {
        heading: "Grow Your Resources",
        category: "Resource Management",
        name: "Ore Production",
        preferredorder: "",
        prerequisite: "1041",
        description: "Increase your base production of Ore to allow you to Train and feed troops and to construct more buildings. Build and Upgrade your Mines to increase your base production.",
        objective: ["6", "4", 1000],
        reward: [
            [0, 0, 0, 0, 1000, 0],
            [],
            [
                [141, 1]
            ],
            [0, 0, 0]
        ]
    },
    q6042: {
        heading: "Grow Your Resources",
        category: "Resource Management",
        name: "Ore Production",
        preferredorder: "",
        prerequisite: "6041",
        description: "Increase your base production of Ore to allow you to Train and feed troops and to construct more buildings. Build and Upgrade your Mines to increase your base production.",
        objective: ["6", "4", 5000],
        reward: [
            [0, 0, 0, 0, 5000, 0],
            [],
            [],
            [0, 0, 0]
        ]
    },
    q6043: {
        heading: "Grow Your Resources",
        category: "Resource Management",
        name: "Ore Production",
        preferredorder: "",
        prerequisite: "6042",
        description: "Increase your base production of Ore to allow you to Train and feed troops and to construct more buildings. Build and Upgrade your Mines to increase your base production.",
        objective: ["6", "4", 10000],
        reward: [
            [0, 0, 0, 0, 10000, 0],
            [],
            [],
            [0, 0, 0]
        ]
    },
    q6044: {
        heading: "Grow Your Resources",
        category: "Resource Management",
        name: "Ore Production",
        preferredorder: "",
        prerequisite: "6043",
        description: "Increase your base production of Ore to allow you to Train and feed troops and to construct more buildings. Build and Upgrade your Mines to increase your base production.",
        objective: ["6", "4", 50000],
        reward: [
            [0, 0, 0, 0, 50000, 0],
            [],
            [],
            [0, 0, 0]
        ]
    },
    q6051: {
        heading: "Build Your City",
        category: "Establish Your City",
        name: "Population Limit",
        preferredorder: "",
        prerequisite: "1051",
        description: "Your Population is used to work your Resource fields and become your troops. Build and Upgrade your Cottages to increase your Population Limit.",
        objective: ["6", "5", 1000],
        reward: [
            [1000, 100, 4000, 1000, 1000, 0],
            [],
            [],
            [0, 0, 0]
        ]
    },
    q6052: {
        heading: "Build Your City",
        category: "Establish Your City",
        name: "Population Limit",
        preferredorder: "",
        prerequisite: "6051",
        description: "Your Population is used to work your Resource fields and become your troops. Build and Upgrade your Cottages to increase your Population Limit.",
        objective: ["6", "5", 5000],
        reward: [
            [2500, 3000, 7000, 3000, 3000, 0],
            [],
            [],
            [0, 0, 0]
        ]
    },
    q6053: {
        heading: "Build Your City",
        category: "Establish Your City",
        name: "Population Limit",
        preferredorder: "",
        prerequisite: "6052",
        description: "Your Population is used to work your Resource fields and become your troops. Build and Upgrade your Cottages to increase your Population Limit.",
        objective: ["6", "5", 10000],
        reward: [
            [5000, 5000, 10000, 5000, 5000, 0],
            [],
            [],
            [0, 0, 0]
        ]
    },
    q6054: {
        heading: "Build Your City",
        category: "Establish Your City",
        name: "Population Limit",
        preferredorder: "",
        prerequisite: "6053",
        description: "Your Population is used to work your Resource fields and become your troops. Build and Upgrade your Cottages to increase your Population Limit.",
        objective: ["6", "5", 40000],
        reward: [
            [10000, 10000, 20000, 10000, 10000, 0],
            [],
            [],
            [0, 0, 0]
        ]
    },
    q7001: {
        heading: "Combat",
        category: "Expand Your City",
        name: "Conquer a Level 1 Wilderness",
        preferredorder: "",
        prerequisite: "3031",
        description: "Now that you&#39;ve scouted a Wilderness, you now know what you&#39;re up against. Send in enough Troops to take it over, and you&#39;ll gain a bonus to your Resource Production.",
        objective: ["7", "-1", 1],
        reward: [
            [0, 1000, 0, 0, 0, 0],
            [],
            [
                [261, 1]
            ],
            [0, 0, 0]
        ]
    },
    q7002: {
        heading: "Combat",
        category: "Expand Your City",
        name: "Conquer a Level 2 Wilderness",
        preferredorder: "",
        prerequisite: "7001",
        description: "Higher level Wildernesses give greater bonuses to Production, but are protected by more Troops.",
        objective: ["7", "-1", 2],
        reward: [
            [0, 2000, 0, 0, 0, 0],
            [],
            [],
            [0, 0, 0]
        ]
    },
    q7003: {
        heading: "Combat",
        category: "Expand Your City",
        name: "Conquer a Level 3 Wilderness",
        preferredorder: "",
        prerequisite: "7001",
        description: "Higher level Wildernesses give greater bonuses to Production, but are protected by more Troops.",
        objective: ["7", "-1", 3],
        reward: [
            [0, 3000, 0, 0, 0, 0],
            [],
            [],
            [0, 0, 0]
        ]
    },
    q7004: {
        heading: "Combat",
        category: "Expand Your City",
        name: "Conquer a Level 4 Wilderness",
        preferredorder: "",
        prerequisite: "7001",
        description: "Higher level Wildernesses give greater bonuses to Production, but are protected by more Troops.",
        objective: ["7", "-1", 4],
        reward: [
            [0, 4000, 0, 0, 0, 0],
            [],
            [],
            [0, 0, 0]
        ]
    },
    q7005: {
        heading: "Combat",
        category: "Expand Your City",
        name: "Conquer a Level 5 Wilderness",
        preferredorder: "",
        prerequisite: "7001",
        description: "Higher level Wildernesses give greater bonuses to Production, but are protected by more Troops.",
        objective: ["7", "-1", 5],
        reward: [
            [0, 5000, 0, 0, 0, 0],
            [],
            [],
            [0, 0, 0]
        ]
    },
    q7006: {
        heading: "Combat",
        category: "Expand Your City",
        name: "Conquer a Level 6 Wilderness",
        preferredorder: "",
        prerequisite: "7001",
        description: "Higher level Wildernesses give greater bonuses to Production, but are protected by more Troops.",
        objective: ["7", "-1", 6],
        reward: [
            [0, 10000, 0, 0, 0, 0],
            [],
            [],
            [0, 0, 0]
        ]
    },
    q7007: {
        heading: "Combat",
        category: "Expand Your City",
        name: "Conquer a Level 7 Wilderness",
        preferredorder: "",
        prerequisite: "7001",
        description: "Higher level Wildernesses give greater bonuses to Production, but are protected by more Troops.",
        objective: ["7", "-1", 7],
        reward: [
            [0, 20000, 0, 0, 0, 0],
            [],
            [],
            [0, 0, 0]
        ]
    },
    q7008: {
        heading: "Combat",
        category: "Expand Your City",
        name: "Conquer a Level 8 Wilderness",
        preferredorder: "",
        prerequisite: "7001",
        description: "Higher level Wildernesses give greater bonuses to Production, but are protected by more Troops.",
        objective: ["7", "-1", 8],
        reward: [
            [0, 50000, 0, 0, 0, 0],
            [],
            [],
            [0, 0, 0]
        ]
    },
    q7009: {
        heading: "Combat",
        category: "Expand Your City",
        name: "Conquer a Level 9 Wilderness",
        preferredorder: "",
        prerequisite: "7001",
        description: "Higher level Wildernesses give greater bonuses to Production, but are protected by more Troops.",
        objective: ["7", "-1", 9],
        reward: [
            [0, 100000, 0, 0, 0, 0],
            [],
            [],
            [0, 0, 0]
        ]
    },
    q7000: {
        heading: "Combat",
        category: "Expand Your City",
        name: "Conquer a Level 10 Wilderness",
        preferredorder: "",
        prerequisite: "7001",
        description: "Higher level Wildernesses give greater bonuses to Production, but are protected by more Troops.",
        objective: ["7", "-1", 10],
        reward: [
            [0, 200000, 0, 0, 0, 0],
            [],
            [],
            [0, 0, 0]
        ]
    },
    q7501: {
        heading: "Combat",
        category: "Expand Your City",
        name: "Conquer a Plain",
        preferredorder: "40",
        prerequisite: "3022",
        description: "Your Second City can only be built on a Plain. Use all of the Troops you trained to <b>conquer an unowned level 1 or 2 Plain</b> and continue your path to your Second City! To see if a Plain is unowned, click on it in the Map View, and see if another Lord or Lady has already laid claim.",
        objective: ["7", "50", 1],
        reward: [
            [5000, 5000, 5000, 5000, 5000, 0],
            [],
            [],
            [0, 100, 0]
        ]
    },
    q7652: {
        heading: "",
        category: "",
        name: "",
        preferredorder: "",
        prerequisite: "9999",
        description: "",
        objective: ["999", ""],
        reward: [
            [0, 0, 0, 0, 0, 0],
            [],
            [],
            [0, 0, 0]
        ]
    },
    q7901: {
        heading: "",
        category: "",
        name: "",
        preferredorder: "",
        prerequisite: "9999",
        description: "",
        objective: ["999", ""],
        reward: [
            [10000, 0, 0, 0, 0, 0],
            [],
            [],
            [0, 0, 0]
        ]
    },
    q8002: {
        heading: "Expand Your Kingdom",
        category: "Second City",
        name: "Earn Your Second City Deed",
        preferredorder: "37",
        prerequisite: "11007",
        description: "Arthur wants to give you a Second City Deed, which will allow you to build a Second City! In order to earn the Deed, you will need <b>ten friends</b> playing Kingdoms of Camelot. Invite your friends now to double your building efforts! You may also purchase a Second City Deed in the Court section of the Shop.",
        objective: ["999", "", 10],
        reward: [
            [1000, 1000, 1000, 1000, 1000, 0],
            [],
            [
                [1202, 1]
            ],
            [0, 0, 0]
        ]
    },
    q8003: {
        heading: "Expand Your Kingdom",
        category: "Third City",
        name: "Earn Your Third City Deed",
        preferredorder: "",
        prerequisite: "8002",
        description: "Arthur wants to give you a <b>Third City Deed</b>, which will allow you to build a <b>Third City</b>! In order to earn the Deed, you will need to gain <b>4 Sir Bor&#39;s Crests, 2 Sir Ector&#39;s Crests, and 1 Sir Kay&#39;s Crest</b>. Find these Crests by attacking unowned Wildernesses level 5 and higher, or by opening a <b>Squire&#39;s Chest</b>, found in the <b>Chest</b> section of the <b>Shop</b>. These Crests will be consumed when you complete this Quest. You may also buy this Deed in the Court section of the Shop.",
        objective: ["999", ""],
        reward: [
            [0, 0, 0, 0, 0, 0],
            [],
            [
                [1203, 1]
            ],
            [0, 0, 0]
        ]
    },
    q8004: {
        heading: "Expand Your Kingdom",
        category: "Fourth City",
        name: "Earn Your Fourth City Deed",
        preferredorder: "",
        prerequisite: "8003",
        description: "Arthur wants to give you a <b>Fourth City Deed</b>, which will allow you to build a <b>Fourth City</b>! In order to earn the Deed, you will need to gain <b>4 Sir Kay&#39;s Crests, 3 Sir Bedivere&#39;s Crests, and 1 Sir Gawain&#39;s Crest</b>. Find these Crests by attacking unowned Wildernesses level 6 and higher, or by opening a <b>Knight&#39;s Chest</b>, found in the <b>Chest</b> section of the <b>Shop</b>. These Crests will be consumed when you complete this Quest. You may also buy this Deed in the Court section of the Shop.",
        objective: ["999", ""],
        reward: [
            [0, 0, 0, 0, 0, 0],
            [],
            [
                [1204, 1]
            ],
            [0, 0, 0]
        ]
    },
    q8005: {
        heading: "Expand Your Kingdom",
        category: "Fifth City",
        name: "Earn Your Fifth City Deed",
        preferredorder: "",
        prerequisite: "8004",
        description: "Arthur wants to give you a <b>Fifth City Deed</b>, which will allow you to build a <b>Fifth City</b>! In order to earn the Deed, you will need to gain <b>4 Sir Percival&#39;s Crests, 3 Sir Galahad&#39;s Crests, and 2 Sir Lancelot&#39;s Crests</b>. Find these Crests by attacking unowned Wildernesses level 8 and higher, or by opening <b>Knight&#39;s Chests</b> or <b>Lord&#39;s Chests</b>, found in the <b>Chest</b> section of the <b>Shop</b>. These Crests will be consumed when you complete this Quest.",
        objective: ["999", ""],
        reward: [
            [0, 0, 0, 0, 0, 0],
            [],
            [
                [1205, 1],
                [401, 1]
            ],
            [0, 0, 0]
        ]
    },
    q8006: {
        heading: "Expand Your Kingdom",
        category: "Sixth City",
        name: "Earn Your Sixth City Deed",
        preferredorder: "",
        prerequisite: "8005",
        description: "The mysterious Fey have returned to Camelot... and with them, their ancient cities. You must prove to King Arthur that you are worthy of controlling such a powerful city. You will need to acquire <b>3 Morgana&#39;s Seals, 2 Mordred&#39;s Seals and 4 King Arthur&#39;s Crests</b> by conquering unowned Wildernesses of level 8 and higher. Then you can complete this quest to earn a <b>Sixth City Deed</b> and build a Fey City. You can also buy a Sixth City Deed directly from the <b>Court</b> section of the <b>Shop</b> or buy <b>Fey&#39;s Chests</b> and <b>Lord&#39;s Chests</b> from the Shop that contain Seals and Crests.",
        objective: ["999", ""],
        reward: [
            [0, 0, 0, 0, 0, 0],
            [],
            [
                [1206, 1],
                [401, 1]
            ],
            [0, 0, 0]
        ]
    },
    q8007: {
        heading: "Expand Your Kingdom",
        category: "Seventh City",
        name: "Earn Your Seventh City Deed",
        preferredorder: "",
        prerequisite: "8006",
        description: "The Fey have brought the wrath of Nature to Camelot, which has enchanted ancient cities. You must prove to King Arthur that you are worthy of controlling such a powerful city. You will need to acquire <b>4 Stag King&#39;s Seals, 3 Pendragon Seals and 2 Lady of the Lake&#39;s Seals</b> by conquering unowned Wildernesses of level 8 and higher. Then you can complete this quest to earn a <b>Seventh City Deed</b> and build a magical City. You can also buy a <b>Seventh City Deed</b> directly from the Court section of the Shop or buy <b>Avalon&#39;s Chests</b> and <b>Fey&#39;s Chests</b> from the Shop to obtain additional Seals. ",
        objective: ["999", ""],
        reward: [
            [0, 0, 0, 0, 0, 0],
            [],
            [
                [1207, 1],
                [401, 1]
            ],
            [0, 0, 0]
        ]
    },
    q8008: {
        heading: "",
        category: "",
        name: "",
        preferredorder: "",
        prerequisite: "9999",
        description: "",
        objective: ["999", ""],
        reward: [
            [0, 0, 0, 0, 0, 0],
            [],
            [],
            [0, 0, 0]
        ]
    },
    q8009: {
        heading: "",
        category: "",
        name: "",
        preferredorder: "",
        prerequisite: "9999",
        description: "",
        objective: ["999", ""],
        reward: [
            [0, 0, 0, 0, 0, 0],
            [],
            [],
            [0, 0, 0]
        ]
    },
    q8010: {
        heading: "",
        category: "",
        name: "",
        preferredorder: "",
        prerequisite: "9999",
        description: "",
        objective: ["999", ""],
        reward: [
            [0, 0, 0, 0, 0, 0],
            [],
            [],
            [0, 0, 0]
        ]
    },
    q11002: {
        heading: "Improve Your Title",
        category: "Improve Title",
        name: "Become Level 2 (Lord)",
        preferredorder: "3",
        prerequisite: "1021",
        description: "As your Might increases, King Arthur will reward you with a new Title that properly displays your prowess. You will not lose this Title if your Might decreases.",
        objective: ["999", "", 65],
        reward: [
            [1000, 0, 0, 0, 0, 0],
            [],
            [],
            [0, 0, 2]
        ]
    },
    q11003: {
        heading: "Improve Your Title",
        category: "Improve Title",
        name: "Become Level 3 (Lord)",
        preferredorder: "",
        prerequisite: "11002",
        description: "As your Might increases, King Arthur will reward you with a new Title that properly displays your prowess. You will not lose this Title if your Might decreases.",
        objective: ["999", "", 100],
        reward: [
            [1000, 0, 0, 0, 0, 0],
            [],
            [],
            [0, 0, 3]
        ]
    },
    q11004: {
        heading: "Improve Your Title",
        category: "Improve Title",
        name: "Become Level 4 (Esquire)",
        preferredorder: "",
        prerequisite: "11003",
        description: "As your Might increases, King Arthur will reward you with a new Title that properly displays your prowess. You will not lose this Title if your Might decreases.",
        objective: ["999", "", 150],
        reward: [
            [1000, 0, 0, 0, 0, 0],
            [],
            [],
            [0, 0, 4]
        ]
    },
    q11005: {
        heading: "Improve Your Title",
        category: "Improve Title",
        name: "Become Level 5 (Esquire)",
        preferredorder: "",
        prerequisite: "11004",
        description: "As your Might increases, King Arthur will reward you with a new Title that properly displays your prowess. You will not lose this Title if your Might decreases.",
        objective: ["999", "", 300],
        reward: [
            [1000, 0, 0, 0, 0, 0],
            [],
            [],
            [0, 0, 5]
        ]
    },
    q11006: {
        heading: "Improve Your Title",
        category: "Improve Title",
        name: "Become Level 6 (Esquire)",
        preferredorder: "",
        prerequisite: "11005",
        description: "As your Might increases, King Arthur will reward you with a new Title that properly displays your prowess. You will not lose this Title if your Might decreases.",
        objective: ["999", "", 500],
        reward: [
            [5000, 0, 0, 0, 0, 0],
            [],
            [],
            [0, 0, 6]
        ]
    },
    q11007: {
        heading: "Improve Your Title",
        category: "Improve Title",
        name: "Become Level 7 (Baronet)",
        preferredorder: "",
        prerequisite: "11006",
        description: "As your Might increases, King Arthur will reward you with a new Title that properly displays your prowess. You will not lose this Title if your Might decreases.",
        objective: ["999", "", 800],
        reward: [
            [5000, 0, 0, 0, 0, 0],
            [],
            [],
            [0, 0, 7]
        ]
    },
    q11008: {
        heading: "Improve Your Title",
        category: "Improve Title",
        name: "Become Level 8 (Baronet)",
        preferredorder: "",
        prerequisite: "11007",
        description: "As your Might increases, King Arthur will reward you with a new Title that properly displays your prowess. You will not lose this Title if your Might decreases.",
        objective: ["999", "", 1100],
        reward: [
            [5000, 0, 0, 0, 0, 0],
            [],
            [],
            [0, 0, 8]
        ]
    },
    q11009: {
        heading: "Improve Your Title",
        category: "Improve Title",
        name: "Become Level 9 (Baronet)",
        preferredorder: "",
        prerequisite: "11008",
        description: "As your Might increases, King Arthur will reward you with a new Title that properly displays your prowess. You will not lose this Title if your Might decreases.",
        objective: ["999", "", 1450],
        reward: [
            [10000, 0, 0, 0, 0, 0],
            [],
            [],
            [0, 0, 9]
        ]
    },
    q11010: {
        heading: "Improve Your Title",
        category: "Improve Title",
        name: "Become Level 10 (Baron)",
        preferredorder: "",
        prerequisite: "11009",
        description: "As your Might increases, King Arthur will reward you with a new Title that properly displays your prowess. You will not lose this Title if your Might decreases.",
        objective: ["999", "", 1800],
        reward: [
            [10000, 0, 0, 0, 0, 0],
            [],
            [],
            [0, 0, 10]
        ]
    },
    q11011: {
        heading: "Improve Your Title",
        category: "Improve Title",
        name: "Become Level 11 (Baron)",
        preferredorder: "",
        prerequisite: "11010",
        description: "As your Might increases, King Arthur will reward you with a new Title that properly displays your prowess. You will not lose this Title if your Might decreases.",
        objective: ["999", "", 2200],
        reward: [
            [10000, 0, 0, 0, 0, 0],
            [],
            [],
            [0, 0, 11]
        ]
    },
    q11012: {
        heading: "Improve Your Title",
        category: "Improve Title",
        name: "Become Level 12 (Baron)",
        preferredorder: "",
        prerequisite: "11011",
        description: "As your Might increases, King Arthur will reward you with a new Title that properly displays your prowess. You will not lose this Title if your Might decreases.",
        objective: ["999", "", 2600],
        reward: [
            [20000, 0, 0, 0, 0, 0],
            [],
            [],
            [0, 0, 12]
        ]
    },
    q11013: {
        heading: "Improve Your Title",
        category: "Improve Title",
        name: "Become Level 13 (Viscount)",
        preferredorder: "",
        prerequisite: "11012",
        description: "As your Might increases, King Arthur will reward you with a new Title that properly display your prowess. You will not lose this Title if your Might decreases.",
        objective: ["999", "", 3050],
        reward: [
            [20000, 0, 0, 0, 0, 0],
            [],
            [],
            [0, 0, 13]
        ]
    },
    q11014: {
        heading: "Improve Your Title",
        category: "Improve Title",
        name: "Become Level 14 (Viscount)",
        preferredorder: "",
        prerequisite: "11013",
        description: "As your Might increases, King Arthur will reward you with a new Title that properly displays your prowess. You will not lose this Title if your Might decreases.",
        objective: ["999", "", 3500],
        reward: [
            [20000, 0, 0, 0, 0, 0],
            [],
            [],
            [0, 0, 14]
        ]
    },
    q11015: {
        heading: "Improve Your Title",
        category: "Improve Title",
        name: "Become Level 15 (Viscount)",
        preferredorder: "",
        prerequisite: "11014",
        description: "As your Might increases, King Arthur will reward you with a new Title that properly displays your prowess. You will not lose this Title if your Might decreases.",
        objective: ["999", "", 4000],
        reward: [
            [30000, 0, 0, 0, 0, 0],
            [],
            [],
            [0, 0, 15]
        ]
    },
    q11016: {
        heading: "Improve Your Title",
        category: "Improve Title",
        name: "Become Level 16 (Count)",
        preferredorder: "",
        prerequisite: "11015",
        description: "As your Might increases, King Arthur will reward you with a new Title that properly displays your prowess. You will not lose this Title if your Might decreases.",
        objective: ["999", "", 4500],
        reward: [
            [30000, 0, 0, 0, 0, 0],
            [],
            [],
            [0, 0, 16]
        ]
    },
    q11017: {
        heading: "Improve Your Title",
        category: "Improve Title",
        name: "Become Level 17 (Count)",
        preferredorder: "",
        prerequisite: "11016",
        description: "As your Might increases, King Arthur will reward you with a new Title that properly displays your prowess. You will not lose this Title if your Might decreases.",
        objective: ["999", "", 5100],
        reward: [
            [30000, 0, 0, 0, 0, 0],
            [],
            [],
            [0, 0, 17]
        ]
    },
    q11018: {
        heading: "Improve Your Title",
        category: "Improve Title",
        name: "Become Level 18 (Count)",
        preferredorder: "",
        prerequisite: "11017",
        description: "As your Might increases, King Arthur will reward you with a new Title that properly displays your prowess. You will not lose this Title if your Might decreases.",
        objective: ["999", "", 5850],
        reward: [
            [40000, 0, 0, 0, 0, 0],
            [],
            [],
            [0, 0, 18]
        ]
    },
    q11019: {
        heading: "Improve Your Title",
        category: "Improve Title",
        name: "Become Level 19 (Vice Earl)",
        preferredorder: "",
        prerequisite: "11018",
        description: "As your Might increases, King Arthur will reward you with a new Title that properly displays your prowess. You will not lose this Title if your Might decreases.",
        objective: ["999", "", 7000],
        reward: [
            [40000, 0, 0, 0, 0, 0],
            [],
            [],
            [0, 0, 19]
        ]
    },
    q11020: {
        heading: "Improve Your Title",
        category: "Improve Title",
        name: "Become Level 20 (Vice Earl)",
        preferredorder: "",
        prerequisite: "11019",
        description: "As your Might increases, King Arthur will reward you with a new Title that properly displays your prowess. You will not lose this Title if your Might decreases.",
        objective: ["999", "", 8250],
        reward: [
            [40000, 0, 0, 0, 0, 0],
            [],
            [],
            [0, 0, 20]
        ]
    },
    q11021: {
        heading: "Improve Your Title",
        category: "Improve Title",
        name: "Become Level 21 (Vice Earl)",
        preferredorder: "",
        prerequisite: "11020",
        description: "As your Might increases, King Arthur will reward you with a new Title that properly displays your prowess. You will not lose this Title if your Might decreases.",
        objective: ["999", "", 9500],
        reward: [
            [50000, 0, 0, 0, 0, 0],
            [],
            [],
            [0, 0, 21]
        ]
    },
    q11022: {
        heading: "Improve Your Title",
        category: "Improve Title",
        name: "Become Level 22 (Earl)",
        preferredorder: "",
        prerequisite: "11021",
        description: "As your Might increases, King Arthur will reward you with a new Title that properly displays your prowess. You will not lose this Title if your Might decreases.",
        objective: ["999", "", 11000],
        reward: [
            [50000, 0, 0, 0, 0, 0],
            [],
            [],
            [0, 0, 22]
        ]
    },
    q11023: {
        heading: "Improve Your Title",
        category: "Improve Title",
        name: "Become Level 23 (Earl)",
        preferredorder: "",
        prerequisite: "11022",
        description: "As your Might increases, King Arthur will reward you with a new Title that properly displays your prowess. You will not lose this Title if your Might decreases.",
        objective: ["999", "", 12900],
        reward: [
            [50000, 0, 0, 0, 0, 0],
            [],
            [],
            [0, 0, 23]
        ]
    },
    q11024: {
        heading: "Improve Your Title",
        category: "Improve Title",
        name: "Become Level 24 (Earl)",
        preferredorder: "",
        prerequisite: "11023",
        description: "As your Might increases, King Arthur will reward you with a new Title that properly displays your prowess. You will not lose this Title if your Might decreases.",
        objective: ["999", "", 14800],
        reward: [
            [60000, 0, 0, 0, 0, 0],
            [],
            [],
            [0, 0, 24]
        ]
    },
    q11025: {
        heading: "Improve Your Title",
        category: "Improve Title",
        name: "Become Level 25 (Marquis)",
        preferredorder: "",
        prerequisite: "11024",
        description: "As your Might increases, King Arthur will reward you with a new Title that properly displays your prowess. You will not lose this Title if your Might decreases.",
        objective: ["999", "", 16750],
        reward: [
            [60000, 0, 0, 0, 0, 0],
            [],
            [],
            [0, 0, 25]
        ]
    },
    q11026: {
        heading: "Improve Your Title",
        category: "Improve Title",
        name: "Become Level 26 (Marquis)",
        preferredorder: "",
        prerequisite: "11025",
        description: "As your Might increases, King Arthur will reward you with a new Title that properly displays your prowess. You will not lose this Title if your Might decreases.",
        objective: ["999", "", 19500],
        reward: [
            [60000, 0, 0, 0, 0, 0],
            [],
            [],
            [0, 0, 26]
        ]
    },
    q11027: {
        heading: "Improve Your Title",
        category: "Improve Title",
        name: "Become Level 27 (Marquis)",
        preferredorder: "",
        prerequisite: "11026",
        description: "As your Might increases, King Arthur will reward you with a new Title that properly displays your prowess. You will not lose this Title if your Might decreases.",
        objective: ["999", "", 22250],
        reward: [
            [70000, 0, 0, 0, 0, 0],
            [],
            [],
            [0, 0, 27]
        ]
    },
    q11028: {
        heading: "Improve Your Title",
        category: "Improve Title",
        name: "Become Level 28 (Grand Marquis)",
        preferredorder: "",
        prerequisite: "11027",
        description: "As your Might increases, King Arthur will reward you with a new Title that properly displays your prowess. You will not lose this Title if your Might decreases.",
        objective: ["999", "", 25000],
        reward: [
            [70000, 0, 0, 0, 0, 0],
            [],
            [],
            [0, 0, 28]
        ]
    },
    q11029: {
        heading: "Improve Your Title",
        category: "Improve Title",
        name: "Become Level 29 (Grand Marquis)",
        preferredorder: "",
        prerequisite: "11028",
        description: "As your Might increases, King Arthur will reward you with a new Title that properly displays your prowess. You will not lose this Title if your Might decreases.",
        objective: ["999", "", 29000],
        reward: [
            [70000, 0, 0, 0, 0, 0],
            [],
            [],
            [0, 0, 29]
        ]
    },
    q11030: {
        heading: "Improve Your Title",
        category: "Improve Title",
        name: "Become Level 30 (Grand Marquis)",
        preferredorder: "",
        prerequisite: "11029",
        description: "As your Might increases, King Arthur will reward you with a new Title that properly displays your prowess. You will not lose this Title if your Might decreases.",
        objective: ["999", "", 33000],
        reward: [
            [80000, 0, 0, 0, 0, 0],
            [],
            [],
            [0, 0, 30]
        ]
    },
    q11031: {
        heading: "Improve Your Title",
        category: "Improve Title",
        name: "Become Level 31 (Duke)",
        preferredorder: "",
        prerequisite: "11030",
        description: "As your Might increases, King Arthur will reward you with a new Title that properly displays your prowess. You will not lose this Title if your Might decreases.",
        objective: ["999", "", 37000],
        reward: [
            [80000, 0, 0, 0, 0, 0],
            [],
            [],
            [0, 0, 31]
        ]
    },
    q11032: {
        heading: "Improve Your Title",
        category: "Improve Title",
        name: "Become Level 32 (Duke)",
        preferredorder: "",
        prerequisite: "11031",
        description: "As your Might increases, King Arthur will reward you with a new Title that properly displays your prowess. You will not lose this Title if your Might decreases.",
        objective: ["999", "", 43000],
        reward: [
            [80000, 0, 0, 0, 0, 0],
            [],
            [],
            [0, 0, 32]
        ]
    },
    q11033: {
        heading: "Improve Your Title",
        category: "Improve Title",
        name: "Become Level 33 (Duke)",
        preferredorder: "",
        prerequisite: "11032",
        description: "As your Might increases, King Arthur will reward you with a new Title that properly displays your prowess. You will not lose this Title if your Might decreases.",
        objective: ["999", "", 49000],
        reward: [
            [90000, 0, 0, 0, 0, 0],
            [],
            [],
            [0, 0, 33]
        ]
    },
    q11034: {
        heading: "Improve Your Title",
        category: "Improve Title",
        name: "Become Level 34 (Grand Duke)",
        preferredorder: "",
        prerequisite: "11033",
        description: "As your Might increases, King Arthur will reward you with a new Title that properly displays your prowess. You will not lose this Title if your Might decreases.",
        objective: ["999", "", 55000],
        reward: [
            [90000, 0, 0, 0, 0, 0],
            [],
            [],
            [0, 0, 34]
        ]
    },
    q11035: {
        heading: "Improve Your Title",
        category: "Improve Title",
        name: "Become Level 35 (Grand Duke)",
        preferredorder: "",
        prerequisite: "11034",
        description: "As your Might increases, King Arthur will reward you with a new Title that properly displays your prowess. You will not lose this Title if your Might decreases.",
        objective: ["999", "", 63000],
        reward: [
            [90000, 0, 0, 0, 0, 0],
            [],
            [],
            [0, 0, 35]
        ]
    },
    q11036: {
        heading: "Improve Your Title",
        category: "Improve Title",
        name: "Become Level 36 (Grand Duke)",
        preferredorder: "",
        prerequisite: "11035",
        description: "As your Might increases, King Arthur will reward you with a new Title that properly displays your prowess. You will not lose this Title if your Might decreases.",
        objective: ["999", "", 71000],
        reward: [
            [100000, 0, 0, 0, 0, 0],
            [],
            [],
            [0, 0, 36]
        ]
    },
    q11037: {
        heading: "Improve Your Title",
        category: "Improve Title",
        name: "Become Level 37 (Archduke)",
        preferredorder: "",
        prerequisite: "11036",
        description: "As your Might increases, King Arthur will reward you with a new Title that properly displays your prowess. You will not lose this Title if your Might decreases.",
        objective: ["999", "", 81000],
        reward: [
            [100000, 0, 0, 0, 0, 0],
            [],
            [],
            [0, 0, 37]
        ]
    },
    q11038: {
        heading: "Improve Your Title",
        category: "Improve Title",
        name: "Become Level 38 (Archduke)",
        preferredorder: "",
        prerequisite: "11037",
        description: "As your Might increases, King Arthur will reward you with a new Title that properly displays your prowess. You will not lose this Title if your Might decreases.",
        objective: ["999", "", 93000],
        reward: [
            [100000, 0, 0, 0, 0, 0],
            [],
            [],
            [0, 0, 38]
        ]
    },
    q11039: {
        heading: "Improve Your Title",
        category: "Improve Title",
        name: "Become Level 39 (Archduke)",
        preferredorder: "",
        prerequisite: "11038",
        description: "As your Might increases, King Arthur will reward you with a new Title that properly displays your prowess. You will not lose this Title if your Might decreases.",
        objective: ["999", "", 105000],
        reward: [
            [100000, 0, 0, 0, 0, 0],
            [],
            [],
            [0, 0, 39]
        ]
    },
    q11040: {
        heading: "Improve Your Title",
        category: "Improve Title",
        name: "Become Level 40 (Grand Knight)",
        preferredorder: "",
        prerequisite: "11039",
        description: "As your Might increases, King Arthur will reward you with a new Title that properly displays your prowess. You will not lose this Title if your Might decreases.",
        objective: ["999", "", 118000],
        reward: [
            [100000, 0, 0, 0, 0, 0],
            [],
            [],
            [0, 0, 40]
        ]
    },
    q11041: {
        heading: "Improve Your Title",
        category: "Improve Title",
        name: "Become Level 41 (Grand Knight)",
        preferredorder: "",
        prerequisite: "11040",
        description: "As your Might increases, King Arthur will reward you with a new Title that properly displays your prowess. You will not lose this Title if your Might decreases.",
        objective: ["999", "", 135000],
        reward: [
            [100000, 0, 0, 0, 0, 0],
            [],
            [],
            [0, 0, 41]
        ]
    },
    q11042: {
        heading: "Improve Your Title",
        category: "Improve Title",
        name: "Become Level 42 (Grand Knight)",
        preferredorder: "",
        prerequisite: "11041",
        description: "As your Might increases, King Arthur will reward you with a new Title that properly displays your prowess. You will not lose this Title if your Might decreases.",
        objective: ["999", "", 152000],
        reward: [
            [100000, 0, 0, 0, 0, 0],
            [],
            [],
            [0, 0, 42]
        ]
    },
    q11043: {
        heading: "Improve Your Title",
        category: "Improve Title",
        name: "Become Level 43 (Knight of Camelot)",
        preferredorder: "",
        prerequisite: "11042",
        description: "As your Might increases, King Arthur will reward you with a new Title that properly displays your prowess. You will not lose this Title if your Might decreases.",
        objective: ["999", "", 170000],
        reward: [
            [100000, 0, 0, 0, 0, 0],
            [],
            [],
            [0, 0, 43]
        ]
    },
    q11044: {
        heading: "Improve Your Title",
        category: "Improve Title",
        name: "Become Level 44 (Knight of Camelot)",
        preferredorder: "",
        prerequisite: "11043",
        description: "As your Might increases, King Arthur will reward you with a new Title that properly displays your prowess. You will not lose this Title if your Might decreases.",
        objective: ["999", "", 196000],
        reward: [
            [100000, 0, 0, 0, 0, 0],
            [],
            [],
            [0, 0, 44]
        ]
    },
    q11045: {
        heading: "Improve Your Title",
        category: "Improve Title",
        name: "Become Level 45 (Knight of Camelot)",
        preferredorder: "",
        prerequisite: "11044",
        description: "As your Might increases, King Arthur will reward you with a new Title that properly displays your prowess. You will not lose this Title if your Might decreases.",
        objective: ["999", "", 222000],
        reward: [
            [100000, 0, 0, 0, 0, 0],
            [],
            [],
            [0, 0, 45]
        ]
    },
    q11046: {
        heading: "Improve Your Title",
        category: "Improve Title",
        name: "Become Level 46 (Knight of the Round)",
        preferredorder: "",
        prerequisite: "11045",
        description: "As your Might increases, King Arthur will reward you with a new Title that properly displays your prowess. You will not lose this Title if your Might decreases.",
        objective: ["999", "", 250000],
        reward: [
            [100000, 0, 0, 0, 0, 0],
            [],
            [],
            [0, 0, 46]
        ]
    },
    q11047: {
        heading: "Improve Your Title",
        category: "Improve Title",
        name: "Become Level 47 (Knight of the Round)",
        preferredorder: "",
        prerequisite: "11046",
        description: "As your Might increases, King Arthur will reward you with a new Title that properly displays your prowess. You will not lose this Title if your Might decreases.",
        objective: ["999", "", 261000],
        reward: [
            [100000, 0, 0, 0, 0, 0],
            [],
            [],
            [0, 0, 47]
        ]
    },
    q11048: {
        heading: "Improve Your Title",
        category: "Improve Title",
        name: "Become Level 48 (Knight of the Round)",
        preferredorder: "",
        prerequisite: "11047",
        description: "As your Might increases, King Arthur will reward you with a new Title that properly displays your prowess. You will not lose this Title if your Might decreases.",
        objective: ["999", "", 310000],
        reward: [
            [100000, 0, 0, 0, 0, 0],
            [],
            [],
            [0, 0, 48]
        ]
    },
    q11049: {
        heading: "Improve Your Title",
        category: "Improve Title",
        name: "Become Level 49 (Grail Knight)",
        preferredorder: "",
        prerequisite: "11048",
        description: "As your Might increases, King Arthur will reward you with a new Title that properly displays your prowess. You will not lose this Title if your Might decreases.",
        objective: ["999", "", 375000],
        reward: [
            [100000, 0, 0, 0, 0, 0],
            [],
            [],
            [0, 0, 49]
        ]
    },
    q11050: {
        heading: "Improve Your Title",
        category: "Improve Title",
        name: "Become Level 50 (Grail Knight)",
        preferredorder: "",
        prerequisite: "11049",
        description: "As your Might increases, King Arthur will reward you with a new Title that properly displays your prowess. You will not lose this Title if your Might decreases.",
        objective: ["999", "", 441000],
        reward: [
            [100000, 0, 0, 0, 0, 0],
            [],
            [],
            [0, 0, 50]
        ]
    },
    q11051: {
        heading: "Improve Your Title",
        category: "Improve Title",
        name: "Become Level 51 (Grail Knight)",
        preferredorder: "",
        prerequisite: "11050",
        description: "As your Might increases, King Arthur will reward you with a new Title that properly displays your prowess. You will not lose this Title if your Might decreases.",
        objective: ["999", "", 507000],
        reward: [
            [100000, 0, 0, 0, 0, 0],
            [],
            [],
            [0, 0, 51]
        ]
    },
    q11052: {
        heading: "Improve Your Title",
        category: "Improve Title",
        name: "Become Level 52 (Head Knight)",
        preferredorder: "",
        prerequisite: "11051",
        description: "As your Might increases, King Arthur will reward you with a new Title that properly displays your prowess. You will not lose this Title if your Might decreases.",
        objective: ["999", "", 575000],
        reward: [
            [100000, 0, 0, 0, 0, 0],
            [],
            [],
            [0, 0, 52]
        ]
    },
    q11053: {
        heading: "Improve Your Title",
        category: "Improve Title",
        name: "Become Level 53 (Head Knight)",
        preferredorder: "",
        prerequisite: "11052",
        description: "As your Might increases, King Arthur will reward you with a new Title that properly displays your prowess. You will not lose this Title if your Might decreases.",
        objective: ["999", "", 665000],
        reward: [
            [100000, 0, 0, 0, 0, 0],
            [],
            [],
            [0, 0, 53]
        ]
    },
    q11054: {
        heading: "Improve Your Title",
        category: "Improve Title",
        name: "Become Level 54 (Head Knight)",
        preferredorder: "",
        prerequisite: "11053",
        description: "As your Might increases, King Arthur will reward you with a new Title that properly displays your prowess. You will not lose this Title if your Might decreases.",
        objective: ["999", "", 755000],
        reward: [
            [100000, 0, 0, 0, 0, 0],
            [],
            [],
            [0, 0, 54]
        ]
    },
    q11055: {
        heading: "Improve Your Title",
        category: "Improve Title",
        name: "Become Level 55 (Prince)",
        preferredorder: "",
        prerequisite: "11054",
        description: "As your Might increases, King Arthur will reward you with a new Title that properly displays your prowess. You will not lose this Title if your Might decreases.",
        objective: ["999", "", 850000],
        reward: [
            [100000, 0, 0, 0, 0, 0],
            [],
            [],
            [0, 0, 55]
        ]
    },
    q11056: {
        heading: "Improve Your Title",
        category: "Improve Title",
        name: "Become Level 56 (Prince)",
        preferredorder: "",
        prerequisite: "11055",
        description: "As your Might increases, King Arthur will reward you with a new Title that properly displays your prowess. You will not lose this Title if your Might decreases.",
        objective: ["999", "", 983000],
        reward: [
            [100000, 0, 0, 0, 0, 0],
            [],
            [],
            [0, 0, 56]
        ]
    },
    q11057: {
        heading: "Improve Your Title",
        category: "Improve Title",
        name: "Become Level 57 (Prince)",
        preferredorder: "",
        prerequisite: "11056",
        description: "As your Might increases, King Arthur will reward you with a new Title that properly displays your prowess. You will not lose this Title if your Might decreases.",
        objective: ["999", "", 1116000],
        reward: [
            [100000, 0, 0, 0, 0, 0],
            [],
            [],
            [0, 0, 57]
        ]
    },
    q11058: {
        heading: "Improve Your Title",
        category: "Improve Title",
        name: "Become Level 58 (High Prince)",
        preferredorder: "",
        prerequisite: "11057",
        description: "As your Might increases, King Arthur will reward you with a new Title that properly displays your prowess. You will not lose this Title if your Might decreases.",
        objective: ["999", "", 1250000],
        reward: [
            [100000, 0, 0, 0, 0, 0],
            [],
            [],
            [0, 0, 58]
        ]
    },
    q11059: {
        heading: "Improve Your Title",
        category: "Improve Title",
        name: "Become Level 59 (High Prince)",
        preferredorder: "",
        prerequisite: "11058",
        description: "As your Might increases, King Arthur will reward you with a new Title that properly displays your prowess. You will not lose this Title if your Might decreases.",
        objective: ["999", "", 1400000],
        reward: [
            [100000, 0, 0, 0, 0, 0],
            [],
            [],
            [0, 0, 59]
        ]
    },
    q11060: {
        heading: "Improve Your Title",
        category: "Improve Title",
        name: "Become Level 60 (High Prince)",
        preferredorder: "",
        prerequisite: "11059",
        description: "As your Might increases, King Arthur will reward you with a new Title that properly displays your prowess. You will not lose this Title if your Might decreases.",
        objective: ["999", "", 2000000],
        reward: [
            [100000, 0, 0, 0, 0, 0],
            [],
            [],
            [0, 0, 60]
        ]
    },
    q11061: {
        heading: "Improve Your Title",
        category: "Improve Title",
        name: "Become Level 61 (Grand Prince)",
        preferredorder: "",
        prerequisite: "11060",
        description: "As your Might increases, King Arthur will reward you with a new Title that properly displays your prowess. You will not lose this Title if your Might decreases.",
        objective: ["999", "", 2140000],
        reward: [
            [200000, 0, 0, 0, 0, 0],
            [],
            [],
            [0, 0, 61]
        ]
    },
    q11062: {
        heading: "Improve Your Title",
        category: "Improve Title",
        name: "Become Level 62 (Grand Prince)",
        preferredorder: "",
        prerequisite: "11061",
        description: "As your Might increases, King Arthur will reward you with a new Title that properly displays your prowess. You will not lose this Title if your Might decreases.",
        objective: ["999", "", 2280000],
        reward: [
            [200000, 0, 0, 0, 0, 0],
            [],
            [],
            [0, 0, 62]
        ]
    },
    q11063: {
        heading: "Improve Your Title",
        category: "Improve Title",
        name: "Become Level 63 (Grand Prince)",
        preferredorder: "",
        prerequisite: "11062",
        description: "As your Might increases, King Arthur will reward you with a new Title that properly displays your prowess. You will not lose this Title if your Might decreases.",
        objective: ["999", "", 2420000],
        reward: [
            [200000, 0, 0, 0, 0, 0],
            [],
            [],
            [0, 0, 63]
        ]
    },
    q11064: {
        heading: "Improve Your Title",
        category: "Improve Title",
        name: "Become Level 64 (Ayer Prince)",
        preferredorder: "",
        prerequisite: "11063",
        description: "As your Might increases, King Arthur will reward you with a new Title that properly displays your prowess. You will not lose this Title if your Might decreases.",
        objective: ["999", "", 2560000],
        reward: [
            [200000, 0, 0, 0, 0, 0],
            [],
            [],
            [0, 0, 64]
        ]
    },
    q11065: {
        heading: "Improve Your Title",
        category: "Improve Title",
        name: "Become Level 65 (Ayer Prince)",
        preferredorder: "",
        prerequisite: "11064",
        description: "As your Might increases, King Arthur will reward you with a new Title that properly displays your prowess. You will not lose this Title if your Might decreases.",
        objective: ["999", "", 2700000],
        reward: [
            [200000, 0, 0, 0, 0, 0],
            [],
            [],
            [0, 0, 65]
        ]
    },
    q11066: {
        heading: "Improve Your Title",
        category: "Improve Title",
        name: "Become Level 66 (Ayer Prince)",
        preferredorder: "",
        prerequisite: "11065",
        description: "As your Might increases, King Arthur will reward you with a new Title that properly displays your prowess. You will not lose this Title if your Might decreases.",
        objective: ["999", "", 2860000],
        reward: [
            [200000, 0, 0, 0, 0, 0],
            [],
            [],
            [0, 0, 66]
        ]
    },
    q11067: {
        heading: "Improve Your Title",
        category: "Improve Title",
        name: "Become Level 67 (Protector)",
        preferredorder: "",
        prerequisite: "11066",
        description: "As your Might increases, King Arthur will reward you with a new Title that properly displays your prowess. You will not lose this Title if your Might decreases.",
        objective: ["999", "", 3020000],
        reward: [
            [200000, 0, 0, 0, 0, 0],
            [],
            [],
            [0, 0, 67]
        ]
    },
    q11068: {
        heading: "Improve Your Title",
        category: "Improve Title",
        name: "Become Level 68 (Protector)",
        preferredorder: "",
        prerequisite: "11067",
        description: "As your Might increases, King Arthur will reward you with a new Title that properly displays your prowess. You will not lose this Title if your Might decreases.",
        objective: ["999", "", 3180000],
        reward: [
            [200000, 0, 0, 0, 0, 0],
            [],
            [],
            [0, 0, 68]
        ]
    },
    q11069: {
        heading: "Improve Your Title",
        category: "Improve Title",
        name: "Become Level 69 (Protector)",
        preferredorder: "",
        prerequisite: "11068",
        description: "As your Might increases, King Arthur will reward you with a new Title that properly displays your prowess. You will not lose this Title if your Might decreases.",
        objective: ["999", "", 3340000],
        reward: [
            [200000, 0, 0, 0, 0, 0],
            [],
            [],
            [0, 0, 69]
        ]
    },
    q11070: {
        heading: "Improve Your Title",
        category: "Improve Title",
        name: "Become Level 70 (High Protector)",
        preferredorder: "",
        prerequisite: "11069",
        description: "As your Might increases, King Arthur will reward you with a new Title that properly displays your prowess. You will not lose this Title if your Might decreases.",
        objective: ["999", "", 3500000],
        reward: [
            [200000, 0, 0, 0, 0, 0],
            [],
            [],
            [0, 0, 70]
        ]
    },
    q11071: {
        heading: "Improve Your Title",
        category: "Improve Title",
        name: "Become Level 71 (High Protector)",
        preferredorder: "",
        prerequisite: "11070",
        description: "As your Might increases, King Arthur will reward you with a new Title that properly displays your prowess. You will not lose this Title if your Might decreases.",
        objective: ["999", "", 3660000],
        reward: [
            [400000, 0, 0, 0, 0, 0],
            [],
            [],
            [0, 0, 71]
        ]
    },
    q11072: {
        heading: "Improve Your Title",
        category: "Improve Title",
        name: "Become Level 72 (High Protector)",
        preferredorder: "",
        prerequisite: "11071",
        description: "As your Might increases, King Arthur will reward you with a new Title that properly displays your prowess. You will not lose this Title if your Might decreases.",
        objective: ["999", "", 3820000],
        reward: [
            [400000, 0, 0, 0, 0, 0],
            [],
            [],
            [0, 0, 72]
        ]
    },
    q11073: {
        heading: "Improve Your Title",
        category: "Improve Title",
        name: "Become Level 73 (Grand Protector)",
        preferredorder: "",
        prerequisite: "11072",
        description: "As your Might increases, King Arthur will reward you with a new Title that properly displays your prowess. You will not lose this Title if your Might decreases.",
        objective: ["999", "", 3980000],
        reward: [
            [400000, 0, 0, 0, 0, 0],
            [],
            [],
            [0, 0, 73]
        ]
    },
    q11074: {
        heading: "Improve Your Title",
        category: "Improve Title",
        name: "Become Level 74 (Grand Protector)",
        preferredorder: "",
        prerequisite: "11073",
        description: "As your Might increases, King Arthur will reward you with a new Title that properly displays your prowess. You will not lose this Title if your Might decreases.",
        objective: ["999", "", 4140000],
        reward: [
            [400000, 0, 0, 0, 0, 0],
            [],
            [],
            [0, 0, 74]
        ]
    },
    q11075: {
        heading: "Improve Your Title",
        category: "Improve Title",
        name: "Become Level 75 (Grand Protector)",
        preferredorder: "",
        prerequisite: "11074",
        description: "As your Might increases, King Arthur will reward you with a new Title that properly displays your prowess. You will not lose this Title if your Might decreases.",
        objective: ["999", "", 4300000],
        reward: [
            [400000, 0, 0, 0, 0, 0],
            [],
            [],
            [0, 0, 75]
        ]
    },
    q11076: {
        heading: "Improve Your Title",
        category: "Improve Title",
        name: "Become Level 76 (Vice Regent)",
        preferredorder: "",
        prerequisite: "11075",
        description: "As your Might increases, King Arthur will reward you with a new Title that properly displays your prowess. You will not lose this Title if your Might decreases.",
        objective: ["999", "", 4460000],
        reward: [
            [400000, 0, 0, 0, 0, 0],
            [],
            [],
            [0, 0, 76]
        ]
    },
    q11077: {
        heading: "Improve Your Title",
        category: "Improve Title",
        name: "Become Level 77 (Vice Regent)",
        preferredorder: "",
        prerequisite: "11076",
        description: "As your Might increases, King Arthur will reward you with a new Title that properly displays your prowess. You will not lose this Title if your Might decreases.",
        objective: ["999", "", 4620000],
        reward: [
            [400000, 0, 0, 0, 0, 0],
            [],
            [],
            [0, 0, 77]
        ]
    },
    q11078: {
        heading: "Improve Your Title",
        category: "Improve Title",
        name: "Become Level 78 (Vice Regent)",
        preferredorder: "",
        prerequisite: "11077",
        description: "As your Might increases, King Arthur will reward you with a new Title that properly displays your prowess. You will not lose this Title if your Might decreases.",
        objective: ["999", "", 4780000],
        reward: [
            [400000, 0, 0, 0, 0, 0],
            [],
            [],
            [0, 0, 78]
        ]
    },
    q11079: {
        heading: "Improve Your Title",
        category: "Improve Title",
        name: "Become Level 79 (Regent)",
        preferredorder: "",
        prerequisite: "11078",
        description: "As your Might increases, King Arthur will reward you with a new Title that properly displays your prowess. You will not lose this Title if your Might decreases.",
        objective: ["999", "", 4940000],
        reward: [
            [400000, 0, 0, 0, 0, 0],
            [],
            [],
            [0, 0, 79]
        ]
    },
    q11080: {
        heading: "Improve Your Title",
        category: "Improve Title",
        name: "Become Level 80 (Regent)",
        preferredorder: "",
        prerequisite: "11079",
        description: "As your Might increases, King Arthur will reward you with a new Title that properly displays your prowess. You will not lose this Title if your Might decreases.",
        objective: ["999", "", 5100000],
        reward: [
            [400000, 0, 0, 0, 0, 0],
            [],
            [],
            [0, 0, 80]
        ]
    },
    q11081: {
        heading: "Improve Your Title",
        category: "Improve Title",
        name: "Become Level 81 (Regent)",
        preferredorder: "",
        prerequisite: "11080",
        description: "As your Might increases, King Arthur will reward you with a new Title that properly displays your prowess. You will not lose this Title if your Might decreases.",
        objective: ["999", "", 5240000],
        reward: [
            [400000, 0, 0, 0, 0, 0],
            [],
            [],
            [0, 0, 81]
        ]
    },
    q11082: {
        heading: "Improve Your Title",
        category: "Improve Title",
        name: "Become Level 82 (High Regent)",
        preferredorder: "",
        prerequisite: "11081",
        description: "As your Might increases, King Arthur will reward you with a new Title that properly displays your prowess. You will not lose this Title if your Might decreases.",
        objective: ["999", "", 5380000],
        reward: [
            [400000, 0, 0, 0, 0, 0],
            [],
            [],
            [0, 0, 82]
        ]
    },
    q11083: {
        heading: "Improve Your Title",
        category: "Improve Title",
        name: "Become Level 83 (High Regent)",
        preferredorder: "",
        prerequisite: "11082",
        description: "As your Might increases, King Arthur will reward you with a new Title that properly displays your prowess. You will not lose this Title if your Might decreases.",
        objective: ["999", "", 5520000],
        reward: [
            [400000, 0, 0, 0, 0, 0],
            [],
            [],
            [0, 0, 83]
        ]
    },
    q11084: {
        heading: "Improve Your Title",
        category: "Improve Title",
        name: "Become Level 84 (High Regent)",
        preferredorder: "",
        prerequisite: "11083",
        description: "As your Might increases, King Arthur will reward you with a new Title that properly displays your prowess. You will not lose this Title if your Might decreases.",
        objective: ["999", "", 5660000],
        reward: [
            [400000, 0, 0, 0, 0, 0],
            [],
            [],
            [0, 0, 84]
        ]
    },
    q11085: {
        heading: "Improve Your Title",
        category: "Improve Title",
        name: "Become Level 85 (Monarch-Errant)",
        preferredorder: "",
        prerequisite: "11084",
        description: "As your Might increases, King Arthur will reward you with a new Title that properly displays your prowess. You will not lose this Title if your Might decreases.",
        objective: ["999", "", 5800000],
        reward: [
            [400000, 0, 0, 0, 0, 0],
            [],
            [],
            [0, 0, 85]
        ]
    },
    q11086: {
        heading: "Improve Your Title",
        category: "Improve Title",
        name: "Become Level 86 (Monarch-Errant)",
        preferredorder: "",
        prerequisite: "11085",
        description: "As your Might increases, King Arthur will reward you with a new Title that properly displays your prowess. You will not lose this Title if your Might decreases.",
        objective: ["999", "", 5940000],
        reward: [
            [400000, 0, 0, 0, 0, 0],
            [],
            [],
            [0, 0, 86]
        ]
    },
    q11087: {
        heading: "Improve Your Title",
        category: "Improve Title",
        name: "Become Level 87 (Monarch-Errant)",
        preferredorder: "",
        prerequisite: "11086",
        description: "As your Might increases, King Arthur will reward you with a new Title that properly displays your prowess. You will not lose this Title if your Might decreases.",
        objective: ["999", "", 6080000],
        reward: [
            [400000, 0, 0, 0, 0, 0],
            [],
            [],
            [0, 0, 87]
        ]
    },
    q11088: {
        heading: "Improve Your Title",
        category: "Improve Title",
        name: "Become Level 88 (Monarch)",
        preferredorder: "",
        prerequisite: "11087",
        description: "As your Might increases, King Arthur will reward you with a new Title that properly displays your prowess. You will not lose this Title if your Might decreases.",
        objective: ["999", "", 6220000],
        reward: [
            [400000, 0, 0, 0, 0, 0],
            [],
            [],
            [0, 0, 88]
        ]
    },
    q11089: {
        heading: "Improve Your Title",
        category: "Improve Title",
        name: "Become Level 89 (Monarch)",
        preferredorder: "",
        prerequisite: "11088",
        description: "As your Might increases, King Arthur will reward you with a new Title that properly displays your prowess. You will not lose this Title if your Might decreases.",
        objective: ["999", "", 6360000],
        reward: [
            [400000, 0, 0, 0, 0, 0],
            [],
            [],
            [0, 0, 89]
        ]
    },
    q11090: {
        heading: "Improve Your Title",
        category: "Improve Title",
        name: "Become Level 90 (Monarch)",
        preferredorder: "",
        prerequisite: "11089",
        description: "As your Might increases, King Arthur will reward you with a new Title that properly displays your prowess. You will not lose this Title if your Might decreases.",
        objective: ["999", "", 6500000],
        reward: [
            [400000, 0, 0, 0, 0, 0],
            [],
            [],
            [0, 0, 90]
        ]
    },
    q12001: {
        heading: "Build Your City",
        category: "Building Speedups",
        name: "Speedy Progress",
        preferredorder: "7",
        prerequisite: "1031",
        description: "Time and tide wait for no man. Fortunately, you can speed things along! Use your an Hourglass to complete this quest. You can access your items by clicking on the &#39;Inventory&#39; button at the top of the main screen.",
        objective: ["999", ""],
        reward: [
            [1000, 0, 0, 0, 0, 0],
            [],
            [
                [1, 1]
            ],
            [0, 0, 0]
        ]
    },
    q12002: {
        heading: "Build Your City",
        category: "Building Speedups",
        name: "The Speed of Knight",
        preferredorder: "19",
        prerequisite: "1042",
        description: "Not all that glitters is gold. With Gems, you may purchase amazing items to speed up your buildings and other wonders. To complete this quest, purchase a Knight&#39;s Hourglass, which will speed up your building or research time by up to 15 minutes. You must purchase the item from the store by clicking the &#39;Shop&#39; button on the main screen. Once you have purchased the Knight&#39;s Hourglass, you can use it by clicking &#39;Speedup&#39; when you are creating or upgrading a building or researching.",
        objective: ["999", ""],
        reward: [
            [2500, 0, 0, 0, 0, 0],
            [],
            [
                [2, 1]
            ],
            [0, 0, 0]
        ]
    },
    q21095: {
        heading: "Build Your City",
        category: "Building Help",
        name: "Ask for Help",
        preferredorder: "",
        prerequisite: "1051",
        description: "Building can take a while, but can be reduced by a little help from your friends! Post a request for building help to your feed, and each of your friends that clicks on it will help shorten your build time by one minute, up to a total reduction of 10 minutes.",
        objective: ["999", ""],
        reward: [
            [0, 500, 500, 500, 500, 0],
            [],
            [],
            [0, 0, 0]
        ]
    },
    q999001: {
        heading: "Raise Your Army",
        category: "Knight Recruitment",
        name: "Appoint a Knight",
        preferredorder: "9",
        prerequisite: "1071",
        description: "Knights are the leaders of your armies and your city. Knights can be recruited from your Facebook friends. Your Knights will level up over time, and become more powerful. <b>Click on the Knights&#39; Hall</b> to Appoint a Knight to lead your people. <a onclick=openKnightsHall()>Go to Knights&#39; Hall</a>. ",
        objective: ["999", ""],
        reward: [
            [1000, 0, 0, 0, 0, 0],
            [],
            [],
            [0, 0, 0]
        ]
    },
    q999002: {
        heading: "Raise Your Army",
        category: "Knight Recruitment",
        name: "Assign a Knight to a Role",
        preferredorder: "10",
        prerequisite: "999001",
        description: "Knights can be assigned to Roles to oversee and improve various parts of your city. The Foreman speeds up Building, the Steward improves Resource production, the Marshal speeds up Troop Training, and the Alchemystic speeds up Researching. Click on the <b>My Knights</b> tab in the <b>Knights&#39; Hall</b> to Assign a Knight to a Role.",
        objective: ["999", ""],
        reward: [
            [1000, 0, 0, 0, 0, 0],
            [],
            [],
            [0, 0, 0]
        ]
    },
    q999010: {
        heading: "Administration",
        category: "Administration",
        name: "Adjust Tax Rate",
        preferredorder: "29",
        prerequisite: "1041",
        description: "Your Tax Rate determines how much Gold you earn each hour. Raising your Tax Rate increases your Gold production, but decreases your Happiness and Population. <b>Go to your Castle,</b> and change your Tax Rate to 20%.",
        objective: ["999", ""],
        reward: [
            [1000, 0, 0, 0, 0, 0],
            [],
            [],
            [0, 0, 0]
        ]
    }
};
var knighttemplate = [{
    knightId: 0,
    knightFbuid: 0,
    knightLordUserid: 0,
    knightName: "",
    knightLevel: 1,
    skillPointsApplied: 0,
    baseResourcefullness: 55,
    basePolitics: 55,
    baseCombat: 55,
    baseIntelligence: 55,
    experience: 0,
    resourcefulness: 55,
    politics: 55,
    combat: 55,
    intelligence: 55,
    resourcefulnessBoostExpireUnixtime: 0,
    politicsBoostExpireUnixtime: 0,
    combatBoostExpireUnixtime: 0,
    intelligenceBoostExpireUnixtime: 0,
    loyalty: 70,
    loyaltyUnixtime: 0,
    knightStatus: 1,
    cityId: 0,
    pic_square: ""
}, {
    knightId: 0,
    knightFbuid: 0,
    knightLordUserid: 0,
    knightName: "",
    knightLevel: 1,
    skillPointsApplied: 0,
    baseResourcefullness: 50,
    basePolitics: 50,
    baseCombat: 50,
    baseIntelligence: 50,
    experience: 0,
    resourcefulness: 50,
    politics: 50,
    combat: 50,
    intelligence: 50,
    resourcefulnessBoostExpireUnixtime: 0,
    politicsBoostExpireUnixtime: 0,
    combatBoostExpireUnixtime: 0,
    intelligenceBoostExpireUnixtime: 0,
    loyalty: 70,
    loyaltyUnixtime: 0,
    knightStatus: 1,
    cityId: 0,
    pic_square: ""
}];
var wilddeftemplate = {
    tileId: 0,
    mercLevel: 0,
    unit1Count: 0,
    unit2Count: 0,
    unit3Count: 0,
    unit4Count: 0,
    unit5Count: 0,
    unit6Count: 0,
    unit7Count: 0,
    unit8Count: 0,
    unit9Count: 0,
    unit10Count: 0,
    unit11Count: 0,
    unit12Count: 0,
    fort60Count: 0
};
var unitmight = {
    u1: "1",
    u2: "1",
    u3: "2",
    u4: "2",
    u5: "3",
    u6: "4",
    u7: "5",
    u8: "7",
    u9: "6",
    u10: "9",
    u11: "9",
    u12: "10"
};
var titlenames = {
    "1": "Lord",
    "2": "Lord",
    "3": "Lord",
    "4": "Esquire",
    "5": "Esquire",
    "6": "Esquire",
    "7": "Baronet",
    "8": "Baronet",
    "9": "Baronet",
    "10": "Baron",
    "11": "Baron",
    "12": "Baron",
    "13": "Viscount",
    "14": "Viscount",
    "15": "Viscount",
    "16": "Count",
    "17": "Count",
    "18": "Count",
    "19": "Vice Earl",
    "20": "Vice Earl",
    "21": "Vice Earl",
    "22": "Earl",
    "23": "Earl",
    "24": "Earl",
    "25": "Marquis",
    "26": "Marquis",
    "27": "Marquis",
    "28": "Grand Marquis",
    "29": "Grand Marquis",
    "30": "Grand Marquis",
    "31": "Duke",
    "32": "Duke",
    "33": "Duke",
    "34": "Grand Duke",
    "35": "Grand Duke",
    "36": "Grand Duke",
    "37": "Archduke",
    "38": "Archduke",
    "39": "Archduke",
    "40": "Grand Knight",
    "41": "Grand Knight",
    "42": "Grand Knight",
    "43": "Knight of Camelot",
    "44": "Knight of Camelot",
    "45": "Knight of Camelot",
    "46": "Knight of the Round",
    "47": "Knight of the Round",
    "48": "Knight of the Round",
    "49": "Grail Knight",
    "50": "Grail Knight",
    "51": "Grail Knight",
    "52": "Head Knight",
    "53": "Head Knight",
    "54": "Head Knight",
    "55": "Prince",
    "56": "Prince",
    "57": "Prince",
    "58": "High Prince",
    "59": "High Prince",
    "60": "High Prince",
    "61": "Grand Prince",
    "62": "Grand Prince",
    "63": "Grand Prince",
    "64": "Ayer Prince",
    "65": "Ayer Prince",
    "66": "Ayer Prince",
    "67": "Protector",
    "68": "Protector",
    "69": "Protector",
    "70": "High Protector",
    "71": "High Protector",
    "72": "High Protector",
    "73": "Grand Protector",
    "74": "Grand Protector",
    "75": "Grand Protector",
    "76": "Vice Regent",
    "77": "Vice Regent",
    "78": "Vice Regent",
    "79": "Regent",
    "80": "Regent",
    "81": "Regent",
    "82": "High Regent",
    "83": "High Regent",
    "84": "High Regent",
    "85": "Monarch-Errant",
    "86": "Monarch-Errant",
    "87": "Monarch-Errant",
    "88": "Monarch",
    "89": "Monarch",
    "90": "Monarch"
};
var buildingmight = {
    "0": [50, 100, 200, 400, 800, 1600, 3200, 6400, 12800, 25600, 51200],
    "1": [5, 10, 20, 40, 80, 160, 320, 640, 1280, 2560, 5120],
    "2": [5, 10, 20, 40, 80, 160, 320, 640, 1280, 2560, 5120],
    "3": [5, 10, 20, 40, 80, 160, 320, 640, 1280, 2560, 5120],
    "4": [5, 10, 20, 40, 80, 160, 320, 640, 1280, 2560, 5120],
    "5": [10, 20, 40, 80, 160, 320, 640, 1280, 2560, 5120],
    "6": [30, 60, 120, 240, 480, 960, 1920, 3840, 7680, 15360],
    "7": [30, 60, 120, 240, 480, 960, 1920, 3840, 7680, 15360],
    "8": [20, 40, 80, 160, 320, 640, 1280, 2560, 5120, 10240, 20480],
    "9": [20, 40, 80, 160, 320, 640, 1280, 2560, 5120, 10240, 20480],
    "10": [20, 40, 80, 160, 320, 640, 1280, 2560, 5120, 10240],
    "11": [30, 60, 120, 240, 480, 960, 1920, 3840, 7680, 15360, 30720],
    "12": [30, 60, 120, 240, 480, 960, 1920, 3840, 7680, 15360, 30720],
    "13": [10, 20, 40, 80, 160, 320, 640, 1280, 2560, 5120],
    "14": [20, 40, 80, 160, 320, 640, 1280, 2560, 5120, 10240],
    "15": [20, 40, 80, 160, 320, 640, 1280, 2560, 5120, 10240],
    "16": [20, 40, 80, 160, 320, 640, 1280, 2560, 5120, 10240],
    "17": [20, 40, 80, 160, 320, 640, 1280, 2560, 5120, 10240],
    "18": [20, 40, 80, 160, 320, 640, 1280, 2560, 5120, 10240, 20480],
    "19": [50, 100, 200, 400, 800, 1600, 3200, 6400, 12800, 25600, 51200],
    "50": [50, 100, 200, 400, 800, 1600, 3200, 6400, 12800, 25600],
    "51": [50, 100, 200, 400, 800, 1600, 3200, 6400, 12800, 25600]
};
var buildingmaxlvl = {
    "0": 11,
    "1": 11,
    "2": 11,
    "3": 11,
    "4": 11,
    "5": 10,
    "6": 10,
    "7": 10,
    "8": 11,
    "9": 11,
    "10": 10,
    "11": 11,
    "12": 11,
    "13": 10,
    "14": 10,
    "15": 10,
    "16": 10,
    "17": 10,
    "18": 11,
    "19": 11,
    "50": 10,
    "51": 10
};
var buildingupgradedesc = {
    "0": ["Control one Wilderness and build Level 2 Cottages", "Control two Wildernesses, build Level 3 Cottages, and gain 3 more Resource Fields", "Control three Wildernesses, build Level 4 Cottages, and gain 3 more Resource Fields", "Control four Wildernesses, build Level 5 Cottages, and gain 3 more Resource Fields", "Control five Wildernesses, build Level 6 Cottages, and gain 3 more Resource Fields", "Control six Wildernesses, build Level 7 Cottages, and gain 3 more Resource Fields", "Control seven Wildernesses, build Level 8 Cottages, and gain 3 more Resource Fields", "Control eight Wildernesses, build Level 9 Cottages, and gain 3 more Resource Fields", "Control nine Wildernesses, build Level 10 Cottages, and gain 3 more Resource Fields", "Control ten Wildernesses, build Level 10 Cottages, and gain 3 more Resource Fields", "Control twelve Wildernesses and build Level 11 Buildings"],
    "1": ["Uses 10 workers, produces 100 Food per hour, with a capacity of 10,000", "Uses 30 workers, and produces 300 Food per hour, with a capacity of 30,000", "Uses 60 workers, and produces 600 Food per hour, with a capacity of 60,000", "Uses 100 workers, and produces 1,000 Food per hour, with a capacity of 100,000", "Uses 150 workers, and produces 1,500 Food per hour, with a capacity of 150,000", "Uses 200 workers, and produces 2,100 Food per hour, with a capacity of 210,000", "Uses 280 workers, and produces 2,800 Food per hour, with a capacity of 280,000", "Uses 360 workers, and produces 4,000 Food per hour, with a capacity of 400,000", "Uses 450 workers, and produces 5,750 Food per hour, with a capacity of 575,000", "Uses 550 workers, and produces 7,700 Food per hour, with a capacity of 770,000", "Uses 660 workers, and produces 9,850 Food per hour, with a capacity of 985,000"],
    "2": ["Uses 10 workers, produces 100 Wood per hour, with a capacity of 10,000", "Uses 30 workers, and produces 300 Wood per hour, with a capacity of 30,000", "Uses 60 workers, and produces 600 Wood per hour, with a capacity of 60,000", "Uses 100 workers, and produces 1,000 Wood per hour, with a capacity of 100,000", "Uses 150 workers, and produces 1,500 Wood per hour, with a capacity of 150,000", "Uses 200 workers, and produces 2,100 Wood per hour, with a capacity of 210,000", "Uses 280 workers, and produces 2,800 Wood per hour, with a capacity of 280,000", "Uses 360 workers, and produces 4,000 Wood per hour, with a capacity of 400,000", "Uses 450 workers, and produces 5,750 Wood per hour, with a capacity of 575,000", "Uses 550 workers, and produces 7,700 Wood per hour, with a capacity of 770,000", "Uses 660 workers, and produces 9,850 Wood per hour, with a capacity of 985,000"],
    "3": ["Uses 10 workers, produces 100 Stone per hour, with a capacity of 10,000", "Uses 30 workers, and produces 300 Stone per hour, with a capacity of 30,000", "Uses 60 workers, and produces 600 Stone per hour, with a capacity of 60,000", "Uses 100 workers, and produces 1,000 Stone per hour, with a capacity of 100,000", "Uses 150 workers, and produces 1,500 Stone per hour, with a capacity of 150,000", "Uses 200 workers, and produces 2,100 Stone per hour, with a capacity of 210,000", "Uses 280 workers, and produces 2,800 Stone per hour, with a capacity of 280,000", "Uses 360 workers, and produces 4,000 Stone per hour, with a capacity of 400,000", "Uses 450 workers, and produces 5,750 Stone per hour, with a capacity of 575,000", "Uses 550 workers, and produces 7,700 Stone per hour, with a capacity of 770,000", "Uses 660 workers, and produces 9,850 Stone per hour, with a capacity of 985,000"],
    "4": ["Uses 10 workers, produces 100 Ore per hour, with a capacity of 10,000", "Uses 30 workers, and produces 300 Ore per hour, with a capacity of 30,000", "Uses 60 workers, and produces 600 Ore per hour, with a capacity of 60,000", "Uses 100 workers, and produces 1,000 Ore per hour, with a capacity of 100,000", "Uses 150 workers, and produces 1,500 Ore per hour, with a capacity of 150,000", "Uses 200 workers, and produces 2,100 Ore per hour, with a capacity of 210,000", "Uses 280 workers, and produces 2,800 Ore per hour, with a capacity of 280,000", "Uses 360 workers, and produces 4,000 Ore per hour, with a capacity of 400,000", "Uses 450 workers, and produces 5,750 Ore per hour, with a capacity of 575,000", "Uses 550 workers, and produces 7,700 Ore per hour, with a capacity of 770,000", "Uses 660 workers, and produces 9,850 Ore per hour, with a capacity of 985,000"],
    "5": ["Raises your Population Limit by 100", "Raises your Population Limit by 300", "Raises your Population Limit by 600", "Raises your Population Limit by 1,000", "Raises your Population Limit by 1,500", "Raises your Population Limit by 2.100", "Raises your Population Limit by 2,800", "Raises your Population Limit by 3,600", "Raises your Population Limit by 4,500", "Raises your Population Limit by 5,500"],
    "6": ["Negates the penalty on Happiness caused by your Tax Rate by 1 point", "Negates the penalty on Happiness caused by your Tax Rate by 2 points", "Negates the penalty on Happiness caused by your Tax Rate by 3 points", "Negates the penalty on Happiness caused by your Tax Rate by 4 points", "Negates the penalty on Happiness caused by your Tax Rate by 5 points", "Negates the penalty on Happiness caused by your Tax Rate by 6 points", "Negates the penalty on Happiness caused by your Tax Rate by 7 points", "Negates the penalty on Happiness caused by your Tax Rate by 8 points", "Negates the penalty on Happiness caused by your Tax Rate by 9 points", "Negates the penalty on Happiness caused by your Tax Rate by 10 points"],
    "7": ["Increase your Knights&#39; experience by 10 per hour", "Increase your Knights&#39; experience by 20 per hour", "Increase your Knights&#39; experience by 30 per hour", "Increase your Knights&#39; experience by 40 per hour", "Increase your Knights&#39; experience by 50 per hour", "Increase your Knights&#39; experience by 60 per hour", "Increase your Knights&#39; experience by 70 per hour", "Increase your Knights&#39; experience by 80 per hour", "Increase your Knights&#39; experience by 90 per hour", "Increase your Knights&#39; experience by 100 per hour"],
    "8": ["Join an Alliance, and house one ally&#39;s troops", "Create an Alliance, and house two allies&#39; troops", "House three allies&#39; troops", "House four allies&#39; troops", "House five allies&#39; troops", "House six allies&#39; troops", "House seven allies&#39; troops", "House eight allies&#39; troops", "House nine allies&#39; troops", "House ten allies&#39; troops", "House eleven allies&#39; troops"],
    "9": ["Allows you to protect up to 100,000 of each resource", "Allows you to protect up to 200,000 of each resource", "Allows you to protect up to 300,000 of each resource", "Allows you to protect up to 400,000 of each resource", "Allows you to protect up to 500,000 of each resource", "Allows you to protect up to 600,000 of each resource", "Allows you to protect up to 700,000 of each resource", "Allows you to protect up to 800,000 of each resource", "Allows you to protect up to 900,000 of each resource", "Allows you to protect up to 1,000,000 of each resource", "Allows you to protect up to 5,000,000 of each resource"],
    "10": ["Engage in one transaction at a time", "Engage in two transaction at a time", "Engage in three transaction at a time", "Engage in four transaction at a time", "Engage in five transaction at a time", "Engage in six transaction at a time", "Engage in seven transaction at a time", "Engage in eight transaction at a time", "Engage in nine transaction at a time", "Engage in ten transaction at a time"],
    "11": ["Research Fertilizer, Logging, Stoneworking, and Mining, and raise your research cap to Level 1", "Research Poisoned Edged, and raise your research cap to Level 2", "Research Geometry, Eagle Eyes, and Metal Alloys, and raise your research cap to Level 3", "Research Featherweight Powder, Magical Mapping, and Fletching, and raise your research cap to Level 4", "Research Alloy Horseshoes and Giant&#39;s Strength, and raise your research cap to Level 5", "Research Shrinking Powder and Healing Potions, and raise your research cap to Level 6", "Raise your research cap to Level 7", "Raise your research cap to Level 8", "Raise your research cap to Level 9", "Raise your research cap to Level 10", "Raise your research cap to Level 11"],
    "12": ["Send one army at a time, with up to 10,000 troops", "Send two armies at a time, with up to 20,000 troops each", "Send three armies at a time, with up to 30,000 troops each", "Send four armies at a time, with up to 40,000 troops each", "Send five armies at a time, with up to 50,000 troops each", "Send six armies at a time, with up to 60,000 troops each", "Send seven armies at a time, with up to 70,000 troops each", "Send eight armies at a time, with up to 80,000 troops each", "Send nine armies at a time, with up to 90,000 troops each", "Send ten armies at a time, with up to 100,000 troops each", "Send eleven armies at a time, with up to 150,000 troops each"],
    "13": ["Train Supply Troopers and Militiamen", "Train Scouts and Pikemen, and increase your training speed", "Train Swordsmen, and increase your training speed", "Train Archers, and increase your training speed", "Train Cavalry, and increase your training speed", "Train Supply Wagons, and increase your training speed", "Train Heavy Cavalry, and increase your training speed", "Train Ballistae, and increase your training speed", "Train Battering Rams, and increase your training speed", "Train Catapults, and increase your training speed"],
    "14": ["Warns you of an impending attack", "Tells you the purpose of an impending attack (Plunder or Scout)", "Tells you the arrival time of an impending attack", "Tells you the Title and Alliance of the Player sending an impending attack", "Gives you an estimate of the total Troops in an impending attack", "Tells you the Troop types in an impending attack", "Gives you an estimate of how many of each Troop type in an impending attack", "Tells you the exact number of Troops in an impending attack", "Tells you the Combat Skill of the Knight leading an impending attack", "Tells you the Research levels of the Player sending an impending attack"],
    "15": ["Allows you to research Level 1 Metal Alloys and Train Swordsmen", "Allows you to research Level 2 Metal Alloys", "Allows you to research Level 3 Metal Alloys", "Allows you to research Level 4 Metal Alloys", "Allows you to research Level 5 Metal Alloys and Train Battering Rams and Heavy Cavalry", "Allows you to research Level 6 Metal Alloys", "Allows you to research Level 7 Metal Alloys", "Allows you to research Level 8 Metal Alloys", "Allows you to research Level 9 Metal Alloys", "Allows you to research Level 10 Metal Alloys"],
    "16": ["Research Level 1 Geometry and Build Level 2 Walls", "Research Level 2 Geometry and Build Level 3 Walls", "Research Level 3 Geometry and Build Level 4 Walls and Train Supply Wagons", "Research Level 4 Geometry and Build Level 5 Walls", "Research Level 5 Geometry and Build Level 6 Walls and Train Ballistae", "Research Level 6 Geometry and Build Level 7 Walls", "Research Level 7 Geometry and Build Level 8 Walls and Train Battering Rams", "Research Level 8 Geometry and Build Level 9 Walls", "Research Level 9 Geometry and Build Level 10 Walls and Train Catapults", "Research Level 10 Geometry"],
    "17": ["Research Level 1 Alloy Horseshoes, and Train horsed troops faster", "Research Level 2 Alloy Horseshoes, and Train horsed troops faster", "Research Level 3 Alloy Horseshoes, and Train horsed troops faster", "Research Level 4 Alloy Horseshoes, and Train horsed troops faster", "Research Level 5 Alloy Horseshoes, and Train horsed troops faster", "Research Level 6 Alloy Horseshoes, and Train horsed troops faster", "Research Level 7 Alloy Horseshoes, and Train horsed troops faster", "Research Level 8 Alloy Horseshoes, and Train horsed troops faster", "Research Level 9 Alloy Horseshoes, and Train horsed troops faster", "Research Level 10 Alloy Horseshoes, and Train horsed troops faster"],
    "18": ["Causes troops to move 1.5x normal speed between your own and allied Cities", "Causes troops to move 2x normal speed between your own and allied Cities", "Causes troops to move 2.5x normal speed between your own and allied Cities", "Causes troops to move 3x normal speed between your own and allied Cities", "Causes troops to move 3.5x normal speed between your own and allied Cities", "Causes troops to move 4x normal speed between your own and allied Cities", "Causes troops to move 4.5x normal speed between your own and allied Cities", "Causes troops to move 5x normal speed between your own and allied Cities", "Causes troops to move 5.5x normal speed between your own and allied Cities", "Causes troops to move 6x normal speed between your own and allied Cities", "Causes troops to move 6.5x normal speed between your own and allied Cities"],
    "19": ["Provides 100,000 Durability and 1,000 Defensive Unit Spaces", "Provides 300,000 Durability and 3,000 Defensive Unit Spaces", "Provides 600,000 Durability and 6,000 Defensive Unit Spaces", "Provides 1,000,000 Durability and 10,000 Defensive Unit Spaces", "Provides 1,500,000 Durability and 15,000 Defensive Unit Spaces", "Provides 2,100,000 Durability and 21,000 Defensive Unit Spaces", "Provides 2,800,000 Durability and 28,000 Defensive Unit Spaces", "Provides 3,600,000 Durability and 36,000 Defensive Unit Spaces", "Provides 4,500,000 Durability and 45,000 Defensive Unit Spaces", "Provides 5,500,000 Durability and 55,000 Defensive Unit Spaces", "Provides 6,600,000 Durability and 66,000 Defensive Unit Spaces"],
    "50": ["", "", "", "", "", "", "", "", "", ""],
    "51": ["", "", "", "", "", "", "", "", "", ""]
};
var provincenames = {
    p1: "Tintagel",
    p2: "Cornwall",
    p3: "Astolat",
    p4: "Lyonesse",
    p5: "Corbenic",
    p6: "Paimpont",
    p7: "Cameliard",
    p8: "Sarras",
    p9: "Canoel",
    p10: "Avalon",
    p11: "Carmathen",
    p12: "Shallott",
    p13: "Cadbury",
    p14: "Glastonbury",
    p15: "Camlann",
    p16: "Orkney",
    p17: "Dore",
    p18: "Logres",
    p19: "Caerleon",
    p20: "Parmenie",
    p21: "Bodmin Moor",
    p22: "Cellwig",
    p23: "Listeneise",
    p24: "Albion"
};
var unitupkeeps = {
    "1": 2,
    "2": 3,
    "3": 5,
    "4": 6,
    "5": 7,
    "6": 9,
    "7": 18,
    "8": 35,
    "9": 10,
    "10": 50,
    "11": 100,
    "12": 250
};

function showAchievementsPopup(b) {
    Modal.showModal(500, 500, 10, 10, g_js_strings.achievement.unlockTitle, "<div id='achievementPopup'></div>");
    var a = jQuery("#achievementPopup").css({
        paddingBottom: "1px"
    });
    b._each(function (f) {
        var d = "a" + f.id + "_" + f.level;
        var c = g_js_strings.achievement.unlockMessage.replace("REPLACE_NAME", g_js_strings.achievement[d]);
        c += " " + g_js_strings.achievement["s" + f.level];
        var e = jQuery("<div>" + c + "</div>").css({
            textAlign: "center",
            margin: "10px auto"
        });
        a.append(e);
        a.append(jQuery("<div>You received: </div>" + rewardListToHTML(seed.achievementStaticData[d].rewardList, true)))
    })
}
function showAchievementsWindow() {
    Modal.showModal(500, 500, 10, 10, g_js_strings.achievement.windowTitle, "<div id='achievementWindow' class='clearfix'></div>");
    var l_container = jQuery("#achievementWindow").css({
        paddingBottom: "1px",
        marginTop: "10px",
        paddingLeft: "10px"
    });
    var l_achievements = {};
    Object.values(seed.achievementStaticData)._each(function (a_achievement) {
        var l_achievementClass = "a" + a_achievement.id + "_" + a_achievement.level;
        var l_achievementContainer = jQuery("<div class='achievementContainer' id='" + l_achievementClass + "'></div>");
        l_achievementContainer.addClass(l_achievementClass).addClass("s" + a_achievement.level);
        l_achievements[l_achievementClass] = (new AchievementDisplay(l_achievementContainer, a_achievement));
        l_container.append(l_achievementContainer)
    });
    var l_params = Object.clone(g_ajaxparams);
    new Ajax.Request(g_ajaxpath + "ajax/achievementStatus.php" + g_ajaxsuffix, {
        method: "post",
        parameters: l_params,
        onSuccess: function (a_response) {
            var l_result = eval("(" + a_response.responseText + ")");
            var l_achievementUpdateData = l_result.userAchievements;
            var l_achievementKeys = Object.keys(l_achievementUpdateData);
            l_achievementKeys._each(function (a_key) {
                l_achievements[a_key].update(l_achievementUpdateData[a_key])
            })
        }
    })
}
function makeElement(d, b, a) {
    var c = document.createElement(d);
    if (b) {
        jQuery(b).append(c)
    }
    if (a) {
        c.className = a
    }
    return c
}
function AchievementDisplay(b, a) {
    this.m_container = b;
    this.m_achievement = a;
    this.m_stringName = "a" + a.id + "_" + a.level;
    this.m_progressBarContainer = undefined;
    this.display()
}
AchievementDisplay.prototype.display = function () {
    var b = makeElement("div", this.m_container, "achievementBorder");
    makeElement("div", b, "achievmentImg").innerHTML = "IMG GOES HERE";
    this.m_progressBarContainer = makeElement("div", this.m_container, "progressBarContainer");
    var c = makeElement("div", this.m_container, "achievementName");
    c.innerHTML = g_js_strings.achievement[this.m_stringName];
    var a = this;
    jQuery(b).mouseover(function (d) {
        showTooltip(requirementListToHTML(a.m_achievement.requirementList) + requirementListToHTML(a.m_achievement.rewardList), this, d.originalEvent, "achievementWindow")
    }).mouseout(removeTooltip)
};
AchievementDisplay.prototype.update = function (a) {
    if (a.complete) {
        this.m_container.addClass("complete")
    } else {
        achievementPercentageBar(a.percentageComplete, this.m_container)
    }
};

function achievementPercentageBar(c, b) {
    var d = makeElement("div", b, "achievementPercentageBar");
    var a = makeElement("div", d, "achievementPercentageBarInner");
    jQuery(a).css({
        width: parseInt((100 * c)) + "%"
    })
}
function rewardListToHTML(c, a) {
    var b = "";
    c._each(function (d) {
        switch (d.type) {
        case "ItemReward":
            b += "<div>" + (a ? "" : "You will get ") + d.quantity + " X " + itemlist["i" + d.itemId].name + "</div>";
            if (a) {
                seed.items["i" + d.itemId] = parseInt(seed.items["i" + d.itemId]) + d.quantity;
                ksoItems[d.itemId].add(d.quantity)
            }
            break;
        default:
            break
        }
    });
    return b
}
function requirementListToHTML(a) {
    var b = "";
    a._each(function (c) {
        switch (c.type) {
        case "PvPWinRequirement":
            b += "<div>Winning " + c.PvPWins + " marches against a player</div>";
            break;
        default:
            break
        }
    });
    return b
};
if (!window.AddCity) {
    var AddCity = new Object()
}
AddCity.Properties = {
    c_new_city_strings: ["Second City", "Third City", "Fourth City", "Fifth City", "Sixth City", "Seventh City", "Eighth City"],
    c_new_second_city_item: "i1202",
    c_new_city_deed: ["i1202", "i1203", "i1204", "i1205", "i1206", "i1207", "i1208"],
    c_new_city_deed_quest: ["q8002", "q8003", "q8004", "q8005", "q8006", "q8007", "q8008"],
    c_new_city_deed_items: {
        i1202: {},
        i1203: {
            i1101: 4,
            i1102: 2,
            i1103: 1
        },
        i1204: {
            i1103: 4,
            i1104: 3,
            i1105: 1
        },
        i1205: {
            i1106: 4,
            i1107: 3,
            i1108: 2
        },
        i1206: {
            i1109: 4,
            i1110: 3,
            i1111: 2
        },
        i1207: {
            i1112: 4,
            i1113: 3,
            i1114: 2
        }
    },
    c_new_city_deed_msg: [{
        noqual: g_js_strings.AddCity.noqualseconddeed,
        qual: g_js_strings.AddCity.qualseconddeed
    }, {
        noqual: g_js_strings.AddCity.noqualthirddeed,
        qual: g_js_strings.AddCity.qualthirddeed
    }, {
        noqual: g_js_strings.AddCity.noqualfourthdeed,
        qual: g_js_strings.AddCity.qualfourthdeed
    }, {
        noqual: g_js_strings.AddCity.noqualfifthdeed,
        qual: g_js_strings.AddCity.qualfifthdeed
    }, {
        noqual: g_js_strings.AddCity.noqualsixthdeed,
        qual: g_js_strings.AddCity.qualsixthdeed
    }, {
        noqual: g_js_strings.AddCity.noqualseventhdeed,
        qual: g_js_strings.AddCity.qualseventhdeed
    }, {
        noqual: g_js_strings.AddCity.noqualeigthdeed,
        qual: g_js_strings.AddCity.qualeigthdeed
    }],
    next_city_idx: 2,
    applyTId: 0,
    feError: {
        noMercChange: g_js_strings.AddCity.nochange,
        notEnoughGold: g_js_strings.AddCity.nogold,
        notValidNumber: g_js_strings.AddCity.validnumber
    }
};
AddCity.Methods = {
    startBuildProcess: function (a) {
        statusupdate();
        this.next_city_idx = seed.cities.length + 1;
        if (a) {
            this.applyTId = a
        }
        if (this.next_city_idx == 2) {
            this.secondCityModal()
        } else {
            this.otherCityModal()
        }
    },
    checkReq: function () {},
    recheckCoord: function (d) {
        var a = Element.extend(d);
        var c = a.select("option");
        for (var b = 0; b < c.length; b++) {
            if (isNaN(c[b].innerHTML.charAt(0))) {
                c[b].innerHTML = c[b].innerHTML.substring(1)
            }
            if (c[b].selected) {
                c[b].innerHTML = "&#10004;" + c[b].innerHTML
            }
        }
    },
    getPlainOptions: function () {
        var d = "<select id='plains_coord_box' class='selectbox' onchange='AddCity.recheckCoord(this);return false;'>";
        var a = getWildIds(currentcityid, 50);
        for (var c = 0; c < a.length; c++) {
            var e = false;
            var f = a[c].split("t")[1];
            if (this.applyTId != 0) {
                if (f == this.applyTId) {
                    e = true
                }
            } else {
                if (c == 0) {
                    e = true
                }
            }
            var b = seed.wilderness["city" + currentcityid][a[c]].xCoord + " , " + seed.wilderness["city" + currentcityid][a[c]].yCoord;
            d += '<option value="' + f + '" ' + ((e) ? "selected" : "") + ">" + ((e) ? ("&#10004;" + b) : b) + "</option>"
        }
        d += "</select>";
        return d
    },
    secondCityModal: function () {
        var a = (getWildIds(currentcityid, 50).length >= 1) ? true : false;
        var e = (seed.items[this.c_new_city_deed[this.next_city_idx - 2]] && parseInt(seed.items[this.c_new_city_deed[this.next_city_idx - 2]]) > 0) ? true : false;
        var d = (g_questcomp[this.c_new_city_deed_quest[this.next_city_idx - 2]] && parseInt(g_questcomp[this.c_new_city_deed_quest[this.next_city_idx - 2]]) >= 1) ? true : false;
        var f = (parseInt(seed.player.title) >= 7) ? true : false;
        var j = e && a && f;
        var b = "";
        var h = "";
        var c = {
            link_item_img: "<img src='" + stimgUrl + "img/items/70/" + this.c_new_city_deed[this.next_city_idx - 2].split("i")[1] + ".jpg' />",
            text_item_name: itemlist[this.c_new_city_deed[this.next_city_idx - 2]].name,
            text_item_count: (e) ? "1/1" : "0/1",
            text_item_class: "single"
        };
        b += getTemplate("addcity_secondcitymodal_item", c);
        if (j) {
            h += "<a class='button30Green' onclick='startCityBuild();return false;return false;'><span>";
            h += g_js_strings.commonstr.build;
            h += "</span></a>"
        } else {
            h += "<a class='button30Grey'><span>";
            h += g_js_strings.commonstr.build;
            h += "</span></a>"
        }
        var g = {
            text_to_build: g_js_strings.AddCity.tobuilda.replace("%1$s", this.c_new_city_strings[this.next_city_idx - 2]),
            text_get_deed: g_js_strings.AddCity.obtainadeed.replace("%1$s", this.c_new_city_strings[this.next_city_idx - 2]),
            text_second_deed_noqual_desc: this.c_new_city_deed_msg[this.next_city_idx - 2].noqual,
            text_second_deed_qual_desc: this.c_new_city_deed_msg[this.next_city_idx - 2].qual,
            text_invite: g_js_strings.commonstr.invite,
            text_shop: g_js_strings.commonstr.shop,
            lstring_item: b,
            text_lvl_qual: g_js_strings.AddCity.reachlvl,
            text_plains_qual: g_js_strings.AddCity.controlplain,
            text_view_map: g_js_strings.commonstr.viewmap,
            text_lvl_desc: g_js_strings.AddCity.nolvlqual,
            text_claim: g_js_strings.commonstr.claim,
            text_qid: this.c_new_city_deed_quest[this.next_city_idx - 2].split("q")[1],
            text_complete: g_js_strings.commonstr.completedexc,
            text_plains_noqual_desc: g_js_strings.AddCity.noplainqual,
            text_plains_qual_desc: g_js_strings.AddCity.selectplain,
            text_btn_string: h,
            lstring_map_coord: this.getPlainOptions()
        };
        var i = getTemplate("addcity_secondcitymodal", g);
        Modal.showModal(500, 580, 90, 10, g_js_strings.modaltitles.buildingnewcity, i);
        if (e) {
            $("qual_second_city_deed").className = "qualitem comp"
        } else {
            if (d) {
                $("qual_second_city_deed").className = "qualitem qual"
            } else {
                $("qual_second_city_deed").className = "qualitem noqual"
            }
        }
        if (f) {
            $("qual_lvl_7").className = "qualitem comp"
        } else {
            $("qual_lvl_7").className = "qualitem noqual"
        }
        if (a) {
            $("qual_plains").className = "qualitem comp"
        } else {
            $("qual_plains").className = "qualitem noqual"
        }
    },
    otherCityModal: function () {
        var a = (getWildIds(currentcityid, 50).length >= 1) ? true : false;
        var l = (seed.items[this.c_new_city_deed[this.next_city_idx - 2]] && parseInt(seed.items[this.c_new_city_deed[this.next_city_idx - 2]]) > 0) ? true : false;
        var d = (g_questcomp[this.c_new_city_deed_quest[this.next_city_idx - 2]] && parseInt(g_questcomp[this.c_new_city_deed_quest[this.next_city_idx - 2]]) >= 1) ? true : false;
        cm.log.l("othercitydeedquestQual=" + d + "   othercitydeedQual=" + l + "    plainQual=" + a);
        var f = l && a;
        var b = "";
        var j = "";
        if (l || d) {
            var c = {
                link_item_img: "<img src='" + stimgUrl + "img/items/70/" + this.c_new_city_deed[this.next_city_idx - 2].split("i")[1] + ".jpg' />",
                text_item_name: itemlist[this.c_new_city_deed[this.next_city_idx - 2]].name,
                text_item_count: (l) ? "1/1" : "0/1",
                text_item_class: "single"
            };
            b += getTemplate("addcity_secondcitymodal_item", c)
        } else {
            var g = this.c_new_city_deed_items[this.c_new_city_deed[this.next_city_idx - 2]];
            var m = Object.keys(g);
            for (var e = 0; e < m.length; e++) {
                var c = {
                    link_item_img: "<img src='" + stimgUrl + "img/items/70/" + m[e].split("i")[1] + ".jpg' />",
                    text_item_name: itemlist[m[e]].name,
                    text_item_count: (seed.items[m[e]] || 0) + "/" + g[m[e]],
                    text_item_class: "triple",
                    text_count_class: (seed.items[m[e]] && parseInt(seed.items[m[e]]) >= parseInt(g[m[e]])) ? "enough" : ""
                };
                b += getTemplate("addcity_secondcitymodal_item", c)
            }
        }
        if (f) {
            j += "<a class='button30Green' onclick='startCityBuild();return false;return false;'><span>";
            j += g_js_strings.commonstr.build;
            j += "</span></a>"
        } else {
            j += "<a class='button30Grey'><span>";
            j += g_js_strings.commonstr.build;
            j += "</span></a>"
        }
        var h = {
            text_to_build: g_js_strings.AddCity.tobuilda.replace("%1$s", this.c_new_city_strings[this.next_city_idx - 2]),
            text_get_deed: g_js_strings.AddCity.obtainadeed.replace("%1$s", this.c_new_city_strings[this.next_city_idx - 2]),
            text_other_deed_noqual_desc: this.c_new_city_deed_msg[this.next_city_idx - 2].noqual,
            text_other_deed_qual_desc: this.c_new_city_deed_msg[this.next_city_idx - 2].qual,
            text_shop: g_js_strings.commonstr.shop,
            lstring_item: b,
            text_lvl_qual: g_js_strings.AddCity.reachlvl,
            text_plains_qual: g_js_strings.AddCity.controlplain,
            text_view_map: g_js_strings.commonstr.viewmap,
            text_lvl_desc: g_js_strings.AddCity.nolvlqual,
            text_claim: g_js_strings.commonstr.claim,
            text_qid: this.c_new_city_deed_quest[this.next_city_idx - 2].split("q")[1],
            text_complete: g_js_strings.commonstr.completedexc,
            text_plains_noqual_desc: g_js_strings.AddCity.noplainqual,
            text_plains_qual_desc: g_js_strings.AddCity.selectplain,
            lstring_map_coord: this.getPlainOptions(),
            text_btn_string: j
        };
        var k = getTemplate("addcity_othercitymodal", h);
        Modal.showModal(500, 580, 90, 10, g_js_strings.modaltitles.buildingnewcity, k);
        if (l) {
            $("qual_other_city_deed").className = "qualitem comp"
        } else {
            if (d) {
                $("qual_other_city_deed").className = "qualitem qual"
            } else {
                $("qual_other_city_deed").className = "qualitem noqual"
            }
        }
        if (a) {
            $("qual_plains").className = "qualitem comp"
        } else {
            $("qual_plains").className = "qualitem noqual"
        }
    }
};
Object.extend(AddCity, AddCity.Methods);
Object.extend(AddCity, AddCity.Properties);

function modal_addcityhelp() {
    AddCity.startBuildProcess()
}
function startCityBuild() {
    modal_wilderness_buildcity($("plains_coord_box").value, currentcityid)
}
function modal_wilderness_buildcity_citybuildcheck(c, h) {
    var l = Object.keys(seed.queue_atkp);
    var e = false;
    var n = [0, 0, 0, 0, 0];
    var b = 0;
    for (var f = 0; f < l.length; f++) {
        var g = Object.keys(seed.queue_atkp[l[f]]);
        for (var d = 0; d < g.length; d++) {
            var m = seed.queue_atkp[l[f]][g[d]];
            if (parseInt(m.toXCoord) == parseInt(c) && parseInt(m.toYCoord) == parseInt(h) && parseInt(m.marchStatus) == 2) {
                b += parseInt(m.unit1Count);
                n[0] += parseInt(m.gold);
                for (var a = 1; a < 5; a++) {
                    n[a] += parseInt(m["resource" + a])
                }
            }
        }
    }
    if (b >= 250 && n[0] >= 10000 && n[1] >= 10000 && n[2] >= 10000 && n[3] >= 10000 && n[4] >= 10000) {
        return true
    }
    return false
}
function modal_wilderness_buildcity(b, c) {
    var a = new Array();
    a.push("<div id='modal_wilderness_newcitydiv'>");
    a.push("<div class='nmttl'>" + g_js_strings.modal_wilderness_buildcity.namecity + "</div>");
    a.push("<div class='nmipt'><input type='text' id='modal_wilderness_newcity_ipt' maxlength='15'/></div>");
    a.push("<div class='clearfix btns'><a  class='button20' onclick='modal_wilderness_buildcity_confirm(");
    a.push(b);
    a.push(",");
    a.push(c);
    a.push(");return false;'><span>" + g_js_strings.commonstr.ok + "</span></a><a  class='cancel' onclick='Modal.hideModal();return false;'>" + g_js_strings.commonstr.cancel + "</a></div>");
    a.push("</div>");
    Modal.showModal(500, 400, 120, 190, g_js_strings.modaltitles.namenewcity, a.join(""))
}
function modal_wilderness_buildcity_confirm(tileid, cityid) {
    var params = Object.clone(g_ajaxparams);
    params.tid = tileid;
    params.cid = cityid;
    params.cname = $("modal_wilderness_newcity_ipt").value;
    new Ajax.Request(g_ajaxpath + "ajax/buildCity.php" + g_ajaxsuffix, {
        method: "post",
        parameters: params,
        onSuccess: function (transport) {
            var rslt = eval("(" + transport.responseText + ")");
            if (rslt.ok) {
                top.location = appUrl
            } else {
                Modal.showAlert(printLocalError((rslt.error_code || null), (rslt.msg || null), (rslt.feedback || null)))
            }
        },
        onFailure: function () {}
    })
}
var cm = cm || {};
cm.cities = function (b) {
    var c = 1;
    var a = 7;
    return {
        setIndex: function (d) {
            c = d
        },
        max: function () {
            return a
        },
        selectedIndex: function () {
            return c
        }
    }
}(jQuery);
var cm = cm || {};
cm.BOT_STATUS = {
    BOT_MARCH_UNDEFINED: 0,
    BOT_MARCH_MARCHING: 1,
    BOT_MARCH_RETURNING: 2,
    BOT_MARCH_STOPPED: 3,
    BOT_MARCH_INSUFFICIENT_TROOPS: 4,
    BOT_MARCH_MAX_RAIDS_EXCEEDED: 5,
    BOT_MARCH_TIMED_OUT: 6,
    BOT_MARCH_RESTING: 7,
    BOT_MARCH_STOPPING: 200
};
cm.MARCH_STATUS = {
    MARCH_STATUS_INACTIVE: 0,
    MARCH_STATUS_OUTBOUND: 1,
    MARCH_STATUS_DEFENDING: 2,
    MARCH_STATUS_STOPPED: 3,
    MARCH_STATUS_RESTING: 4,
    MARCH_STATUS_UNKNOWN: 5,
    MARCH_STATUS_SITUATIONCHANGED: 7,
    MARCH_STATUS_RETURNING: 8,
    MARCH_STATUS_ABORTING: 9
};
cm.MARCH_TYPES = {
    MARCH_TYPE_NONE: 0,
    MARCH_TYPE_TRANSPORT: 1,
    MARCH_TYPE_REINFORCE: 2,
    MARCH_TYPE_SCOUT: 3,
    MARCH_TYPE_ATTACK: 4,
    MARCH_TYPE_REASSIGN: 5,
    MARCH_TYPE_BARBARIAN: 6,
    MARCH_TYPE_MERCENARY: 7,
    MARCH_TYPE_BARBARIAN_REINFORCE: 8,
    MARCH_TYPE_BOT_BARBARIAN: 9
};
cm.TILE_TYPES = {
    TILE_TYPE_VOID: 0,
    TILE_TYPE_GRASSLAND: 10,
    TILE_TYPE_R1_1: 10,
    TILE_TYPE_LAKE: 11,
    TILE_TYPE_R1_2: 11,
    TILE_TYPE_WOODS: 20,
    TILE_TYPE_R2_1: 20,
    TILE_TYPE_HILLS: 30,
    TILE_TYPE_R3_1: 30,
    TILE_TYPE_MOUNTAIN: 40,
    TILE_TYPE_R4_1: 40,
    TILE_TYPE_PLAIN: 50,
    TILE_TYPE_CITY: 51,
    TILE_TYPE_RUIN: 52,
    TILE_TYPE_FOG: 53,
    TILE_TYPE_CAMELOT1: 101,
    TILE_TYPE_CAMELOT2: 102,
    TILE_TYPE_CAMELOT3: 103,
    TILE_TYPE_CAMELOT4: 104,
    TILE_TYPE_CAMELOT5: 105,
    TILE_TYPE_CAMELOT6: 106
};
cm.UNIT_TYPES = {
    UNIT_TYPE_UNKNOWN: 0,
    UNIT_TYPE_WORKER: 1,
    UNIT_TYPE_WARRIOR: 2,
    UNIT_TYPE_SCOUT: 3,
    UNIT_TYPE_PIKEMAN: 4,
    UNIT_TYPE_SWORDSMAN: 5,
    UNIT_TYPE_ARCHER: 6,
    UNIT_TYPE_CAVALRY: 7,
    UNIT_TYPE_CATAPHRACT: 8,
    UNIT_TYPE_TRANSPORTER: 9,
    UNIT_TYPE_BALLISTA: 10,
    UNIT_TYPE_BATTERINGRAM: 11,
    UNIT_TYPE_CATAPULT: 12
};
cm.WILDERNESS_TYPES = {
    GRASSLAND: 10,
    LAKE: 11,
    WOODS: 20,
    HILLS: 30,
    MOUNTAIN: 40,
    PLAIN: 50
};
cm.BUILDING_TYPES = {
    BARRACK: 13,
    WATCH_TOWER: 14
};
if (!window.AjaxCall) {
    var AjaxCall = new Object()
}
AjaxCall.Properties = {
    ajaxcall_data: null
};
AjaxCall.Methods = {
    gGetRequest: function (c, d, b, a) {
        this.gAjaxRequest(c, d, b, a, "get")
    },
    gPostRequest: function (c, d, b, a) {
        this.gAjaxRequest(c, d, b, a, "post")
    },
    gAjaxRequest: function (ajax_path, additional_params, handleSuccessCallback, handleFailureCallback, http_request_method) {
        var params = Object.clone(g_ajaxparams);
        if (additional_params) {
            Object.keys(additional_params).each(function (item) {
                params[item] = additional_params[item]
            })
        }
        new Ajax.Request(g_ajaxpath + ajax_path + g_ajaxsuffix, {
            method: http_request_method,
            parameters: params,
            onSuccess: function (message) {
                var rslt = eval("(" + message.responseText + ")");
                handleSuccessCallback(rslt)
            },
            onFailure: handleFailureCallback
        })
    }
};
Object.extend(AjaxCall, AjaxCall.Methods);
Object.extend(AjaxCall, AjaxCall.Properties);
var ajax = function (f) {
        var d = {
            lastSent: [],
            isSending: {},
            timeout: 5,
            loadingSymbolCounter: 0
        };

        function e(j, k) {
            d.params = k;
            d.options = {
                dataType: k.dataType || "json",
                type: k.method || k.type || "POST",
                url: j || "",
                data: k.parameters || k.data || "",
                success: h,
                error: b,
                complete: c,
                async: true,
                loading: k.loading || false
            }
        }
        function i(j) {
            if (0 == d.loadingSymbolCounter++) {
                f("body").append("<div class='spinnyLoading'></div>")
            }
            setTimeout(function () {
                a(j)
            }, 10000)
        }
        function a(j) {
            if (j.loading && (0 == --d.loadingSymbolCounter)) {
                f(".spinnyLoading").remove();
                j.loading = false
            }
            d.loadingSymbolCounter = Math.max(0, d.loadingSymbolCounter)
        }
        function g(j) {
            return d.isSending[j] ? true : false
        }
        function h(m, j, k) {
            try {
                if (k._params.onSuccess) {
                    k._params.onSuccess({
                        responseText: JSON.stringify(m),
                        responseTextRaw: k.responseText
                    })
                }
                if (k._params.next) {
                    k._params.next(m)
                }
            } catch (l) {}
        }
        function b(k, j, n) {
            try {
                var m = k._params.onFailure || k._params.error ||
                function () {};
                m(k, j, n)
            } catch (l) {}
        }
        function c(k, j) {
            try {
                d.isSending[k._options.url] = false;
                a(k._options);
                if (k._params.onComplete) {
                    k._params.onComplete(k, j)
                }
            } catch (l) {}
        }
        return {
            Request: function (k, l) {
                if (!g(k)) {
                    d.isSending[k] = true;
                    d.lastSent[k] = unixtime();
                    e(k, l);
                    var j = f.ajax(d.options);
                    if (j) {
                        j._options = d.options;
                        j._params = d.params;
                        if (d.options.loading) {
                            i(j._options)
                        }
                    }
                } else {
                    cm.log.l("Prevented another ajax call, because we haven't received the response yet.")
                }
            }
        }
    }(jQuery);
var friendsInfo;
var arrSelectedFriends = new Object();
var strSelectedFriends = "";
var friendsButNotPlayers;
var existingPlayers_AI;
var arrSelectedFriends_AI = new Object();
var strSelectedFriends_AI = "";
var xfbmlFriendsList;
var allianceInviteLink;
var playerInfo;

function recommendFriendsModule() {
    var strHTML = "<div class='allianceInvite' style='height:300px'>";
    strHTML += "<div class='waiting'>";
    strHTML += "</div>";
    strHTML += "</div>";
    document.getElementById("allianceContent").innerHTML = strHTML;
    arrSelectedFriends = new Object();
    var params = Object.clone(g_ajaxparams);
    new Ajax.Request(g_ajaxpath + "ajax/allianceGetFriendsSameServer.php" + g_ajaxsuffix, {
        method: "post",
        parameters: params,
        onSuccess: function (message) {
            var rslt = eval("(" + message.responseText + ")");
            if (rslt.ok) {
                var strHTML = "<div id='divRecommendTopSection'><div class='clearfix recselplayers'><a class='buttonDown20' onclick='membersInfo();return false;'><span>" + g_js_strings.commonstr.back + "</span></a></div><div id='recommendActionResult'></div></div>";
                strHTML += "<div id='divFriends'><div class='recttl'>" + g_js_strings.recommendFriendsModule.recommendmember + "</div>";
                strHTML += "<div class='recbox clearfix'><div id='divFriendsInSameDomain'><div class='selfriendttl'>" + g_js_strings.recommendFriendsModule.selectfromfriend + "</div>";
                var strFriendsContent = "";
                if (rslt.friendsInfo) {
                    friendsInfo = rslt.friendsInfo;
                    strFriendsContent = "";
                    strMsg = g_js_strings.recommendFriendsModule.yourfriendsona.replace("%1$s", rslt.server);
                    for (friendId in friendsInfo) {
                        strFriendsContent += "<tr><td><input type='checkbox' id='chk_friend_" + friendId + "' onclick='selectedFriendsList(" + friendId + ',this,"friendsInfo")\'/></td><td>';
                        strFriendsContent += "<a href='http://www.facebook.com/profile.php?id=" + friendsInfo[friendId].fbuid + " target='_blank'><fb:profile-pic uid='" + friendsInfo[friendId].fbuid + "' size='q' linked='false'></fb:profile-pic></a>";
                        strFriendsContent += "</td><td><div class='fname'><a  onclick='getInfoForAnUser(\"" + friendId + "\");return false;'>" + friendsInfo[friendId].genderAndName + "</a> (<fb:name uid='" + friendsInfo[friendId].fbuid + "' linked='false'></fb:name>)</div></td></tr>"
                    }
                } else {
                    strMsg = g_js_strings.recommendFriendsModule.sorrynofriends
                }
                strHTML += "<div class='fdomainnm'>" + strMsg + "</div>";
                strHTML += "<div class='friendbox'><table cellpadding='0' cellspacing='0'>" + strFriendsContent;
                strHTML += "</table></div></div>";
                strHTML += "<div id='divSearchPlayer'><div class='searchttl'>" + g_js_strings.recommendFriendsModule.searchplayers + "</div>";
                strHTML += "<div class='searchbox clearfix'><input type='text' name='txtPlayerNameToSearch' id='txtPlayerNameToSearch'/>";
                strHTML += '<a  class=\'button20\' onclick=\'searchPlayersByName("txtPlayerNameToSearch","divMatchedPlayers","Select the players you want to recommend");return false;\'><span>' + g_js_strings.commonstr.search + "</span></a></div>";
                strHTML += "<div id='divMatchedPlayers'></div>";
                strHTML += "</div></div>";
                strHTML += "<div class='divselplayers'><div class='divSelPlayersTtl'><div>" + g_js_strings.recommendFriendsModule.selectedplayers + "</div></div><div id='divSelectedFriends'></div></div>";
                strHTML += "<div class='clearfix recselplayers'><a class='button20' onclick='recommendSelectedFriends();return false;'><span>" + g_js_strings.recommendFriendsModule.recselplayers + "</span></a><a class='buttonDown20' onclick='membersInfo();return false;'><span>" + g_js_strings.commonstr.cancel + "</span></a></div></div>";
                document.getElementById("allianceContent").innerHTML = strHTML;
                FB.XFBML.Host.parseDomTree(document.getElementById("divFriendsInSameDomain"))
            } else {
                Modal.showAlert(printLocalError((rslt.error_code || null), (rslt.msg || null), (rslt.feedback || null)))
            }
        },
        onFailure: function () {}
    })
}
function selectedFriendsList(friendId, chkBox, strSourceArray) {
    var strHTML = "";
    strSelectedFriends = "";
    if (chkBox.checked) {
        arrSelectedFriends[friendId] = eval(strSourceArray)[friendId].genderAndName
    } else {
        if (arrSelectedFriends[friendId]) {
            delete arrSelectedFriends[friendId]
        }
    }
    for (currentFriendId in arrSelectedFriends) {
        strHTML += "<div class='friend'>" + arrSelectedFriends[currentFriendId] + "</div>";
        strSelectedFriends += "," + currentFriendId
    }
    document.getElementById("divSelectedFriends").innerHTML = strHTML
}
function recommendSelectedFriends() {
    var message = "";
    if (strSelectedFriends.length > 0) {
        strSelectedFriends = strSelectedFriends.substring(1, strSelectedFriends.length)
    }
    var params = Object.clone(g_ajaxparams);
    params.memberList = strSelectedFriends;
    new Ajax.Request(g_ajaxpath + "ajax/allianceMemberRecommendations.php" + g_ajaxsuffix, {
        method: "post",
        parameters: params,
        onSuccess: function (message) {
            var rslt = eval("(" + message.responseText + ")");
            if (rslt.ok) {
                if (rslt.duplicates) {
                    var arrDuplicateIds = (rslt.duplicates).split(",");
                    var ids = "";
                    for (i = 0; i < arrDuplicateIds.length; i++) {
                        ids += ", " + arrSelectedFriends[arrDuplicateIds[i]]
                    }
                    ids = ids.substring(1);
                    message = g_js_strings.recommendSelectedFriends.aalreadyrec.replace("%1$s", ids)
                } else {
                    message = g_js_strings.recommendSelectedFriends.recsuccess
                }
            } else {
                message = g_js_strings.recommendSelectedFriends.sorrynorec
            }
            document.getElementById("recommendActionResult").innerHTML = message
        },
        onFailure: function () {}
    })
}
function inviteFriendsModule() {
    strHTML = "<div class='allianceInvite' style='height:300px'>";
    strHTML += "<div class='waiting'>";
    strHTML += "</div>";
    strHTML += "</div>";
    document.getElementById("allianceContent").innerHTML = strHTML;
    var params = Object.clone(g_ajaxparams);
    new Ajax.Request(g_ajaxpath + "ajax/allianceGetFbFriends.php" + g_ajaxsuffix, {
        method: "post",
        parameters: params,
        onSuccess: function (message) {
            var rslt = eval("(" + message.responseText + ")");
            if (rslt.ok) {
                friendsButNotPlayers = rslt.friendsButNotPlayers;
                existingPlayers_AI = rslt.existingPlayers;
                allianceInviteLink = rslt.allianceInviteLink;
                strHTML = "<div id='divInviteAllianceMember'>";
                strHTML += "<div class='invtabs clearfix' id='divInviteAllianceMemberInvtabs'><a class='tab tabsel' onclick='friendsTabInAllianceInvite(" + rslt.referralId + ");return false;'><span>" + g_js_strings.commonstr.friends + "</span></a>";
                strHTML += "<a class='tab'  onclick='searchTabInAllianceInvite();return false;'><span>" + g_js_strings.recommendSelectedFriends.playersrch + "</span></a>";
                strHTML += "</div>";
                strHTML += "<div id='tabContent_AI' class='clearfix'></div>";
                strHTML += "</div>";
                document.getElementById("allianceContent").innerHTML = strHTML;
                friendsTabInAllianceInvite(rslt.referralId)
            } else {
                Modal.showAlert(printLocalError((rslt.error_code || null), (rslt.msg || null), (rslt.feedback || null)))
            }
        },
        onFailure: function () {}
    })
}
function encodeURIComponentWithQuote(b) {
    var a = encodeURIComponent(b);
    a = a.replace(/%26%2339%3B|'/g, "%27");
    a = a.replace(/%26%2334%3B|"/g, "%22");
    return a
}
function friendsTabInAllianceInvite(a) {
    $("divInviteAllianceMemberInvtabs").select(".tabsel")[0].removeClassName("tabsel");
    $("divInviteAllianceMemberInvtabs").select(".tab")[0].addClassName("tabsel");
    var c = "<div class='makealstrong'>" + g_js_strings.friendsTabInAllianceInvite.makealliancestrong + "</div><div id='leftColumn_AI'><div class='extttl'><div>" + g_js_strings.recommendFriendsModule.selectfromfriend + "</div></div><div class='seldiv'>";
    subject = encodeURIComponentWithQuote(g_js_strings.friendsTabInAllianceInvite.subjecttxt.replace("%1$s", arrAllianceInfo.allianceName));
    message = encodeURIComponentWithQuote(g_js_strings.friendsTabInAllianceInvite.msgtxt.replace("%1$s", userInfo.displayName).replace("%2$s", arrAllianceInfo.allianceName).replace("%3$s", domainName).replace("%4$s", allianceInviteLink));
    c += "<table cellpadding='0' cellspacing='0'>";
    for (index in friendsButNotPlayers) {
        var b = "btn_AI_" + index;
        url = "http://www.facebook.com/inbox/?compose&id=" + friendsButNotPlayers[index].uid + "&subject=" + subject + "&message=" + message;
        c += "<tr><td class='piccol'><a href='http://www.facebook.com/profile.php?id=" + friendsButNotPlayers[index].uid + "' target='_blank'><img src=\"";
        if (friendsButNotPlayers[index].pic_square == "") {
            c += "http://static.ak.facebook.com/pics/s_default.jpg"
        } else {
            c += friendsButNotPlayers[index].pic_square
        }
        c += "\" /></a></td><td class='nmcol'><div>" + friendsButNotPlayers[index].name + "</div></td><td class='sendcol' id='" + b + "'><a  class='button20' onclick='inviteFriendToJoinAlliance(" + friendsButNotPlayers[index].uid + ',"fbuid","' + b + '");window.open("' + url + '","facebookCompose","status = 1, height = 420, width = 970,left=300,top=300, resizable = 0");return false;\'><span>' + g_js_strings.commonstr.send + "</span></a></td></tr>"
    }
    c += "</table></div></div>";
    c += "<div id='rightColumn_AI'><div class='extttl'><div>" + g_js_strings.friendsTabInAllianceInvite.existingplayers + "</div></div><div class='explscr'>";
    c += "<table id='tbl_existingPlayers' cellpadding='0' cellspacing='0'>";
    for (fbuid in existingPlayers_AI) {
        var b = "btn_friendAI_" + existingPlayers_AI[fbuid].userId;
        c += "<tr>";
        c += "<td class='pic'>";
        c += "<a href='http://www.facebook.com/profile.php?id=" + fbuid + "' target='_blank'>";
        c += "<fb:profile-pic uid='" + fbuid + "' size='q' linked='false'></fb:profile-pic>";
        c += "</a>";
        c += "</td>";
        c += "<td class='info'>";
        c += "<div class='nm'>";
        c += "<a onclick='getInfoForAnUser(\"" + existingPlayers_AI[fbuid].userId + "\");return false;'>" + existingPlayers_AI[fbuid].genderAndName + "</a>";
        c += "<span>(<fb:name uid='" + fbuid + "' linked='false'></fb:name>)</span>";
        c += "</div>";
        c += "<div>" + g_js_strings.commonstr.might + ": " + existingPlayers_AI[fbuid].might + "</div>";
        c += "<div>" + g_js_strings.commonstr.title + ": " + existingPlayers_AI[fbuid].title + "</div>";
        c += "<div>" + g_js_strings.commonstr.alliance + ": " + existingPlayers_AI[fbuid].alliance + "</div>";
        c += "</td>";
        c += "<td class='invcol' id='" + b + "'>";
        if (existingPlayers_AI[fbuid].inviteStatus) {
            c += g_js_strings.friendsTabInAllianceInvite.pendinginv
        } else {
            c += "<a  class='button20' onclick='inviteFriendToJoinAlliance(\"" + existingPlayers_AI[fbuid].userId + '","userId","' + b + "\");return false;'><span>" + g_js_strings.commonstr.invite + "</span></a>"
        }
        c += "</td>";
        c += "</tr>"
    }
    c += "</table></div></div><div id='xfbmlFriendsList'></div>";
    document.getElementById("tabContent_AI").innerHTML = c;
    FB.XFBML.Host.parseDomTree(document.getElementById("tbl_existingPlayers"))
}
function inviteFriendToJoinAlliance(friendId, type, divId) {
    var element = $(divId);
    element.setOpacity(0.5);
    element.setStyle("cursor: default");
    element.onclick = function () {
        return false
    };
    var params = Object.clone(g_ajaxparams);
    params.friendId = friendId;
    params.type = (type || "userId");
    new Ajax.Request(g_ajaxpath + "ajax/allianceSendInviteToFriends.php" + g_ajaxsuffix, {
        method: "post",
        parameters: params,
        onSuccess: function (message) {
            var rslt = eval("(" + message.responseText + ")");
            if (rslt.ok) {
                if (element) {
                    element.innerHTML = g_js_strings.commonstr.invited
                }
            } else {
                if (element) {
                    element.innerHTML = rslt.message
                }
            }
        },
        onFailure: function () {}
    })
}
function searchTabInAllianceInvite() {
    $("divInviteAllianceMemberInvtabs").select(".tabsel")[0].removeClassName("tabsel");
    $("divInviteAllianceMemberInvtabs").select(".tab")[1].addClassName("tabsel");
    var a = "<div id='divSearchPlayer'><div class='searchttl'>" + g_js_strings.recommendFriendsModule.searchplayers + "</div>";
    a += "<div class='searchipt clearfix'><input type='text' name='txtPlayerNameToSearch' id='txtPlayerNameToSearch'/>";
    a += '<a class=\'button20\' onclick=\'searchPlayersByName("txtPlayerNameToSearch","divMatchedPlayers_AI","' + g_js_strings.searchTabInAllianceInvite.messagetoinvite + '","AI");return false;\'><span>' + g_js_strings.commonstr.search + "</span></a></div>";
    a += "<div id='divMatchedPlayers_AI'></div>";
    document.getElementById("tabContent_AI").innerHTML = a
}
function searchPlayersByName(txtInput, resultPlaceHolder, messageHeading, requestType) {
    var playerName = $(txtInput) ? $(txtInput).value : "";
    if (playerName.blank() || playerName.length < 3) {
        Modal.showAlert(g_js_strings.searchPlayersByName.atleast3char);
        return false
    }
    if (messageHeading == null) {
        messageHeading = ""
    }
    if (requestType == null) {
        requestType = ""
    }
    var subject = g_js_strings.searchPlayersByName.allinvite;
    var messageStdDescription = g_js_strings.searchPlayersByName.youareinvited;
    var messageStdNoUserfound = g_js_strings.searchPlayersByName.nouserfound;
    var params = Object.clone(g_ajaxparams);
    params.searchName = playerName;
    params.subType = "ALLIANCE_INVITE";
    new Ajax.Request(g_ajaxpath + "ajax/searchPlayers.php" + g_ajaxsuffix, {
        method: "post",
        parameters: params,
        onSuccess: function (message) {
            var rslt = eval("(" + message.responseText + ")");
            var alhtml = [];
            if (rslt.ok) {
                var alhtml = [];
                playerInfo = rslt.matchedUsers;
                alhtml.push("<div class='msghd'>" + messageHeading + "</div><div class='tbl_searchFriendsResults'><table id='tbl_searchFriendResults' cellpadding='0' cellspacing='5'>");
                if (playerInfo) {
                    if (requestType == "") {
                        for (playerId in playerInfo) {
                            alhtml.push("<tr><td>");
                            var playerStatus = "";
                            var disabled = "";
                            if (playerInfo[playerId].sameAlliance) {
                                playerStatus = "Alliance Member";
                                disabled = 'disabled="disabled"'
                            } else {
                                if (playerInfo[playerId].inviteStatus) {
                                    playerStatus = "Pending Invitation";
                                    disabled = 'disabled="disabled"'
                                }
                            }
                            alhtml.push("<input type='checkbox' id='chk_player__" + playerId + "' onclick='selectedFriendsList(" + playerId + ',this,"playerInfo")\' ' + disabled + "/>");
                            alhtml.push("</td><td class='pic'><a href='http://www.facebook.com/profile.php?id=" + playerInfo[playerId].fbuid + "' target='_blank'><fb:profile-pic linked='false' uid='" + playerInfo[playerId].fbuid + "'></fb:profile-pic></a></td>");
                            alhtml.push("</td><td><div style='width:100px'><a onclick='getInfoForAnUser(\"" + playerId + "\");return false;'>" + playerInfo[playerId].genderAndName + ' </a><br/>(<fb:name uid="' + playerInfo[playerId].fbuid + "\" linked='false'></fb:name>)</div></td>");
                            alhtml.push("<td>" + playerStatus + "</td></tr>")
                        }
                    } else {
                        if (requestType == "AI") {
                            for (playerId in playerInfo) {
                                var messageDescription = encodeURIComponent(g_js_strings.searchPlayersByName.abinkocjoinc.replace("%1$s", messageStdDescription).replace("%2$s", rslt.allianceName)).replace(encodeURIComponent("%3$s"), playerInfo[playerId].link);
                                var divId = "";
                                url = "http://www.facebook.com/inbox/?compose&id=" + playerInfo[playerId].fbuid + "&subject=" + encodeURIComponent(subject) + "&message=" + messageDescription;
                                alhtml.push("<tr><td class='pic'><a href='http://www.facebook.com/profile.php?id=" + playerInfo[playerId].fbuid + "' target='_blank'><fb:profile-pic uid='" + playerInfo[playerId].fbuid + "' linked='false'></fb:profile-pic></a></td>");
                                alhtml.push("<td class='info'><div class='nm'><a onclick='getInfoForAnUser(" + playerId + ");return false;' >" + playerInfo[playerId].genderAndName + "</a><span>(<fb:name linked='false' uid='" + playerInfo[playerId].fbuid + "'></fb:name>)</span></div>");
                                alhtml.push("<div>" + g_js_strings.commonstr.might + ": " + playerInfo[playerId].might + "</div>");
                                alhtml.push("<div>" + g_js_strings.commonstr.title + ": " + playerInfo[playerId].title + "</div>");
                                var sameAlliance = false;
                                if (playerInfo[playerId].allianceId) {
                                    alhtml.push("<div>" + g_js_strings.commonstr.alliance + ":" + playerInfo[playerId].allianceName + "</div>");
                                    sameAlliance = playerInfo[playerId].sameAlliance
                                }
                                divId = "btn_searchFriend_" + playerId;
                                alhtml.push("</td><td id='" + divId + "' class='invcol'>");
                                if (sameAlliance) {
                                    alhtml.push(g_js_strings.searchPlayersByName.mbrofall)
                                } else {
                                    if (playerInfo[playerId].inviteStatus) {
                                        alhtml.push(g_js_strings.friendsTabInAllianceInvite.pendinginv)
                                    } else {
                                        alhtml.push('<a onclick="inviteFriendToJoinAlliance(' + playerId + ",'userId','" + divId + "');window.open(&quot;" + url + "&quot;,'facebookCompose','status = 1, height = 420, width = 970,left=300,top=300, resizable = 0');return false;\" class=\"button20\" ><span>" + g_js_strings.commonstr.invite + "</span></a></td></tr>")
                                    }
                                }
                            }
                        }
                    }
                } else {
                    alhtml.push("<tr><td>" + g_js_strings.searchPlayersByName.srynoplayers.replace("%1$s", playerName) + "</td></tr>")
                }
                alhtml.push("</table></div>");
                document.getElementById(resultPlaceHolder).innerHTML = alhtml.join("");
                FB.XFBML.Host.parseDomTree(document.getElementById("tbl_searchFriendResults"))
            } else {
                alhtml.push("<div class='msghd'>" + messageStdNoUserfound + "</div>");
                document.getElementById(resultPlaceHolder).innerHTML = alhtml.join("")
            }
        },
        onFailure: function () {}
    })
};
if (!window.Alliance) {
    var Alliance = new Object()
}
Alliance.Properties = {
    userInfo: null,
    memberInfo: null,
    memberAllianceName: null,
    memberAllianceId: null,
    allianceDiplomacy: null,
    userOfficerType: null,
    officerTypeMapping: [],
    arrPendingRequest: null,
    arrPendingApprovals: null,
    arrAllianceInfo: null,
    invitations: null
};
Alliance.Methods = {
    pendingTab: function (a) {
        var b = Event.element(a);
        if ($(b).id == "pending_friendly_them") {
            $("pending_friendly_you_content").hide();
            $("pending_friendly_them_content").show();
            if ($(b).hasClassName("off")) {
                $(b).toggleClassName("off");
                $("pending_friendly_you").toggleClassName("off")
            }
        } else {
            if ($(b).id == "pending_friendly_you") {
                $("pending_friendly_you_content").show();
                $("pending_friendly_them_content").hide();
                if ($(b).hasClassName("off")) {
                    $(b).toggleClassName("off");
                    $("pending_friendly_them").toggleClassName("off")
                }
            }
        }
    }
};
Object.extend(Alliance, Alliance.Methods);
Object.extend(Alliance, Alliance.Properties);
Alliance.officerTypeMapping[1] = g_js_strings.commonstr.chancellor;
Alliance.officerTypeMapping[2] = g_js_strings.commonstr.vicechancellor;
Alliance.officerTypeMapping[3] = g_js_strings.commonstr.officer;
Alliance.officerTypeMapping[4] = g_js_strings.commonstr.member;
var userInfo;
var memberInfo;
var memberAllianceName;
var memberAllianceId;
var allianceDiplomacy;
var userOfficerType;
var allianceOfficerTypeMapping = [];
allianceOfficerTypeMapping[1] = g_js_strings.commonstr.chancellor;
allianceOfficerTypeMapping[2] = g_js_strings.commonstr.vicechancellor;
allianceOfficerTypeMapping[3] = g_js_strings.commonstr.officer;
allianceOfficerTypeMapping[4] = g_js_strings.commonstr.member;
var arrPendingRequest;
var arrAllianceInfo = null;
var allianceInvitations;

function showStatusMessage(a) {
    if (a) {
        document.getElementById("allianceStatus").innerHTML = a;
        document.getElementById("allianceStatus").className = "memlisthd"
    } else {
        document.getElementById("allianceStatus").className = ""
    }
}
function openAllianceWindow(a) {
    if (a == "view") {
        modal_alliance()
    } else {
        if (a == "leave") {
            modal_alliance(a)
        } else {
            if (a.indexOf("joinafterfte") != -1) {
                modal_alliance()
            }
        }
    }
}
function showCreateAlliance() {
    var a = "<div id='newAllianceCreation'>";
    a += "<div class='createttl'>" + g_js_strings.showCreateAlliance.createalli + "</div>";
    a += "<div class='cmError' id='createNameError' style='display:none;'>" + g_js_strings.showCreateAlliance.allinameinstruct + "</div>";
    a += "<div><table border='0' cellpadding='0' cellspacing='0'><tr><td><b>" + g_js_strings.showCreateAlliance.alliname + "</b></td><td><input type='text' id='txtAllianceName' /></tr>";
    a += "<tr><td><b>" + g_js_strings.commonstr.description + "</b></td><td><textarea id='txtAllianceDescription'></textarea></td></tr>";
    a += "<tr><td colspan='2' align='center'><a  class='button20'  onclick='createAlliance();return false;'><span>" + g_js_strings.showCreateAlliance.createalli + "</span></a><a  class='buttonDown20' onclick='closeCreateAlliance();return false;'><span>" + g_js_strings.commonstr.cancel + "</span></a></td>";
    a += "</table></div></div>";
    document.getElementById("divAllianceInfoActions").innerHTML = a
}
function closeCreateAlliance() {
    document.getElementById("newAllianceCreation").innerHTML = ""
}
function createAlliance() {
    if ($("txtAllianceName").value.match(/[^a-zA-Z0-9_\ ]/g)) {
        $("createNameError").show();
        return false
    }
    var params = Object.clone(g_ajaxparams);
    params.allianceName = document.getElementById("txtAllianceName").value;
    params.allianceDescription = document.getElementById("txtAllianceDescription").value;
    new Ajax.Request(g_ajaxpath + "ajax/allianceCreate.php" + g_ajaxsuffix, {
        method: "post",
        parameters: params,
        onSuccess: function (message) {
            var rslt = eval("(" + message.responseText + ")");
            if (rslt.ok) {
                document.getElementById("allianceStatus").innerHTML = "Alliance Created";
                allianceInfo();
                var url = allianceinviteUrl + "&s=" + rslt.s;
                top.location = url;
                cm.MixPanelTracker.track("alliance_create", {
                    usr_gen: seed.player.g,
                    usr_byr: seed.player.y,
                    usr_ttl: titlenames[seed.player.title],
                    distinct_id: tvuid
                })
            } else {
                Modal.showAlert(printLocalError((rslt.error_code || null), (rslt.msg || null), (rslt.feedback || null)))
            }
        },
        onFailure: function () {}
    })
}
function allianceInfo(b) {
    var g = "";
    var d = "";
    var a = "";
    var f = "";
    var c = "";
    var e = "";
    AjaxCall.gPostRequest("ajax/allianceGetInfo.php", {}, function (o) {
        if (o.ok) {
            var q = new Array();
            arrPendingRequest = null;
            userInfo = (o.userInfo) ? o.userInfo : null;
            if (o.inAlliance) {
                arrAllianceInfo = o.allianceInfo;
                var r = o.officers;
                allianceDiplomacy = o.diplomaticAlliances;
                c = arrAllianceInfo.founder;
                e = arrAllianceInfo.ranking;
                userOfficerType = o.userOfficerType;
                q.push("<div class='allianceinfobox'>");
                q.push("<div class='alinfohd'><span>Info</span>");
                q.push('<a id="allianceOptions"  class="button20" onclick="optionsInAlliance();return false;"><span>' + g_js_strings.allianceInfo.leavealli + "</span></a>");
                q.push("</div>");
                q.push("<table class='alinfotable' cellpadding='0' cellspacing='0'>");
                q.push("<tr><td><b>" + g_js_strings.allianceInfo.curralli + ":</b> ");
                q.push(arrAllianceInfo.allianceName);
                q.push("</td><td><b>" + g_js_strings.commonstr.members + ":</b> ");
                q.push(arrAllianceInfo.members);
                q.push("/100</td><td><b>" + g_js_strings.commonstr.might + ":</b> ");
                q.push(arrAllianceInfo.might);
                q.push("</td></tr>");
                q.push("<tr><td><b>" + g_js_strings.commonstr.founder + ":</b> ");
                q.push(arrAllianceInfo.founderGenderAndName);
                q.push("</td><td><b>" + g_js_strings.commonstr.ranking + ":</b> ");
                q.push(arrAllianceInfo.ranking);
                q.push("</td><td><b>" + g_js_strings.commonstr.position + ":</b> ");
                q.push(allianceOfficerTypeMapping[parseInt(userOfficerType)]);
                q.push("</td></tr></table>");
                q.push("<div id='divAllianceLeaveActions' class='allianceleavebox'></div>");
                q.push("<div class='alinfocolbox clearfix'><div class='lcol'>");
                if (o.pendingApprovals) {
                    arrPendingApprovals = o.pendingApprovals;
                    q.push("<div id='divPendingApprovals'><div class='pendingttl'><span>" + g_js_strings.allianceInfo.pendmbrs + "</span></div><table id='pa_table' cellpadding='0' cellspacing='0'>");
                    for (uid in arrPendingApprovals) {
                        var n = false;
                        var j = arrPendingApprovals[uid].recommendedBy;
                        if (j) {
                            n = true
                        } else {
                            recoBy = ""
                        }
                        q.push("<tr id='tbl_pa_");
                        q.push(uid);
                        q.push("'><td style='padding-top:5px;border-bottom:1px solid #A56631;''><table cellpadding='0' cellspacing='0'><tr><td rowspan='2'><fb:profile-pic uid='");
                        q.push(arrPendingApprovals[uid].fbuid);
                        q.push("' size='q' style='width:35px;height:35px;margin:0 5px;'></fb:profile-pic></td>");
                        q.push("<td><a onclick='getInfoForAnUser(\"" + uid + "\");return false;' >");
                        q.push(arrPendingApprovals[uid].genderAndName);
                        q.push("</a></td>");
                        q.push("<td style='padding-left:5px;'><a  class='button20");
                        if (arrAllianceInfo.members < 100) {
                            q.push("' onclick='actionOnPendingApproval(\"approve\",");
                            q.push(uid);
                            q.push(",");
                            q.push(n);
                            q.push(",");
                            q.push(arrPendingApprovals[uid].fbuid);
                            q.push(")'")
                        } else {
                            q.push(" disabled' onclick='' title='Your alliance has reached the member limit'")
                        }
                        q.push("><span>" + g_js_strings.commonstr.approve + "</span></a></td>");
                        q.push("<td><a class='button20' onclick='actionOnPendingApproval(\"reject\",");
                        q.push(uid);
                        q.push(",");
                        q.push(n);
                        q.push(")'/><span>" + g_js_strings.commonstr.reject + "</span></a></td></tr>");
                        q.push("<tr><td colspan='2'>(<fb:name uid='");
                        q.push(arrPendingApprovals[uid].fbuid);
                        q.push("' linked='false'></fb:name>)");
                        q.push("</td></tr>");
                        var p = "";
                        for (recoId in j) {
                            p += "<div class='clearfix' style='display:block;padding-bottom:3px;'><img style='float:left;height:30px;width:30px;margin-right:5px;' src='" + j[recoId].avatarurl + "' /><a  style='float:left;display:block;line-height:30px;' onclick='getInfoForAnUser(\"" + recoId + "\");return false;'>" + j[recoId].genderAndName + "</a><div>"
                        }
                        if (p != "") {
                            q.push("<tr><td colspan='4' style='padding-left:5px;'>" + g_js_strings.allianceInfo.recommby + ":");
                            q.push(p);
                            q.push("</td></tr>")
                        }
                        q.push("</table></td></tr>")
                    }
                    q.push("</table></div>")
                }
                q.push("<div class='alinfolead'><div class='alinfoleadhd'><span>" + g_js_strings.commonstr.leaders + "</span></div><table cellpadding='0' cellspacing='0' class='alinfoleadtable'>");
                for (var m = 0; m < r.length; m++) {
                    q.push("<tr><td id='userId_");
                    q.push(r[m].id);
                    q.push("'>");
                    q.push("<a  onclick='getInfoForAnUser(\"");
                    q.push(r[m].id);
                    q.push("\")'>");
                    q.push(r[m].genderAndName);
                    q.push("</a>");
                    q.push(" (");
                    q.push(allianceOfficerTypeMapping[parseInt(r[m].type)]);
                    q.push(")</td><td class='msgcol'><a  class='button20' onclick='getMessageWindow(");
                    q.push(r[m].id);
                    q.push(',"');
                    q.push(escape(r[m].genderAndName));
                    q.push("\");return false;'><span>" + g_js_strings.commonstr.message + "</span></a></td></tr>")
                }
                q.push("</table></div>");
                q.push("</div><div class='rcol'>");
                q.push("<div class='alinfodip'>");
                q.push("<div class='alinfodiphd'><span>" + g_js_strings.allianceInfo.allidiplomacy + "</span></div>");
                q.push("<div id='alinfodiptabs' class='tabsbar alinfodiptabs clearfix'>");
                q.push("<a  class='tab selected' onclick='getDiplomacy(\"FRIENDLY\");return false;'><span>" + g_js_strings.commonstr.friendly + "</span></a>");
                q.push("<a  class='tab' onclick='getDiplomacy(\"HOSTILE\");return false;'><span>" + g_js_strings.commonstr.hostile + "</span></a>");
                q.push("<a  class='tab' onclick='getDiplomacy(\"PENDING\");return false;'><span>" + g_js_strings.commonstr.pending + "</span></a>");
                q.push("</div>");
                q.push("<div style='clear:both'></div>");
                q.push("<div id='allianceDiplomacyInfo' style='overflow: auto; height: 200px;'></div>");
                q.push("<div style='clear:both'></div>");
                if (userOfficerType < 3) {
                    q.push("<div id='set_diplomacy_box'><a  class='button20' onclick='setDiplomacyWindow();return false;'><span>" + g_js_strings.allianceInfo.setdiplomacy + "</span></a><div style='clear:both'></div></div>")
                }
                q.push("</div>");
                q.push("</div></div>")
            } else {
                arrAllianceInfo = null;
                q.push("<div class='noalliance_bodywrap'>");
                q.push("<div class='noalliance_body'>");
                q.push("<div class='infohd'><span>" + g_js_strings.commonstr.info + "</span></div>");
                q.push("<div class='descmain'>" + g_js_strings.allianceInfo.currentlynoalli + "</div><div class='desc'>" + g_js_strings.allianceInfo.alliprotectdesc + "</div>");
                q.push("<div class='btn clearfix'><a  class='button20' onclick='allianceList();modal_alliance_changetab(3);'><span>" + g_js_strings.allianceInfo.browsealli + "</span></a></div>");
                q.push("</div>");
                if (o.embasyLevel < 2) {
                    strCreateAllianceEligiblity = "<div class='tx'>" + g_js_strings.allianceInfo.musthaveembassylvl2 + "</div>"
                } else {
                    strCreateAllianceEligiblity = "<div class='tx'>" + g_js_strings.allianceInfo.startown + "</div><br /><div><a  class='button20' onclick='showCreateAlliance();'><span style='margin-left:275px'>" + g_js_strings.allianceInfo.createalli + "</span></a></div>"
                }
                if (!o.embasyLevel) {
                    strCreateAllianceEligiblity += "<div class='tx'> " + g_js_strings.allianceInfo.andlvl1tojoin + "</div>"
                }
                q.push("<div class='noalliance_startown clearfix'>" + strCreateAllianceEligiblity + "</div>");
                if (o.pendingRequest) {
                    q.push("<br/><div id='pendingRequestFromUser'><div class='prhd'>" + g_js_strings.allianceInfo.pendingreq + "</div><table cellpadding='0' cellspacing='0'>");
                    arrPendingRequest = o.pendingRequest;
                    for (aId in arrPendingRequest) {
                        q.push("<tr><td class='colhd'>" + g_js_strings.commonstr.nametx + ":</td><td>" + arrPendingRequest[aId].name + "</td></tr>");
                        q.push("<tr><td class='colhd'>" + g_js_strings.commonstr.host + ":</td><td><a  onclick='getInfoForAnUser(\"" + arrPendingRequest[aId].hostId + "\");return false;'>" + arrPendingRequest[aId].hostGenderAndName + "</a></td></tr>");
                        q.push("<tr><td class='colhd'>" + g_js_strings.commonstr.members + ":</td><td>" + arrPendingRequest[aId].members + "</td></tr>");
                        q.push("<tr><td class='colhd'>" + g_js_strings.commonstr.ranking + ":</td><td>" + arrPendingRequest[aId].ranking + "</td></tr>");
                        q.push("<tr><td class='colhd'>" + g_js_strings.commonstr.might + ":</td><td>" + arrPendingRequest[aId].might + "</td></tr>");
                        q.push("<tr><td class='colhd'>" + g_js_strings.commonstr.description + ":</td><td>" + arrPendingRequest[aId].description + "</td></tr>");
                        q.push("<tr><td colspan='2'>" + g_js_strings.allianceInfo.reqdon + " " + arrPendingRequest[aId].timeRequested + "</td></tr>");
                        q.push("<tr><td colspan='2'><a  class='button20' onclick='cancelCurrentAllianceRequest();return false;'><span>" + g_js_strings.allianceInfo.cancelreq + "</span></a></td></tr>")
                    }
                    q.push("</table></div>")
                }
            }
            if (o.allianceInvitations) {
                q.push("<div class='alinv'><div class='alinvhd'><span>" + g_js_strings.allianceInfo.alliinvites + "</span></div><div class='alinvbody'><table id='tblAllianceInvitations' cellpadding='0' cellspacing='0'>");
                allianceInvitations = o.allianceInvitations;
                for (allianceId in allianceInvitations) {
                    q.push("<tr id='tr_AI_");
                    q.push(allianceId);
                    q.push("'>");
                    var l = allianceInvitations[allianceId].referralUserIds;
                    var h = "";
                    q.push("<td class='piccol'><img src='");
                    q.push(allianceInvitations[allianceId].avatarurl);
                    q.push("'/></td><td class='invcol'>");
                    if (l) {
                        q.push("<div>");
                        for (refId in l) {
                            h += "<a  onclick='getInfoForAnUser(\"" + refId + "\");return false;'>" + l[refId].genderAndName + "</a>(<fb:name uid='" + l[refId].fbuid + "' linked='false'></fb:name>),"
                        }
                        q.push(g_js_strings.allianceInfo.ainvitedyoutob.replace("%1$s", h.slice(0, -1)).replace("%2$s", allianceInvitations[allianceId].name));
                        q.push("</div>")
                    }
                    q.push("<div class='btns clearfix'>");
                    q.push("<a  class='button20' onclick='actionOnAllianceInvitations(\"join\",");
                    q.push(o.inAlliance);
                    q.push(",");
                    q.push(allianceId);
                    q.push(");return false;'><span>" + g_js_strings.allianceInfo.joinalli + "</span></a><a class='nothanks'  onclick='actionOnAllianceInvitations(\"reject\",");
                    q.push(o.inAlliance);
                    q.push(",");
                    q.push(allianceId);
                    q.push(");return false;'>" + g_js_strings.allianceInfo.nothanks + "</a>");
                    q.push("</div></td><td class='statscol'><div><b>" + g_js_strings.commonstr.nametx + ":</b> ");
                    q.push(allianceInvitations[allianceId].name);
                    q.push("</div><div><b>" + g_js_strings.commonstr.host + ":</b> <a  onclick='getInfoForAnUser(\"" + allianceInvitations[allianceId].hostUserId + "\");return false;'>");
                    q.push(allianceInvitations[allianceId].hostGenderAndName);
                    q.push("</a></div><div><b>" + g_js_strings.commonstr.founder + ":</b> ");
                    q.push(allianceInvitations[allianceId].founderGenderAndName);
                    q.push("</div><div><b>" + g_js_strings.commonstr.members + ":</b> ");
                    q.push(allianceInvitations[allianceId].memberCount);
                    q.push("</div><div><b>" + g_js_strings.commonstr.ranking + ":</b> ");
                    q.push(allianceInvitations[allianceId].ranking);
                    q.push("</div><div><b>" + g_js_strings.commonstr.might + ":</b> ");
                    q.push(allianceInvitations[allianceId].might);
                    q.push("</div></td><td class='desccol'><b>" + g_js_strings.commonstr.description + ":</b> ");
                    q.push(allianceInvitations[allianceId].description);
                    q.push("</td></tr>")
                }
                q.push("</table></div></div>")
            }
            q.push("<div id='divAllianceInfoActions'></div>");
            q.push("</div>");
            document.getElementById("allianceContent").innerHTML = q.join("");
            FB.XFBML.Host.parseDomTree(document.getElementById("allianceContent"));
            if (o.inAlliance) {
                getDiplomacy("FRIENDLY")
            }
            if (b == "leave") {
                document.getElementById("divAllianceLeaveActions").innerHTML = leaveAllianceConfirmationContent()
            } else {
                if (b == "members") {
                    membersInfo()
                }
            }
        } else {
            Modal.showAlert(printLocalError((o.error_code || null), (o.msg || null), (o.feedback || null)))
        }
    })
}
function getDiplomacy(d) {
    var a = new Array();
    var c = null;
    $("alinfodiptabs").select(".selected")[0].removeClassName("selected");
    var b = $("alinfodiptabs").select(".tab");
    if (d == "FRIENDLY") {
        b[0].addClassName("selected");
        c = allianceDiplomacy.friendly
    } else {
        if (d == "HOSTILE") {
            b[1].addClassName("selected");
            c = allianceDiplomacy.hostile
        } else {
            b[2].addClassName("selected");
            c = "PENDING"
        }
    }
    if (c == "undefined" || c == null) {
        a.push("<table>");
        a.push("<tr><td>" + g_js_strings.getDiplomacy.sorrynoalli + "</td></tr>");
        a.push("</table>")
    } else {
        if (c == "PENDING") {
            var f = "",
                e = "";
            Object.values(allianceDiplomacy.friendlyToThem).each(function (g) {
                f += "<div class='pending_content_row'>" + g.allianceName + "<span class='green_friendly'>" + g_js_strings.getDiplomacy.acceptancepending + "</span></div>"
            });
            Object.values(allianceDiplomacy.friendlyToYou).each(function (g) {
                e += "<div class='pending_content_row'><span class='red_friendly'>" + g_js_strings.getDiplomacy.leaderacceptancepending + "</span>" + g.allianceName + "</div>"
            });
            a.push("<div><div style='margin:10px;position:relative;height:20px;'><div id='pending_friendly_them' class='pending_subtab' onclick='Alliance.pendingTab(event)'>" + g_js_strings.getDiplomacy.friendlytowardsthem + "</div><div id='pending_friendly_you' class='pending_subtab off' onclick='Alliance.pendingTab(event)'>" + g_js_strings.getDiplomacy.friendlytoyou + "</div></div><div id='pending_friendly_them_content' class='pending_subtab_content'><div class='pending_alliname'>" + g_js_strings.getDiplomacy.alliname + "</div>" + f + "</div><div id='pending_friendly_you_content' class='pending_subtab_content' style='display:none;'><div class='pending_alliname'>" + g_js_strings.getDiplomacy.alliname + "</div>" + e + "</div></div>")
        } else {
            a.push("<table>");
            a.push("<tr><td>" + g_js_strings.getDiplomacy.alliname + "</td><td>" + g_js_strings.commonstr.ranking + "</td><td>" + g_js_strings.commonstr.members + "</td></tr>");
            for (aId in c) {
                a.push("<tr><td>");
                a.push(c[aId].allianceName);
                a.push("</td><td>");
                a.push(c[aId].rank);
                a.push("</td><td>");
                a.push(c[aId].membersCount);
                a.push("</td></tr>")
            }
            a.push("</table>")
        }
    }
    if (document.getElementById("allianceDiplomacyInfo") != null) {
        document.getElementById("allianceDiplomacyInfo").innerHTML = a.join("")
    }
}
function actionOnPendingApproval(type, uid, isRecommendation, fbuid) {
    var params = Object.clone(g_ajaxparams);
    params.targetUserId = uid;
    if (type == "approve") {
        if (isRecommendation == null) {
            isRecommendation = false
        }
        params.actionType = "approve";
        params.isRecommendation = isRecommendation
    } else {
        if (isRecommendation == null) {
            isRecommendation = false
        }
        params.actionType = "reject";
        params.isRecommendation = isRecommendation
    }
    new Ajax.Request(g_ajaxpath + "ajax/alliancePendingAction.php" + g_ajaxsuffix, {
        method: "post",
        parameters: params,
        onSuccess: function (message) {
            var rslt = eval("(" + message.responseText + ")");
            if (rslt.ok) {
                allianceInfo();
                if (type == "approve") {
                    var msg = (rslt.message) ? encodeURIComponent(rslt.message) : "";
                    var sub = (rslt.subject) ? rslt.subject : "";
                    window.open("http://www.facebook.com/inbox/?compose&id=" + fbuid + "&subject=" + sub + "&message=" + msg, "facebookCompose", "status = 1, height=420, width = 970,left=300,top=300, resizable = 0")
                }
            } else {
                Modal.showAlert(printLocalError((rslt.error_code || null), (rslt.msg || null), (rslt.feedback || null)));
                allianceInfo()
            }
        },
        onFailure: function () {}
    })
}
function actionOnAllianceInvitations(actionType, inAlliance, allianceId) {
    var strHTML = "";
    if (actionType == "join" && inAlliance) {
        var msg = g_js_strings.actionOnAllianceInvitations.leavecurralli;
        strHTML += leaveAllianceConfirmationContent(msg)
    } else {
        if (actionType == "join") {
            var params = Object.clone(g_ajaxparams);
            params.allianceId = allianceId;
            params.cityId = currentcityid;
            new Ajax.Request(g_ajaxpath + "ajax/allianceRecommendationJoin.php" + g_ajaxsuffix, {
                method: "post",
                parameters: params,
                onSuccess: function (message) {
                    var rslt = eval("(" + message.responseText + ")");
                    if (rslt.ok) {
                        strHTML = g_js_strings.actionOnAllianceInvitations.congratsyoujoinedalli.replace("%1$s", allianceInvitations[allianceId].name);
                        allianceInfo();
                        cm.MixPanelTracker.track("alliance_join", {
                            usr_gen: seed.player.g,
                            usr_byr: seed.player.y,
                            usr_ttl: titlenames[seed.player.title],
                            distinct_id: tvuid
                        })
                    } else {
                        Modal.showAlert(printLocalError((rslt.error_code || null), (rslt.msg || null), (rslt.feedback || null)))
                    }
                },
                onFailure: function () {}
            })
        } else {
            if (actionType == "reject") {
                var params = Object.clone(g_ajaxparams);
                params.allianceId = allianceId;
                new Ajax.Request(g_ajaxpath + "ajax/allianceRecommendationReject.php" + g_ajaxsuffix, {
                    method: "post",
                    parameters: params,
                    onSuccess: function (message) {
                        var rslt = eval("(" + message.responseText + ")");
                        if (rslt.ok) {
                            var aI = document.getElementById("tblAllianceInvitations").tBodies[0];
                            aI.deleteRow(document.getElementById("tr_AI_" + allianceId).rowIndex)
                        } else {
                            Modal.showAlert(printLocalError((rslt.error_code || null), (rslt.msg || null), (rslt.feedback || null)))
                        }
                    },
                    onFailure: function () {}
                })
            }
        }
    }
    document.getElementById("divAllianceInfoActions").innerHTML = strHTML
}
function leaveAllianceConfirmationContent(c, a) {
    if (c == null) {
        c = ""
    }
    if (a == null) {
        a = "divAllianceLeaveActions"
    }
    var b = "<div class='leaveallianceconfirm'><div class='cural'><b>" + g_js_strings.leaveAllianceConfirmationContent.curralli + ":</b> " + arrAllianceInfo.allianceName + "</div>" + c;
    if (userOfficerType == 1 && arrAllianceInfo.members > 1) {
        b = g_js_strings.leaveAllianceConfirmationContent.chancellorsnotleave;
        b += "<div class='clearfix'><a class='button20'  onclick='resignAlliance(\"" + a + "\");return false;'><span>" + g_js_strings.leaveAllianceConfirmationContent.resignchancellors + "</span></a></div>"
    } else {
        if (arrAllianceInfo.members == 1) {
            b += g_js_strings.leaveAllianceConfirmationContent.noteonlyperson
        }
        b += "<div>" + g_js_strings.leaveAllianceConfirmationContent.liketoleave + "</div>";
        b += "<div class='clearfix cfrmbtns'><a  class='button20' onclick='leaveAlliance(\"" + a + "\");return false;'><span>" + g_js_strings.commonstr.leave + "</span></a><a  class='buttonDown20' onclick='document.getElementById(\"" + a + '").innerHTML = "";return false;\'><span>' + g_js_strings.commonstr.cancel + "</span></a></div></div>"
    }
    if (!document.getElementById(a)) {
        b = "<div id='" + a + "'" + b + "</div>"
    }
    return b
}
function resignAlliance(divId) {
    var strHTML = "<div class='resigntitle'>" + g_js_strings.resignAlliance.chancellorresignation + "</div><div>" + g_js_strings.resignAlliance.selectnewchancellor + "</div><div>" + g_js_strings.resignAlliance.youvicechancellor + "</div>";
    var params = Object.clone(g_ajaxparams);
    params.resign = 1;
    new Ajax.Request(g_ajaxpath + "ajax/allianceGetMemberNames.php" + g_ajaxsuffix, {
        method: "post",
        parameters: params,
        onSuccess: function (message) {
            var rslt = eval("(" + message.responseText + ")");
            if (rslt.ok) {
                if (rslt.allianceMembers) {
                    var arrElectAllianceMembers = rslt.allianceMembers;
                    strHTML += "<select id='selAllianceMembers_elect'>";
                    for (uid in arrElectAllianceMembers) {
                        strHTML += "<option value='" + uid + "'>" + arrElectAllianceMembers[uid].displayName + "(<fb:name uid='" + arrElectAllianceMembers[uid].fbuid + "' linked='false'></fb:name>)</option>"
                    }
                    strHTML += "</select><div class='clearfix'><a class='button20' onclick='assignNewChancellor(\"divAllianceLeaveActions\");return false;'><span>" + g_js_strings.resignAlliance.assignnewchancellor + "</span></a></div>";
                    document.getElementById(divId).innerHTML = strHTML;
                    FB.XFBML.Host.parseDomTree(document.getElementById(divId))
                } else {
                    allianceInfo()
                }
            } else {
                Modal.showAlert(printLocalError((rslt.error_code || null), (rslt.msg || null), (rslt.feedback || null)))
            }
        },
        onFailure: function () {}
    })
}
function leaveAlliance(divId) {
    var params = Object.clone(g_ajaxparams);
    new Ajax.Request(g_ajaxpath + "ajax/allianceLeave.php" + g_ajaxsuffix, {
        method: "post",
        parameters: params,
        onSuccess: function (message) {
            var rslt = eval("(" + message.responseText + ")");
            if (rslt.ok) {
                document.getElementById(divId).innerHTML = g_js_strings.leaveAlliance.allianceaterminated.replace("%1$s", arrAllianceInfo.allianceName);
                seed.allianceDiplomacies = null;
                allianceInfo();
                if (rslt.updateSeed.city && rslt.marches) {
                    var marches = new Hash(rslt.marches);
                    if (marches) {
                        marches.each(function (pair) {
                            var march = pair.value;
                            var ut = unixtime();
                            if (march.marchStatus == 2) {
                                seed.queue_atkp["city" + march.fromCityId]["m" + march.marchId].marchStatus = 8;
                                var marchtime = parseInt(seed.queue_atkp["city" + march.fromCityId]["m" + march.marchId].returnUnixTime) - parseInt(seed.queue_atkp["city" + march.fromCityId]["m" + march.marchId].destinationUnixTime)
                            } else {
                                if (march.marchStatus == 1) {
                                    for (var k = 1; k < 13; k++) {
                                        seed.queue_atkp["city" + march.fromCityId]["m" + march.marchId]["unit" + k + "Return"] = seed.queue_atkp["city" + march.fromCityId]["m" + march.marchId]["unit" + k + "Count"]
                                    }
                                    seed.queue_atkp["city" + march.fromCityId]["m" + march.marchId].marchStatus = 9;
                                    var marchtime = ut - parseInt(seed.queue_atkp["city" + march.fromCityId]["m" + march.marchId].marchUnixTime)
                                }
                            }
                            seed.queue_atkp["city" + march.fromCityId]["m" + march.marchId].returnUnixTime = ut + marchtime;
                            seed.queue_atkp["city" + march.fromCityId]["m" + march.marchId].destinationUnixTime = ut;
                            seed.queue_atkp["city" + march.fromCityId]["m" + march.marchId].marchUnixTime = ut - marchtime
                        })
                    }
                    update_seed(rslt.updateSeed)
                }
            } else {
                Modal.showAlert(printLocalError((rslt.error_code || null), (rslt.msg || null), (rslt.feedback || null)));
                allianceInfo()
            }
        },
        onFailure: function () {}
    })
}
function assignNewChancellor(divId) {
    var newChancellorName = document.getElementById("selAllianceMembers_elect").options[document.getElementById("selAllianceMembers_elect").selectedIndex].text;
    var params = Object.clone(g_ajaxparams);
    params.requestType = 6;
    params.newChancellorId = document.getElementById("selAllianceMembers_elect").value;
    params.newChancellorName = newChancellorName;
    new Ajax.Request(g_ajaxpath + "ajax/allianceNewChancellor.php" + g_ajaxsuffix, {
        method: "post",
        parameters: params,
        onSuccess: function (message) {
            var rslt = eval("(" + message.responseText + ")");
            if (rslt.ok) {
                document.getElementById(divId).innerHTML = g_js_strings.commonstr.alliance + ": " + arrAllianceInfo.allianceName + "<br/>" + g_js_strings.assignNewChancellor.newchancellorisa.replace("%1$s", newChancellorName);
                allianceInfo()
            } else {
                Modal.showAlert(printLocalError((rslt.error_code || null), (rslt.msg || null), (rslt.feedback || null)));
                allianceInfo()
            }
        },
        onFailure: function () {}
    })
}
function cancelCurrentAllianceRequest(confirm) {
    if (confirm == null) {
        document.getElementById("divAllianceInfoActions").innerHTML = "<div class='alliancecancelrequest clearfix'><div>" + g_js_strings.cancelCurrentAllianceRequest.suretocancel + "</div><a onclick='cancelCurrentAllianceRequest(\"yes\");return false;' class='button20'><span>Confirm</span></a><a onclick='document.getElementById(\"divAllianceInfoActions\").innerHTML=\"\";return false;' class='buttonDown20'><span>" + g_js_strings.commonstr.cancel + "</span></a></div>"
    } else {
        var params = Object.clone(g_ajaxparams);
        new Ajax.Request(g_ajaxpath + "ajax/allianceCancelRequest.php" + g_ajaxsuffix, {
            method: "post",
            parameters: params,
            onSuccess: function (message) {
                var rslt = eval("(" + message.responseText + ")");
                if (rslt.ok) {
                    allianceInfo()
                } else {
                    Modal.showAlert(printLocalError((rslt.error_code || null), (rslt.msg || null), (rslt.feedback || null)));
                    allianceInfo()
                }
            },
            onFailure: function () {}
        })
    }
}
function getDirectoryTabAllianceMembers() {
    var params = Object.clone(g_ajaxparams);
    new Ajax.Request(g_ajaxpath + "ajax/allianceGetLeaders.php" + g_ajaxsuffix, {
        method: "post",
        parameters: params,
        onSuccess: function (message) {
            var additionalAllianceInfo = [];
            var rslt = eval("(" + message.responseText + ")");
            if (rslt.ok) {
                var allianceOfficers = rslt.officers;
                var strHTML = new Array();
                if (allianceOfficers) {
                    strHTML.push("<div class='leaders'>" + g_js_strings.commonstr.leaders + "</div>");
                    for (aId in allianceOfficers) {
                        strHTML.push('<div class="clearfix friend">');
                        strHTML.push('<img src="');
                        strHTML.push(allianceOfficers[aId].avatarurl);
                        strHTML.push('" class="pic"/>');
                        strHTML.push('<div class="info">');
                        strHTML.push('<div class="nm"><a href="#" onclick=\'getInfoForAnUser("');
                        strHTML.push(allianceOfficers[aId].userId);
                        strHTML.push("\");return false;' >");
                        strHTML.push(allianceOfficers[aId].genderAndName);
                        strHTML.push("</a></div>");
                        if (allianceOfficers[aId].online) {
                            strHTML.push("<div style='color:green;font-size:10px;'>(" + g_js_strings.commonstr.online + ")</div>")
                        }
                        strHTML.push('<div class="stat">' + g_js_strings.commonstr.might + ":");
                        strHTML.push(allianceOfficers[aId].might);
                        strHTML.push('</div><div class="action">');
                        strHTML.push('<a href="#" onclick=\'getMessageWindow("' + allianceOfficers[aId].userId + '","' + escape(allianceOfficers[aId].genderAndName) + "\")'>" + g_js_strings.commonstr.message + "</a></div></div></div>")
                    }
                    strHTML.push("<br/><div class='heading'><a onclick='modal_alliance(\"members\");return false;'>" + g_js_strings.getDirectoryTabAllianceMembers.viewallmbrs + "</a></div>")
                } else {
                    strHTML.push(g_js_strings.getDirectoryTabAllianceMembers.sorrynoofficersa.replace("%1$s", rslt.allianceName))
                }
                additionalAllianceInfo.push("<div>" + g_js_strings.commonstr.alliance + ': <a href="#">' + rslt.allianceName + "</a></div>");
                additionalAllianceInfo.push("<div>" + g_js_strings.commonstr.members + ': <a href="#">' + rslt.members + "</a></div>");
                document.getElementById("directory_tabs_2_members").innerHTML = strHTML.join("");
                if (allianceOfficers) {
                    FB.XFBML.Host.parseDomTree(document.getElementById("directory_tabs_2_members"))
                }
            } else {
                document.getElementById("directory_tabs_2_members").innerHTML = "<a onclick='modal_alliance();return false;'>" + g_js_strings.getDirectoryTabAllianceMembers.jointosee + "</a><br/><br/>" + g_js_strings.allianceInfo.alliprotectdesc;
                additionalAllianceInfo.push("<div></div>")
            }
            document.getElementById("directory_tabs_2_allianceInfo").innerHTML = additionalAllianceInfo.join("")
        },
        onFailure: function () {}
    })
}
function membersInfo(pageNo) {
    if (pageNo == null) {
        pageNo = 1;
        document.getElementById("allianceContent").innerHTML = "<div id='divAllianceMemberList'></div><div id='memberInfo_pagination' class='pagination'></div>"
    }
    var params = Object.clone(g_ajaxparams);
    params.pageNo = pageNo;
    new Ajax.Request(g_ajaxpath + "ajax/allianceGetMembersInfo.php" + g_ajaxsuffix, {
        method: "post",
        parameters: params,
        onSuccess: function (message) {
            var rslt = eval("(" + message.responseText + ")");
            if (rslt.ok) {
                userOfficerType = rslt.userOfficerType;
                memberInfo = rslt.memberInfo;
                memberAllianceName = rslt.allianceName;
                memberAllianceId = rslt.allianceId;
                var memhtml = new Array();
                if (rslt.memberCount < 100) {
                    memhtml.push("<div class='memlisthd clearfix'><div class='tx'>" + g_js_strings.membersInfo.allilarger + "</div>");
                    if (userOfficerType == 4) {
                        memhtml.push("<a  class='button20' onclick='recommendFriendsModule();return false;'><span>" + g_js_strings.membersInfo.recommalli + "</span></a>")
                    } else {
                        if (userOfficerType < 4) {
                            memhtml.push("<a  class='button20' onclick='inviteFriendsModule();return false;'><span>" + g_js_strings.membersInfo.invitealli + "</span></a>");
                            memhtml.push("<a  class='button20 msgall' onclick='getMessageWindow(" + memberAllianceId + ',"Alliance Members","allianceall");return false;\'><span>' + g_js_strings.membersInfo.msgeveryone + "</span></a>")
                        }
                    }
                } else {
                    if (rslt.memberCount == 100) {
                        memhtml.push("<div class='memlisthd clearfix' style='font-size:12px'>" + g_js_strings.membersInfo.allilimit);
                        memhtml.push("<a class='button20 msgall' onclick='getMessageWindow(" + memberAllianceId + ',"Alliance Members","allianceall");return false;\'><span>' + g_js_strings.membersInfo.msgeveryone + "</span></a></div>")
                    }
                }
                memhtml.push("</div><div class='memlist'><div class='memlisthdg'><table cellpadding='0' cellspacing='0'>");
                memhtml.push("<thead><tr><td class='colnm'>" + g_js_strings.commonstr.nametx + "</td><td class='colpos'>" + g_js_strings.commonstr.position + "</td><td class='colrank'>" + g_js_strings.commonstr.rank + "</td><td class='colmight'>" + g_js_strings.commonstr.might + "</td><td class='colcities'>" + g_js_strings.commonstr.cities + "</td><td class='collast'>" + g_js_strings.membersInfo.lastonline + "</td><td class='colact'>" + g_js_strings.commonstr.actions + "</td></tr>");
                memhtml.push("</thead></table></div><div class='memlistfull'><table cellpadding='0' cellspacing='0'>");
                var cnt = 0;
                for (key in memberInfo) {
                    memhtml.push("<tr ");
                    if (cnt % 2 == 0) {
                        memhtml.push("class='stripe' ")
                    }
                    memhtml.push("id='memberId_" + memberInfo[key].userId + "'>");
                    memhtml.push("<td class='colnm'>" + memberInfo[key].genderAndName + "</td>");
                    memhtml.push("<td class='colpos'>" + allianceOfficerTypeMapping[parseInt(memberInfo[key].positionType)] + "</td>");
                    memhtml.push("<td class='colrank'>" + memberInfo[key].ranking + "</td>");
                    memhtml.push("<td class='colmight'>" + memberInfo[key].prestige + "</td>");
                    memhtml.push("<td class='colcities'>" + memberInfo[key].cities + "</td>");
                    memhtml.push("<td class='collast'>" + memberInfo[key].lastLogin + "</td>");
                    memhtml.push("<td class='colact'><a  class='button20' onclick='getMessageWindow(" + memberInfo[key].userId + ',"' + escape(memberInfo[key].genderAndName) + "\");return false;'><span>" + g_js_strings.commonstr.message + "</span></a><a  class='button20' onclick='showMemberInfo(" + key + ");return false;' id='btnView" + key + "'><span>" + g_js_strings.commonstr.view + "</span></a></td></tr>");
                    cnt++
                }
                memhtml.push("</table></div></div>");
                document.getElementById("divAllianceMemberList").innerHTML = memhtml.join("") + "<div style='clear:both'/><div id='divMemberInfo'></div>";
                if (pageNo == 1) {
                    ctrlPagination("memberInfo_pagination", rslt.noOfPages, "membersInfo", pageNo)
                }
            } else {
                document.getElementById("allianceContent").innerHTML = "<div class='noalliance_bodywrap'><div class='msg'>" + g_js_strings.membersInfo.youmustbelong + "</div></div>"
            }
        },
        onFailure: function () {}
    })
}
var tmpMemberOtherInfo;
var tmpActionsOnMember;

function showMemberInfo(memberId) {
    var memberProvinces = "";
    var provinceIds = memberInfo[memberId].provinceIds;
    if (provinceIds) {
        var arrProvinceIds = provinceIds.split(",");
        var memberProvinces = "";
        for (var i = 0; i < arrProvinceIds.length; i++) {
            if (arrProvinceIds[i]) {
                memberProvinces += provincenames["p" + arrProvinceIds[i]] + ","
            }
        }
        if (memberProvinces.charAt(memberProvinces.length - 1) == ",") {
            memberProvinces = memberProvinces.substring(0, memberProvinces.length - 1)
        }
    }
    var strHTML = "<div style='padding:35px 0 20px 120px;'><div'>";
    strHTML += "<table><tr><td rowspan='9' style='vertical-align:top'><img src='" + memberInfo[memberId].avatarurl + "'/></td><td>" + g_js_strings.commonstr.profile + ":</td><td>" + memberInfo[memberId].genderAndName + "</td></tr>";
    strHTML += "<tr><td>" + g_js_strings.showMemberInfo.fbname + ":</td><td><fb:name uid='" + memberInfo[memberId].fbuid + "' linked='false'></fb:name></td></tr>";
    strHTML += "<tr><td>" + g_js_strings.commonstr.might + ":</td><td>" + memberInfo[memberId].prestige + "</td></tr>";
    strHTML += "<tr><td>" + g_js_strings.commonstr.title + ":</td><td>" + titlenames[memberInfo[memberId].title] + "</td></tr>";
    strHTML += "<tr><td>" + g_js_strings.commonstr.alliance + ":</td><td>" + memberAllianceName + "</td></tr>";
    strHTML += "<tr><td>" + g_js_strings.commonstr.cities + ":</td><td>" + memberInfo[memberId].cities + "</td></tr>";
    strHTML += "<tr><td>" + g_js_strings.commonstr.province + ":</td><td>&nbsp;" + memberProvinces + "</td></tr>";
    strHTML += "<tr><td>" + g_js_strings.showMemberInfo.datejoinedalli + ":</td><td>&nbsp;" + memberInfo[memberId].dateJoined + "</td></tr>";
    strHTML += "<tr><td>" + g_js_strings.showMemberInfo.daysincurrpos + ":</td><td>&nbsp;" + memberInfo[memberId].daysInPosition + "</td></tr></table>";
    strHTML += "<div id='memberOtherInfo'></div>";
    strHTML += "<div id='actionsOnMember' style='display:block;padding-top:10px;' class='clearfix'>";
    switch (userOfficerType) {
    case "1":
    case "2":
        if (eval(userOfficerType) < eval(memberInfo[memberId].positionType)) {
            strHTML += "<input type='button' value='Promote' onclick=confirmActionOnMember(\"promote\"," + memberId + ") />";
            if (eval(memberInfo[memberId].positionType) != 4) {
                strHTML += "<input type='button' value='Demote' onclick='confirmActionOnMember(\"demote\"," + memberId + ")'/>"
            }
        }
    case "3":
        if (userOfficerType < memberInfo[memberId].positionType) {
            strHTML += "<input type='button' value='Remove' onclick='confirmActionOnMember(\"remove\"," + memberId + ")'/>"
        }
    case "4":
        strHTML += "<a  class='button20' onclick='getMessageWindow(" + memberId + ',"' + escape(memberInfo[memberId].genderAndName) + "\")'><span>" + g_js_strings.commonstr.message + "</span></a>"
    }
    strHTML += "</div><div id='divActionOnMember'></div></div></div>";
    Modal.showModal(740, 740, 10, 10, g_js_strings.modaltitles.memberdetails, "<div id='divShowMemberInfoDetails'>" + strHTML + "</div>");
    FB.XFBML.Host.parseDomTree(document.getElementById("divShowMemberInfoDetails"))
}
function confirmActionOnMember(actionType, memberId) {
    tmpMemberOtherInfo = document.getElementById("memberOtherInfo").innerHTML;
    tmpActionsOnMember = document.getElementById("actionsOnMember").innerHTML;
    var strHTML = "";
    var actionBar;
    var labelName = "";
    if (actionType == "promote") {
        labelName = g_js_strings.commonstr.promote;
        strHTML = g_js_strings.confirmActionOnMember.promoteatob.replace("%1$s", memberInfo[memberId].genderAndName).replace("%2$s", allianceOfficerTypeMapping[parseInt(memberInfo[memberId].positionType) - 1]);
        if (eval(memberInfo[memberId].positionType) == 2) {
            strHTML += "<br/>" + g_js_strings.confirmActionOnMember.demotetovicechancellor
        }
    } else {
        if (actionType == "demote") {
            labelName = g_js_strings.commonstr.demote;
            strHTML = g_js_strings.confirmActionOnMember.demoteatob.replace("%1$s", memberInfo[memberId].genderAndName).replace("%2$s", allianceOfficerTypeMapping[parseInt(memberInfo[memberId].positionType) + 1])
        } else {
            if (actionType == "remove") {
                labelName = g_js_strings.commonstr.remove;
                strHTML = g_js_strings.confirmActionOnMember.wanttoremovea.replace("%1$s", memberInfo[memberId].genderAndName)
            }
        }
    }
    actionBar = "<input type='button' value='" + labelName + "' onclick='doActionOnMember(\"" + actionType + '",' + memberId + ")' />";
    actionBar += "<input type='button' value='Cancel' onclick='restoreMemberInfo()' />";
    document.getElementById("memberOtherInfo").innerHTML = "<div>" + strHTML + "</div>";
    document.getElementById("actionsOnMember").innerHTML = actionBar
}
function doActionOnMember(actionType, memberId) {
    var params = Object.clone(g_ajaxparams);
    var fileName = "";
    if (actionType == "promote") {
        fileName = "alliancePromoteMember.php"
    } else {
        if (actionType == "demote") {
            fileName = "allianceDemoteMember.php"
        } else {
            if (actionType == "remove") {
                fileName = "allianceRemoveMember.php"
            }
        }
    }
    if (fileName != "") {
        params.memberOfficerType = memberInfo[memberId].positionType;
        params.memberId = memberId;
        new Ajax.Request(g_ajaxpath + "ajax/" + fileName + g_ajaxsuffix, {
            method: "post",
            parameters: params,
            onSuccess: function (message) {
                var rslt = eval("(" + message.responseText + ")");
                if (rslt.ok) {
                    Modal.hideModal();
                    membersInfo();
                    showStatusMessage(memberInfo[memberId].genderAndName + rslt.message)
                } else {
                    Modal.hideModal();
                    Modal.showAlert(printLocalError((rslt.error_code || null), (rslt.msg || null), (rslt.feedback || null)));
                    membersInfo()
                }
            },
            onFailure: function () {}
        })
    }
}
function restoreMemberInfo() {
    document.getElementById("memberOtherInfo").innerHTML = tmpMemberOtherInfo;
    document.getElementById("actionsOnMember").innerHTML = tmpActionsOnMember
}
function allianceList(pageNo) {
    if (pageNo == null) {
        pageNo = 1;
        document.getElementById("allianceContent").innerHTML = "<div id='divAllianceList' class='divalliancelist'></div><div id='alliance_list2' class='pagination'></div>"
    }
    var params = Object.clone(g_ajaxparams);
    params.pageNo = pageNo;
    params.cityId = currentcityid;
    new Ajax.Request(g_ajaxpath + "ajax/allianceGetOtherInfo.php" + g_ajaxsuffix, {
        method: "post",
        parameters: params,
        onSuccess: function (message) {
            var rslt = eval("(" + message.responseText + ")");
            if (rslt.ok) {
                otherAllianceInfo = rslt.otherAlliances;
                var strHTML = new Array();
                strHTML.push("<div id='alliance_list1'><table cellpadding='0' cellspacing='0' class='alliance_list_table'>");
                strHTML.push("<thead><tr><td class='rankcol'><div>" + g_js_strings.commonstr.rank + "</div></td><td><div>" + g_js_strings.getDiplomacy.alliname + "</div></td><td><div>" + g_js_strings.commonstr.chancellor + "</div></td><td><div>" + g_js_strings.commonstr.members + "</div></td><td><div>" + g_js_strings.commonstr.might + "</div></td><td class='viewcol'><div>" + g_js_strings.commonstr.view + "</div></td></tr></thead><tbody>");
                var stripe = 0;
                for (var i = 0; i < otherAllianceInfo.length; i++) {
                    var aId = otherAllianceInfo[i].allianceId;
                    strHTML.push("<tr id='otherAllianceId_" + aId + "'");
                    if (stripe % 2 == 0) {
                        strHTML.push(" class='stripe'")
                    }
                    strHTML.push("><td class='rankcol'><div>" + otherAllianceInfo[i].ranking + "</div></td>");
                    strHTML.push("<td><div><a href='#' onclick='showAllianceInfo(" + i + "," + pageNo + ");return false;'>" + otherAllianceInfo[i].name + "</a></div></td>");
                    strHTML.push("<td><div>" + otherAllianceInfo[i].hostGenderAndName + "</div></td><td><div>" + otherAllianceInfo[i].membersCount + "</div></td><td><div>" + otherAllianceInfo[i].might + "</div></td><td class='viewcol'><div class='clearfix'>");
                    if (rslt.eligibleToRequest) {
                        strHTML.push('<span id="divRequestToJoin_' + aId + "\" class='actionbtn'>");
                        if (otherAllianceInfo[i].membersCount < 100) {
                            strHTML.push("<a  class='button20'  onclick='confirmRequestToJoin(" + i + ");return false;' name='requestToJoin'><span>" + g_js_strings.allianceList.reqjoin + "</span></a></span>")
                        } else {
                            strHTML.push(g_js_strings.allianceList.allifull + "</span>")
                        }
                    } else {
                        strHTML.push("<span class='actionbtn'><a  class='button20' onclick='getMessageWindow(" + aId + ',"' + escape(otherAllianceInfo[i].name) + "\",\"alliance\");return false;'  name='messageAlliance'><span>" + g_js_strings.commonstr.message + "</span></a></span>")
                    }
                    stripe++
                }
                strHTML.push("</tbody></table></div>");
                document.getElementById("divAllianceList").innerHTML = strHTML.join("") + "<div style='clear:both'/><div id='divAllianceListActions'></div>";
                if (pageNo == 1) {
                    ctrlPagination("alliance_list2", rslt.noOfPages, "allianceList")
                }
            } else {
                Modal.showAlert(printLocalError((rslt.error_code || null), (rslt.msg || null), (rslt.feedback || null)))
            }
        },
        onFailure: function () {}
    })
}
function confirmRequestToJoin(a) {
    var d = otherAllianceInfo[a].allianceId;
    if (arrPendingRequest) {
        var b = [];
        var c = new Object();
        for (aId in arrPendingRequest) {
            c = arrPendingRequest[aId]
        }
        b.push("<div style='padding-top:25px;padding-bottom:40px;padding-left:20px'>");
        if (c.allianceId == d) {
            b.push(g_js_strings.confirmRequestToJoin.youhaverequestwitha.replace("%1$s", c.name) + "<div style='margin-top:10px'><a onclick='Modal.hideModal();' class='button20' ><span>" + g_js_strings.commonstr.close + "</span></a></div>")
        } else {
            b.push("<div>" + g_js_strings.confirmRequestToJoin.cancelwithaandreqb.replace("%1$s", c.name).replace("%2$s", otherAllianceInfo[a].name));
            b.push("</div><div style='margin-top: 20px'><a onclick='Modal.hideModal();htmlAllianceRequest(" + a + ");return false;' class='button20' ><span>" + g_js_strings.commonstr.yes + "</span></a> ");
            b.push("<a onclick='Modal.hideModal();' class='button20' ><span>" + g_js_strings.commonstr.no + "</span></a></div>")
        }
        b.push("</div>");
        Modal.showModal(740, 400, 10, 350, g_js_strings.modaltitles.alliancerequest, b.join(""))
    } else {
        htmlAllianceRequest(a)
    }
}
function htmlAllianceRequest(a) {
    var c = otherAllianceInfo[a].allianceId;
    var b = "<div class='alliance_requestjoin_message'><div class='sendhd'>" + g_js_strings.htmlAllianceRequest.sendrequest + ": <b>" + otherAllianceInfo[a].name + "</b><br/>(" + g_js_strings.htmlAllianceRequest.pendingdrop + ")</div>";
    var d = "" + g_js_strings.commonstr.might + ": " + userInfo.might + "\n" + g_js_strings.commonstr.cities + ": " + userInfo.noOfCities;
    b += "<table cellpadding='0' cellspacing='0'><tr><td><b>" + g_js_strings.commonstr.subject + "</b></td><td><input type='textbox' id='txtSubjectJoinRequest' value='" + g_js_strings.htmlAllianceRequest.reqtojoinallia.replace("%1$s", otherAllianceInfo[a].name) + "' size='50'/></td></tr>";
    b += "<tr><td><b>" + g_js_strings.commonstr.message + "</b></td><td><textarea id='txtMessageJoinRequest'>" + g_js_strings.htmlAllianceRequest.interestinjoining + "\n\n" + g_js_strings.htmlAllianceRequest.thanksforconsidering + "\n" + userInfo.displayName + " </textarea></td></tr>";
    b += "<tr><td><a  class='button20' onclick='joinAllianceRequest(" + a + ");return false;'><span>" + g_js_strings.commonstr.send + "</span></a></td>";
    b += "<td><a  class='buttonDown20' onclick='$(\"divAllianceListActions\").innerHTML=\"\";return false;'><span>" + g_js_strings.commonstr.cancel + "</span></a></td></tr></table></div>";
    document.getElementById("divAllianceListActions").innerHTML = b
}
function joinAllianceRequest(idx) {
    var allianceId = otherAllianceInfo[idx].allianceId;
    var params = Object.clone(g_ajaxparams);
    params.subject = document.getElementById("txtSubjectJoinRequest").value;
    params.message = document.getElementById("txtMessageJoinRequest").value;
    params.requestToAllianceId = allianceId;
    new Ajax.Request(g_ajaxpath + "ajax/allianceJoinRequest.php" + g_ajaxsuffix, {
        method: "post",
        parameters: params,
        onSuccess: function (message) {
            var rslt = eval("(" + message.responseText + ")");
            if (rslt.ok) {
                document.getElementById("divAllianceListActions").innerHTML = "Successfully requested";
                var oldRequest = 0;
                for (aId in arrPendingRequest) {
                    oldRequest = aId
                }
                arrPendingRequest[oldRequest] = new Object();
                arrPendingRequest[oldRequest]["allianceId"] = allianceId;
                arrPendingRequest[oldRequest]["name"] = otherAllianceInfo[idx].name
            } else {
                Modal.showAlert(printLocalError((rslt.error_code || null), (rslt.msg || null), (rslt.feedback || null)))
            }
        },
        onFailure: function () {}
    })
}
function showAllianceInfo(a, b) {
    var d = otherAllianceInfo[a].allianceId;
    var c = "<div class='clearfix allianceviewtablebtn'><a  class='button20' onclick='allianceList(" + b + ');$("alliance_list2").show();return false;\'><span>' + g_js_strings.showAllianceInfo.backtolist + "</span></a></div><table cellpadding='0' cellspacing='0' class='allianceviewtable'>";
    c += "<tr><td colspan='2' class='alliancenm'>" + otherAllianceInfo[a].name + "</td></tr>";
    c += "<tr><td class='hdcol'>" + g_js_strings.commonstr.description + ":</td><td>" + otherAllianceInfo[a].description + "</td></tr>";
    c += "<tr><td class='hdcol'>" + g_js_strings.commonstr.founder + ":</td><td>" + otherAllianceInfo[a].founderGenderAndName + "</td></tr>";
    c += "<tr><td class='hdcol'>" + g_js_strings.commonstr.members + ":</td><td>" + otherAllianceInfo[a].membersCount + "</td></tr>";
    c += "<tr><td class='hdcol'>" + g_js_strings.commonstr.ranking + ":</td><td>" + otherAllianceInfo[a].ranking + "</td></tr>";
    c += "<tr><td class='hdcol'>" + g_js_strings.commonstr.might + ":</td><td>" + otherAllianceInfo[a].might + "</td></tr></table>";
    document.getElementById("divAllianceListActions").innerHTML = c;
    if ($("alliance_list1")) {
        $("alliance_list1").hide()
    }
    if ($("alliance_list2")) {
        $("alliance_list2").hide()
    }
}
function optionsInAlliance() {
    var a = "";
    if (arrAllianceInfo == null) {
        a = g_js_strings.optionsInAlliance.optionsapply
    } else {
        if (userOfficerType > 1) {
            a = leaveAllianceConfirmationContent()
        } else {
            if (userOfficerType == 1) {
                a += leaveAllianceConfirmationContent()
            }
        }
    }
    document.getElementById("divAllianceLeaveActions").innerHTML = a
}
function getInfoForAnUser(uid, callBackFn) {
    if (!uid) {
        Modal.showAlert(g_js_strings.getInfoForAnUser.sorryprobs)
    }
    var strHTML = "";
    var params = Object.clone(g_ajaxparams);
    params.uid = uid;
    new Ajax.Request(g_ajaxpath + "ajax/getUserGeneralInfo.php" + g_ajaxsuffix, {
        method: "post",
        parameters: params,
        onSuccess: function (message) {
            var rslt = eval("(" + message.responseText + ")");
            if (rslt.ok) {
                var userInfo = rslt.userInfo;
                var strHTML = new Array();
                strHTML.push("<div id='memberinfo_userprofile'>");
                strHTML.push("<div class='infoblock clearfix'>");
                strHTML.push("<img src='" + userInfo[0].avatarurl + "'/>");
                strHTML.push("<div class='info'>");
                strHTML.push("<div><b>" + g_js_strings.commonstr.nametx + ":</b> " + userInfo[0].genderAndName + "</div>");
                strHTML.push("<div><b>" + g_js_strings.commonstr.might + ":</b> " + userInfo[0].might + "</div>");
                strHTML.push("<div><b>" + g_js_strings.commonstr.title + ":</b> " + titlenames[parseInt(userInfo[0].title)] + "</div>");
                strHTML.push("<div id='memberOtherInfo'>");
                strHTML.push("<div><b>" + g_js_strings.commonstr.alliance + ":</b> " + (userInfo[0].allianceName || "") + "</div>");
                strHTML.push("<div><b>" + g_js_strings.commonstr.cities + ":</b> " + userInfo[0].cities + "</div>");
                var userProvinces = "";
                var provinceIds = userInfo[0].provinceIds;
                if (provinceIds) {
                    var arrProvinceIds = provinceIds.split(",");
                    var userProvinces = "";
                    for (var i = 0; i < arrProvinceIds.length; i++) {
                        if (arrProvinceIds[i]) {
                            userProvinces += provincenames["p" + arrProvinceIds[i]] + ","
                        }
                    }
                    if (userProvinces.charAt(userProvinces.length - 1) == ",") {
                        userProvinces = userProvinces.substring(0, userProvinces.length - 1)
                    }
                }
                strHTML.push("<div><b>" + g_js_strings.commonstr.province + ":</b> " + userProvinces + "</div>");
                strHTML.push("</div></div>");
                strHTML.push("</div>");
                strHTML.push("<div id='actionsOnMember' class='clearfix'>");
                strHTML.push("<a class='button20' onclick='getMessageWindow(" + userInfo[0].userId + ',"' + escape(userInfo[0].genderAndName) + "\");return false;'><span>" + g_js_strings.commonstr.message + "</span></a>");
                strHTML.push("<a class='button20' onclick='Modal.hideModal();changeview_court(" + userInfo[0].userId + ");return false;'><span>" + g_js_strings.getInfoForAnUser.visitcourt + "</span></a>");
                strHTML.push("</div>");
                strHTML.push("</div>");
                if (callBackFn) {
                    var fnName = callBackFn + "(" + userInfo[0].userId + ',"' + strHTML.join("") + '")';
                    eval(fnName)
                } else {
                    Modal.showModal(500, 400, 125, 350, g_js_strings.modaltitles.userprofile, strHTML.join(""))
                }
            } else {
                Modal.hideModal();
                Modal.showAlert(printLocalError((rslt.error_code || null), (rslt.msg || null), (rslt.feedback || null)))
            }
        },
        onFailure: function () {}
    })
}
function showUserInfo_DirectoryTab(a, c) {
    var b = [];
    b.push(c);
    Modal.showModal(740, 400, 10, 10, "View", b)
}
var searchAllianceNames_sd_count = 0;

function setDiplomacyWindow() {
    var a = [];
    a.push("<div class='diplomacywindow'>");
    a.push("<div class='alinfohd'><span>" + g_js_strings.setDiplomacyWindow.setdiplo + "</span><a  onclick='allianceInfo();return false;' class='button20'><span>" + g_js_strings.setDiplomacyWindow.backalli + "</span></a></div>");
    a.push("<div class='diplomacybody'>");
    a.push("<div class='subtitle'>" + g_js_strings.setDiplomacyWindow.srchalli + "</div>");
    a.push("<div class='clearfix'><input type='text' name='txtAllianceName_sd' id='txtAllianceName_sd' /><a  onclick='getAllianceSearchResults();return false;' class='button20'><span>" + g_js_strings.commonstr.search + "</span></a></div>");
    a.push("<div id='allianceSearchResults_sd'></div>");
    a.push("<div class='subtitle'>" + g_js_strings.setDiplomacyWindow.setalli + ":</div><div class='options'><input type='radio' name='diplomacyStatus_sd'  value='1'/>Friendly<input type='radio' name='diplomacyStatus_sd'  value='0' />" + g_js_strings.commonstr.neutral + "<input type='radio' name='diplomacyStatus_sd' value='2' />" + g_js_strings.commonstr.hostile + "</div>");
    a.push("<div class='setbutton clearfix'><a onclick='setAllianceDiplomacies();return false;' class='button20'><span>" + g_js_strings.setDiplomacyWindow.setdiplo + "</span></a></div>");
    a.push("</div>");
    a.push("</div>");
    $("allianceContent").innerHTML = a.join("")
}
function getAllianceSearchResults() {
    var searchString = $("txtAllianceName_sd").value;
    if (searchString.blank() || searchString.length < 3) {
        var alhtml = [];
        alhtml.push("<div class='searchresultempty'>" + g_js_strings.getAllianceSearchResults.entryatleast3 + "</div>");
        $("allianceSearchResults_sd").innerHTML = alhtml.join("");
        return false
    }
    var params = Object.clone(g_ajaxparams);
    params.allianceName = document.getElementById("txtAllianceName_sd").value;
    new Ajax.Request(g_ajaxpath + "ajax/allianceGetSearchResults.php" + g_ajaxsuffix, {
        method: "post",
        parameters: params,
        onSuccess: function (message) {
            var rslt = eval("(" + message.responseText + ")");
            if (rslt.ok) {
                var alhtml = [];
                if (rslt.alliancesMatched) {
                    var alliancesMatched = rslt.alliancesMatched;
                    searchAllianceNames_sd_count = rslt.count;
                    var arrRelation = new Array("", g_js_strings.commonstr.friendly, g_js_strings.commonstr.hostile);
                    alhtml.push("<div class='searchresult header clearfix'><div class='sel'>" + g_js_strings.commonstr.select + "</div><div class='name'>" + g_js_strings.commonstr.nametx + "</div><div class='curr'>" + g_js_strings.getAllianceSearchResults.currdiplo + "</div><div class='might'>" + g_js_strings.commonstr.might + "</div><div class='rank'>" + g_js_strings.commonstr.rank + "</div></div>");
                    for (aId in alliancesMatched) {
                        alhtml.push("<div class='searchresult row clearfix'>");
                        alhtml.push("<div class='sel'><input type='checkbox'  name='chkAllianceIdSD_" + alliancesMatched[aId].allianceId + "' id='chkAllianceIdSD_" + alliancesMatched[aId].allianceId + "'/></div>");
                        alhtml.push("<div class='name'>");
                        alhtml.push(alliancesMatched[aId].allianceName);
                        alhtml.push("</div>");
                        alhtml.push("<div class='curr'>");
                        var relation = "&nbsp;";
                        if (alliancesMatched[aId].relation) {
                            relation = arrRelation[alliancesMatched[aId].relation]
                        }
                        alhtml.push(relation);
                        alhtml.push("</div>");
                        alhtml.push("<div class='might'>");
                        alhtml.push(alliancesMatched[aId].might);
                        alhtml.push("</div>");
                        alhtml.push("<div class='rank'>");
                        alhtml.push(alliancesMatched[aId].ranking);
                        alhtml.push("</div>");
                        alhtml.push("</div>")
                    }
                }
                $("allianceSearchResults_sd").innerHTML = alhtml.join("")
            } else {
                var alhtml = [];
                alhtml.push("<div class='searchresultempty'>" + g_js_strings.getAllianceSearchResults.noresults + "</div>");
                $("allianceSearchResults_sd").innerHTML = alhtml.join("")
            }
        },
        onFailure: function () {}
    })
}
var collection;

function setAllianceDiplomacies() {
    var diplomacyStatus = null;
    var allianceSelected = "";
    if (document.getElementsByName("diplomacyStatus_sd")[0].checked) {
        diplomacyStatus = document.getElementsByName("diplomacyStatus_sd")[0].value
    } else {
        if (document.getElementsByName("diplomacyStatus_sd")[1].checked) {
            diplomacyStatus = document.getElementsByName("diplomacyStatus_sd")[1].value
        } else {
            if (document.getElementsByName("diplomacyStatus_sd")[2].checked) {
                diplomacyStatus = document.getElementsByName("diplomacyStatus_sd")[2].value
            }
        }
    }
    if (diplomacyStatus == null) {
        Modal.showModal(400, 240, 10, 10, g_js_strings.modaltitles.alliance, "<div  class='alerrormessage'>" + g_js_strings.setAllianceDiplomacies.choosediplo + "</div>");
        return false
    }
    collection = document.getElementById("allianceSearchResults_sd").getElementsByTagName("INPUT");
    for (i = 0; i < collection.length; i++) {
        if (collection[i].type.toUpperCase() == "CHECKBOX") {
            if (collection[i].checked) {
                var aid = (collection[i].id).split("_")[1];
                allianceSelected += aid + ","
            }
        }
    }
    if (allianceSelected.length == 0) {
        Modal.showModal(400, 240, 10, 10, g_js_strings.modaltitles.alliance, "<div class='alerrormessage'>" + g_js_strings.setAllianceDiplomacies.selectatleastone + "</div>");
        return false
    } else {
        allianceSelected = allianceSelected.substring(0, allianceSelected.length - 1);
        var params = Object.clone(g_ajaxparams);
        params.allianceSelected = allianceSelected;
        params.diplomacyStatus = diplomacyStatus;
        new Ajax.Request(g_ajaxpath + "ajax/allianceSetDiplomacies.php" + g_ajaxsuffix, {
            method: "post",
            parameters: params,
            onSuccess: function (message) {
                var rslt = eval("(" + message.responseText + ")");
                if (rslt.ok) {
                    document.getElementById("allianceSearchResults_sd").innerHTML = g_js_strings.setAllianceDiplomacies.diplosuccess
                } else {
                    Modal.showAlert(printLocalError((rslt.error_code || null), (rslt.msg || null), (rslt.feedback || null)))
                }
            },
            onFailure: function () {}
        })
    }
}
function modal_alliance(a) {
    var b = new Array();
    b.push("<div id='modal_alliance'><div id='modal_alliance_top' class='modal_alliance_top1'><div class='modal_alliance_btm'>");
    b.push('<input type="hidden" id="hdnPageNo" value="1"/>');
    b.push('<input type="hidden" id="hdnBoxType" />');
    b.push('<input type="hidden" id="hdnMostRecentMessageId"/>');
    b.push('<div class="modal_alliance_content">');
    b.push('<div id="allianceTabs" class="tabsbar clearfix">');
    b.push('<div id="allianceTab1" class="tab selected" onclick="allianceInfo();modal_alliance_changetab(1);"><span>' + g_js_strings.modal_alliance.alliinfo + "</span></div>");
    b.push('<div id="allianceTab2" class="tab" onclick="membersInfo();modal_alliance_changetab(2);"><span>' + g_js_strings.commonstr.members + "</span></div>");
    b.push('<div id="allianceTab3" class="tab" onclick="allianceList();modal_alliance_changetab(3);" ><span>' + g_js_strings.modal_alliance.allilist + "</span></div>");
    b.push('<div id="allianceTab4" class="tab" onclick="allianceReports();modal_alliance_changetab(4);" ><span>' + g_js_strings.commonstr.reports + "</span></div>");
    b.push("</div>");
    b.push('<div id="allianceStatus"></div>');
    b.push('<div class="modalalliancewrap"/>');
    b.push('<div id="allianceContent" class="allianceboxwrap">');
    b.push("</div>");
    b.push('<div class="allianceboxwrapcap"></div>');
    b.push("</div>");
    b.push("</div></div></div>");
    if (g_env == "prod") {
        b.push('<div style="display:inline;"><img height="1" width="1" style="border-style:none;" alt="" src="http://www.googleadservices.com/pagead/conversion/1059019849/?label=_AXNCJvx5gEQybj9-AM&amp;guid=ON&amp;script=0"/></div>')
    }
    if (a == "leave") {
        Modal.showModal(740, 400, 10, 10, g_js_strings.modaltitles.alliance, b.join(""), modal_alliance_Leave)
    } else {
        if (a == "members") {
            Modal.showModal(740, 400, 10, 10, g_js_strings.modaltitles.alliance, b.join(""), modal_alliance_members)
        } else {
            Modal.showModal(740, 400, 10, 10, g_js_strings.modaltitles.alliance, b.join(""), modal_alliance_init)
        }
    }
}
function modal_alliance_changetab(a) {
    var b = $("allianceTabs").select(".selected")[0];
    if (b) {
        b.removeClassName("selected")
    }
    b = $("allianceTabs").select(".tab")[a - 1];
    if (b) {
        b.addClassName("selected")
    }
}
function modal_alliance_init() {
    allianceInfo()
}
function modal_alliance_Leave() {
    allianceInfo("leave")
}
function modal_alliance_members() {
    allianceInfo("members");
    modal_alliance_changetab(2)
}
function allianceReports(pageNo) {
    var params = Object.clone(g_ajaxparams);
    if (pageNo) {
        params.pageNo = pageNo
    }
    params.group = "a";
    new Ajax.Request(g_ajaxpath + "ajax/listReports.php" + g_ajaxsuffix, {
        method: "post",
        parameters: params,
        onSuccess: function (message) {
            var rslt = eval("(" + message.responseText + ")");
            if (rslt.ok) {
                var msghtml = new Array();
                msghtml.push("<div class='modal_msg_reports'>");
                var rptkeys = Object.keys(rslt.arReports);
                if (!Object.isArray(rslt.arReports)) {
                    msghtml.push("<div id='modal_alliance_reports_tablediv' class='modal_msg_list'><table cellpadding='0' cellspacing='0' class='msgviewtable reportviewtable alliancetable'>");
                    msghtml.push("<thead><tr><td class='dtcol'>" + g_js_strings.commonstr.date + "</td><td class='nmcol'>" + g_js_strings.commonstr.type + "</td><td class='subjcol'>" + g_js_strings.commonstr.view + "</td></tr></thead><tbody>");
                    for (var i = 0; i < rptkeys.length; i++) {
                        var idvrpt = rslt.arReports[rptkeys[i]];
                        msghtml.push("<tr class='");
                        if (i % 2 == 0) {
                            msghtml.push("stripe")
                        }
                        msghtml.push("' id='viewreports_marchreport_");
                        msghtml.push(idvrpt.reportId);
                        msghtml.push("'><td class='dtcol'><div>");
                        msghtml.push(formatDateByUnixTime(idvrpt.reportUnixTime));
                        msghtml.push("</div></td>");
                        msghtml.push("<td class='nmcol'><div>");
                        switch (parseInt(idvrpt.marchType)) {
                        case 1:
                            msghtml.push(g_js_strings.commonstr.transport);
                            break;
                        case 3:
                            msghtml.push(g_js_strings.commonstr.scout);
                            break;
                        default:
                            msghtml.push(g_js_strings.commonstr.attack);
                            break
                        }
                        msghtml.push(" ");
                        if (parseInt(idvrpt.side0PlayerId) == parseInt(tvuid)) {
                            msghtml.push("(" + rslt.arCityNames["c" + idvrpt.side0CityId] + ")")
                        } else {
                            var coordinateLink = new cm.utils.CoordinateLink(idvrpt.side0XCoord, idvrpt.side0YCoord);
                            coordinateLink.setClassName("coordinateLink");
                            msghtml.push(coordinateLink.getHTML())
                        }
                        msghtml.push(" ");
                        if (parseInt(idvrpt.side0TileType) != 51) {
                            msghtml.push(" - ");
                            msghtml.push(g_mapObject.types[parseInt(idvrpt.side0TileType)].capitalize());
                            msghtml.push(" Lv." + idvrpt.side0TileLevel)
                        } else {
                            if (parseInt(idvrpt.side0PlayerId) == 0) {
                                msghtml.push(" - ");
                                msghtml.push(g_js_strings.commonstr.barbariancamp);
                                msghtml.push(" " + g_js_strings.commonstr.lv + " " + idvrpt.side0TileLevel)
                            } else {
                                if (parseInt(idvrpt.marchType) == 1) {
                                    msghtml.push(" - <span>" + g_js_strings.commonstr.from + ": ");
                                    msghtml.push(escape(rslt.arPlayerNames["p" + idvrpt.side1PlayerId]));
                                    msghtml.push("</span>")
                                } else {
                                    if (parseInt(idvrpt.side0PlayerId) == parseInt(tvuid)) {
                                        msghtml.push(" - <span style='color:#A02932;'>" + g_js_strings.modal_messages_viewreports.attackedby + " ");
                                        msghtml.push(escape(rslt.arPlayerNames["p" + idvrpt.side1PlayerId]));
                                        msghtml.push("</span>")
                                    }
                                }
                            }
                        }
                        if (parseInt(idvrpt.marchType) == 1) {
                            msghtml.push("<span>");
                            msghtml.push(" (" + rslt.arCityNames["c" + idvrpt.side1CityId] + ")");
                            msghtml.push("</span>")
                        } else {
                            if (parseInt(idvrpt.side0PlayerId) == parseInt(tvuid)) {
                                msghtml.push("<span style='color:#A02932;'>");
                                msghtml.push(" (" + rslt.arCityNames["c" + idvrpt.side1CityId] + ")");
                                msghtml.push("</span>")
                            } else {
                                msghtml.push(" (" + rslt.arCityNames["c" + idvrpt.side1CityId] + ")")
                            }
                        }
                        msghtml.push("</div></td>");
                        msghtml.push("<td class='subjcol'><div><a onclick='modal_alliance_report_view(\"");
                        msghtml.push(idvrpt.reportId);
                        msghtml.push('",');
                        if (parseInt(idvrpt.side1AllianceId) == parseInt(seed.allianceDiplomacies.allianceId)) {
                            msghtml.push(1)
                        } else {
                            msghtml.push(0)
                        }
                        msghtml.push(",");
                        msghtml.push(idvrpt.side0TileType);
                        msghtml.push(",");
                        msghtml.push(idvrpt.side0TileLevel);
                        msghtml.push(",");
                        msghtml.push(idvrpt.side0PlayerId);
                        msghtml.push(',"');
                        if (parseInt(idvrpt.side0PlayerId) != 0) {
                            msghtml.push(escape(rslt.arPlayerNames["p" + idvrpt.side0PlayerId]))
                        } else {
                            msghtml.push(g_js_strings.commonstr.enemy)
                        }
                        msghtml.push('","');
                        if (parseInt(idvrpt.side0PlayerId) != 0) {
                            msghtml.push(escape(rslt.arPlayerNames["g" + idvrpt.side0PlayerId]))
                        } else {
                            msghtml.push(0)
                        }
                        msghtml.push('","');
                        if (parseInt(idvrpt.side1PlayerId) > 0) {
                            msghtml.push(escape(rslt.arPlayerNames["p" + idvrpt.side1PlayerId]))
                        }
                        msghtml.push('","');
                        if (parseInt(idvrpt.side1PlayerId) != 0) {
                            msghtml.push(escape(rslt.arPlayerNames["g" + idvrpt.side1PlayerId]))
                        }
                        msghtml.push('",');
                        msghtml.push(idvrpt.marchType);
                        msghtml.push(",");
                        msghtml.push(idvrpt.side0XCoord);
                        msghtml.push(",");
                        msghtml.push(idvrpt.side0YCoord);
                        msghtml.push(",");
                        msghtml.push(idvrpt.reportUnixTime);
                        msghtml.push(",");
                        if (parseInt(idvrpt.reportStatus) == 2) {
                            msghtml.push(1)
                        } else {
                            msghtml.push(0)
                        }
                        if (idvrpt.side1XCoord) {
                            msghtml.push(",");
                            msghtml.push(idvrpt.side1XCoord);
                            msghtml.push(",");
                            msghtml.push(idvrpt.side1YCoord)
                        } else {
                            msghtml.push(",");
                            msghtml.push(",")
                        }
                        msghtml.push(");return false;'>" + g_js_strings.modal_messages_viewtrades.viewrpt + "</a></div></td></tr>")
                    }
                    msghtml.push("</tbody></table></div>")
                }
                msghtml.push("</div>");
                msghtml.push("<div id='modal_report_list_pagination'></div>");
                $("allianceContent").innerHTML = msghtml.join("");
                if (pageNo) {
                    ctrlPagination("modal_report_list_pagination", rslt.totalPages, "allianceReports", pageNo)
                } else {
                    ctrlPagination("modal_report_list_pagination", rslt.totalPages, "allianceReports")
                }
            } else {
                var msghtml = new Array();
                msghtml.push("<div class='modal_msg_reports'>");
                msghtml.push("<div id='modal_alliance_reports_tablediv' class='modal_msg_list'></div>");
                msghtml.push("<div style='font-size:17px;margin-left:30px;margin-top:20px'>" + g_js_strings.modal_messages_viewreports.nomarchrpts + "</div>");
                msghtml.push("</div>");
                $("allianceContent").innerHTML = msghtml.join("");
                $("modal_msg_list_actions").hide();
                if ($("pagination_indexOnly")) {
                    ($("pagination_indexOnly")).remove()
                }
            }
        },
        onFailure: function () {}
    })
}
function modal_alliance_report_view(rptid, side, tiletype, tilelv, defid, defnm, defgen, atknm, atkgen, marchtype, xcoord, ycoord, timestamp, unread, atkxcoord, atkycoord) {
    var args = arguments;
    var arrtpgs = $("modal_report_list_pagination").getElementsByTagName("a");
    var tpgs = 0;
    var currpg = 0;
    for (var i = 0; i < arrtpgs.length; i++) {
        Element.extend(arrtpgs[i]);
        if (arrtpgs[i].className == "paginationHighlightedPage") {
            currpg = i
        }
    }
    currpg = currpg + 1;
    if (arrtpgs.length == 0) {
        tpgs = 1
    } else {
        tpgs = arrtpgs.length
    }
    $("modal_report_list_pagination").hide();
    var params = Object.clone(g_ajaxparams);
    params.rid = rptid;
    params.side = side;
    new Ajax.Request(g_ajaxpath + "ajax/fetchReport.php" + g_ajaxsuffix, {
        method: "post",
        parameters: params,
        onSuccess: function (message) {
            var rslt = eval("(" + message.responseText + ")");
            if (rslt.ok == false) {
                Modal.showAlert(printLocalError((rslt.error_code || null), (rslt.msg || null), (rslt.feedback || null)))
            } else {
                var msghtml = new Array();
                msghtml.push("<div class='reportdetail clearfix'><a  class='button20' onclick='loadPage_pagination(\"modal_report_list_pagination\",\"" + currpg + '","allianceReports",' + tpgs + ");return false;'><span>" + g_js_strings.commonstr.back + "</span></a></div>");
                $("modal_alliance_reports_tablediv").innerHTML = getReportDisplay(args, rslt) + msghtml.join("")
            }
        },
        onFailure: function () {}
    })
};

function modal_attack(k, e, m, a) {
    var n = k;
    a = a || {};
    if (k == cm.MARCH_TYPES.MARCH_TYPE_BARBARIAN) {
        k = cm.MARCH_TYPES.MARCH_TYPE_ATTACK
    }
    var d = [];
    var j = 100;
    d.push("<div id='modal_attack'>");
    d.push('<ul class="marchTypeTabs">');
    d.push('<li id="modal_attack_tab_' + cm.MARCH_TYPES.MARCH_TYPE_ATTACK + '">' + g_js_strings.commonstr.attack + "</li>");
    d.push('<li id="modal_attack_tab_' + cm.MARCH_TYPES.MARCH_TYPE_SCOUT + '">' + g_js_strings.commonstr.scout + "</li>");
    d.push('<li id="modal_attack_tab_' + cm.MARCH_TYPES.MARCH_TYPE_REINFORCE + '">' + g_js_strings.commonstr.reinforce + "</li>");
    d.push('<li id="modal_attack_tab_' + cm.MARCH_TYPES.MARCH_TYPE_REASSIGN + '">' + g_js_strings.commonstr.reassign + "</li>");
    d.push('<li id="modal_attack_tab_' + cm.MARCH_TYPES.MARCH_TYPE_TRANSPORT + '">' + g_js_strings.commonstr.transport + "</li>");
    d.push("</ul>");
    d.push("<div class='marchtype' style='display:none;'>");
    d.push(g_js_strings.modal_attack.marchtype);
    d.push("<select id='modal_attack_atktype'>");
    for (var g in cm.MARCH_TYPES) {
        if (cm.MARCH_TYPES[g] < cm.MARCH_TYPES.MARCH_TYPE_TRANSPORT || cm.MARCH_TYPES[g] > cm.MARCH_TYPES.MARCH_TYPE_REASSIGN) {
            continue
        }
        d.push("<option value='" + cm.MARCH_TYPES[g] + "'");
        if (k == cm.MARCH_TYPES[g]) {
            d.push(" selected")
        }
        d.push(">" + cm.MARCH_TYPES[g] + "</option>")
    }
    d.push("</select>");
    d.push("</div>");
    d.push("<div class='units'>");
    d.push("<div class='unitshd'>");
    d.push("<div class='available_troops'>" + g_js_strings.modal_attack.availabletroops + "</div>");
    if ("on" == cm.features.AUTO_ATTACK) {
        d.push("<div class='raidfilter' id='modal_attack_raidfilter'><input type='checkbox' id='modal_attack_raidfilter_checkbox' tabindex='");
        d.push(j++);
        d.push("' " + ((n == cm.MARCH_TYPES.MARCH_TYPE_BARBARIAN) ? "checked " : " "));
        d.push((seed.player.title >= cm.AutoAttackLevelLock) ? " " : "disabled ");
        d.push('/><a onclick="cm.MarchModal.onAutoAttackHelpClick();return false;">');
        d.push(g_js_strings.modal_attack.thisisabarbarianraid);
        d.push("</a></div>")
    }
    d.push("<div class='unitfilter' id='modal_attack_supplyfilter'><input type='checkbox' id='modal_attack_supplyfilter_checkbox' tabindex='");
    d.push(j++);
    d.push("' />");
    d.push(g_js_strings.modal_attack.displaysupplyonly);
    d.push("</div>");
    d.push("</div>");
    d.push("<div class='' id='modal_attack_unitlist'>");
    var b = seed.units["city" + currentcityid];
    var l = Object.keys(b);
    for (var g = 0; g < l.length; g++) {
        var h = l[g].split("unt")[1];
        d.push("<div class='unit' name='");
        d.push(h);
        d.push("'><img src='");
        d.push(stimgUrl);
        d.push("img/units/unit_");
        d.push(h);
        d.push("_50.jpg'/><div class='unitinfo'><div class='unitname'>");
        d.push(unitcost[l[g]][0]);
        d.push("</div><div><span class='unitnum'>");
        d.push(b[l[g]]);
        d.push("</span></div><div class='numbox'><input type='text' id='modal_attack_unit_ipt");
        d.push(h);
        d.push("' value='0' onfocus='this.select();' onkeyup='modal_attack_update_num(this);' onkeyDown='cm.KeyFilter.allowOnlyNumbers(event)' onblur='modal_attack_normalize_number(this)' name='");
        d.push(l[g].split("unt")[1]);
        d.push("' tabindex='");
        d.push(j++);
        d.push("' /><a  class='button14' onclick='modal_attack_update_num_max(");
        d.push(h);
        d.push(");return false;'><span>" + g_js_strings.commonstr.max + "</span></a></div></div></div>")
    }
    d.push("</div>");
    d.push("<div class='unitarmy'>");
    d.push(g_js_strings.modal_attack.selectedtroops + ":");
    d.push(" <span id='modal_attack_selnum'>0</span> / <span id='modal_attack_maxunt'>");
    var o = getBuildingLevel(12);
    if (o === 11) {
        d.push(150000)
    } else {
        d.push(o * 10000)
    }
    d.push("</span><span id='modal_attack_resource_summary'> &nbsp; ");
    d.push(g_js_strings.modal_attack.resouresselected + ":");
    d.push(" <span id='modal_attack_selres'>0</span> / <span id='modal_attack_maxres'>0</span></span></div>");
    d.push("<div id='modal_attack_vacancy' name='0' style='display:none'>0</div>");
    d.push("</div>");
    d.push("<div class='targetitems clearfix'>");
    d.push("<div class='left_column'>");
    d.push("<div class='section'>");
    d.push("<div class='section_title'>" + g_js_strings.modal_attack.availableknights + "</div>");
    d.push("<div class='section_content'>");
    d.push("<select id='modal_attack_knight' tabindex='150'><option value='0'>");
    var p = seed.knights["city" + currentcityid];
    if (p) {
        d.push(g_js_strings.modal_attack.dchooseknightd)
    } else {
        d.push(g_js_strings.modal_attack.noknightavailable)
    }
    d.push("</option>");
    if (p) {
        var f = Object.keys(p);
        f.sort(cm.MarchModal.sortKnights);
        for (var g = 0; g < f.length; g++) {
            var c = parseInt(f[g].split("knt")[1]);
            if (parseInt(p["knt" + c].knightStatus) == 1 && c != parseInt(seed.leaders["city" + currentcityid].resourcefulnessKnightId) && c != parseInt(seed.leaders["city" + currentcityid].intelligenceKnightId) && c != parseInt(seed.leaders["city" + currentcityid].combatKnightId) && c != parseInt(seed.leaders["city" + currentcityid].politicsKnightId)) {
                d.push("<option value='");
                d.push(p[f[g]].knightId);
                d.push("'>");
                d.push(p[f[g]].knightName);
                d.push(" (" + g_js_strings.commonstr.atk + ":");
                d.push(p[f[g]].combat);
                d.push(")</option>")
            }
        }
    }
    d.push("</select>");
    d.push("<div>" + g_js_strings.modal_attack.chooseknight + "</div>");
    d.push("</div></div>");
    d.push("<div class='section'>");
    d.push("<div class='section_title'>" + g_js_strings.modal_attack.marchto + "</div>");
    d.push("<div class='section_content'>");
    d.push("<span id='modal_attack_target_dropdown'");
    if (e > -1 && m > -1) {
        d.push(" style='display:none;'")
    }
    d.push("><span id='savedCoordinatesDropdown'></span> ");
    d.push(" <a  onclick='modal_attack_target_coords();return false;'>");
    d.push(g_js_strings.modal_attack.dord);
    d.push(g_js_strings.modal_attack.inpcoor);
    d.push("</a></span>");
    d.push("<span id='modal_attack_target_coords'");
    if (!(e > -1) || !(m > -1)) {
        d.push(" style='display:none;'")
    }
    d.push(">X=<input type='text' class='coordipt' id='modal_attack_target_coords_x' onkeyup='modal_attack_update_time();' maxlength='3'");
    if (e > -1 && m > -1) {
        d.push(" value='" + e + "'")
    } else {
        d.push(" value='0'")
    }
    d.push(" tabindex='151' /> Y=<input type='text' class='coordipt' id='modal_attack_target_coords_y' onkeyup='modal_attack_update_time();' maxlength='3'");
    if (e > -1 && m > -1) {
        d.push(" value='" + m + "'")
    } else {
        d.push(" value='0'")
    }
    d.push(" tabindex='152' />");
    d.push("<a  onclick='modal_attack_target_dropdown();return false;' class='seltoggle'>");
    d.push(g_js_strings.modal_attack.dord);
    d.push(g_js_strings.modal_attack.selbookmark);
    d.push("</a>");
    d.push("</span>");
    d.push("</div></div>");
    cm.MarchModal.rendererBoostSection(d, "modal_attack_march_boost", g_js_strings.modal_attack.marchboosts, [931, 932]);
    cm.MarchModal.rendererBoostSection(d, "modal_attack_speed_boost", g_js_strings.modal_attack.speedboosts, [55, 57], cm.MarchModal.rendererEstimateTime);
    d.push("</div><!-- end .left_column -->");
    d.push("<div class='right_column'>");
    cm.MarchModal.rendererResourceSection(d);
    cm.MarchModal.rendererBoostSection(d, "modal_attack_attack_boost", g_js_strings.modal_attack.attackboosts, [221, 261, 262, 280], null, {
        i280: true
    });
    cm.MarchModal.rendererBoostSection(d, "modal_attack_defense_boost", g_js_strings.modal_attack.defenseboosts, [271, 272, 281], null, {
        i281: true
    });
    d.push("</div><!-- end .right_column -->");
    d.push("</div>");
    d.push("<div id='error_overmarch'></div>");
    d.push("<div class='footerbtns clearfix'><a id='btnMarch' onclick='modal_attack_check();return false;' class='inlineButton blue36'><span>" + g_js_strings.commonstr.march + "</span></a></div>");
    d.push("</div>");
    Modal.showModal(740, 400, 10, 10, g_js_strings.modaltitles.marchtroops, d.join(""), undefined, undefined, undefined, {
        additionalClass: "nodecoration"
    });
    attack_checkOverMarch();
    cm.MarchModal.bind(a);
    cm.MarchModal.changeMarchType(k, n)
}
function modal_attack_rec_vacancy(h) {
    var f = "gold";
    if (parseInt(h) > 0) {
        f = "rec" + h
    }
    var e = $("modal_attack_vacancy").getAttribute("name");
    var g = $("modal_attack_transport").getElementsByTagName("input");
    var c = $("modal_attack_" + f).value;
    var b = c.match(/[0-9]+/g);
    b = b ? b.join("") : "";
    while (b.substr(0, 1) == "0" && b.length > 1) {
        b = b.substr(1)
    }
    $("modal_attack_" + f).value = b;
    var d = parseInt($("modal_attack_rec_max_" + f).innerHTML);
    var a = parseInt($("modal_attack_" + f).value);
    if (a > d) {
        $("modal_attack_" + f).value = d
    }
    cm.MarchModal.updateTroopResource()
}
function modal_attack_update_rec_max(c) {
    var b = "gold";
    if (parseInt(c) > 0) {
        b = "rec" + c
    }
    var a = parseInt($("modal_attack_vacancy").innerHTML) + (parseInt($("modal_attack_" + b).value) || 0);
    if (parseInt($("modal_attack_vacancy").innerHTML) <= 0) {
        return
    }
    if (a < parseInt($("modal_attack_rec_max_" + b).innerHTML)) {
        $("modal_attack_" + b).value = a
    } else {
        if (a > 0) {
            $("modal_attack_" + b).value = $("modal_attack_rec_max_" + b).innerHTML
        }
    }
    cm.MarchModal.updateTroopResource()
}
function modal_attack_update_unt_max(d) {
    var c = 0,
        b = getBuildingLevel(12),
        a = $("modal_attack_item931"),
        e = $("modal_attack_item932");
    if (b === 11) {
        c = 150000
    } else {
        c = b * 10000
    }
    if (d === 1) {
        if (a.checked) {
            if (seed.items.i931 > 0) {
                c = c * 1.25
            }
            e.checked = false
        }
    } else {
        if (d === 2) {
            if (e.checked) {
                if (seed.items.i932 > 0) {
                    c = c * 1.5
                }
                a.checked = false
            }
        }
    }
    $("modal_attack_maxunt").innerHTML = c
}
function modal_attack_item_march(a) {
    var b = 55;
    if (parseInt(a) == 55) {
        b = 57
    }
    if ($("modal_attack_item" + a).checked) {
        $("modal_attack_item" + b).checked = false
    }
    modal_attack_update_time()
}
function modal_attack_normalize_number(b) {
    var a = parseInt(b.value, 10);
    b.value = isNaN(a) ? 0 : a
}
function modal_attack_update_num_max(a) {
    $("modal_attack_unit_ipt" + a).value = parseInt(seed.units["city" + currentcityid]["unt" + a]);
    modal_attack_update_num($("modal_attack_unit_ipt" + a))
}
function modal_attack_update_num(c) {
    var g = jQuery("#modal_attack_unitlist input");
    var e = 0;
    var j, a;
    for (var f = 0; f < g.length; f++) {
        j = g[f];
        if (j != c) {
            a = parseInt(j.value);
            e += isNaN(e) ? 0 : a
        }
    }
    enteredValue = parseInt(c.value, 10);
    var b = parseInt(seed.units["city" + currentcityid]["unt" + c.getAttribute("name")]);
    var k = parseInt($("modal_attack_maxunt").innerHTML);
    var h = isNaN(enteredValue) ? 0 : enteredValue;
    var d = Math.min(b, k - e);
    c.value = c.value === "" ? "" : Math.min(h, d);
    cm.MarchModal.updateTroopResource();
    modal_attack_update_time()
}
function modal_attack_update_time() {
    var d = $("modal_attack_unitlist").getElementsByTagName("input");
    var a = {};
    for (var c = 0; c < d.length; c++) {
        a[parseInt(d[c].getAttribute("name"))] = d[c].value
    }
    var b = {};
    if ($("modal_attack_item57").checked) {
        b["57"] = true
    } else {
        if ($("modal_attack_item55").checked) {
            b["55"] = true
        }
    }
    $("modal_attack_esttime").innerHTML = cm.MarchModal.marchTimeCalculator(a, $("modal_attack_target_coords_x").value, $("modal_attack_target_coords_y").value, false, b)
}
function modal_attack_check() {
    if (Number(seed.playerEffects.vacationExpire) > unixtime()) {
        Modal.multiButton({
            buttons: [{
                txt: g_js_strings.modal_myitems_confirm_vacation_continue_button,
                exe: function () {
                    seed.playerEffects.vacationExpire = unixtime() - 1;
                    seed.player.truceExpireUnixTime = unixtime() - 1;
                    seed.playerEffects.troopUpkeepReductExp = unixtime() - 1;
                    seed.playerEffects.fogExpire = unixtime() - 1;
                    update_boosts();
                    modal_attack_do()
                }
            }, {
                txt: g_js_strings.commonstr.cancel,
                exe: function () {
                    Modal.hideModal()
                }
            }],
            body: g_js_strings.vacationMode.modal_attack_vacation
        })
    } else {
        if (cm.item.fire("stop_action", modal_attack_do) == true) {
            return false
        } else {
            if ((parseInt(seed.playerEffects.fogExpire) > unixtime()) && ($("modal_attack_atktype").value == 4 || $("modal_attack_atktype").value == 3)) {
                var b = new Array();
                var a = new Array();
                b.push("<div class='mistwarn'>");
                b.push(g_js_strings.modal_attack_check.warning);
                b.push("</div>");
                b.push("<div class='mistsexpl'>");
                b.push(g_js_strings.modal_attack_check.warningdesc);
                b.push("</div>");
                a.push("<a class='button20' onclick='Modal.hideModal();modal_attack_do();return false;'><span>");
                a.push(g_js_strings.modal_attack_check.marchon);
                a.push("</span></a>");
                a.push("<a class='button20' onclick='Modal.hideModal();return false;'><span>");
                a.push(g_js_strings.modal_attack_check.canmarch);
                a.push("</span></a>");
                Modal.showAlert(b.join(""), a.join(""))
            } else {
                modal_attack_do()
            }
        }
    }
}
var boosted = false;

function updateBoosts(a, b) {
    var b = unixtime();
    cm.log.l("rslt.atkBoostTime: " + a.atkBoostTime);
    if (parseInt(a.atkBoostTime) > 0) {
        boosted = true;
        if (!(parseInt(seed.playerEffects.atkExpire) > b)) {
            seed.playerEffects.atkExpire = b + parseInt(a.atkBoostTime)
        } else {
            seed.playerEffects.atkExpire = parseInt(seed.playerEffects.atkExpire) + parseInt(a.atkBoostTime)
        }
    }
    if (parseInt(a.atk2BoostTime) > 0) {
        if (!(parseInt(seed.playerEffects.atk2Expire) > b)) {
            seed.playerEffects.atk2Expire = b + parseInt(a.atk2BoostTime)
        } else {
            seed.playerEffects.atk2Expire = parseInt(seed.playerEffects.atk2Expire) + parseInt(a.atk2BoostTime)
        }
        if (seed.playerEffects.atkExpire && parseInt(seed.playerEffects.atkExpire) > b) {
            seed.playerEffects.atkExpire = parseInt(seed.playerEffects.atkExpire) + parseInt(a.atk2BoostTime)
        }
    }
    if (parseInt(a.defBoostTime) > 0) {
        boosted = true;
        if (!(parseInt(seed.playerEffects.defExpire) > b)) {
            seed.playerEffects.defExpire = b + parseInt(a.defBoostTime)
        } else {
            seed.playerEffects.defExpire = parseInt(seed.playerEffects.defExpire) + parseInt(a.defBoostTime)
        }
    }
    if (parseInt(a.def2BoostTime) > 0) {
        if (!(parseInt(seed.playerEffects.def2Expire) > b)) {
            seed.playerEffects.def2Expire = b + parseInt(a.def2BoostTime)
        } else {
            seed.playerEffects.def2Expire = parseInt(seed.playerEffects.def2Expire) + parseInt(a.def2BoostTime)
        }
        if (seed.playerEffects.defExpire && parseInt(seed.playerEffects.defExpire) > b) {
            seed.playerEffects.defExpire = parseInt(seed.playerEffects.defExpire) + parseInt(a.def2BoostTime)
        }
    }
}
function modal_attack_do() {
    var params = Object.clone(g_ajaxparams);
    params.cid = currentcityid;
    params.type = $("modal_attack_atktype").value;
    params.kid = $("modal_attack_knight").value;
    params.xcoord = $("modal_attack_target_coords_x").value;
    params.ycoord = $("modal_attack_target_coords_y").value;
    var unts = $("modal_attack_unitlist").getElementsByTagName("input");
    var unitsarr = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    var totalTroops = 0;
    var totalResources = 0;
    for (var i = 0; i < unts.length; i++) {
        if (unts[i].value > 0) {
            totalTroops += parseInt(unts[i].value);
            params["u" + unts[i].getAttribute("name")] = unts[i].value;
            unitsarr[parseInt(unts[i].getAttribute("name"))] = unts[i].value
        }
    }
    var resources = new Array();
    params.gold = $("modal_attack_gold").value;
    resources.push(params.gold);
    totalResources += parseInt($("modal_attack_gold").value);
    for (var i = 1; i < 5; i++) {
        totalResources += parseInt($("modal_attack_rec" + i).value);
        params["r" + i] = $("modal_attack_rec" + i).value;
        resources.push(params["r" + i])
    }
    var itemlist = [55, 57, 221, 261, 262, 271, 272, 931, 932, 280, 281];
    var iused = new Array();
    for (var i = 0; i < itemlist.length; i++) {
        var l_elem = $("modal_attack_item" + itemlist[i]);
        if (l_elem && l_elem.checked && parseInt(seed.items["i" + itemlist[i]]) > 0) {
            iused.push(itemlist[i])
        }
    }
    params.items = iused.join(",");
    if (totalTroops == 0) {
        Modal.showAlert(g_js_strings.modal_attack_do.sendtroop);
        return false
    }
    if (params.type == cm.MARCH_TYPES.MARCH_TYPE_TRANSPORT && totalResources == 0) {
        Modal.showAlert(g_js_strings.modal_attack_do.transportitem);
        return false
    }
    if (params.type == cm.MARCH_TYPES.MARCH_TYPE_SCOUT && ($("modal_attack_unit_ipt" + cm.UNIT_TYPES.UNIT_TYPE_SCOUT).value.blank() || $("modal_attack_unit_ipt" + cm.UNIT_TYPES.UNIT_TYPE_SCOUT).value == 0)) {
        Modal.showAlert(g_js_strings.modal_attack_do.sendscout);
        return false
    }
    if (params.type == cm.MARCH_TYPES.MARCH_TYPE_ATTACK && params.kid == 0) {
        Modal.showAlert(g_js_strings.modal_attack_do.sendknight);
        return false
    }
    if (isNaN(parseInt(params.xcoord)) || isNaN(parseInt(params.ycoord))) {
        Modal.showAlert(g_js_strings.modal_attack_do.specifytarget);
        return false
    }
    if (("on" == cm.features.AUTO_ATTACK) && (params.type == cm.MARCH_TYPES.MARCH_TYPE_ATTACK) && $("modal_attack_raidfilter_checkbox").checked) {
        return cm.MarchModal.saveRaid(params)
    }
    var AttackCall_ = function () {
            var profiler = new cm.Profiler("ResponseTime", "march.php");
            ajax.Request(g_ajaxpath + "ajax/march.php" + g_ajaxsuffix, {
                method: "post",
                parameters: params,
                loading: true,
                onSuccess: function (transport) {
                    profiler.stop();
                    var rslt = eval("(" + transport.responseText + ")");
                    if (rslt.ok) {
                        Modal.hideModalAll();
                        var timediff = parseInt(rslt.eta) - parseInt(rslt.initTS);
                        var ut = unixtime();
                        attach_addoutgoingmarch(rslt.marchId, rslt.marchUnixTime, ut + timediff, params.xcoord, params.ycoord, unitsarr, params.type, params.kid, resources, rslt.tileId, rslt.tileType, rslt.tileLevel, currentcityid, true);
                        if (rslt.updateSeed) {
                            update_seed(rslt.updateSeed)
                        }
                        var ut = unixtime();
                        boosted = false;
                        updateBoosts(rslt);
                        if (rslt.liftFog) {
                            boosted = true;
                            seed.playerEffects.fogExpire = 0;
                            g_mapObject.getMoreSlots()
                        }
                        if (boosted) {
                            update_boosts()
                        }
                        if (parseInt(rslt.knightCombatBoostTime) > 0) {}
                        var mpiused = "no";
                        if (iused.length > 0) {
                            mpiused = "yes"
                        }
                        for (var i = 0; i < iused.length; i++) {
                            seed.items["i" + iused[i]] = parseInt(seed.items["i" + iused[i]]) - 1;
                            ksoItems[iused[i]].subtract()
                        }
                        UserEngagement.popViralModalUEP()
                    } else {
                        if (rslt.user_action) {
                            var user_action = {
                                title: '<span class="march_useraction_title"></span>',
                                marchWarning: function () {
                                    var body = ['<div class="march_useraction_warning"><div class="title">WARNING!</div>', "<div>Caution!  You have been marching at a very high rate.  Continuing at this pace may affect your ability to send marches.</div></div>"].join("");
                                    var buttons = {
                                        okay: {
                                            txt: "I understand",
                                            cls: "inlineButton blue25",
                                            exe: function () {
                                                Modal.hideModal();
                                                params.marchWarning = 1;
                                                AttackCall_()
                                            }
                                        }
                                    };
                                    Modal.multiButton({
                                        title: user_action.title,
                                        noControl: true,
                                        body: body,
                                        buttonContainerClass: "",
                                        buttons: buttons,
                                        buttonContainerClass: "march_useraction_buttons clearfix"
                                    })
                                },
                                marchCaptcha: function () {
                                    var captcha_form_id = "march_captcha_" + Math.floor(Math.random() * 10000000);
                                    var body = ["<div class='march_useraction_warning'><div>We've noticed you've been sending a large amount of marches.  Please confirm that you are still playing by following the instructions below:</div>", '<div class="captcha_container"><form id="', captcha_form_id, '"></form></div>', "<div>To avoid seeing these messages in the future, please lower the frequency of your marches. Remember that the Barbarian Raid feature allows automated attacks on barbarian camps.</div></div>"].join("");
                                    var SubmitForm = function (event) {
                                            event.preventDefault();
                                            event.stopPropagation();
                                            params.marchWarning = 1;
                                            params.marchCaptcha_challenge = Recaptcha.get_challenge();
                                            params.marchCaptcha_response = Recaptcha.get_response();
                                            Modal.hideModal();
                                            AttackCall_();
                                            return false
                                        };
                                    var buttons = {
                                        okay: {
                                            txt: g_js_strings.commonstr.ok,
                                            cls: "inlineButton blue25",
                                            exe: SubmitForm
                                        }
                                    };
                                    Modal.onCloseCallback = function () {
                                        Recaptcha.destroy()
                                    };
                                    Modal.multiButton({
                                        title: user_action.title,
                                        noControl: true,
                                        body: body,
                                        buttons: buttons,
                                        buttonContainerClass: "march_useraction_buttons clearfix"
                                    });
                                    Recaptcha.create("6LcT7cQSAAAAAG4whvbBz60hGjJg0ON1wRIRv_iD", captcha_form_id, {
                                        callback: Recaptcha.focus_response_field,
                                        theme: "white"
                                    });
                                    jQuery("#" + captcha_form_id).submit(SubmitForm)
                                }
                            };
                            user_action[rslt.user_action].call();
                            return
                        }
                        Modal.showAlert(printLocalError((rslt.error_code || null), (rslt.msg || null), (rslt.feedback || null)))
                    }
                },
                onFailure: function () {
                    profiler.stop()
                }
            })
        };
    AttackCall_()
}
function modal_attack_target_coords() {
    $("modal_attack_target_dropdown").hide();
    $("modal_attack_target_coords").show()
}
function modal_attack_target_dropdown() {
    $("modal_attack_target_coords").hide();
    $("modal_attack_target_dropdown").show();
    var strHTML = [];
    var params = Object.clone(g_ajaxparams);
    params.requestType = "GET_BOOKMARK_INFO";
    new Ajax.Request(g_ajaxpath + "ajax/tileBookmark.php" + g_ajaxsuffix, {
        method: "post",
        parameters: params,
        onSuccess: function (message) {
            var rslt = eval("(" + message.responseText + ")");
            if (rslt.ok) {
                var bookmarkInfo = rslt.bookmarkInfo;
                strHTML.push("<select onchange='selectAttackBookmark(this);return false;' tabindex='153'>");
                strHTML.push("<option value='0'>" + g_js_strings.modal_attack_target_dropdown.choosebookmark + "</option>");
                for (var i = 0; i < seed.cities.length; i++) {
                    strHTML.push("<option value='" + seed.cities[i][2] + "_" + seed.cities[i][3] + "'>" + seed.cities[i][1] + " (" + seed.cities[i][2] + ", " + seed.cities[i][3] + ") </option>")
                }
                for (id in bookmarkInfo) {
                    strHTML.push("<option value='" + bookmarkInfo[id].xCoord + "_" + bookmarkInfo[id].yCoord + "'>" + bookmarkInfo[id].name + " (" + bookmarkInfo[id].xCoord + ", " + bookmarkInfo[id].yCoord + ") </option>")
                }
                strHTML.push("</select>");
                $("savedCoordinatesDropdown").innerHTML = strHTML.join("")
            }
        },
        onFailure: function () {}
    })
}
function selectAttackBookmark(b) {
    if (b.value == 0) {
        return false
    } else {
        var a = b.value.split("_");
        $("modal_attack_target_coords_x").value = a[0];
        $("modal_attack_target_coords_y").value = a[1];
        modal_attack_target_coords();
        modal_attack_update_time()
    }
}
function attack_addqueue(p, a, f, e, n, l, o, g, c, d, k, m, j) {
    var b = new Object();
    b.destinationUnixTime = parseInt(f);
    b.marchUnixTime = parseInt(a);
    b.returnUnixTime = b.destinationUnixTime - b.marchUnixTime + b.destinationUnixTime;
    b.toXCoord = e;
    b.toYCoord = n;
    b.marchType = o;
    b.knightId = g;
    b.marchStatus = 1;
    b.gold = c[0];
    if (d) {
        b.toTileId = d;
        b.toTileType = k;
        b.toTileLevel = m
    }
    for (var h = 1; h < 5; h++) {
        b["resource" + h] = c[h]
    }
    for (var h = 0; h < 13; h++) {
        b["unit" + h + "Count"] = l[h];
        b["unit" + h + "Return"] = 0
    }
    if (Object.isArray(seed.queue_atkp["city" + j])) {
        seed.queue_atkp["city" + j] = new Object()
    }
    seed.queue_atkp["city" + j]["m" + p] = b
}
function attach_addoutgoingmarch(r, a, g, e, o, m, p, h, c, d, l, n, k, q) {
    k = k || currentcityid;
    if (q) {
        var f = seed.units["city" + k];
        for (var j = 0; j < m.length; j++) {
            var b = parseInt(m[j]);
            if (!isNaN(b) && (b > 0)) {
                f["unt" + j] = parseInt(f["unt" + j]) - b
            }
        }
    }
    if (parseInt(h) != 0) {
        seed.knights["city" + k]["knt" + h].knightStatus = 10
    }
    attack_addqueue(r, a, g, e, o, m, p, h, c, d, l, n, k);
    cityinfo_army();
    cm.MarchProgressBar.forceOn(k);
    attack_generatequeue()
}
var g_ftdpromo = false;

function attack_generateincoming() {
    var f = new Array();
    var d = false;
    if (!Object.isArray(seed.queue_atkinc) && Object.keys(seed.queue_atkinc) && Object.keys(seed.queue_atkinc).length > 0) {
        var c = unixtime();
        var g = 0;
        var a = c + 9999999;
        var h = Object.keys(seed.queue_atkinc);
        for (var e = 0; e < h.length; e++) {
            if (seed.queue_atkinc[h[e]].score) {
                d = true
            }
            if (seed.queue_atkinc[h[e]].arrivalTime) {
                var j = parseInt(seed.queue_atkinc[h[e]].arrivalTime);
                if (j < a && j > c) {
                    a = j;
                    g = parseInt(h[e].split("m")[1])
                }
            }
        }
        if (d) {
            f.push("<div style='font-weight:bold;margin-top:8px;padding:0; color: red;'>");
            f.push("<div class='clearfix' style='display:block;'><span style='float:left;margin-right:5px;'>" + g_js_strings.attack_generateincoming.impendingattack + "</span>");
            f.push("<a class='button14' onclick='attack_viewimpending();return false;'><span style='color:#FFF;'>" + g_js_strings.commonstr.view + "</span></a>");
            f.push("</div>");
            f.push("<div style='padding-top:0;font-weight:normal;'>");
            if (g != 0) {
                f.push(g_js_strings.attack_generateincoming.estimatedarrival + ": ");
                f.push(timestr(a - c))
            } else {
                f.push("&nbsp;")
            }
            f.push("</div>");
            f.push("</div>");
            g_ftdpromo = false
        }
    }
    var k = false;
    if (!d) {
        f = new Array();
        var b = 4 - parseInt((unixtime() - parseInt(seed.player.datejoinUnixTime)) / 86400);
        if (parseInt(seed.player.warStatus) == 2) {
            f.push('<div><a onclick="modal_guide();return false;">' + g_js_strings.attack_generateincoming.lostreadguide + "</a>" + g_js_strings.attack_generateincoming.protecteddays.replace("%1$s", b) + "</div>")
        } else {
            f.push('<div><a onclick="modal_guide();return false;">' + g_js_strings.attack_generateincoming.lostreadguide + "</a>" + g_js_strings.attack_generateincoming.unprotecteddays + "</div>")
        }
    }
}
function attack_viewimpending(d) {
    var c = new Array();
    c.push("<div id='modal_attackimpending'>");
    c.push("<div class='troopopt'>" + g_js_strings.attack_viewimpending_view.troophideoption + "</div>");
    c.push("<table cellpadding='0' cellspacing='0'><thead><tr><td>" + g_js_strings.commonstr.target + "</td><td>" + g_js_strings.commonstr.view + "</td></tr></thead><tbody>");
    var h = Object.keys(seed.queue_atkinc);
    for (var e = 0; e < h.length; e++) {
        var a = seed.queue_atkinc[h[e]].toTileId;
        var f = incomingAttackInfo(a);
        var g;
        var j = parseInt(seed.queue_atkinc[h[e]].arrivalTime);
        var b = unixtime();
        if (f.length) {
            g = f[0] + " (" + f[1] + "," + f[2] + ")"
        } else {
            g = attack_cityidtoname(seed.queue_atkinc[h[e]].toCityId)
        }
        if (seed.queue_atkinc[h[e]].score) {
            c.push("<tr><td>");
            c.push(g);
            c.push("</td><td>");
            c.push("<a class='button20' onclick='attack_viewimpending_view(" + h[e].split("m")[1] + ",&quot;" + g + "&quot;, " + d + ");return false;'><span style='color:#FFF;'>" + g_js_strings.commonstr.view + "</span></a>");
            c.push("</td></tr>")
        }
    }
    c.push("</tbody></table>");
    if (d) {
        c.push('<div class="buttonContainer"><a class="inlineButton blue20" onclick="modal_build(' + d + ')"><span>' + g_js_strings.attack_viewimpending_view.gotowatchtower + "</span></a></div>")
    }
    c.push("</div>");
    Modal.showModal(500, 400, 120, 190, g_js_strings.modaltitles.impatks, c.join(""))
}
function incomingAttackInfo(b) {
    var g = [],
        e = seed.wilderness,
        f, c, h, d, a = 1;
    if (!(e instanceof Array) && typeof (e) === "object") {
        for (f in e) {
            if (a) {
                c = e[f];
                for (h in c) {
                    if (c[h]["tileId"] == b) {
                        if (c[h]["tileType"] == cm.WILDERNESS_TYPES.PLAIN) {
                            d = g_js_strings.commonstr.plain
                        } else {
                            if (c[h]["tileType"] == cm.WILDERNESS_TYPES.GRASSLAND) {
                                d = g_js_strings.commonstr.grassland
                            } else {
                                if (c[h]["tileType"] == cm.WILDERNESS_TYPES.LAKE) {
                                    d = g_js_strings.commonstr.lake
                                } else {
                                    if (c[h]["tileType"] == cm.WILDERNESS_TYPES.WOODS) {
                                        d = g_js_strings.commonstr.woods
                                    } else {
                                        if (c[h]["tileType"] == cm.WILDERNESS_TYPES.HILLS) {
                                            d = g_js_strings.commonstr.hills
                                        } else {
                                            if (c[h]["tileType"] == cm.WILDERNESS_TYPES.MOUNTAIN) {
                                                d = g_js_strings.commonstr.mountain
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        g.push(d);
                        g.push(c[h]["xCoord"]);
                        g.push(c[h]["yCoord"]);
                        a = 0;
                        break
                    }
                }
            } else {
                break
            }
        }
    }
    return g
}
function attack_cityidtoname(b) {
    for (var a = 0; a < seed.cities.length; a++) {
        if (parseInt(seed.cities[a][0]) == parseInt(b)) {
            return seed.cities[a][1]
        }
    }
    return ""
}
function attack_viewimpending_view(e, g, d) {
    var c = new Array();
    var a = seed.queue_atkinc["m" + e];
    c.push("<div id='modal_attackimpending_view'>");
    c.push("<div><b>" + g_js_strings.commonstr.target + ":</b> ");
    if (a.score != 0) {
        c.push(g)
    } else {
        c.push(g_js_strings.attack_viewimpending_view.upgradetoseeinfo)
    }
    c.push("</div>");
    c.push("<div><b>" + g_js_strings.modal_attack.marchtype + ":</b> ");
    if (a.marchType) {
        if (parseInt(a.marchType) == 4) {
            c.push(g_js_strings.commonstr.attack)
        } else {
            if (parseInt(a.marchType) == 3) {
                c.push(g_js_strings.commonstr.scout)
            }
        }
    } else {
        c.push(g_js_strings.attack_viewimpending_view.upgradetoseeinfo)
    }
    c.push("</div>");
    c.push("<div><b>" + g_js_strings.attack_generateincoming.estimatedarrival + ":</b> ");
    if (a.arrivalTime) {
        c.push(timestr(parseInt(a.arrivalTime) - unixtime()))
    } else {
        c.push(g_js_strings.attack_viewimpending_view.upgradetoseeinfo)
    }
    c.push("</div>");
    c.push("<div><b>" + g_js_strings.commonstr.attacker + ":</b> ");
    if (a.pid) {
        c.push(seed.players["u" + a.pid].n)
    } else {
        c.push(g_js_strings.attack_viewimpending_view.upgradetoseeinfo)
    }
    c.push("</div>");
    c.push("<div><b>" + g_js_strings.commonstr.alliance + ":</b> ");
    if (parseInt(a.score) > 3) {
        if (a.aid) {
            if (seed.allianceNames && seed.allianceNames["a" + a.aid]) {
                c.push(seed.allianceNames["a" + a.aid])
            } else {
                c.push("None")
            }
        } else {
            c.push("None")
        }
    } else {
        c.push(g_js_strings.attack_viewimpending_view.upgradetoseeinfo)
    }
    c.push("</div>");
    c.push("<div><b>" + g_js_strings.attack_viewimpending_view.armysize + ":</b> ");
    if (parseInt(a.score) > 4) {
        c.push(a.cnt)
    } else {
        c.push(g_js_strings.attack_viewimpending_view.upgradetoseeinfo)
    }
    c.push("</div>");
    c.push("<div><b>" + g_js_strings.attack_viewimpending_view.incomingtroops + ":</b></div>");
    if (parseInt(a.score) > 5) {
        c.push("<table cellpadding='0' cellspacing='0'><thead><tr><td>" + g_js_strings.commonstr.type + "</td><td>Amount</td></tr></thead><tbody>");
        var h = Object.keys(a.unts);
        for (var f = 0; f < h.length; f++) {
            c.push("<tr><td>");
            c.push(unitcost["unt" + h[f].split("u")[1]][0]);
            c.push("</td><td>");
            if (parseInt(a.score) > 6) {
                c.push(a.unts[h[f]])
            } else {
                c.push(g_js_strings.attack_viewimpending_view.upgradetoseeinfo)
            }
            c.push("</td></tr>")
        }
        c.push("</tbody></table>")
    } else {
        c.push("<div>" + g_js_strings.attack_viewimpending_view.upgradetoseeinfo + "</div>")
    }
    c.push("<div><b>" + g_js_strings.attack_viewimpending_view.knightcomlvl + ":</b> ");
    if (a.knt && a.knt.cbt) {
        c.push(a.knt.cbt)
    } else {
        c.push(g_js_strings.attack_viewimpending_view.upgradetoseeinfo)
    }
    c.push("</div>");
    c.push("<div><b>" + g_js_strings.attack_viewimpending_view.techlevels + ":</b></div>");
    if (parseInt(a.score) > 9) {
        c.push("<table cellpadding='0' cellspacing='0'><thead><tr><td>" + g_js_strings.commonstr.tech + "</td><td>" + g_js_strings.commonstr.level + "</td></tr></thead><tbody>");
        var b = Object.keys(a.tech);
        for (var f = 0; f < b.length; f++) {
            c.push("<tr><td>");
            c.push(techcost["tch" + b[f].split("t")[1]][0]);
            c.push("</td><td>");
            c.push(a.tech[b[f]]);
            c.push("</td></tr>")
        }
        c.push("</tbody></table>")
    } else {
        c.push("<div>" + g_js_strings.attack_viewimpending_view.upgradetoseeinfo + "</div>")
    }
    if (d) {
        c.push('<div class="buttonContainer"><a class="inlineButton blue20" onclick="modal_build(' + d + ')"><span>' + g_js_strings.attack_viewimpending_view.gotowatchtower + "</span></a></div>")
    }
    c.push("</div>");
    Modal.showModal(500, 400, 120, 190, g_js_strings.modaltitles.impatks, c.join(""))
}
function attack_generatequeue() {
    var C, f, z;
    var o = null;
    var c = [];
    var B = [];
    for (z in seed.queue_atkp) {
        var v = "city" + currentcityid == z;
        var p = seed.queue_atkp[z];
        if (!Object.isArray(p)) {
            $("mod_untqueue").show();
            var m = unixtime();
            var h = Object.keys(p);
            var r = h.length;
            for (var x = 0; x < r; x++) {
                var q = p[h[x]];
                if (!q) {
                    continue
                }
                var n = true;
                var a = 0;
                var g = parseInt(q.marchStatus);
                var e = parseInt(q.marchType);
                if (q && q.destinationUnixTime) {
                    if (g == cm.MARCH_STATUS.MARCH_STATUS_STOPPED) {
                        n = false;
                        a = 0
                    } else {
                        if (m < parseInt(q.destinationUnixTime)) {
                            a = parseInt(q.destinationUnixTime) - m
                        } else {
                            if (g != cm.MARCH_STATUS.MARCH_STATUS_DEFENDING) {
                                a = parseInt(q.returnUnixTime) - m
                            } else {
                                a = 0
                            }
                            if (m == parseInt(q.destinationUnixTime)) {
                                if ((g != cm.MARCH_STATUS.MARCH_STATUS_RETURNING) && (g != cm.MARCH_STATUS.MARCH_STATUS_DEFENDING)) {
                                    seed.queue_atkp[z][h[x]].marchStatus = cm.MARCH_STATUS.MARCH_STATUS_UNKNOWN
                                }
                                window.setTimeout("update_seed_ajax(true)", 5000)
                            }
                            n = false
                        }
                    }
                    if (a > 0 && g != cm.MARCH_STATUS.MARCH_STATUS_UNKNOWN) {
                        var b = 1;
                        if (g == cm.MARCH_STATUS.MARCH_STATUS_RETURNING) {
                            b = parseInt(q.returnUnixTime) - parseInt(q.destinationUnixTime)
                        } else {
                            var b = parseInt(q.destinationUnixTime) - parseInt(q.marchUnixTime)
                        }
                        if (v) {
                            var u = "";
                            if (e == cm.MARCH_TYPES.MARCH_TYPE_BOT_BARBARIAN) {
                                o = B;
                                u = "raid"
                            } else {
                                o = c
                            }
                            o.push('<div class="untqueue_item clearfix">');
                            o.push('<div class="atkpic ');
                            if (g == cm.MARCH_STATUS.MARCH_STATUS_RETURNING) {
                                o.push("returning")
                            } else {
                                if ((g == cm.MARCH_STATUS.MARCH_STATUS_UNKNOWN) || (g == cm.MARCH_STATUS.MARCH_STATUS_DEFENDING)) {
                                    o.push("reinforce")
                                } else {
                                    if (e == cm.MARCH_TYPES.MARCH_TYPE_SCOUT) {
                                        o.push("scouting")
                                    } else {
                                        if (e == cm.MARCH_TYPES.MARCH_TYPE_REINFORCE) {
                                            o.push("reinforce")
                                        } else {
                                            if (e == cm.MARCH_TYPES.MARCH_TYPE_TRANSPORT) {
                                                o.push("transporting")
                                            } else {
                                                if (e == cm.MARCH_TYPES.MARCH_TYPE_REASSIGN) {
                                                    o.push("transporting")
                                                } else {
                                                    o.push("attacking")
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            o.push('"></div>');
                            o.push('<div class="info"><div class="stat"><div class="time">');
                            o.push(timestr(a));
                            o.push("</div>");
                            if (n) {
                                o.push('<div class="tgt">');
                                var F = new cm.utils.CoordinateLink(q.toXCoord, q.toYCoord);
                                F.setClassName("coordinateLink");
                                o.push(F.getHTML());
                                o.push("</div>")
                            }
                            o.push('</div><div class="bar ' + u + '" style="width: ');
                            if (n) {
                                o.push(123 - parseInt(123 * (a / b)))
                            } else {
                                var d = parseInt(123 * (a / b));
                                if (d > 123) {
                                    d = 123
                                }
                                o.push(d)
                            }
                            o.push('px;">&nbsp;</div></div>');
                            if ((e == cm.MARCH_TYPES.MARCH_TYPE_ATTACK) || (e == cm.MARCH_TYPES.MARCH_TYPE_BOT_BARBARIAN)) {
                                o.push('<div class="attack_knight_info clearfix">');
                                var A = q.knightId;
                                var E = seed.knights["city" + currentcityid]["knt" + A].knightName.split(" ");
                                var w = 0;
                                if (e == cm.MARCH_TYPES.MARCH_TYPE_BOT_BARBARIAN && g == cm.MARCH_STATUS.MARCH_STATUS_RETURNING) {
                                    for (var s = 1; s < 13; s++) {
                                        w += parseInt(q["unit" + s + "Return"])
                                    }
                                } else {
                                    for (var s = 1; s < 13; s++) {
                                        w += parseInt(q["unit" + s + "Count"])
                                    }
                                }
                                o.push('<div class="name">' + g_js_strings.commonstr.knight + ": " + E[0] + "</div>");
                                o.push('<div class="army">' + g_js_strings.commonstr.army + ": " + w + "</div>");
                                o.push("</div>")
                            }
                            o.push("</div>")
                        }
                    } else {
                        var D = q.hasUpdated;
                        if ((g != cm.MARCH_STATUS.MARCH_STATUS_DEFENDING) && (g != cm.MARCH_STATUS.MARCH_STATUS_UNKNOWN) && (e != cm.MARCH_TYPES.MARCH_TYPE_BOT_BARBARIAN)) {
                            if (D) {
                                if (e == cm.MARCH_TYPES.MARCH_TYPE_TRANSPORT) {
                                    for (var s = 1; s < 13; s++) {
                                        seed.units[z]["unt" + s] = parseInt(seed.units[z]["unt" + s]) + parseInt(q["unit" + s + "Count"])
                                    }
                                } else {
                                    if (e != cm.MARCH_TYPES.MARCH_TYPE_BOT_BARBARIAN) {
                                        for (var t = 1; t < 13; t++) {
                                            seed.units[z]["unt" + t] = parseInt(seed.units[z]["unt" + t]) + parseInt(q["unit" + t + "Return"])
                                        }
                                    }
                                }
                                if ((e != cm.MARCH_TYPES.MARCH_TYPE_BOT_BARBARIAN) && parseInt(q.knightId) != 0) {
                                    seed.knights[z]["knt" + seed.queue_atkp[z][h[x]].knightId].knightStatus = 1
                                }
                                delete seed.queue_atkp[z][h[x]];
                                if (Object.keys(seed.queue_atkp[z]).length == 0) {
                                    seed.queue_atkp[z] = []
                                }
                            }
                        } else {
                            if ((g == cm.MARCH_STATUS.MARCH_STATUS_UNKNOWN) && (e == cm.MARCH_TYPES.MARCH_TYPE_REASSIGN) && D) {
                                delete seed.queue_atkp[z][h[x]];
                                if (Object.keys(seed.queue_atkp[z]).length == 0) {
                                    seed.queue_atkp[z] = []
                                }
                            }
                            if (v && q) {
                                var u = "";
                                if (e == cm.MARCH_TYPES.MARCH_TYPE_BOT_BARBARIAN) {
                                    o = B;
                                    u = "raid"
                                } else {
                                    o = c
                                }
                                var l = "";
                                var y = "reinforce";
                                switch (g) {
                                case cm.MARCH_STATUS.MARCH_STATUS_DEFENDING:
                                    l = g_js_strings.commonstr.encamped;
                                    break;
                                case cm.MARCH_STATUS.MARCH_STATUS_STOPPED:
                                    l = g_js_strings.attack_generatequeue.raidstopped;
                                    y = "stopped";
                                    break;
                                case cm.MARCH_STATUS.MARCH_STATUS_RESTING:
                                    l = g_js_strings.attack_generatequeue.raidresting;
                                    y = "resting";
                                    break;
                                case cm.MARCH_STATUS.MARCH_STATUS_UNKNOWN:
                                case cm.MARCH_STATUS.MARCH_STATUS_RETURNING:
                                    if (e == cm.MARCH_TYPES.MARCH_TYPE_BOT_BARBARIAN && m >= q.returnUnixTime) {
                                        l = g_js_strings.attack_generatequeue.raidresting;
                                        y = "resting"
                                    } else {
                                        l = g_js_strings.attack_generatequeue.waitreport
                                    }
                                    break
                                }
                                o.push('<div class="untqueue_item clearfix">');
                                o.push('<div class="atkpic ' + y + '"></div>');
                                o.push('<div class="info"><div class="stat"><div class="time">');
                                o.push(l);
                                o.push('</div><div class="tgt">');
                                var F = new cm.utils.CoordinateLink(q.toXCoord, q.toYCoord);
                                F.setClassName("coordinateLink");
                                o.push(F.getHTML());
                                o.push("</div>");
                                o.push("</div>");
                                o.push('<div class="bar ' + u + '" style="width: ');
                                o.push('0px;">&nbsp;</div></div>');
                                o.push("</div>")
                            }
                        }
                    }
                }
            }
        }
    }
    cm.MarchProgressBar.updateView(B.join("") + c.join(""))
}
function modal_wilderness_view(tileid, level, type, xcoor, ycoor) {
    var params = Object.clone(g_ajaxparams);
    params.tid = tileid;
    new Ajax.Request(g_ajaxpath + "ajax/viewTile.php" + g_ajaxsuffix, {
        method: "post",
        parameters: params,
        onSuccess: function (message) {
            var rslt = eval("(" + message.responseText + ")");
            if (rslt.ok) {
                var msghtml = new Array();
                msghtml.push("<div class='wildviewwrap'>");
                msghtml.push("<div class='wildviewheader'>" + g_js_strings.commonstr.level + " " + level + "</div>");
                msghtml.push("<div class='wildviewtablewrap'>");
                msghtml.push("<table class='wildviewtable' cellpadding='0' cellspacing='0' border='0'>");
                msghtml.push("<thead>");
                msghtml.push("<tr>");
                msghtml.push("<td class='hero'>" + g_js_strings.commonstr.knight + "</td>");
                msghtml.push("<td>" + g_js_strings.commonstr.lord + "</td>");
                msghtml.push("<td>" + g_js_strings.commonstr.from + "</td>");
                msghtml.push("<td>" + g_js_strings.commonstr.recall + "</td>");
                msghtml.push("</tr>");
                msghtml.push("</thead>");
                if (!Object.isArray(rslt.defenders)) {
                    msghtml.push("<tbody>");
                    var cities = new Hash(rslt.defenders);
                    cities.each(function (pair) {
                        var marches = new Hash(pair.value);
                        marches.each(function (mpair) {
                            msghtml.push("<tr>");
                            msghtml.push("<td class='hero'>");
                            if (mpair.value.knightName == null) {
                                msghtml.push(g_js_strings.commonstr.noknight)
                            } else {
                                msghtml.push(mpair.value.knightName)
                            }
                            msghtml.push("</td>");
                            msghtml.push("<td>" + rslt.playerNames["u" + mpair.value.fromPlayerId] + "</td>");
                            msghtml.push("<td>");
                            var coordinateLink = new cm.utils.CoordinateLink(mpair.value.fromXCoord, mpair.value.fromYCoord);
                            coordinateLink.setClassName("coordinateLink");
                            msghtml.push(coordinateLink.getHTML());
                            msghtml.push("</td>");
                            if (mpair.value.marchStatus == 2 && mpair.value.fromPlayerId == tvuid) {
                                msghtml.push("<td ><a  onclick='Modal.hideModal();attack_recall(" + mpair.value.marchId + ",1," + mpair.value.fromCityId + ");return false;' class='button14'><span style='float:left'>" + g_js_strings.commonstr.recall + "</span></a><a  onclick='Modal.hideModal();view_march(" + mpair.value.marchId + ");return false;' class='button14'><span style='float:left'>" + g_js_strings.commonstr.view + "</span></a></td>")
                            } else {
                                msghtml.push("<td></td>")
                            }
                            msghtml.push("</tr>")
                        })
                    });
                    msghtml.push("</tbody>")
                }
                msghtml.push("</table>");
                msghtml.push("</div>");
                msghtml.push("</div>");
                Modal.showModal(500, 400, 120, 190, type + " (" + xcoor + "," + ycoor + ")", msghtml.join(""))
            }
        },
        onFailure: function () {}
    })
}
function modal_wilderness_abandon(tileid, level, type, xcoor, ycoor) {
    function abandon_exe() {
        var params = Object.clone(g_ajaxparams);
        params.tid = tileid;
        params.x = xcoor;
        params.y = ycoor;
        params.cid = currentcityid;
        new Ajax.Request(g_ajaxpath + "ajax/abandonWilderness.php" + g_ajaxsuffix, {
            method: "post",
            parameters: params,
            onSuccess: function (transport) {
                var rslt = eval("(" + transport.responseText + ")");
                if (rslt.ok) {
                    Modal.hideModal();
                    if (rslt.returningMarches && !Object.isArray(rslt.returningMarches)) {
                        var cities = Object.keys(rslt.returningMarches);
                        for (var i = 0; i < cities.length; i++) {
                            for (var j = 0; j < rslt.returningMarches[cities[i]].length; j++) {
                                var cid = cities[i].split("c")[1];
                                var mid = rslt.returningMarches[cities[i]][j];
                                var march = seed.queue_atkp["city" + cid]["m" + mid];
                                if (march) {
                                    var marchtime = Math.abs(parseInt(march.destinationUnixTime) - parseInt(march.marchUnixTime));
                                    var ut = unixtime();
                                    seed.queue_atkp["city" + cid]["m" + mid].destinationUnixTime = ut;
                                    seed.queue_atkp["city" + cid]["m" + mid].marchUnixTime = ut - marchtime;
                                    seed.queue_atkp["city" + cid]["m" + mid].returnUnixTime = ut + marchtime;
                                    seed.queue_atkp["city" + cid]["m" + mid].marchStatus = 8
                                }
                            }
                        }
                    }
                    if (rslt.updateSeed) {
                        update_seed(rslt.updateSeed)
                    }
                    if (Object.keys(seed.wilderness["city" + currentcityid]).length == 1) {
                        seed.wilderness["city" + currentcityid] = []
                    } else {
                        delete seed.wilderness["city" + currentcityid]["t" + tileid]
                    }
                    g_mapObject.getMoreSlots()
                }
            },
            onFailure: function () {}
        })
    }
    Modal.okay({
        okay: abandon_exe,
        text: g_js_strings.modal_questions.abandon + g_mapObject.typename[g_mapObject.types[parseInt(type)]].capitalize() + "?"
    })
}
function modal_attack_cancel(marchId) {
    var params = Object.clone(g_ajaxparams);
    params.marchId = marchId;
    params.requestType = "CANCEL_MARCH";
    new Ajax.Request(g_ajaxpath + "ajax/cancelMarch.php" + g_ajaxsuffix, {
        method: "post",
        parameters: params,
        onSuccess: function (transport) {
            var rslt = eval("(" + transport.responseText + ")");
            seed.queue_atkp["city" + cid]["m" + marchId].destinationUnixTime = rslt.destinationUnixTime;
            seed.queue_atkp["city" + cid]["m" + marchId].returnUnixTime = rslt.returnUnixTime;
            seed.queue_atkp["city" + cid]["m" + marchId].marchStatus = 8;
            cm.log.l("city=" + cid + "  rslt.destinationUnixTime=" + rslt.destinationUnixTime);
            showResult(rslt)
        },
        onFailure: function () {}
    })
}
function showResult(a) {
    if (parseInt(a.error_code) == 253) {
        Modal.showAlert(g_js_strings.recall.error)
    } else {
        if (a.ok) {
            Modal.showAlert(g_js_strings.commonstr.cancelled)
        } else {
            Modal.showAlert(printLocalError((a.error_code || null), (a.msg || null), (a.feedback || null)))
        }
    }
}
function attack_checkOverMarch() {
    var b = Object.keys(seed.queue_atkp["city" + currentcityid]);
    var g = 0;
    var d = ["btnScout", "btnAttack", "btnMarch", "btnTransport", "btnReinforce", "btnReassign", "btnRaid"];
    for (var c = 0; c < b.length; c++) {
        var j = parseInt(seed.queue_atkp["city" + currentcityid][b[c]].marchStatus);
        if (j == 1 || j == 2 || j == 7 || j == 8 || j == 9) {
            g++
        }
    }
    var f = Object.keys(seed.buildings["city" + currentcityid]);
    var e = -1;
    for (var c = 0; c < f.length; c++) {
        var a = seed.buildings["city" + currentcityid][f[c]];
        if (parseInt(a[0]) == 12) {
            e = parseInt(a[1])
        }
    }
    if (g >= e) {
        for (var c = 0; c < d.length; c++) {
            if ($(d[c])) {
                $(d[c]).setOpacity(0.5);
                $(d[c]).setStyle("cursor: default");
                $(d[c]).onclick = function () {
                    return false
                }
            }
        }
        var h = $("btnMarch");
        if (h) {
            h.setOpacity(1);
            h.removeClassName("blue36");
            h.addClassName("grey36")
        }
        if ($("error_overmarch")) {
            $("error_overmarch").innerHTML = [g_js_strings.modal_attack.overmarch21, g_js_strings.modal_attack.overmarch22].join("<br />");
            $("error_overmarch").show()
        }
    }
}
var cm = cm || {};
cm.MarchModal = function ($) {
    var march_type_ = cm.MARCH_TYPES.MARCH_TYPE_NONE;
    var modal_start_type_ = cm.MARCH_TYPES.MARCH_TYPE_NONE;
    var march_detail_ = {};
    var last_effect_item_tabindex_ = 0;
    var is_allow_buy_ = false;
    var callbacks_ = {};
    var bind_ = function (extra_options) {
            is_allow_buy_ = false;
            callbacks_ = {};
            callbacks_.saveRaid = extra_options.callbackSaveRaid;
            $("#modal_attack .section.boost input").click(onBoostItemClick_);
            $("#modal_attack_supplyfilter_checkbox").click(filterTroops_);
            $("#modal_attack_raidfilter_checkbox").click(onRaidfilterClick_);
            $("#modal_attack .modal_attack_buy_item").click(onBuyItemButtonClick_);
            var barbraidHelp = ["<ul>"];
            barbraidHelp.push("<li>Barbarian Raids can be unlocked at Level 20.</li>");
            barbraidHelp.push("<li>Barbarian Raids allow you to loot Barbarian Camps automatically.</li>");
            barbraidHelp.push("<li>Raids can be saved by clicking 'Raid and Save' below.</li>");
            barbraidHelp.push("<li>Saved Raids can be managed from the Rally Point under the 'Barbarian Raids' tab.</li>");
            barbraidHelp.push("</ul>");
            cm.Tooltip.setTooltip({
                htmlElement: $("#modal_attack .raidfilter a"),
                tooltip: barbraidHelp.join("")
            });
            for (var i in march_detail_) {
                var selector = "#modal_attack_tab_" + i;
                $(selector).click({
                    march_type: i
                }, onTabClick_);
                $(selector).mouseover({
                    tooltip: march_detail_[i].tooltip
                }, onTooltipTatgetMouseover_);
                $(selector).mouseout(onTooltipTatgetMouseout_)
            }
            resetLastEffectItemTabindex_();
            $("#modal_attack .modal_attack_buy_item").delay(500).fadeIn(500, "swing", onBuyButtonFadedIn_)
        };
    var filterBoosts_ = function () {
            var boost_sections = $("#modal_attack .section.boost");
            if ((march_type_ == cm.MARCH_TYPES.MARCH_TYPE_ATTACK) && $("#modal_attack_raidfilter_checkbox").attr("checked")) {
                $("#btnMarch span").html(g_js_strings.modal_attack.raidandsave);
                boost_sections.addClass("filter");
                var boost_items = $("#modal_attack .section.boost input");
                for (var i = boost_items.length - 1; i >= 0; --i) {
                    if (boost_items[i].checked) {
                        $(boost_items[i]).removeAttr("checked");
                        $(boost_items[i]).trigger("click", {
                            is_force: true
                        })
                    }
                }
            } else {
                $("#btnMarch span").html(g_js_strings.commonstr.march);
                boost_sections.removeClass("filter")
            }
        };
    var filterTroops_ = function () {
            var troops = $("#modal_attack_unitlist .unit");
            var troop = null;
            var troop_type = cm.UNIT_TYPES.UNIT_TYPE_UNKNOWN;
            var troop_number = 0;
            var units = seed.units["city" + currentcityid];
            var is_enable = false;
            var is_show_supply_only = $("#modal_attack_supplyfilter_checkbox").attr("checked");
            for (var i = troops.length - 1; i >= 0; --i) {
                troop = $(troops[i]);
                troop_type = parseInt(troop.attr("name"));
                troop_number = parseInt(units["unt" + troop_type]);
                is_enable = false;
                do {
                    if (march_type_ == cm.MARCH_TYPES.MARCH_TYPE_SCOUT && troop_type != cm.UNIT_TYPES.UNIT_TYPE_SCOUT) {
                        break
                    }
                    if (march_type_ == cm.MARCH_TYPES.MARCH_TYPE_TRANSPORT && is_show_supply_only && troop_type != cm.UNIT_TYPES.UNIT_TYPE_WORKER && troop_type != cm.UNIT_TYPES.UNIT_TYPE_TRANSPORTER) {
                        break
                    }
                    if (isNaN(troop_number) || troop_number < 1) {
                        break
                    }
                    is_enable = true
                } while (false);
                var input = troop.find("input").first();
                if (is_enable) {
                    input.removeAttr("disabled", true);
                    troop.removeClass("filter")
                } else {
                    input.attr("disabled", true);
                    input.val(0);
                    troop.addClass("filter")
                }
            }
        };
    var init_ = function () {
            initMarchDetail_();
            resetLastEffectItemTabindex_()
        };
    var initMarchDetail_ = function () {
            march_detail_.show = eval(["({", "modal_attack_raidfilter: {", cm.MARCH_TYPES.MARCH_TYPE_ATTACK, ": true},", "modal_attack_supplyfilter: {", cm.MARCH_TYPES.MARCH_TYPE_TRANSPORT, ": true},", "modal_attack_transport: {", cm.MARCH_TYPES.MARCH_TYPE_TRANSPORT, ": true, ", cm.MARCH_TYPES.MARCH_TYPE_REINFORCE, ": true, ", cm.MARCH_TYPES.MARCH_TYPE_REASSIGN, ": true},", "modal_attack_attack_boost: {", cm.MARCH_TYPES.MARCH_TYPE_SCOUT, ": true, ", cm.MARCH_TYPES.MARCH_TYPE_ATTACK, ": true},", "modal_attack_defense_boost: {", cm.MARCH_TYPES.MARCH_TYPE_SCOUT, ": true, ", cm.MARCH_TYPES.MARCH_TYPE_ATTACK, ": true}", "})"].join(""));
            march_detail_[cm.MARCH_TYPES.MARCH_TYPE_TRANSPORT] = {
                tooltip: g_js_strings.modal_attack.marchtexttransport
            };
            march_detail_[cm.MARCH_TYPES.MARCH_TYPE_REINFORCE] = {
                tooltip: g_js_strings.modal_attack.marchtextreinforce
            };
            march_detail_[cm.MARCH_TYPES.MARCH_TYPE_SCOUT] = {
                tooltip: g_js_strings.modal_attack.marchtextscout
            };
            march_detail_[cm.MARCH_TYPES.MARCH_TYPE_ATTACK] = {
                tooltip: g_js_strings.modal_attack.marchtextattack
            };
            march_detail_[cm.MARCH_TYPES.MARCH_TYPE_REASSIGN] = {
                tooltip: g_js_strings.modal_attack.marchtextreassign
            }
        };
    var itemOwnString_ = function (you_own) {
            var you_own = parseInt(you_own);
            if (isNaN(you_own)) {
                you_own = 0
            } else {
                if (you_own > 9999) {
                    you_own = "9999+"
                }
            }
            return you_own
        };
    var marchTimeCalculator_ = function (troops, from_x, from_y, is_round_trip, items_applied) {
            if (!from_x.toString().match(/^\d+$/) || !from_y.toString().match(/^\d+$/)) {
                return ""
            }
            var speed = 99999;
            var total_troops = 0;
            items_applied = items_applied || {};
            for (var troop_type in troops) {
                if (!troops[troop_type].toString().match(/^\d+$/)) {
                    continue
                }
                var troop_number = parseInt(troops[troop_type]);
                if (troop_number <= 0) {
                    continue
                }
                total_troops += troop_number;
                var troop_speed = parseInt(unitstats["unt" + troop_type][3]) * (1 + 0.1 * parseInt(seed.tech.tch11));
                if (troop_type > 6) {
                    troop_speed = troop_speed * (1 + 0.05 * parseInt(seed.tech.tch12))
                }
                if (troop_speed < speed) {
                    speed = troop_speed
                }
            }
            var time = 0;
            if (0 == speed || 0 == total_troops) {
                return ""
            }
            var x = Math.abs(parseInt(currentcityinfo[2]) - parseInt(from_x));
            if (x > 375) {
                x = 750 - x
            }
            var y = Math.abs(parseInt(currentcityinfo[3]) - parseInt(from_y));
            if (y > 375) {
                y = 750 - y
            }
            time = parseInt(Math.sqrt((x * x) + (y * y)) * 6000 / speed);
            if (items_applied["57"] && seed.items.i57 > 0) {
                time = parseInt(time * 0.5)
            } else {
                if (items_applied["55"] && seed.items.i55 > 0) {
                    time = parseInt(time * 0.75)
                }
            }
            time += 30;
            if (seed.playerEffects.returnExpire > unixtime()) {
                time = parseInt(time * 0.75)
            }
            if (is_round_trip) {
                time *= 2
            }
            var minimum_time = 173;
            var barbarian_raid = $("#modal_attack_raidfilter_checkbox").attr("checked");
            var attack_selected = $("#modal_attack_tab_4").hasClass("selected");
            cm.log.l("br=" + barbarian_raid);
            if (time < minimum_time && barbarian_raid && attack_selected) {
                time = minimum_time
            }
            return timestr(time)
        };
    var saveRaid_ = function (march_parameters, data_type, callback) {
            var xcoord = ("cityMarches" == data_type) ? march_parameters.toXCoord : march_parameters.xcoord;
            var ycoord = ("cityMarches" == data_type) ? march_parameters.toYCoord : march_parameters.ycoord;
            var cityId = null;
            var knightId = null;
            if ("cityMarches" == data_type) {
                cityId = march_parameters.fromCityId;
                knightId = march_parameters.knightId
            } else {
                cityId = march_parameters.cid;
                knightId = march_parameters.kid
            }
            var knight = seed.knights["city" + cityId]["knt" + knightId];
            var knight_status_old = knight.knightStatus;
            knight.knightStatus = 10;
            var revert_knight_status = function () {
                    knight.knightStatus = knight_status_old
                };
            g_mapObject.getTileData(["bl_" + xcoord + "_bt_" + ycoord], function (rslt) {
                var tile_id = "l_" + xcoord + "_t_" + ycoord;
                if (!rslt.data[tile_id] || (rslt.data[tile_id].tileType != cm.TILE_TYPES.TILE_TYPE_CITY) || rslt.data[tile_id].tileUserId) {
                    revert_knight_status();
                    Modal.showAlert(g_js_strings.modal_attack_do.selectbarbariancamps);
                    return
                }
                var parameters = Object.clone(g_ajaxparams);
                parameters.ctrl = "BotManager";
                parameters.action = march_parameters.is_edit ? "editMarch" : "saveMarch";
                parameters.settings = {
                    cityId: cityId
                };
                delete march_parameters.is_edit;
                var raid = null;
                if ("cityMarches" == data_type) {
                    raid = march_parameters
                } else {
                    raid = {
                        knightId: march_parameters.kid,
                        toXCoord: march_parameters.xcoord,
                        toYCoord: march_parameters.ycoord
                    };
                    for (var troop_type in cm.UNIT_TYPES) {
                        var troop_key = "u" + cm.UNIT_TYPES[troop_type];
                        var troop_number = parseInt(march_parameters[troop_key]);
                        if (!isNaN(troop_number)) {
                            raid["unit" + cm.UNIT_TYPES[troop_type] + "Count"] = troop_number
                        } else {
                            raid["unit" + cm.UNIT_TYPES[troop_type] + "Count"] = 0
                        }
                    }
                }
                parameters.queue = [{
                    botMarches: {
                        botMarchStatus: 1,
                        botState: 1
                    },
                    cityMarches: raid
                }];
                ajax.Request(g_ajaxpath + "ajax/_dispatch.php" + g_ajaxsuffix, {
                    method: "post",
                    parameters: parameters,
                    loading: true,
                    onSuccess: function (transport) {
                        var rslt = eval("(" + transport.responseText + ")");
                        if (rslt.ok) {
                            var troops = seed.units["city" + currentcityid];
                            for (var u = 1; u <= 12; ++u) {
                                var troop_number = parseInt(rslt["unit" + u + "Count"]);
                                if (isNaN(troop_number)) {
                                    troop_number = 0
                                }
                                troops["unt" + u] = Math.max(0, troop_number)
                            }
                            cityinfo_army();
                            setTimeout(update_seed_ajax, 1000);
                            if (callback) {
                                callback()
                            } else {
                                if (callbacks_.saveRaid) {
                                    Modal.hideModal();
                                    callbacks_.saveRaid()
                                } else {
                                    Modal.hideModalAll()
                                }
                            }
                        } else {
                            revert_knight_status();
                            Modal.showAlert(printLocalError((rslt.error_code || null), (rslt.msg || null), (rslt.feedback || null)))
                        }
                    },
                    onFailure: revert_knight_status
                })
            }, revert_knight_status)
        };
    var onAutoAttackHelpClick_ = function () {
            Modal.showAlert([g_js_strings.modal_attack.barbarianraidhelpp1, g_js_strings.modal_attack.barbarianraidhelpp2, g_js_strings.modal_attack.barbarianraidhelpp3].join("<br /><br />"))
        };
    var onBoostItemClick_ = function (event, extra) {
            do {
                if (undefined != extra && extra.is_force) {
                    break
                }
                if ((march_type_ == cm.MARCH_TYPES.MARCH_TYPE_ATTACK) && $("#modal_attack_raidfilter_checkbox").attr("checked")) {
                    event.preventDefault();
                    return
                }
            } while (false);
            var item_id = this.id.split("_item")[1];
            if (item_id in {
                "55": "",
                "57": ""
            }) {
                modal_attack_item_march(item_id)
            }
            if (item_id in {
                "931": "",
                "932": ""
            }) {
                modal_attack_update_unt_max(item_id - 930)
            }
            if (undefined != extra && extra.is_force) {
                event.preventDefault()
            }
        };
    var onBuyButtonFadedIn_ = function () {
            is_allow_buy_ = true
        };
    var onBuyItemButtonClick_ = function (event) {
            if (!is_allow_buy_) {
                return
            }
            var re = /_(\d+)$/;
            var result = re.exec(this.id);
            if (!result) {
                return
            }
            var item_id = result[1];
            if (itemlist["i" + item_id].price > seed.player.gems) {
                modal_shop_buy_notenough();
                return
            }
            var params = Object.clone(g_ajaxparams);
            params.iid = item_id;
            params.original_quantity = seed.items["i" + item_id];
            $("#modal_attack_itemprice_" + item_id).css("visibility", "hidden");
            var profiler = new cm.Profiler("ResponseTime", "buyItem.php");
            new Ajax.Request(g_ajaxpath + "ajax/buyItem.php" + g_ajaxsuffix, {
                method: "post",
                parameters: params,
                onSuccess: function (message) {
                    profiler.stop();
                    onItemBought_(message)
                },
                onFailure: function () {
                    profiler.stop()
                }
            })
        };
    var onItemBought_ = function (message) {
            var item_id = message.request.parameters.iid;
            var item = itemlist["i" + item_id];
            $("#modal_attack_itemprice_" + item_id).css("visibility", "visible");
            var rslt = eval("(" + message.responseText + ")");
            if (!rslt.ok) {
                Modal.showAlert(printLocalError((rslt.error_code || null), (rslt.msg || null), (rslt.feedback || null)));
                return
            }
            seed.player.gems = seed.player.gems - item.price;
            var owned_element = $("#modal_attack_itemstock_" + item_id).first();
            if (owned_element.length < 1) {
                return
            }
            var quantity = parseInt(message.request.parameters.original_quantity);
            if (isNaN(quantity)) {
                quantity = 0
            }++quantity;
            var stock = parseInt(seed.items["i" + item_id]);
            if (!isNaN(stock) && (stock > quantity)) {
                quantity = stock
            } else {
                seed.items["i" + item_id] = quantity;
                ksoItems[item_id].add(quantity)
            }
            owned_element.html(itemOwnString_(quantity));
            if (quantity > 0) {
                $("#modal_attack_item" + item_id).removeAttr("disabled");
                $("#modal_attack_itemstock_" + item_id).parent().removeClass("zero")
            }
            $("#kochead_gems").html(seed.player.gems);
            cm.MixPanelTracker.track("store_purchase", {
                item: item.name,
                cost: item.price,
                usr_gen: seed.player.g,
                usr_byr: seed.player.y,
                usr_ttl: titlenames[seed.player.title],
                distinct_id: tvuid
            })
        };
    var onMarchTypeChange_ = function (march_type, modal_start_type) {
            if (march_type < 1) {
                return
            }
            if (undefined != modal_start_type) {
                modal_start_type_ = modal_start_type
            }
            march_type_ = march_type;
            var march_detail = march_detail_[march_type];
            for (var i in march_detail_.show) {
                $("#" + i).css("display", march_detail_.show[i][march_type] ? "" : "none")
            }
            if (march_detail_.show.modal_attack_supplyfilter[march_type]) {
                $("#modal_attack_supplyfilter_checkbox").attr("checked", true)
            } else {
                $("#modal_attack_supplyfilter_checkbox").removeAttr("checked")
            }
            if (!march_detail_.show.modal_attack_transport[march_type]) {
                $("#modal_attack_transport input").val(0)
            }
            $("#modal_attack .marchTypeTabs li").removeClass("selected");
            $("#modal_attack_tab_" + march_type_).addClass("selected");
            var select_element = $("#modal_attack_knight option");
            if (cm.MARCH_TYPES.MARCH_TYPE_ATTACK == march_type && select_element.length > 1) {
                $("#modal_attack_knight").val($(select_element[1]).val())
            } else {
                $("#modal_attack_knight").val(0)
            }
            filterTroops_(march_type);
            filterBoosts_();
            updateTroopResource_();
            modal_attack_update_time()
        };
    var onRaidfilterClick_ = function () {
            filterBoosts_();
            updateTroopResource_();
            modal_attack_update_time()
        };
    var onTabClick_ = function (event) {
            if (event.data.march_type == march_type_) {
                return
            }
            $("#modal_attack_atktype").val(event.data.march_type);
            onMarchTypeChange_(event.data.march_type)
        };
    var onTooltipTatgetMouseout_ = function (event) {
            removeTooltip();
            event.stopPropagation()
        };
    var onTooltipTatgetMouseover_ = function (event) {
            showTooltip(event.data.tooltip, event.target, event.originalEvent, "mainbody");
            event.stopPropagation()
        };
    var rendererBoostSection_ = function (html, container_id, title, items, callback, block_buy_items) {
            var post_html = "";
            if (callback) {
                post_html = callback()
            }
            var model = {
                BOOST_SECTION: {
                    buy: g_js_strings.commonstr.buy,
                    title: g_js_strings.modal_attack.availableresources,
                    site_image_url: stimgUrl,
                    you_own: g_js_strings.commonstr.youown
                },
                container_id: container_id,
                title: title,
                items: [],
                post_html: post_html
            };
            for (var i = 0; i < items.length; i++) {
                model.items.push({
                    additional_class: {
                        own: "",
                        buy: (block_buy_items && block_buy_items["i" + items[i]]) ? "not_allowed" : ""
                    },
                    disabled: "",
                    id: items[i],
                    item_detail: itemlist["i" + items[i]],
                    quantity: itemOwnString_(seed.items["i" + items[i]]),
                    tabindex: last_effect_item_tabindex_++
                });
                if (model.items[i].quantity < 1) {
                    model.items[i].additional_class.own = "zero";
                    model.items[i].disabled = "disabled"
                }
            }
            html.push(jsonT(model, templates_.boost_section));
            if (callback) {
                callback(html)
            }
        };
    var rendererEstimateTime_ = function () {
            return ["<div class='estimated'><div>", g_js_strings.modal_attack.estimatedmarchtime, ":", "<span id='modal_attack_esttime'></span>", "</div></div>"].join("")
        };
    var rendererResourceSection_ = function (html) {
            var model = {
                RESOURCE_SECTION: {
                    title: g_js_strings.modal_attack.availableresources,
                    site_image_url: stimgUrl,
                    max: g_js_strings.commonstr.max
                },
                resources: [{
                    type_id: 0,
                    type_name: "gold",
                    icon: "gold",
                    display: resourceinfo.rec0,
                    quantity: seed.citystats["city" + currentcityid].gold[0],
                    tabindex: 160
                }, {
                    type_id: 1,
                    type_name: "rec1",
                    icon: "food",
                    display: resourceinfo.rec1,
                    quantity: parseInt(parseInt(seed.resources["city" + currentcityid].rec1[0] / 3600)),
                    tabindex: 161
                }, {
                    type_id: 2,
                    type_name: "rec2",
                    icon: "wood",
                    display: resourceinfo.rec2,
                    quantity: parseInt(parseInt(seed.resources["city" + currentcityid].rec2[0] / 3600)),
                    tabindex: 162
                }, {
                    type_id: 3,
                    type_name: "rec3",
                    icon: "stone",
                    display: resourceinfo.rec3,
                    quantity: parseInt(parseInt(seed.resources["city" + currentcityid].rec3[0] / 3600)),
                    tabindex: 163
                }, {
                    type_id: 4,
                    type_name: "rec4",
                    icon: "iron",
                    display: resourceinfo.rec4,
                    quantity: parseInt(parseInt(seed.resources["city" + currentcityid].rec4[0] / 3600)),
                    tabindex: 164
                }]
            };
            html.push(jsonT(model, templates_.resource_section))
        };
    var resetLastEffectItemTabindex_ = function () {
            last_effect_item_tabindex_ = 170
        };
    var sortKnights_ = function (knight_a, knight_b) {
            var knights = seed.knights["city" + currentcityid];
            return parseInt(knights[knight_b].combat) - parseInt(knights[knight_a].combat)
        };
    var updateTroopResource_ = function () {
            var units = $("#modal_attack_unitlist input");
            var total_units = 0;
            var load = 0;
            for (var i = 0; i < units.length; i++) {
                var unit_number = parseInt(units[i].value);
                if (!isNaN(unit_number) && (unit_number > 0)) {
                    total_units += unit_number;
                    var untid = parseInt(units[i].name);
                    load += unit_number * parseInt(unitstats["unt" + untid][5])
                }
            }
            load = parseInt(load + (load * parseInt(seed.tech.tch10) * 0.1));
            if (seed.playerEffects.loadExpire > unixtime()) {
                load *= 1.25
            }
            var resources = $("#modal_attack_transport input");
            var total_resources = 0;
            for (var i = 0; i < resources.length; i++) {
                if (parseInt(resources[i].value) > 0) {
                    total_resources += (parseInt(resources[i].value))
                }
            }
            $("#modal_attack_selnum").html(total_units);
            $("#modal_attack_vacancy").attr("name", load).html(load - total_resources);
            $("#modal_attack_selres").html(total_resources);
            $("#modal_attack_maxres").html(load)
        };
    var templates_ = {
        resource_section: {
            self: "{resources}",
            resources: ' <div class="section" id="modal_attack_transport" style="display: none;">   <div class="section_title">{RESOURCE_SECTION.title}</div>   <div class="section_content">   {$}   </div> </div>',
            "resources[*]": '<div class="resource_detail clearfix">   <img class="icon property" src="{RESOURCE_SECTION.site_image_url}img/{$.icon}_30.png" />   <div class="name property">{$.display}</div>   <input class="to_apply property" onkeyup="modal_attack_rec_vacancy({$.type_id});return false;" id="modal_attack_{$.type_name}" name="{$.type_id}" type="text" value="0" tabindex="{$.tabindex}" />   <div class="have property">/ <span id="modal_attack_rec_max_{$.type_name}">{$.quantity}</span></div>   <div class="action property">     <a class="button14 max" onclick="modal_attack_update_rec_max({$.type_id});return false;">       <span>{RESOURCE_SECTION.max}</span>     </a>   </div> </div>'
        },
        boost_section: {
            self: "{items}",
            items: ' <div class="section boost" id="{container_id}">   <div class="section_title">{title}</div>   <div class="section_content">   {$}   {post_html}   </div> </div>',
            "items[*]": '<div class="item clearfix">   <input type="checkbox" name="{$.id}" id="modal_attack_item{$.id}" tabindex="{$.tabindex}" {$.disabled} />   <div class="icon_own">     <img class="icon" src="{BOOST_SECTION.site_image_url}img/items/30/{$.id}.jpg" />     <div class="own {$.additional_class.own}"><span id="modal_attack_itemstock_{$.id}">{$.quantity}</span></div>   </div>   <div class="info">     <div>{$.item_detail.name}</div>     <div class="desc">{$.item_detail.description}</div>   </div>   <div class="buy {$.additional_class.buy}">     <div class="gem">{$.item_detail.price} <img src="{BOOST_SECTION.site_image_url}img/gem.png" /></div>     <div><a class="inlineButton blue14 modal_attack_buy_item" id="modal_attack_itemprice_{$.id}"><span>{BOOST_SECTION.buy}</span></a></div>   </div> </div>'
        }
    };
    init_();
    return {
        bind: bind_,
        changeMarchType: onMarchTypeChange_,
        marchTimeCalculator: marchTimeCalculator_,
        onAutoAttackHelpClick: onAutoAttackHelpClick_,
        saveRaid: saveRaid_,
        rendererBoostSection: rendererBoostSection_,
        rendererEstimateTime: rendererEstimateTime_,
        rendererResourceSection: rendererResourceSection_,
        sortKnights: sortKnights_,
        updateTroopResource: updateTroopResource_
    }
}(jQuery);
var cm = function (a) {
        a.util = a.util || {};
        var c = a.util;
        var b = {};
        c.preventDoubleClick = function (e, d) {
            d = d || 10;
            if (unixtime() <= (d + b[e])) {
                cm.log.l("prevent double click");
                return true
            } else {
                b[e] = unixtime();
                return false
            }
        };
        c.clearDouble = function (d) {
            b[d] = 0
        };
        c.rand = function (e, d) {
            return Math.round(Math.random() * (d - e)) + e
        };
        c.isChrome = function () {
            return Boolean(window.chrome)
        };
        c.isIE = function () {
            return ((document.all) && (navigator.appVersion.indexOf("MSIE") != -1))
        };
        c.clientTime = function () {
            return parseInt((new Date()).getTime() / 1000)
        };
        c.live = function () {
            cm.log.l("url=" + window.location.href);
            return window.location.href.indexOf("webby") == -1
        };
        return a
    }(cm || {});
cm.OOP = new function () {
    this.inherits = function (a, b) {
        if (typeof (a) != "function" || typeof (b) != "function") {
            return
        }
        a.prototype = new b();
        a.prototype.constructor = b
    }
}();
cm.BootLoaderCallback = function (e, d, a) {
    var b;
    this.launch = function (f) {
        if (!d) {
            d = [f]
        }
        e.apply(window, d)
    };
    this.getPriority = function () {
        return b
    };
    var c = function () {
            b = a ? a : 0
        };
    c()
};
cm.BootLoader = new function () {
    var a = [];
    var b = function (d, c) {
            return c.getPriority() - d.getPriority()
        };
    this.add = function (e, d, c) {
        if (typeof (e) == "function") {
            a.push(new cm.BootLoaderCallback(e, d, c))
        } else {
            if (e instanceof cm.BootLoaderCallback) {
                a.push(e)
            }
        }
    };
    this.dispatchCallbacks = function (c) {
        a.sort(b);
        while (a.length > 0) {
            var d = a.shift();
            d.launch(c)
        }
        jQuery(window).unbind("load", cm.BootLoader.dispatchCallbacks)
    }
}();
jQuery(window).bind("load", cm.BootLoader.dispatchCallbacks);
cm.TimeFormatter = {
    format: function (d) {
        var b = [];
        var a, c, f, e;
        e = [];
        a = Math.floor(d / 3600);
        e.push(Math.max(Math.floor(a / 10), 0));
        e.push(Math.max(a % 10, 0));
        b.push(e.join(""));
        d %= 3600;
        e = [];
        c = Math.floor(d / 60);
        e.push(Math.max(Math.floor(c / 10), 0));
        e.push(Math.max(c % 10, 0));
        b.push(e.join(""));
        d %= 60;
        e = [];
        f = d;
        e.push(Math.max(Math.floor(f / 10), 0));
        e.push(Math.max(f % 10, 0));
        b.push(e.join(""));
        return b.join(":")
    }
};
cm.StringFormatter = {
    ellipsis: function (b, a) {
        if (b.length > a) {
            return b.substr(0, a) + "..."
        } else {
            return b
        }
    },
    applyTemplate: function (a, c) {
        var b = {
            self: a
        };
        return jsonT(c, b)
    }
};
cm.WorldSettings = new function () {
    var a;
    this.hasKeyValuePair = function (b, c) {
        var d = a[b];
        return c === d
    };
    this.hasSetting = function (b) {
        return a[b] !== undefined
    };
    this.getSetting = function (b) {
        return a[b]
    };
    this.getSettingAsNumber = function (c, b) {
        var d = parseInt(a[c]);
        d = isNaN(d) ? b : d;
        return d
    };
    this.init = function (b) {
        a = b
    };
    this.isOn = function (b) {
        if (!a) {
            return false
        }
        var c = a[b.toUpperCase()];
        var d = c ? c.toLowerCase() : false;
        return d == "on" || d == "true" || d == "yes"
    }
}();
cm.KeyFilter = new function () {
    var b = this;
    var c = function (d) {
            return (d >= 8 && d <= 9) || (d >= 35 && d <= 40) || d == 46
        };
    var a = function (d) {
            return (d >= 48 && d <= 57) || (d >= 96 && d <= 105)
        };
    this.allowOnlyNumbers = function (f) {
        var d = f.keyCode ? f.keyCode : f.which ? f.which : f.charCode;
        if (!a(d) && !c(d)) {
            f.cancelBubble = true;
            f.returnValue = false;
            if (f.stopPropagation) {
                f.stopPropagation();
                f.preventDefault()
            }
        }
    }
}();
cm.TroopFactory = new function () {
    this.getUnit = function (e) {
        var d = e.substring(1);
        var b = "img/units/unit_" + d + "_30.png";
        var a = unitcost["unt" + d][0];
        var c = {};
        c.id = d;
        c.imageUrl = b;
        c.name = a;
        return c
    }
}();
cm.ResearchFactory = new function () {
    this.getResearch = function (c) {
        var a = c.substring(1);
        var d = techcost["tch" + a][0];
        var b = {};
        b.id = a;
        b.name = d;
        return b
    }
}();
cm.BuildingFinder = {
    getFirstInCurrentCity: function (i) {
        var c, f, h, g, j, k, d, m, b, a;
        var l = seed.buildings;
        var e = null;
        if (!(l instanceof Array) && typeof (l) == "object") {
            c = "city" + currentcityid;
            g = l[c];
            if (!(g instanceof Array) && typeof (g) == "object") {
                for (h in g) {
                    j = g[h];
                    k = parseInt(j[0]);
                    if (k === i) {
                        d = parseInt(j[1]);
                        m = j[2];
                        b = j[3];
                        f = c.substring(4);
                        e = {
                            buildingId: b,
                            cityId: f,
                            slot: m,
                            level: d
                        };
                        return e
                    }
                }
            }
        }
        return null
    }
};
cm.IframeUtil = new function () {
    var b = {};
    var a = function (d) {
            var c = d.srcElement ? d.srcElement : d.target;
            var f = c.id;
            $(f).stopObserving("load", a);
            document.body.removeChild(b[f]);
            delete b[f]
        };
    this.post = function (l, c) {
        var e = document.createElement("form");
        if ($(l)) {
            b[l] = e;
            $(l).observe("load", a)
        }
        var d = c.split("?");
        var n = d[0];
        var j = d.length > 1 ? d[1] : "";
        e.setAttribute("target", l);
        e.setAttribute("action", n);
        e.setAttribute("method", "post");
        var f = j.split("&");
        var m = f.length;
        var k, g, p, o, h;
        for (k = 0; k < m; k++) {
            g = f[k].split("=");
            p = g[0];
            o = g.length > 1 ? g[1] : "";
            h = document.createElement("input");
            h.setAttribute("type", "hidden");
            h.setAttribute("name", p);
            h.setAttribute("value", o);
            e.appendChild(h)
        }
        document.body.appendChild(e);
        e.submit();
        if (!$(l)) {
            document.body.removeChild(e)
        }
    }
}();
cm = cm || {};
cm.AutoAttackLevelLock = 20;
cm.AutoAttackManagerController = function (g, t) {
    var i = null;
    var p = g;
    var w = t;
    var z = null;
    var o = 0;
    var d = null;
    var B = function () {
            var D = w.getHtmlElement().find(".main .raids");
            D.bind("deleteraid", v);
            D.bind("editraid", a);
            D.bind("openraid", x);
            D.bind("refreshall", n);
            var C = w.getStartButton();
            C.click(b);
            C.bind("mouseenter mouseleave", e);
            w.getHtmlElement().find(".header .pause_setting .label a").click(f);
            w.getHtmlElement().find(".header .settings_input").change(l);
            w.getHtmlElement().find(".raids_manupulate .addraid").click(q);
            w.getHtmlElement().find(".main .raids .add_raid_message a").click(q);
            w.getHtmlElement().find(".raids_bulk_controller .inlineButton").click(A);
            w.getHtmlElement().find(".main .raids").bind("scroll DOMMouseScroll mousewheel", j);
            cm.Tooltip.setTooltip({
                htmlElement: C,
                proxyElement: w.getStartButtonTooltipProxy(),
                tooltip: "Raid Timer allows you to Raid Barbarian camps continously for up to 24 hours. Barbarian Raids can only be active when the timer is running. Once the Raid Timer times-out, all Barbarian Raids will be stopped until the timer is restarted and raids are resumed."
            });
            cm.Tooltip.setTooltip({
                htmlElement: w.getHtmlElement().find(".header .report_setting a"),
                tooltip: "Note that while you are not logged in no Barbarian Raid reports will be generated, and all Raid reports will be cleared after 3 days. Checking this option will allow auto delete of all battle reports from Barbarian Raids."
            });
            if (null === d) {
                d = setInterval(h, 1000)
            }
        };
    var r = function () {
            if (null !== d) {
                clearInterval(d);
                d = null
            }
            w.destruct();
            i = w = p = null
        };
    var u = function (C) {
            i = C;
            i("#modal_rallypoint_tabs .button20").before("<a class='tab' id='modal_rallypoint_tab_autoattack'><span>" + g_js_strings.modal_auto_attack.barbarianraids + "</span></a>");
            var D = i("#modal_rallypoint_tab_autoattack");
            if (seed.player.title >= cm.AutoAttackLevelLock) {
                D.click(y)
            } else {
                D.addClass("disabled");
                D.mouseover(function (E) {
                    showTooltip(g_js_strings.modal_openRallypoint.raidtooltip, E.target, E.originalEvent, "mainbody");
                    E.stopPropagation()
                });
                D.mouseout(function (E) {
                    removeTooltip();
                    E.stopPropagation()
                })
            }
            k(false)
        };
    var s = function (C) {
            w.getHtmlElement().find(".raid").trigger("hideothersdetails", [C])
        };
    var q = function (C) {
            modal_attack(cm.MARCH_TYPES.MARCH_TYPE_BARBARIAN, "", "", {
                callbackSaveRaid: k
            });
            C.preventDefault();
            C.stopPropagation()
        };
    var A = function (D) {
            if (i(this).find("span")[0].className == "stopAll") {
                var C = {
                    cancel: {
                        txt: g_js_strings.commonstr.cancel,
                        cls: "inlineButton brown20",
                        exe: function () {
                            Modal.hideModal()
                        }
                    },
                    okay: {
                        txt: "Stop All Barbarian Raidings",
                        cls: "inlineButton blue20",
                        description: "Raids will stop after march has been completed and troops have returned.",
                        exe: function () {
                            Modal.hideModal();
                            p.setBulkAction("stopAll", n)
                        }
                    }
                };
                Modal.multiButton({
                    additionalClass: "v2",
                    title: "Stop All Barbarian Raidings",
                    body: '<span style="font-weight: bold; font-size: 13px">Are you sure you want to stop all Barbarian Raids?</span>',
                    buttons: C,
                    buttonContainerClass: "inlineButtonRow clearfix",
                    hasInlineDescription: true
                })
            } else {
                p.setBulkAction(i(this).find("span")[0].className, n)
            }
        };
    var m = function (C) {
            w.refresh();
            B();
            if (C) {
                y()
            }
        };
    var v = function (D, C) {
            Modal.confirm({
                title: g_js_strings.modal_auto_attack.deleteraidconfirmtitle,
                text: g_js_strings.modal_auto_attack.deleteraidconfirmcontent,
                okay: c,
                data: C
            })
        };
    var c = function (C) {
            p.deleteRaid(C, n)
        };
    var a = function (E, F) {
            w.setEditMode((F.action === "start") ? true : false);
            if (F.action === "start") {
                z = true;
                var D = w.getHtmlElement().find(".main .raids");
                var C = D.scrollTop();
                C = Math.min(C, F.top);
                o = C = Math.max(C, F.top + F.height - D.outerHeight());
                D.scrollTop(C)
            } else {
                z = false
            }
        };
    var x = function (D, C) {
            s(C)
        };
    var f = function (C) {
            Modal.showAlert(g_js_strings.modal_auto_attack.pausehelp);
            C.preventDefault();
            C.stopPropagation()
        };
    var j = function (C) {
            if (z) {
                w.getHtmlElement().find(".main .raids").scrollTop(o);
                C.preventDefault()
            }
        };
    var y = function (C) {
            modal_openRallypoint_tab("autoattack", 3)
        };
    var n = function () {
            k();
            setTimeout(update_seed_ajax, 1000)
        };
    var l = function () {
            var C = {};
            switch (this.name) {
            case "autoDelReport":
                C[this.name] = this.checked ? 1 : 0;
                break;
            case "pausePct":
                C[this.name] = this.value;
                break
            }
            p.setSettings(C, {
                onSuccess: k,
                onFailure: w.setSetting
            })
        };
    var b = function (C) {
            C.preventDefault();
            p.resetTimer(k)
        };
    var e = function (C) {
            w.setStartButtonState({
                hover: ("mouseenter" === C.type)
            });
            C.stopPropagation()
        };
    var h = function () {
            var C = i("#modal_rallypoint_autoattack");
            if (C.length < 0 || (C[0] != (w.getHtmlElement())[0])) {
                r();
                return
            }
            var D = Math.max(0, parseInt(p.getData().settings.endTime) - unixtime());
            if (!isNaN(D) && D > 0) {
                w.updateTimeLeft(D)
            } else {
                w.updateTimeLeft(0)
            }
        };
    var k = function (C) {
            if (arguments.length < 1) {
                C = true
            }
            if (d !== null) {
                clearInterval(d);
                d = null
            }
            p.pull(m, C)
        };
    u(jQuery)
};
cm = cm || {};
cm.AutoAttackManagerModel = function () {
    var c = null;
    var e = function () {
            c = {
                settings: {
                    autoDelReport: 1,
                    pausePct: 100,
                    raidStartTime: unixtime() - 100000,
                    endTime: unixtime() - 100000
                },
                queue: []
            }
        };
    var b = function (j, l) {
            var k = {
                action: "deleteMarch",
                marchId: j
            };
            h(k, {
                onSuccess: function (m) {
                    for (var q = c.queue.length - 1; q >= 0; --q) {
                        try {
                            if (j == c.queue[q].cityMarches.marchId) {
                                var t = c.queue[q].cityMarches.cityId;
                                var n = seed.units["city" + t];
                                for (var o = 0; o < 13; ++o) {
                                    var p = parseInt(m["unit" + o + "Return"]);
                                    if (!isNaN(p) && (p > 0)) {
                                        n["unt" + o] = parseInt(n["unt" + o]) + p
                                    }
                                }
                                cityinfo_army();
                                var s = "city" + t;
                                delete seed.queue_atkp[s]["m" + j];
                                if (Object.keys(seed.queue_atkp[s]).length == 0) {
                                    seed.queue_atkp[s] = []
                                }
                                seed.knights["city" + t]["knt" + c.queue[q].cityMarches.knightId].knightStatus = 1;
                                break
                            }
                        } catch (r) {
                            cm.log.l("knight doesn't exist.")
                        }
                    }
                    l()
                }
            }, true)
        };
    var i = function () {
            return c
        };
    var d = function (l, k) {
            var j = {
                action: "getMarches"
            };
            h(j, {
                onSuccess: function (m) {
                    a(m);
                    l(k)
                }
            }, true)
        };
    var f = function (j, k) {
            if (c.queue.length < 1) {
                return
            }
            h({
                action: j
            }, {
                onSuccess: k
            })
        };
    var g = function (k, m) {
            var l = {
                action: "updateSettings"
            };
            for (var j in k) {
                l["settings[" + j + "]"] = k[j]
            }
            h(l, {
                onFailure: m.onFailure,
                onSuccess: function () {
                    jQuery.extend(c.settings, k);
                    m.onSuccess()
                }
            })
        };
    var h = function (l, k, j) {
            jQuery.extend(true, l, g_ajaxparams, {
                ctrl: "BotManager",
                "settings[cityId]": currentcityid
            });
            new Ajax.Request(g_ajaxpath + "ajax/_dispatch.php" + g_ajaxsuffix, {
                method: "post",
                parameters: l,
                onSuccess: function (n) {
                    var m = n.responseText.evalJSON();
                    if (m.ok) {
                        if (!k.onSuccess) {
                            return
                        }
                        if (j) {
                            k.onSuccess(m)
                        } else {
                            k.onSuccess()
                        }
                    } else {
                        Modal.showAlert(printLocalError((m.error_code || null), (m.msg || null), (m.feedback || null)));
                        if (k.onFailure) {
                            k.onFailure()
                        }
                    }
                },
                onFailure: k.onFailure
            })
        };
    var a = function (j) {
            var k = j.settings;
            if (k) {
                jQuery.extend(c.settings, k);
                c.settings.endTime = parseInt(c.settings.raidStartTime) + 86400;
                c.settings.autoDelReport = parseInt(c.settings.autoDelReport)
            }
            c.queue = j.queue
        };
    e();
    this.deleteRaid = b;
    this.getData = i;
    this.pull = d;
    this.setBulkAction = f;
    this.setSettings = g;
    this.resetTimer = function (j) {
        h({
            action: "resetRaidTimer"
        }, {
            onSuccess: j
        })
    }
};
cm = cm || {};
cm.AutoAttackManagerView = function (f) {
    var e = null;
    var l = null;
    var i = null;
    var j = -1;
    var m = [];
    var d = {};
    var h = function (n) {
            e = n;
            l = f
        };
    var k = function () {
            for (var n = m.length - 1; n >= 0; --n) {
                m[n].destruct();
                delete m[n]
            }
            m.splice(0, m.length);
            m = [];
            if (i) {
                i.unbind();
                i.find("*").unbind();
                i = null
            }
            j = -1;
            d = {}
        };
    var c = function () {
            var r = l.getData();
            var q = e.extend(true, {}, r, {
                city_name: currentcityinfo[1],
                city_number: g_mapObject.getSlotCity(1, currentcityid),
                g_js_strings: g_js_strings,
                instance_guid: (new Date()).getTime(),
                site_image_url: stimgUrl
            });
            e("#modal_rallypoint_autoattack").remove();
            e("#modal_rallypoint .rallypointwrap").append(jsonT(q, cm.AUTO_ATTACK_MANAGER_RULE));
            i = e("#modal_rallypoint_autoattack");
            i.find("> .main > .glass_pane").width(cm.utils.ScrollbarWidthCalculator.get());
            g();
            if (r.queue.length > 0) {
                i.find("> .main > .raids").html("")
            }
            for (var o = 0; o < r.queue.length; ++o) {
                try {
                    var n = new cm.AutoAttackRaidModel(r.queue[o]);
                    var p = new cm.AutoAttackRaidView(n);
                    m.push(new cm.AutoAttackRaidController(n, p))
                } catch (s) {
                    cm.log.l(["Create raid instance failed. (", o, ")"].join(""))
                }
            }
        };
    var b = function (n) {
            i.find(".glass_pane").css("display", n ? "block" : "none")
        };
    var g = function () {
            var n = i.find(".header .settings_input");
            var o = l.getData();
            n[0].checked = o.settings.autoDelReport;
            n[1].value = o.settings.pausePct
        };
    var a = function (r) {
            var o = null;
            for (var n in r) {
                var q = r[n];
                var p = d[n];
                if (p !== q) {
                    if (null === o) {
                        o = i.find(".start_button")
                    }
                    if (q) {
                        o.addClass(n)
                    } else {
                        o.removeClass(n)
                    }
                }
                d[n] = q
            }
        };
    h(jQuery);
    this.render = c;
    this.setEditMode = b;
    this.setSetting = g;
    this.setStartButtonState = a;
    this.destruct = function () {
        k();
        e = l = null
    };
    this.getHtmlElement = function () {
        return i
    };
    this.getStartButton = function () {
        return i.find("area")
    };
    this.getStartButtonTooltipProxy = function () {
        return i.find(".header img")[0]
    };
    this.hide = function () {
        i.css("display", "none")
    };
    this.refresh = function () {
        k();
        c();
        b(false)
    };
    this.updateTimeLeft = function (n) {
        if (n === j) {
            return
        }
        if (0 === n) {
            i.find(".countdown").html(g_js_strings.modal_auto_attack.timedout.toUpperCase());
            a({
                blinking: true
            })
        } else {
            i.find(".countdown").html(timestr(n, 2));
            a({
                blinking: false
            })
        }
        j = n
    }
};
cm = cm || {};
cm.AutoAttackRaidController = function (e, m) {
    var g = null;
    var k = e;
    var s = m;
    var h = this;
    var v = function () {
            s.getButton("stop").click(f);
            s.getButton("resume").click(o);
            s.getButton("edit").click(b);
            s.getButton("save").click(d);
            s.getButton("delete").click(i);
            s.getButton("cancel").click(p);
            s.getHtmlElement().bind("hideothersdetails", l);
            s.getHtmlElement().find(".raid_title .toggler").click(j);
            s.getHtmlElement().find(".select_bookmarks select").change(n);
            s.getHtmlElement().find(".coordinates_editor a").click(t);
            s.getHtmlElement().find("input").keydown(u);
            s.getHtmlElement().find("input").keyup(s.updateTripTime);
            if (g.browser.msie) {
                s.getHtmlElement().find(".knight_selector").bind("mousedown change blur", a)
            }
        };
    var r = function (w) {
            g = w;
            v()
        };
    var n = function (w) {
            var x = this.value.split("_");
            s.setLocation(x[0], x[1]);
            s.setCoordinateInputMethod(0)
        };
    var p = function () {
            c(false)
        };
    var t = function (x) {
            var w = g(this.parentNode);
            if (w.hasClass("manual_input")) {
                s.setCoordinateInputMethod(1)
            } else {
                s.setCoordinateInputMethod(0)
            }
        };
    var i = function () {
            if (s.getButton("delete").hasClass("grey8")) {
                return
            }
            s.getHtmlElement().trigger("deleteraid", [k.getData().cityMarches.marchId])
        };
    var j = function () {
            k.open(!k.open());
            s.displayDetails()
        };
    var b = function (w) {
            if (s.getButton("edit").hasClass("grey8")) {
                return
            }
            c(true)
        };
    var l = function (x, w) {
            if (w != k.getData().cityMarches.marchId) {
                s.displayDetails(false)
            }
        };
    var u = function (x) {
            var w = {
                "48": true,
                "49": true,
                "50": true,
                "51": true,
                "52": true,
                "53": true,
                "54": true,
                "55": true,
                "56": true,
                "57": true,
                "96": true,
                "97": true,
                "98": true,
                "99": true,
                "100": true,
                "101": true,
                "102": true,
                "103": true,
                "104": true,
                "105": true,
                "8": true,
                "46": true,
                "37": true,
                "39": true,
                "9": true
            };
            if (!w[x.keyCode]) {
                x.preventDefault()
            }
        };
    var a = function (w) {
            if ("mousedown" == w.type) {
                g(this).addClass("selected")
            } else {
                g(this).removeClass("selected")
            }
        };
    var d = function () {
            c(false);
            var w = s.getHtmlElement().find(".information .details .manual_input input");
            var y = s.getHtmlElement().find(".knight_selector");
            var A = s.getHtmlElement().find(".troops .troop_info .details .quantity .editor input");
            var z = {
                knightId: y[0].value,
                toXCoord: w[0].value,
                toYCoord: w[1].value
            };
            for (var x = A.length - 1; x >= 0; --x) {
                z["unit" + A[x].name + "Count"] = A[x].value
            }
            k.save(z, q)
        };
    var q = function (w) {
            s.getHtmlElement().trigger("refreshall")
        };
    var f = function (y) {
            if (s.getButton("stop").hasClass("grey8")) {
                return
            }
            var w = k.getData().botMarches.botMarchStatus;
            if (w == cm.BOT_STATUS.BOT_MARCH_MARCHING || w == cm.BOT_STATUS.BOT_MARCH_RETURNING) {
                var x = {
                    cancel: {
                        txt: g_js_strings.commonstr.cancel,
                        cls: "inlineButton brown20",
                        exe: function () {
                            Modal.hideModal()
                        }
                    },
                    okay: {
                        txt: "Stop After Troops Return",
                        cls: "inlineButton blue20",
                        description: "Raid will stop after march has been completed and troops have returned.",
                        exe: function () {
                            Modal.hideModal();
                            k.action("stopMarch", q)
                        }
                    }
                };
                Modal.multiButton({
                    additionalClass: "v2",
                    title: "Stop after Raiding",
                    body: '<span style="font-weight: bold; font-size: 13px">Are you sure you want to stop this Barbarian Raid?</span>',
                    buttons: x,
                    buttonContainerClass: "inlineButtonRow clearfix",
                    hasInlineDescription: true
                })
            } else {
                k.action("stopMarch", q)
            }
        };
    var o = function () {
            if (s.getButton("edit").hasClass("grey8")) {
                return
            }
            k.action("resumeMarch", q)
        };
    var c = function (w) {
            s.displayDetails(true);
            s.setEditMode(w)
        };
    r(jQuery);
    this.destruct = function () {
        s.destruct();
        g = k = s = h = null
    }
};
cm = cm || {};
cm.AutoAttackRaidStatus = function () {
    var a = [];
    if ("on" == cm.features.AUTO_ATTACK) {
        g_js_strings.attack_generatequeue.raidresting = "Unloading Loot";
        g_js_strings.modal_auto_attack.resting = "Unloading Loot";
        g_js_strings.modal_auto_attack.stopping = "Stopping";
        a[cm.BOT_STATUS.BOT_MARCH_MARCHING] = {
            css_class: "marching",
            display: g_js_strings.commonstr.marching,
            action_button: "stop"
        };
        a[cm.BOT_STATUS.BOT_MARCH_RETURNING] = {
            css_class: "returning",
            display: g_js_strings.commonstr.returning,
            action_button: "stop"
        };
        a[cm.BOT_STATUS.BOT_MARCH_STOPPED] = {
            css_class: "stopped",
            display: g_js_strings.modal_auto_attack.stopped,
            action_button: "resume"
        };
        a[cm.BOT_STATUS.BOT_MARCH_INSUFFICIENT_TROOPS] = {
            css_class: "insufficient_troops",
            display: g_js_strings.modal_auto_attack.insufficienttroops,
            action_button: "resume"
        };
        a[cm.BOT_STATUS.BOT_MARCH_MAX_RAIDS_EXCEEDED] = {
            css_class: "max_raids_exceeded",
            display: g_js_strings.modal_auto_attack.maxraidsexceeded,
            action_button: "resume"
        };
        a[cm.BOT_STATUS.BOT_MARCH_TIMED_OUT] = {
            css_class: "timed_out",
            display: g_js_strings.modal_auto_attack.timedout,
            action_button: "resume"
        };
        a[cm.BOT_STATUS.BOT_MARCH_RESTING] = {
            css_class: "resting",
            display: g_js_strings.modal_auto_attack.resting,
            action_button: "stop"
        };
        a[cm.BOT_STATUS.BOT_MARCH_STOPPING] = {
            css_class: "resting",
            display: g_js_strings.modal_auto_attack.stopping,
            action_button: "resume"
        }
    }
    return a
}();
cm.AutoAttackRaidModel = function (e) {
    var b = "autoAttackUI_open_";
    var f = null;
    var d = null;
    var c = function (g) {
            f = g;
            f.botMarches.open = false
        };
    var a = function (h, i, g) {
            jQuery.extend(true, h, g_ajaxparams, {
                ctrl: "BotManager",
                "settings[cityId]": f.cityMarches.fromCityId,
                "settings[marchId]": f.cityMarches.marchId
            });
            new Ajax.Request(g_ajaxpath + "ajax/_dispatch.php" + g_ajaxsuffix, {
                method: "post",
                parameters: h,
                onSuccess: function (k) {
                    var j = k.responseText.evalJSON();
                    if (j.ok) {
                        if (g) {
                            i(j)
                        } else {
                            i()
                        }
                    } else {
                        Modal.showAlert(printLocalError((j.error_code || null), (j.msg || null), (j.feedback || null)))
                    }
                },
                onFailure: function () {}
            })
        };
    c(e);
    this.getData = function () {
        return f
    };
    this.action = function (g, h) {
        a({
            action: g
        }, h)
    };
    this.open = function (h) {
        var g = b + f.cityMarches.fromCityId;
        if (undefined === h) {
            if (null === d) {
                if (cm.ClientSideCookieManager.getCookie(g) == f.cityMarches.marchId) {
                    d = true
                } else {
                    d = false
                }
            }
            return d
        }
        d = h ? true : false;
        if (d) {
            cm.ClientSideCookieManager.setCookie(g, f.cityMarches.marchId)
        } else {
            if (cm.ClientSideCookieManager.getCookie(g) == f.cityMarches.marchId) {
                cm.ClientSideCookieManager.deleteCookie(g)
            }
        }
    };
    this.save = function (g, h) {
        g.fromCityId = f.cityMarches.fromCityId;
        g.marchId = e.cityMarches.marchId;
        g.is_edit = true;
        cm.MarchModal.saveRaid(g, "cityMarches", function () {
            for (var i in g) {
                f.cityMarches[i] = g[i]
            }
            if (h) {
                h()
            }
        })
    }
};
cm = cm || {};
cm.AutoAttackRaidView = function (g) {
    var f = null;
    var p = null;
    var o = null;
    var l = null;
    var j = null;
    var q = function (r) {
            if (undefined == r) {
                r = p.open()
            }
            if (r) {
                l.find(".information").css("display", "block");
                l.find(".toggler").addClass("open");
                l.trigger("openraid", p.getData().cityMarches.marchId)
            } else {
                l.find(".information").css("display", "none");
                l.find(".toggler").removeClass("open")
            }
            p.open(r)
        };
    var c = function (r) {
            if (r) {
                return f(o.find("." + r))
            }
            return o.find(".inlineButton")
        };
    var h = function (r) {
            f = r;
            p = g;
            d()
        };
    var d = function () {
            var u = p.getData();
            var r = [];
            var w = seed.units["city" + currentcityid];
            for (var s = 1; s < 13; ++s) {
                var t = "unt" + s;
                r.push({
                    type_id: t.split("unt")[1],
                    type: unitcost[t][0],
                    quantity: u.cityMarches["unit" + s + "Return"],
                    stock: w[t]
                })
            }
            var v = u.botMarches.botMarchStatus;
            if (v == cm.BOT_STATUS.BOT_MARCH_STOPPED && u.botMarches.marchStatus != cm.MARCH_STATUS.MARCH_STATUS_STOPPED) {
                v = cm.BOT_STATUS.BOT_MARCH_STOPPING
            }
            u = f.extend(true, {}, u, {
                g_js_strings: g_js_strings,
                knight_name: seed.knights["city" + currentcityid]["knt" + u.cityMarches.knightId].knightName.split(" ")[0],
                last_march: formatDateByUnixTime(u.cityMarches.marchTimestamp),
                round_trip: timestr(u.cityMarches.returnEta - u.cityMarches.marchTimestamp),
                site_image_url: stimgUrl,
                status: cm.AutoAttackRaidStatus[v].display,
                status_css: cm.AutoAttackRaidStatus[v].css_class,
                troops: r
            });
            if (!l) {
                f("#modal_rallypoint_autoattack .main .raids").append(jsonT(u, cm.AUTO_ATTACK_RAID_RULE));
                l = f("#modal_rallypoint_autoattack .main .raids .raid").last()
            } else {
                o = null;
                j = null;
                l.find("> div").replaceWith(f(jsonT(u, cm.AUTO_ATTACK_RAID_RULE)).find("> div"))
            }
            o = l.find(".raid_controller");
            j = l.find(".troops");
            n();
            q();
            e(cm.AutoAttackRaidStatus[v].action_button, true);
            b(false);
            switch (v) {
            case cm.BOT_STATUS.BOT_MARCH_STOPPING:
                c("resume").removeClass("brown8").addClass("grey8");
            case cm.BOT_STATUS.BOT_MARCH_MARCHING:
            case cm.BOT_STATUS.BOT_MARCH_RETURNING:
                c("edit").removeClass("brown8").addClass("grey8");
                c("delete").removeClass("brown8").addClass("grey8");
                break
            }
        };
    var i = function (t) {
            var u = l.find(".select_bookmarks select")[0].options;
            u.length = 1;
            for (var r = 0; r < t.length; ++r) {
                var s = t[r];
                if (undefined == s.bookmark_id) {
                    continue
                }
                u[u.length] = new Option([s.name, " (", s.left, ", ", s.top, ")"].join(""), s.left + "_" + s.top)
            }
        };
    var a = function (r) {
            if (0 == r) {
                l.find(".coordinates_editor").removeClass("bookmarks")
            } else {
                cm.Bookmarks.get(i);
                l.find(".coordinates_editor").addClass("bookmarks")
            }
        };
    var b = function (r) {
            if (r) {
                l.addClass("editing");
                j.find(".quantity").each(k);
                l.find(".knight_selector")[0].value = p.getData().cityMarches.knightId
            } else {
                l.removeClass("editing")
            }
            l.trigger("editraid", {
                raid_id: p.getData().cityMarches.marchId,
                action: r ? "start" : "end",
                top: l[0].offsetTop,
                height: l.outerHeight()
            });
            if (r) {
                l.find(".glass_pane").css("display", "none")
            }
        };
    var k = function (r, s) {
            var u = f(s);
            var t = parseInt(u.find(".label").html());
            if (isNaN(t)) {
                t = 0
            }
            u.find("input").val(t)
        };
    var n = function () {
            var t = seed.knights["city" + currentcityid];
            var v = l.find(".knight_selector")[0].options;
            v.length = 0;
            if (undefined == t || t.length < 1) {
                v[v.length] = new Option(g_js_strings.modal_attack.noknightavailable, 0);
                return
            } else {
                v[v.length] = new Option(g_js_strings.modal_attack.dchooseknightd, 0)
            }
            var s = Object.keys(t);
            s.sort(cm.MarchModal.sortKnights);
            for (var r = 0; r < s.length; r++) {
                var u = parseInt(s[r].split("knt")[1]);
                if (u == parseInt(seed.leaders["city" + currentcityid].resourcefulnessKnightId) || u == parseInt(seed.leaders["city" + currentcityid].intelligenceKnightId) || u == parseInt(seed.leaders["city" + currentcityid].combatKnightId) || u == parseInt(seed.leaders["city" + currentcityid].politicsKnightId)) {
                    continue
                }
                if (1 != t[s[r]].knightStatus && u != parseInt(p.getData().cityMarches.knightId)) {
                    continue
                }
                v[v.length] = new Option([t[s[r]].knightName, " (", t[s[r]].combat, ")"].join(""), u)
            }
        };
    var e = function (r, s) {
            o.find("." + r).css("display", s ? "inline-block" : "")
        };
    var m = function () {
            var u = l.find(".troop_info input");
            var s = {};
            for (var t = u.length - 1; t >= 0; --t) {
                s[u[t].name] = u[t].value
            }
            var r = l.find(".information .details .manual_input input");
            l.find(".information .details .round_trip").html(cm.MarchModal.marchTimeCalculator(s, r[0].value, r[1].value, true))
        };
    h(jQuery);
    this.displayDetails = q;
    this.getButton = c;
    this.redraw = d;
    this.setBookmarks = i;
    this.setCoordinateInputMethod = a;
    this.setEditMode = b;
    this.updateTripTime = m;
    this.destruct = function () {
        l.unbind();
        l.find("*").unbind();
        f = p = l = o = j = null
    };
    this.getHtmlElement = function () {
        return l
    };
    this.setLocation = function (s, t) {
        var r = l.find(".information .details .manual_input input");
        r[0].value = s;
        r[1].value = t;
        m()
    }
};
cm = cm || {};
cm.AutoAttackManagerTemplateLoader = function (b) {
    if ((undefined == cm.features.AUTO_ATTACK) || ("on" != cm.features.AUTO_ATTACK)) {}
    var a = function () {
            cm.AUTO_ATTACK_MANAGER_RULE = {
                self: null
            };
            cm.AUTO_ATTACK_RAID_RULE = {
                self: null,
                "self.troops[*]": null
            };
            if ("on" == cm.features.AUTO_ATTACK) {
                cm.ClientSideTemplate.getTemplate("jsonT/autoAttack_26.html", c)
            }
        };
    var c = function (e) {
            var d = e.responseText.split("<!---->");
            if (d.length < 3) {
                cm.log.l("Auto attack template is corrupted.")
            }
            cm.AUTO_ATTACK_MANAGER_RULE.self = d[0];
            cm.AUTO_ATTACK_RAID_RULE.self = d[1];
            cm.AUTO_ATTACK_RAID_RULE["self.troops[*]"] = d[2]
        };
    b(document).ready(a);
    return {}
}(jQuery);
var cm = cm || {};
cm.CustomEventDispatcher = function () {
    var b = {};
    var a = function (f, g) {
            var c = -1;
            if (b[f]) {
                var e;
                var d = b[f].length;
                var h = b[f];
                for (e = 0; e < d; e++) {
                    var j = h[e];
                    if (j == g) {
                        c = e;
                        break
                    }
                }
            }
            return c
        };
    this.addEventListener = function (c, d) {
        if (typeof (d) !== "function") {
            return
        }
        if (b[c]) {
            if (a(c, d) < 0) {
                b[c].push(d)
            }
        } else {
            b[c] = [d]
        }
    };
    this.removeEventListener = function (d, f) {
        var c = a(d, f);
        if (c >= 0) {
            var e = b[d];
            e.splice(c, 1)
        }
    };
    this.dispatchCustomEvent = function (g) {
        var f = g.getType();
        var h = b[f];
        if (h) {
            var c = h.slice(0);
            var d = c.length;
            var e;
            for (e = 0; e < d; e++) {
                var j = c[e];
                if (typeof (j) == "function") {
                    j(g)
                }
            }
            c = null
        }
    }
};
cm.CustomEvent = function (c) {
    var b = c;
    var a = null;
    this.getTarget = function () {
        return a
    };
    this.setTarget = function (d) {
        a = d
    };
    this.getType = function () {
        return b
    }
};
cm.BaseDialog = function (c) {
    cm.CustomEventDispatcher.call(this);
    var e = this;
    var d;
    var b;
    var a;
    var f = function () {
            a = false;
            b = c || document.body;
            d = document.createElement("div");
            d.className = "dialogContainer"
        };
    this.show = function () {
        a = true;
        b.appendChild(d)
    };
    this.close = function () {
        try {
            var i = a;
            a = false;
            b.removeChild(d);
            if (i) {
                var g = new cm.DialogEvent(cm.DialogEvent.CLOSE);
                g.setTarget(e);
                e.dispatchCustomEvent(g)
            }
        } catch (h) {}
    };
    this.isActive = function () {
        return a
    };
    this.getHtmlElement = function () {
        return d
    };
    this.setParentElement = function (g) {
        b = g ? g : b
    };
    f()
};
cm.OOP.inherits(cm.BaseDialog, cm.CustomEventDispatcher);
cm.BaseDialog.prototype.getPriority = function () {
    return 0
};
cm.BaseCollection = function () {
    cm.CustomEventDispatcher.call(this);
    var d = this;
    var c = [];
    var b = 0;
    var a = {};
    this.add = function (i, g) {
        var j = i.getKey();
        if (i && !a[j]) {
            a[j] = i;
            c.push(i);
            var h = new cm.CollectionEvent(cm.CollectionEvent.ELEMENT_ADDED);
            h.setTarget(i);
            if (g) {
                c.sort(g)
            }
            d.dispatchCustomEvent(h)
        }
    };
    this.hasNext = function () {
        return b < c.length - 1
    };
    var e = function (g, i) {
            var j = {
                previousPosition: g,
                currentPosition: i
            };
            var h = new cm.CollectionEvent(cm.CollectionEvent.POSITION_CHANGED);
            h.setTarget(j);
            d.dispatchCustomEvent(h)
        };
    this.next = function () {
        if (d.hasNext()) {
            var g = b;
            b++;
            e(g, b);
            return c[b]
        } else {
            return null
        }
    };
    this.getElementAtCurrentPosition = function () {
        var g = c.slice(0);
        return g[b]
    };
    this.getElementAtPosition = function (g) {
        var h = c.slice(0);
        return h[g]
    };
    var f = function (h) {
            var g, k;
            var j = c.slice(0);
            for (g in j) {
                k = j[g];
                if (k.hasOwnProperty("getKey") && k.getKey() == h) {
                    return g
                }
            }
            return -1
        };
    this.getElementPosition = function (g) {
        return f(g.getKey())
    };
    this.getElementByKey = function (g) {
        return a[g]
    };
    this.remove = function (j) {
        var i = j.getKey();
        var g = f(i);
        if (g >= 0) {
            delete a[i];
            c.splice(g, 1);
            var h = new cm.CollectionEvent(cm.CollectionEvent.ELEMENT_REMOVED);
            h.setTarget(j);
            d.dispatchCustomEvent(h)
        }
    };
    this.clear = function () {
        var g, h;
        for (g in _collections) {
            h = _collections[g];
            this.remove(h)
        }
    };
    this.hasPrevious = function () {
        return b > 0
    };
    this.previous = function () {
        if (d.hasPrevious()) {
            var g = b;
            b--;
            e(g, b);
            return c[b]
        } else {
            return null
        }
    };
    this.getCount = function () {
        return c.length
    };
    this.jumpTo = function (h) {
        if (h != b && h >= 0 && h < c.length) {
            var g = b;
            b = h;
            e(g, h);
            return c[b]
        }
    };
    this.getCurrentPosition = function () {
        return b
    };
    this.toArray = function () {
        return c.slice(0)
    }
};
cm.OOP.inherits(cm.BaseCollection, cm.CustomEventDispatcher);
cm.CollectionEvent = function (a) {
    cm.CustomEvent.call(this, a)
};
cm.OOP.inherits(cm.CollectionEvent, cm.CustomEvent);
cm.CollectionEvent.ELEMENT_ADDED = "elementAdded";
cm.CollectionEvent.ELEMENT_REMOVED = "elementRemoved";
cm.CollectionEvent.POSITION_CHANGED = "positionChanged";
cm.DialogEvent = function (b) {
    cm.CustomEvent.call(this, b);
    var a = null;
    this.setMessage = function (c) {
        a = c
    };
    this.getMessage = function (c) {
        return a
    }
};
cm.OOP.inherits(cm.DialogEvent, cm.CustomEvent);
cm.DialogEvent.CLOSE = "close";
cm.DialogEvent.OK = "ok";
cm.DialogEvent.CANCEL = "cancel";
cm.RewardEvent = function (a) {
    cm.CustomEvent.call(this, a)
};
cm.OOP.inherits(cm.RewardEvent, cm.CustomEvent);
cm.RewardEvent.SUCESS = "RewardEvent_success";
cm.RewardEvent.FAILURE = "RewardEvent_failure";
cm.UserTileInfoFactory = new function () {
    this.getTileInfo = function (f, e) {
        var b = {};
        var g = seed.cities;
        var d, k;
        for (d = 0; d < g.length; d++) {
            k = g[d];
            if (k[0] == f) {
                b.city = {};
                b.city.id = k[0];
                b.city.name = k[1];
                b.city.number = d;
                b.city.x = k[2];
                b.city.y = k[3];
                b.city.tileId = k[5];
                b.city.type = 51;
                b.city.typeName = g_mapObject.typename[g_mapObject.types[51]].capitalize();
                if (k[5] == e) {
                    b.isCity = true;
                    return b
                } else {
                    b.isCity = false;
                    break
                }
            }
        }
        var l = seed.wilderness;
        var a = !(l instanceof Array) && typeof (l) === "object";
        if (a) {
            var c, h, j;
            for (c in l) {
                h = l[c];
                j = h["t" + e];
                if (j !== undefined) {
                    b.wilderness = {};
                    b.wilderness.tileId = j.tileId;
                    b.wilderness.type = parseInt(j.tileType);
                    b.wilderness.typeName = g_mapObject.typename[g_mapObject.types[parseInt(j.tileType)]].capitalize();
                    b.wilderness.x = parseInt(j.xCoord);
                    b.wilderness.y = parseInt(j.yCoord);
                    return b
                }
            }
        }
    }
}();
if (!window.BarbarianRaid) {
    var BarbarianRaid = new Object()
}
BarbarianRaid.Properties = {
    MAX_TROOPS_ALLOWED: 100000,
    mercenaryGold: [1000, 10000, 100000],
    raidDateUnix: null,
    helpers: null,
    playerSex: null,
    playerDisplayName: null,
    cityName: null,
    helpStatus: null,
    arrError: null,
    requestIn: null,
    stimgUrl: null,
    playerCities: null,
    worldCities: null,
    isSameServer: null,
    isDiffServer: null,
    destServerID: null,
    raidID: null
};
BarbarianRaid.Methods = {
    check: function () {
        if (this.isUnderAttack()) {
            BarbarianRaid.underAttack()
        }
    },
    isUnderAttack: function () {
        if (seed.barbarianRaid && parseInt(tvuid) == parseInt(seed.barbarianRaid.userId)) {
            return true
        }
        return false
    },
    isPeace: function () {
        if (seed.barbarianEvent && parseInt(seed.barbarianEvent.eventStatus) == 4) {
            return true
        }
        return false
    },
    isComing: function () {
        if (seed.barbarianEvent && parseInt(seed.barbarianEvent.eventStatus) == 2) {
            return true
        }
        return false
    },
    updateStatus: function () {
        var b;
        var d;
        var a;
        var e = false;
        if (this.isPeace()) {
            b = g_js_strings.barbarian.peacedeclared;
            d = "peace";
            a = "peace";
            e = true
        } else {
            if (this.isUnderAttack()) {
                b = g_js_strings.barbarian.barbariansatthegates;
                d = "under-attack";
                a = "underAttack";
                e = true
            } else {
                if (this.isComing()) {
                    b = g_js_strings.barbarian.barbarianscomming;
                    d = "coming";
                    a = "report";
                    e = true
                }
            }
        }
        if (e) {
            var c = new Array();
            c.push("<div class='raids-status " + d + "'>");
            c.push("	<span class='text'>" + b + "</span>");
            c.push("	<a class='button20' onclick='BarbarianRaid." + a + "();return false;'><span>" + g_js_strings.commonstr.view + "</span></a>");
            c.push("</div>");
            $("topnav_barbarian").innerHTML = c.join("");
            $("topnav_barbarian").show()
        } else {
            $("topnav_barbarian").hide()
        }
    },
    lendAid: function () {
        var c = new Array();
        var f = (this.playerSex == "M") ? g_js_strings.commonstr.lord : g_js_strings.commonstr.lady;
        c.push("<div class='raids-attack'>");
        c.push("	<div class='info'>");
        c.push("		<div class='header'>" + g_js_strings.barbarian.atthegates + "</div>");
        c.push("		<div class='desc'>" + g_js_strings.barbarian.atthegatesdesc + "</div>");
        c.push("		<div class='city'>" + g_js_strings.commonstr.player + ": " + f + " " + this.playerDisplayName + "<br/>" + g_js_strings.barbarian.cityname + ": " + this.cityName + "</div>");
        c.push("	</div>");
        c.push("	<div class='panel-aid'>");
        c.push("		<div class='content'>");
        if (this.helpers.length < 10) {
            c.push("			<a class='button-aid' onclick='BarbarianRaid.help(); return false;'>" + g_js_strings.barbarian.lendaid + "</a>")
        }
        c.push("			<div class='label-give-aid'>" + g_js_strings.barbarian.giveaid + "</div>");
        c.push("		<div class='player'><span class='header-name'>" + g_js_strings.barbarian.playername + "</span><span class='header-troop'>" + g_js_strings.commonstr.troops + "</span></div>");
        for (var b = 0; b < this.helpers.length; b++) {
            var e = (this.helpers[b].displayName == null || this.helpers[b].displayName == "") ? g_js_strings.barbarian.foreignaid : this.helpers[b].displayName;
            c.push("		<div class='player'><span class='name'>" + e + "</span><span class='troop'>" + addCommas(this.helpers[b].numTroops) + "</span></div>")
        }
        c.push("			<div class='note'><span>" + g_js_strings.commonstr.note + ":</span> " + g_js_strings.barbarian.troopscapped + " " + g_js_strings.barbarian.foreignaiddesc + "</div>");
        c.push("		</div>");
        c.push("	</div>");
        var d = 1 + Math.floor(Math.random() * 5);
        var a = this.raidDateUnix - this.unixtime();
        c.push("	<div class='time-left bg" + d + "'>");
        if (a < 0) {
            c.push("		<span class='label'>" + g_js_strings.commonstr.impending + "</span>")
        } else {
            c.push("		<span class='label'>" + g_js_strings.commonstr.timeremaining + ":</span>");
            c.push("		<span class='time'>" + this.timestr(a) + "</span>")
        }
        c.push("	</div>");
        c.push("</div>");
        Modal.showModal(740, 500, 0, 10, "", c.join(""));
        $("modalControlsClose1").hide()
    },
    showStatus: function (cid) {
        var params = Object.clone(g_ajaxparams);
        params.cid = cid;
        new Ajax.Request(g_ajaxpath + "ajax/barbarianCityReport.php" + g_ajaxsuffix, {
            method: "post",
            parameters: params,
            onSuccess: function (transport) {
                var rslt = eval("(" + transport.responseText + ")");
                if (rslt.ok) {
                    var html = new Array();
                    var title = (rslt.playerInfo.playerSex == "M") ? g_js_strings.commonstr.lord : g_js_strings.commonstr.lady;
                    html.push("<div class='raids-attack'>");
                    html.push("	<div class='info'>");
                    html.push("		<div class='header'>" + g_js_strings.barbarian.atthegates + "</div>");
                    html.push("		<div class='desc'>" + g_js_strings.barbarian.atthegatesdesc + "</div>");
                    html.push("		<div class='city'>" + g_js_strings.commonstr.player + ": " + title + " " + rslt.playerInfo.displayName + "<br/>" + g_js_strings.barbarian.cityname + ": " + rslt.cityInfo.cityName + "</div>");
                    html.push("	</div>");
                    html.push("	<div id='raids_defend_status' class='defend-status' style='display:none'></div>");
                    html.push("	<div class='panel-aid'>");
                    html.push("		<div class='content'>");
                    html.push("			<div class='empty'>&nbsp;</div>");
                    html.push("			<div class='label-give-aid'>" + g_js_strings.barbarian.giveaid + "</div>");
                    html.push("		<div class='player'><span class='header-name'>" + g_js_strings.barbarian.playername + "</span><span class='header-troop'>" + g_js_strings.commonstr.troops + "</span></div>");
                    for (var i = 0; i < rslt.assistanceInfo.length; i++) {
                        var playerName = (rslt.assistanceInfo[i].displayName == "" || rslt.assistanceInfo[i].displayName == null) ? g_js_strings.barbarian.foreignaid : rslt.assistanceInfo[i].displayName;
                        html.push("		<div class='player'><span class='name'>" + playerName + "</span><span class='troop'>" + addCommas(rslt.assistanceInfo[i].numTroops) + "</span></div>")
                    }
                    html.push("			<div class='note'><span>" + g_js_strings.commonstr.note + ":</span> " + g_js_strings.barbarian.troopscapped + " " + g_js_strings.barbarian.foreignaiddesc + "</div>");
                    html.push("		</div>");
                    html.push("	</div>");
                    var rand = 1 + Math.floor(Math.random() * 5);
                    var timeleft = rslt.raidInfo.raidDateUnix - unixtime();
                    html.push("	<div class='time-left bg" + rand + "'>");
                    if (timeleft < 0) {
                        html.push("		<span class='label'>" + g_js_strings.commonstr.impending + "</span>")
                    } else {
                        html.push("		<span class='label'>" + g_js_strings.commonstr.timeremaining + ":</span>");
                        html.push("		<span class='time'>" + this.timestr(timeleft) + "</span>")
                    }
                    html.push("	</div>");
                    html.push("</div>");
                    Modal.showModal(740, 500, 0, 10, "", html.join(""))
                } else {
                    Modal.showAlert(g_js_strings.barbarian.cannotgetalliesfriends, false, 100)
                }
            },
            onFailure: function () {
                Modal.showAlert(g_js_strings.barbarian.cannotgetalliesfriends, false, 100)
            }
        })
    },
    underAttack: function () {
        var e = new Array();
        var h = (seed.player.g == "M") ? g_js_strings.commonstr.lord : g_js_strings.commonstr.lady;
        var k = seed.barbarianRaid.cityId;
        var g = "";
        for (var c = 0; seed.cities.length; c++) {
            if (seed.cities[c][0] == seed.barbarianRaid.cityId) {
                g = seed.cities[c][1];
                break
            }
        }
        e.push("<div class='raids-attack'>");
        e.push("	<div class='info'>");
        e.push("		<div class='header'>" + g_js_strings.barbarian.atthegates + "</div>");
        e.push("		<div class='desc'>" + g_js_strings.barbarian.atthegatesdesc + "</div>");
        e.push("		<div class='city'>" + g_js_strings.commonstr.player + ": " + h + " " + seed.player.name + "<br/>" + g_js_strings.barbarian.cityname + ": " + g + "</div>");
        e.push("	</div>");
        e.push("	<div class='panel-aid'>");
        e.push("		<div class='content'>");
        if (parseInt(seed.barbarianRaid.raidStatus) == 1) {
            e.push("			<a id='button_defend' class='button-aid' onclick='BarbarianRaid.defend(); return false;' style='display: block;'>" + g_js_strings.commonstr.defend + "</a>");
            e.push("			<a id='button_callforhelp' class='button-aid' onclick='BarbarianRaid.callForHelp(); return false;' style='display: none;'>" + g_js_strings.barbarian.callforhelp + "</a>")
        } else {
            if (parseInt(seed.barbarianRaid.raidStatus) == 2) {
                e.push("			<a class='button-aid' onclick='BarbarianRaid.callForHelp(); return false;'>" + g_js_strings.barbarian.callforhelp + "</a>")
            }
        }
        e.push("			<div class='label-give-aid'>" + g_js_strings.barbarian.giveaid + "</div>");
        e.push("		<div class='player'><span class='header-name'>" + g_js_strings.barbarian.playername + "</span><span class='header-troop'>" + g_js_strings.commonstr.troops + "</span></div>");
        for (var d = 0; d < seed.barbarianRaid.helpers.length; d++) {
            var b = (seed.barbarianRaid.helpers[d].displayName == "" || seed.barbarianRaid.helpers[d].displayName == null) ? g_js_strings.barbarian.foreignaid : seed.barbarianRaid.helpers[d].displayName;
            e.push("		<div class='player'><span class='name'>" + b + "</span><span class='troop'>" + addCommas(seed.barbarianRaid.helpers[d].numTroops) + "</span></div>")
        }
        e.push("			<div class='note'><span>" + g_js_strings.commonstr.note + ":</span> " + g_js_strings.barbarian.troopscapped + " " + g_js_strings.barbarian.foreignaiddesc + "</div>");
        e.push("		</div>");
        e.push("	</div>");
        var f = 1 + Math.floor(Math.random() * 5);
        var a = seed.barbarianRaid.raidDateUnix - unixtime();
        e.push("	<div class='time-left bg" + f + "'>");
        if (a < 0) {
            e.push("		<span class='label'>" + g_js_strings.commonstr.impending + "</span>")
        } else {
            e.push("		<span class='label'>" + g_js_strings.commonstr.timeremaining + ":</span>");
            e.push("		<span class='time'>" + this.timestr(a) + "</span>")
        }
        e.push("	</div>");
        e.push("	<div class='button-report'><a class='buttonDown25' onclick='Modal.hideModalAll(); BarbarianRaid.report(); return false;'><span>" + g_js_strings.barbarian.buttoninvasionreport + "</span></a></div>");
        e.push("</div>");
        Modal.showModal(740, 500, 0, 10, "", e.join(""))
    },
    defend: function () {
        var params = Object.clone(g_ajaxparams);
        params.raidId = seed.barbarianRaid.barbarianRaidId;
        params.cityId = seed.barbarianRaid.cityId;
        new Ajax.Request(g_ajaxpath + "ajax/barbarianRaidDefendCity.php" + g_ajaxsuffix, {
            method: "post",
            parameters: params,
            onSuccess: function (transport) {
                var rslt = eval("(" + transport.responseText + ")");
                if (rslt.ok) {
                    Modal.showAlert(g_js_strings.barbarian.youhavedefended, false, 100);
                    $("button_defend").hide();
                    $("button_callforhelp").show()
                } else {
                    Modal.showAlert(g_js_strings.barbarian.erroroccured, false, 100)
                }
            },
            onFailure: function () {}
        })
    },
    showError: function () {
        var b = new Array();
        b.push("<div class='raids-help'>");
        b.push("		<div class='header error'>" + g_js_strings.commonstr.error + "</div>");
        b.push("		<div class='content'>");
        b.push("			<ul>");
        for (var a = 0; a < this.arrError.length; a++) {
            b.push("			<li>" + this.arrError[a] + "</li>")
        }
        b.push("			</ul>");
        b.push("		</div>");
        b.push("</div>");
        Modal.showModal(500, 500, 0, 100, "", b.join(""))
    },
    assist: function (b, c) {
        this.helpStatus = 1;
        this.isSameServer = true;
        this.isDiffServer = false;
        this.destServerID = parseInt(g_server);
        this.raidID = b;
        var a = new Array();
        a.push("<div class='raids-help'>");
        a.push("		<div class='header'>" + g_js_strings.barbarian.mercenariesdispatched + "</div>");
        a.push("		<div class='mercenaries'></div>");
        a.push("		<div class='panel-button'>");
        a.push("			<div class='label'>" + g_js_strings.barbarian.helpmore + "</div>");
        a.push('			<a class="button25" onclick="BarbarianRaid.chooseAssistCity(1); return false;"><span>' + g_js_strings.barbarian.sendtroops + "</span></a>");
        a.push('			<a class="button25" onclick="BarbarianRaid.chooseAssistCity(2); return false;"><span>' + g_js_strings.barbarian.hiremercenaries + "</span></a>");
        a.push("		</div>");
        a.push("</div>");
        Modal.showModal(500, 500, 0, 100, "", a.join(""))
    },
    chooseAssistCity: function (a) {
        var d = "";
        var e = "";
        var c = new Array();
        if (a == 1) {
            d = g_js_strings.barbarian.troopfromcity;
            e = "<select id='raids_help_choosecity' onchange='BarbarianRaid.assistTroopFromCity(this.options[this.selectedIndex].value)'>"
        } else {
            d = g_js_strings.barbarian.goldfromcity;
            e = "<select id='raids_help_choosecity' onchange='BarbarianRaid.sendMercenariesFromCity(this.options[this.selectedIndex].value)'>"
        }
        c.push("<div class='raids-choosecity'>");
        c.push("<div class='header'>" + d + "</div>");
        c.push("<div class='select-city'>");
        c.push(e);
        c.push("<option value='0'>-- " + g_js_strings.barbarian.selectacity + " --</option>");
        for (var b = 0; b < seed.cities.length; b++) {
            c.push("<option value='" + seed.cities[b][0] + "," + g_server + "'>" + seed.cities[b][1] + "</option>")
        }
        c.push("</select>");
        c.push("</div>");
        c.push("<div class='button-back'><a class='buttonDown25' onclick='Modal.hideModal(); return false;'><span>" + g_js_strings.commonstr.back + "</span></a></div>");
        c.push("</div>");
        Modal.showModal(400, 500, 0, 200, "", c.join(""))
    },
    help: function () {
        var a = new Array();
        a.push("<div class='raids-help'>");
        if (this.helpStatus == 1) {
            a.push("		<div class='header'>" + g_js_strings.barbarian.mercenariesdispatched + "</div>");
            a.push("		<div class='mercenaries'></div>");
            a.push("		<div class='panel-button'>");
            a.push("			<div class='label'>" + g_js_strings.barbarian.helpmore + "</div>");
            a.push('			<a class="button25" onclick="BarbarianRaid.chooseCity(1); return false;"><span>' + g_js_strings.barbarian.sendtroops + "</span></a>");
            a.push('			<a class="button25" onclick="BarbarianRaid.chooseCity(2); return false;"><span>' + g_js_strings.barbarian.hiremercenaries + "</span></a>");
            a.push("		</div>")
        } else {
            if (this.helpStatus == 2) {
                a.push("		<div class='header'>" + g_js_strings.barbarian.mercenariesdispatched + "</div>");
                a.push("		<div class='mercenaries'></div>");
                a.push("		<div class='panel-button'>");
                a.push("			<div class='label'>" + g_js_strings.barbarian.helpmore + "</div>");
                a.push('			<a class="button25" onclick="BarbarianRaid.chooseCity(2); return false;"><span>' + g_js_strings.barbarian.hiremercenaries + "</span></a>");
                a.push("		</div>")
            } else {
                if (this.helpStatus == 3) {
                    a.push("		<div class='header'>" + g_js_strings.barbarian.mercenariesdispatched + "</div>");
                    a.push("		<div class='mercenaries'></div>");
                    a.push("		<div class='panel-button'>");
                    a.push("			<div class='label'>" + g_js_strings.barbarian.helpmore + "</div>");
                    a.push('			<a class="button25" href="' + this.appUrl + "?in=" + this.requestIn + '" target="_top"><span>' + g_js_strings.barbarian.sendtroops + "</span></a>");
                    a.push('			<a class="button25" href="' + this.appUrl + "?in=" + this.requestIn + '" target="_top"><span>' + g_js_strings.barbarian.hiremercenaries + "</span></a>");
                    a.push('			<a class="button25" href="' + this.appUrl + "?in=" + this.requestIn + '" target="_top"><span>' + g_js_strings.barbarian.defendmyself + "</span></a>");
                    a.push("		</div>")
                }
            }
        }
        a.push("</div>");
        Modal.showModal(500, 500, 0, 100, "", a.join(""))
    },
    callForHelp: function () {
        var a = new Array();
        a.push(["REPLACE_RaIdId", seed.barbarianRaid.barbarianRaidId]);
        common_postToProfile("119", Object.cloneFeed(template_data_119), Object.cloneFeed(actionlink_data_119), continuation_119, a)
    },
    peace: function () {
        var a = new Array();
        a.push("<div class='raids-peace'>");
        a.push("		<div class='header'>" + g_js_strings.barbarian.kingarthurbrokerspeace + "</div>");
        a.push("		<div class='desc'>" + g_js_strings.barbarian.kingarthurbrokerspeacedesc + "</div>");
        a.push("		<div class='panel-arthur'>");
        a.push("			<div class='content'>");
        a.push("				<div class='stat'>");
        a.push("					<div class='type'>" + g_js_strings.barbarian.attacksrepelled + "</div>");
        a.push("					<div class='value'>" + addCommas(seed.barbarianStats.totalAttacksRepelled) + "</div>");
        a.push("				</div>");
        a.push("				<div class='stat'>");
        a.push("					<div class='type'>" + g_js_strings.barbarian.attacksyourepelled + "</div>");
        a.push("					<div class='value'>" + addCommas(seed.barbarianStats.playerAttacksRepelled) + "</div>");
        a.push("				</div>");
        a.push("				<div class='stat'>");
        a.push("					<div class='type'>" + g_js_strings.barbarian.attacksalliancerepelled + "</div>");
        a.push("					<div class='value'>" + addCommas(seed.barbarianStats.allianceAttacksRepelled) + "</div>");
        a.push("				</div>");
        a.push("				<div class='stat'>");
        a.push("					<div class='type'>" + g_js_strings.barbarian.attacksyouhelpedrepel + "</div>");
        a.push("					<div class='value'>" + addCommas(seed.barbarianStats.playerAssistanceAttacksRepelled) + "</div>");
        a.push("				</div>");
        a.push("			</div>");
        a.push("		</div>");
        a.push("		<div class='shake-hand'></div>");
        a.push("</div>");
        Modal.showModal(740, 500, 0, 0, "", a.join(""))
    },
    report: function () {
        var html = new Array();
        var params = Object.clone(g_ajaxparams);
        new Ajax.Request(g_ajaxpath + "ajax/barbarianFriendReport.php" + g_ajaxsuffix, {
            method: "post",
            parameters: params,
            onSuccess: function (transport) {
                var rslt = eval("(" + transport.responseText + ")");
                if (rslt.ok) {
                    html.push("<div class='raids-report'>");
                    html.push("	<div class='info'>");
                    html.push("		<div class='header'>" + g_js_strings.barbarian.invasionreport + "</div>");
                    html.push("		<div class='desc'>" + g_js_strings.barbarian.invasionreportdesc + "<div class='note'><strong>" + g_js_strings.commonstr.note + ":</strong> " + g_js_strings.barbarian.troopscapped + "</div></div>");
                    html.push("	</div>");
                    var percentProgress = parseInt(seed.barbarianEvent.pct);
                    var widthProgress;
                    var hidePercent = "";
                    if (percentProgress == 0) {
                        widthProgress = 0;
                        hidePercent = " style='display: none;'"
                    } else {
                        widthProgress = parseInt(Math.floor((408 * percentProgress) / 100))
                    }
                    if (widthProgress > 0) {
                        widthProgress = Math.max(widthProgress, 26)
                    }
                    html.push("	<div class='progress'>");
                    html.push("		<span class='label-attack'>" + g_js_strings.barbarian.numofattacks.replace("%1$s", addCommas(seed.barbarianEvent.totalAttacks)) + "</span>");
                    html.push("		<div class='bar' style='width: " + widthProgress + "px'><span class='percent'" + hidePercent + ">" + percentProgress + "%</span></div>");
                    html.push("		<div class='header-progress'>" + g_js_strings.barbarian.barbarianprogress + "</div>");
                    html.push("	</div>");
                    html.push("	<div class='panel-stat'>");
                    html.push("		<div class='content'>");
                    if (parseInt(rslt.allFriends.barb_prot_time) > 0) {
                        html.push("			<div class='safe'>" + g_js_strings.barbarian.youwereattackedrecently + "<br/><span>" + g_js_strings.barbarian.safeforatleast + " " + timestr(parseInt(rslt.allFriends.barb_prot_time)) + "</span></div>")
                    } else {
                        if (BarbarianRaid.isUnderAttack()) {
                            if (parseInt(seed.barbarianRaid.raidStatus) == 1 || parseInt(seed.barbarianRaid.raidStatus) == 2) {
                                html.push("			<a class='button-defend' onclick='Modal.hideModalAll(); BarbarianRaid.underAttack(); return false;'>" + g_js_strings.barbarian.youareunderattack + "<br/><span>" + g_js_strings.barbarian.clickheretodefend + "</span></a>")
                            }
                        } else {
                            html.push("			<div class='empty'>&nbsp;</div>")
                        }
                    }
                    html.push("			<div class='header-under-attack'>" + g_js_strings.barbarian.alliesunderattack + " (<span>" + rslt.allFriends.allies.length + "</span>)</div>");
                    html.push("			<div class='list'>");
                    for (var i = 0; i < rslt.allFriends.allies.length; i++) {
                        html.push("				<div class='player'><span class='name'>" + rslt.allFriends.allies[i].displayName + "</span>");
                        if (!rslt.allFriends.allies[i].assisted) {
                            html.push("				<a class='button25' onclick='BarbarianRaid.assist(" + rslt.allFriends.allies[i].barbarianRaidId + "," + rslt.allFriends.allies[i].cityId + ");return false;'><span>" + g_js_strings.commonstr.assist + "</span></a>")
                        } else {
                            html.push("				<a class='buttonDown25' onclick='Modal.hideModalAll(); BarbarianRaid.showStatus(" + rslt.allFriends.allies[i].cityId + "); return false;'><span>" + g_js_strings.commonstr.status + "</span></a>")
                        }
                        html.push("				</div>")
                    }
                    html.push("			</div>");
                    html.push("			<div class='header-under-attack'>" + g_js_strings.barbarian.friendsunderattack + " (<span>" + rslt.allFriends.friends.length + "</span>)</div>");
                    html.push("			<div class='list'>");
                    for (var i = 0; i < rslt.allFriends.friends.length; i++) {
                        html.push("				<div class='player'><span class='name'>" + rslt.allFriends.friends[i].displayName + "</span>");
                        if (!rslt.allFriends.friends[i].assisted) {
                            html.push("				<a class='button25' onclick='BarbarianRaid.assist(" + rslt.allFriends.friends[i].barbarianRaidId + "," + rslt.allFriends.friends[i].cityId + ");return false;'><span>" + g_js_strings.commonstr.assist + "</span></a>")
                        } else {
                            html.push("				<a class='buttonDown25' onclick='Modal.hideModalAll(); BarbarianRaid.showStatus(" + rslt.allFriends.friends[i].cityId + "); return false;'><span>" + g_js_strings.commonstr.status + "</span></a>")
                        }
                        html.push("				</div>")
                    }
                    html.push("			</div>");
                    html.push("		</div>");
                    html.push("	</div>");
                    html.push("</div>");
                    Modal.showModal(740, 400, 0, 0, "", html.join(""))
                } else {
                    Modal.showAlert(g_js_strings.barbarian.cannotgetalliesfriends, false, 100)
                }
            },
            onFailure: function () {
                Modal.showAlert(g_js_strings.barbarian.cannotgetalliesfriends, false, 100)
            }
        })
    },
    chooseCity: function (a) {
        var e = "";
        var f = "";
        var d = new Array();
        if (a == 1) {
            e = g_js_strings.barbarian.troopfromcity;
            f = "<select id='raids_help_choosecity' onchange='BarbarianRaid.sendTroopFromCity(this.options[this.selectedIndex].value)'>"
        } else {
            e = g_js_strings.barbarian.goldfromcity;
            f = "<select id='raids_help_choosecity' onchange='BarbarianRaid.sendMercenariesFromCity(this.options[this.selectedIndex].value)'>"
        }
        d.push("<div class='raids-choosecity'>");
        d.push("<div class='header'>" + e + "</div>");
        d.push("<div class='select-city'>");
        d.push(f);
        d.push("<option value='0'>-- " + g_js_strings.barbarian.selectacity + " --</option>");
        if (this.isSameServer) {
            var h = Object.keys(this.worldCities);
            for (var c = 0; c < h.length; c++) {
                d.push("<option value='" + this.worldCities[h[c]].cityId + "," + this.worldCities[h[c]].serverId + "'>" + this.worldCities[h[c]].cityName + " on " + this.worldCities[h[c]].serverName + "</option>")
            }
            if (a == 2) {
                var g = Object.keys(this.playerCities);
                for (var c = 0; c < g.length; c++) {
                    if (g[c] != this.destServerID) {
                        var h = Object.keys(this.playerCities[g[c]]);
                        for (var b = 0; b < h.length; b++) {
                            d.push("<option value='" + this.playerCities[g[c]][h[b]].cityId + "," + g[c] + "'>" + this.playerCities[g[c]][h[b]].cityName + " on " + this.playerCities[g[c]][h[b]].serverName + "</option>")
                        }
                    }
                }
            }
        } else {
            if (this.isDiffServer) {
                var g = Object.keys(this.playerCities);
                for (var c = 0; c < g.length; c++) {
                    if (g[c] != this.destServerID) {
                        var h = Object.keys(this.playerCities[g[c]]);
                        for (var b = 0; b < h.length; b++) {
                            d.push("<option value='" + this.playerCities[g[c]][h[b]].cityId + "," + this.playerCities[g[c]][h[b]].serverId + "'>" + this.playerCities[g[c]][h[b]].cityName + " : " + this.playerCities[g[c]][h[b]].serverName + "</option>")
                        }
                    }
                }
            }
        }
        d.push("</select>");
        d.push("</div>");
        d.push("<div class='button-back'><a class='buttonDown25' onclick='Modal.hideModal(); return false;'><span>" + g_js_strings.commonstr.back + "</span></a></div>");
        d.push("</div>");
        Modal.showModal(400, 500, 0, 200, "", d.join(""))
    },
    assistTroopFromCity: function (b) {
        var d = new Array();
        var a = b.split(",");
        var g = a[0];
        d.push("<div class='raids-sendtroopfromcity clearfix'>");
        d.push("		<div class='header'>" + g_js_strings.barbarian.selecttroops + "</div>");
        d.push("		<div class='note'>" + g_js_strings.barbarian.cannotexceed + "</div>");
        d.push("		<div class='note'>" + g_js_strings.barbarian.totaltroopsbeingdeployed + " <span id='raids_sendtroop_total'>0</span></div>");
        var f = Object.keys(unitcost);
        for (var c = 0; c < f.length; c++) {
            var e = f[c].split("unt")[1];
            d.push("<div class='unit clearfix' name='" + e + "'>");
            d.push("		<img src='");
            if (this.stimgUrl) {
                d.push(this.stimgUrl)
            } else {
                d.push(stimgUrl)
            }
            d.push("img/units/unit_" + e + "_50.jpg'/>");
            d.push("		<div class='unitinfo'>");
            d.push("				<div class='unitname'>");
            d.push("					" + unitcost[f[c]][0]);
            d.push("				</div>");
            d.push("				<div class='unitnum'>");
            d.push("					" + addCommas(seed.units["city" + g]["unt" + e]));
            d.push("				</div>");
            d.push("				<div class='clearfix numbox'>");
            d.push("					<input type='hidden' id='raids_sendtroop_currentamount" + e + "' value='" + seed.units["city" + g]["unt" + e] + "'/>");
            d.push("					<input type='text' id='raids_sendtroop_input" + e + "' value='0' name='" + f[c].split("unt")[1] + "' onkeyup='BarbarianRaid.sendTroopValidate(" + e + "); BarbarianRaid.sendTroopCap(" + e + ")'/>");
            d.push("					<a  class='button14' onclick='BarbarianRaid.sendTroopMax(" + e + ");return false;'><span>" + g_js_strings.commonstr.all + "</span></a>");
            d.push("				</div>");
            d.push("		</div>");
            d.push("</div>")
        }
        d.push("		<div class='note'><span>" + g_js_strings.commonstr.note + ":</span> " + g_js_strings.barbarian.troopscapped + "</div>");
        d.push("		<div class='buttons clearfix'>");
        d.push("			<a class='button25' onclick='BarbarianRaid.assistSubmit(5," + b + "); return false;'><span>" + g_js_strings.commonstr.march + "</span></a>");
        d.push("			<a class='button25' onclick='Modal.hideModal(); return false;'><span>" + g_js_strings.commonstr.cancel + "</span></a>");
        d.push("		</div>");
        d.push("</div>");
        Modal.showModal(500, 500, 0, 0, "", d.join(""));
        $("raids_help_choosecity").selectedIndex = 0
    },
    sendTroopFromCity: function (b) {
        var d = new Array();
        var a = b.split(",");
        var g = a[0];
        d.push("<div class='raids-sendtroopfromcity clearfix'>");
        d.push("		<div class='header'>" + g_js_strings.barbarian.selecttroops + "</div>");
        d.push("		<div class='note'>" + g_js_strings.barbarian.cannotexceed + "</div>");
        d.push("		<div class='note'>" + g_js_strings.barbarian.totaltroopsbeingdeployed + " <span id='raids_sendtroop_total'>0</span></div>");
        var f = Object.keys(unitcost);
        for (var c = 0; c < f.length; c++) {
            var e = f[c].split("unt")[1];
            d.push("<div class='unit clearfix' name='" + e + "'>");
            d.push("		<img src='");
            if (this.stimgUrl) {
                d.push(this.stimgUrl)
            } else {
                d.push(stimgUrl)
            }
            d.push("img/units/unit_" + e + "_50.jpg'/>");
            d.push("		<div class='unitinfo'>");
            d.push("				<div class='unitname'>");
            d.push("					" + unitcost[f[c]][0]);
            d.push("				</div>");
            d.push("				<div class='unitnum'>");
            d.push("					" + addCommas(this.worldCities[g]["unit" + e + "Count"]));
            d.push("				</div>");
            d.push("				<div class='clearfix numbox'>");
            d.push("					<input type='hidden' id='raids_sendtroop_currentamount" + e + "' value='" + this.worldCities[g]["unit" + e + "Count"] + "'/>");
            d.push("					<input type='text' id='raids_sendtroop_input" + e + "' value='0' name='" + f[c].split("unt")[1] + "' onkeyup='BarbarianRaid.sendTroopValidate(" + e + "); BarbarianRaid.sendTroopCap(" + e + ")'/>");
            d.push("					<a  class='button14' onclick='BarbarianRaid.sendTroopMax(" + e + ");return false;'><span>" + g_js_strings.commonstr.all + "</span></a>");
            d.push("				</div>");
            d.push("		</div>");
            d.push("</div>")
        }
        d.push("		<div class='note'><span>" + g_js_strings.commonstr.note + ":</span> " + g_js_strings.barbarian.troopscapped + "</div>");
        d.push("		<div class='buttons clearfix'>");
        d.push("			<a class='button25' onclick='BarbarianRaid.helpSubmit(5," + b + "); return false;'><span>" + g_js_strings.commonstr.march + "</span></a>");
        d.push("			<a class='button25' onclick='Modal.hideModal(); return false;'><span>" + g_js_strings.commonstr.cancel + "</span></a>");
        d.push("		</div>");
        d.push("</div>");
        Modal.showModal(500, 500, 0, 0, "", d.join(""));
        $("raids_help_choosecity").selectedIndex = 0
    },
    sendTroopCap: function (c) {
        BarbarianRaid.sendTroopValidate(c);
        var a = parseInt($("raids_sendtroop_input" + c).value, 10);
        var d = BarbarianRaid.sendTroopSum(c) - a;
        var b = parseInt($("raids_sendtroop_currentamount" + c).value, 10);
        if (d > this.MAX_TROOPS_ALLOWED) {
            $("raids_sendtroop_input" + c).value = "0"
        } else {
            if (d + a > this.MAX_TROOPS_ALLOWED) {
                $("raids_sendtroop_input" + c).value = Math.min(this.MAX_TROOPS_ALLOWED - d, a, b)
            } else {
                $("raids_sendtroop_input" + c).value = a
            }
        }
        $("raids_sendtroop_total").innerHTML = addCommas(BarbarianRaid.sendTroopSum())
    },
    sendTroopMax: function (a) {
        $("raids_sendtroop_input" + a).value = parseInt($("raids_sendtroop_currentamount" + a).value, 10);
        BarbarianRaid.sendTroopCap(a)
    },
    sendTroopSum: function (c) {
        var b = 0;
        var e = Object.keys(unitcost);
        for (var a = 0; a < e.length; a++) {
            var d = e[a].split("unt")[1];
            if (isNaN($("raids_sendtroop_input" + d).value)) {
                $("raids_sendtroop_input" + d).value = "0"
            } else {
                BarbarianRaid.sendTroopValidate(d);
                $("raids_sendtroop_input" + d).value = parseInt($("raids_sendtroop_input" + d).value, 10);
                b += parseInt($("raids_sendtroop_input" + d).value, 10)
            }
        }
        return b
    },
    sendTroopValidate: function (c) {
        var a = 0;
        var b = parseInt($("raids_sendtroop_currentamount" + c).value, 10);
        if (isNaN($("raids_sendtroop_input" + c).value) || $("raids_sendtroop_input" + c).value == "") {
            $("raids_sendtroop_input" + c).value = "0"
        } else {
            a = parseInt($("raids_sendtroop_input" + c).value, 10);
            $("raids_sendtroop_input" + c).value = a
        }
        if (a < 0) {
            $("raids_sendtroop_input" + c).value = "0"
        } else {
            if (a > b) {
                $("raids_sendtroop_input" + c).value = b
            }
        }
    },
    assistSubmit: function (helptype, cityid, serverid) {
        var params = Object.clone(g_ajaxparams);
        var msg = "";
        helptype = parseInt(helptype);
        params.raidId = BarbarianRaid.raidID;
        params.tid = helptype;
        params.fcid = parseInt(cityid);
        params.fs = parseInt(serverid);
        if (helptype == 5) {
            if (BarbarianRaid.sendTroopSum() < 1) {
                Modal.showAlert(g_js_strings.barbarian.mustsendatleast, false, 100);
                return false
            }
        }
        if (helptype >= 2 && helptype <= 4) {
            var gold = parseInt(seed.citystats["city" + cityid].gold[0]);
            if (gold < this.mercenaryGold[helptype - 2]) {
                Modal.showAlert(g_js_strings.barbarian.notenoughgold, false, 100);
                return false
            }
        }
        if (helptype == 5) {
            var unitkeys = Object.keys(unitcost);
            var unitsjson = new Array();
            for (var i = 0; i < unitkeys.length; i++) {
                var untid = unitkeys[i].split("unt")[1];
                unitsjson.push('"unit' + untid + 'Count":' + $("raids_sendtroop_input" + untid).value);
                seed.units["city" + cityid]["unt" + untid] = parseInt(seed.units["city" + cityid]["unt" + untid]) - parseInt($("raids_sendtroop_input" + untid).value)
            }
            params.units = "{" + unitsjson + "}";
            msg = g_js_strings.barbarian.havesenttroops
        } else {
            if (helptype >= 2 && helptype <= 4) {
                msg = g_js_strings.barbarian.havesentmercenaries
            }
        }
        new Ajax.Request(g_ajaxpath + "ajax/barbarianRaidReinforceCity.php" + g_ajaxsuffix, {
            method: "post",
            parameters: params,
            onSuccess: function (transport) {
                var result = eval("(" + transport.responseText + ")");
                if (result.ok) {
                    Modal.hideModalAll();
                    Modal.showAlert(msg, false, 150)
                } else {
                    Modal.showAlert(g_js_strings.barbarian.errorcode.replace("%1$s", result.error_code), false, 100)
                }
            },
            onFailure: function () {}
        })
    },
    helpSubmit: function (helptype, cityid, serverid) {
        var params = Object.clone(g_ajaxparams);
        var msg = "";
        helptype = parseInt(helptype);
        params.raidId = BarbarianRaid.raidID;
        params.tid = helptype;
        params.fcid = parseInt(cityid);
        params.fs = parseInt(serverid);
        if (helptype >= 2 && helptype <= 4) {
            var gold;
            if (this.helpers) {
                gold = parseInt(this.playerCities[serverid][cityid].gold)
            } else {
                gold = parseInt(seed.citystats["city" + cityid].gold[0])
            }
            if (gold < this.mercenaryGold[helptype - 2]) {
                Modal.showAlert(g_js_strings.barbarian.notenoughgold, false, 100);
                return false
            }
        }
        if (helptype == 5) {
            if (BarbarianRaid.sendTroopSum() < 1) {
                Modal.showAlert(g_js_strings.barbarian.mustsendatleast, false, 100);
                return false
            }
        }
        if (helptype == 5) {
            var unitkeys = Object.keys(unitcost);
            var unitsjson = new Array();
            for (var i = 0; i < unitkeys.length; i++) {
                var untid = unitkeys[i].split("unt")[1];
                unitsjson.push('"unit' + untid + 'Count":' + $("raids_sendtroop_input" + untid).value)
            }
            params.units = "{" + unitsjson + "}";
            msg = g_js_strings.barbarian.havesenttroops
        } else {
            if (helptype >= 2 && helptype <= 4) {
                msg = g_js_strings.barbarian.havesentmercenaries
            }
        }
        new Ajax.Request(g_ajaxpath + "ajax/barbarianRaidReinforceCity.php" + g_ajaxsuffix, {
            method: "post",
            parameters: params,
            onSuccess: function (transport) {
                var result = eval("(" + transport.responseText + ")");
                if (result.ok) {
                    Modal.hideModalAll();
                    Modal.showAlert(msg, '<a class="button25" href="' + BarbarianRaid.appUrl + "?in=" + BarbarianRaid.requestIn + '" target="_top"><span>' + g_js_strings.barbarian.backtogame + "</span></a>", 150);
                    $("modalControlsClose" + Modal.modalid).hide()
                } else {
                    Modal.showAlert(g_js_strings.barbarian.errorcode.replace("%1$s", result.error_code), false, 100)
                }
            },
            onFailure: function () {}
        })
    },
    sendMercenariesFromCity: function (c) {
        var d = new Array();
        var b;
        if (this.stimgUrl) {
            b = this.stimgUrl
        } else {
            b = stimgUrl
        }
        var a = b + "img/chrome_icon_gold.png";
        d.push("<div class='raids-mercenaries'>");
        d.push("		<div class='header'>" + g_js_strings.barbarian.whatlevelofmercenaries + "</div>");
        d.push("		<div class='mercenaries'></div>");
        d.push("		<div class='level clearfix'>");
        d.push("			<div class='title clearfix'>" + g_js_strings.barbarian.lightmercenaries + "</div>");
        d.push("			<div class='desc'>" + g_js_strings.barbarian.lightmercenariesdesc + "</div>");
        d.push("			<div class='button-send clearfix'><a class='button25' onclick='BarbarianRaid.helpSubmit(2," + c + "); return false;'><span>" + g_js_strings.commonstr.send + "</span></a></div>");
        d.push("			<div class='price clearfix'>1,000g <img src='" + a + "' align='absmiddle'></div>");
        d.push("			<div class='title clearfix'>" + g_js_strings.barbarian.mediummercenaries + "</div>");
        d.push("			<div class='desc'>" + g_js_strings.barbarian.mediummercenariesdesc + "</div>");
        d.push("			<div class='button-send clearfix'><a class='button25' onclick='BarbarianRaid.helpSubmit(3," + c + "); return false;'><span>" + g_js_strings.commonstr.send + "</span></a></div>");
        d.push("			<div class='price clearfix'>10,000g <img src='" + a + "' align='absmiddle'></div>");
        d.push("			<div class='title clearfix'>" + g_js_strings.barbarian.heavymercenaries + "</div>");
        d.push("			<div class='desc'>" + g_js_strings.barbarian.heavymercenariesdesc + "</div>");
        d.push("			<div class='button-send clearfix'><a class='button25' onclick='BarbarianRaid.helpSubmit(4," + c + "); return false;'><span>" + g_js_strings.commonstr.send + "</span></a></div>");
        d.push("			<div class='price clearfix'>100,000g <img src='" + a + "' align='absmiddle'></div>");
        d.push("		</div>");
        d.push("		<div class='button-back'><a class='buttonDown25' onclick='Modal.hideModal(); return false;'><span>" + g_js_strings.commonstr.back + "</span></a></div>");
        d.push("</div>");
        Modal.showModal(500, 500, 0, 0, "", d.join(""));
        $("raids_help_choosecity").selectedIndex = 0
    },
    viewMarchReport: function (rptid, side, tiletype, tilelv, defid, defnm, defgen, atknm, atkgen, marchtype, xcoord, ycoord, timestamp, unread, atkxcoord, atkycoord) {
        var params = Object.clone(g_ajaxparams);
        var args = arguments;
        params.rid = rptid;
        params.side = side;
        $("modal_msg_list_pagination").hide();
        new Ajax.Request(g_ajaxpath + "ajax/fetchReport.php" + g_ajaxsuffix, {
            method: "post",
            parameters: params,
            onSuccess: function (transport) {
                var rslt = eval("(" + transport.responseText + ")");
                if (unread == 1) {
                    seed.newReportCount = parseInt(seed.newReportCount) - 1;
                    messages_notify_bug()
                }
                $("modal_msg_list").innerHTML = MarchReport.getMarchReport(args, rslt).render()
            },
            onFailure: function () {}
        })
    },
    timestr: function timestr(e, d) {
        var f = "";
        if (e < 61) {
            if (d == 1) {
                f = e + g_js_strings.timestr.timesec
            } else {
                f = e + g_js_strings.timestr.times
            }
        } else {
            if (e < 3601) {
                var b = parseInt(e / 60);
                e = e - (60 * b);
                if (d == 1) {
                    f = b + g_js_strings.timestr.timemin + " " + e + g_js_strings.timestr.timesec
                } else {
                    f = b + g_js_strings.timestr.timem + " " + e + g_js_strings.timestr.times
                }
            } else {
                if (e < 86401) {
                    var c = parseInt(e / 3600);
                    var b = parseInt((e - (c * 3600)) / 60);
                    if (d == 1) {
                        f = c + g_js_strings.timestr.timehr + " " + b + g_js_strings.timestr.timemin
                    } else {
                        f = c + g_js_strings.timestr.timeh + " " + b + g_js_strings.timestr.timem
                    }
                } else {
                    var a = parseInt(e / 86400);
                    var c = parseInt((e - (a * 86400)) / 3600);
                    var b = parseInt((e - (c * 3600) - (a * 86400)) / 60);
                    if (d == 1) {
                        f = a + g_js_strings.timestr.timeday + " " + c + g_js_strings.timestr.timehr + " " + b + g_js_strings.timestr.timemin
                    } else {
                        f = a + g_js_strings.timestr.timed + " " + c + g_js_strings.timestr.timeh + " " + b + g_js_strings.timestr.timem
                    }
                }
            }
        }
        return f
    },
    unixtime: function () {
        return parseInt((new Date()).getTime() / 1000)
    }
};
Object.extend(BarbarianRaid, BarbarianRaid.Methods);
Object.extend(BarbarianRaid, BarbarianRaid.Properties);
var g_unit_types = [];
g_unit_types.push("Infantry");
g_unit_types.push("Ranged");
g_unit_types.push("Horsed");
g_unit_types.push("Siege");
var g_unit_type_map = [];
g_unit_type_map[1] = 0;
g_unit_type_map[2] = 0;
g_unit_type_map[3] = 0;
g_unit_type_map[4] = 0;
g_unit_type_map[5] = 0;
g_unit_type_map[6] = 1;
g_unit_type_map[7] = 2;
g_unit_type_map[8] = 2;
g_unit_type_map[9] = 3;
g_unit_type_map[10] = 3;
g_unit_type_map[11] = 3;
g_unit_type_map[12] = 3;

function modal_openBarracks() {
    var a = new Array();
    a.push("<div class='tabsbar clearfix' id='barracksModalTabs'>");
    a.push("<a class='tab selected' onclick='changeBarracksModalTabs(0);return false;'><span>");
    a.push(g_js_strings.modal_openBarracks.trainttl);
    a.push("</span></a>");
    a.push("<a class='tab' onclick='changeBarracksModalTabs(1);return false;'><span>");
    a.push(g_js_strings.modal_openBarracks.trainingttl);
    a.push("</span></a>");
    a.push("</div>");
    a.push("<div id='barracks_0' class='tablewrap barrackswrap'>");
    a.push("<div class='unitlist clearfix'>");
    var e = Object.keys(unitcost);
    for (var c = 0; c < e.length; c++) {
        var d = e[c].split("unt")[1];
        a.push("<div class='unit'>");
        a.push("<img src='");
        a.push(stimgUrl);
        a.push("img/units/unit_");
        a.push(d);
        a.push("_68.jpg?6545'/>");
        a.push("<div class='unitinfo'>");
        a.push("<div class='unitnm'>");
        a.push(unitcost[e[c]][0]);
        a.push("</div>");
        a.push("<div class='unitdesc'>");
        a.push(unitcost[e[c]][10]);
        a.push("</div>");
        a.push("<div class='unitcount'><b>");
        a.push(g_js_strings.modal_openBarracks.youown);
        a.push(":</b> ");
        a.push(seed.units["city" + currentcityid]["unt" + d]);
        a.push("</div>");
        a.push("<div class='clearfix btn'><a  class='button20' onclick='modal_barracks_train(");
        a.push(d);
        a.push(");return false;'><span>" + g_js_strings.commonstr.train + "</span></a><a  class='buttonDown20' onclick='modal_barracks_dismiss(");
        a.push(d);
        a.push(");return false;'><span>");
        a.push(g_js_strings.commonstr.dismiss);
        a.push("</span></a></div>");
        a.push("</div>");
        a.push("</div>")
    }
    a.push("</div>");
    a.push("</div>");
    a.push("<div id='barracks_1' style='display:none;' class='barrackswrap'>");
    a.push("<div class='trainboxwrap'>");
    a.push("<div class='trainbox'>");
    a.push("<div class='trainhd'><span>");
    a.push(g_js_strings.modal_openBarracks.curintrain);
    a.push("</span></div><div id='modal_currentlytraining'>");
    a.push("</div>");
    a.push("</div>");
    a.push("<div class='trainbox'>");
    a.push("<div class='trainhd'><span>");
    a.push(g_js_strings.modal_openBarracks.waittrain);
    a.push("</span></div>");
    a.push("<div id='modal_trainingqueue'>");
    a.push("</div>");
    a.push("</div>");
    a.push("</div>");
    a.push("</div>");
    var b = $("modal_build_content");
    if (b) {
        b.innerHTML = a.join("")
    }
}
function modal_barracks_dismiss(b) {
    var a = new Array();
    a.push("<div id='barracks_dismiss' class='clearfix'><div class='unitinfo clearfix'>");
    a.push("<img src='");
    a.push(stimgUrl);
    a.push("img/units/unit_");
    a.push(b);
    a.push("_50.jpg'/>");
    a.push("<div class='nm'>" + unitcost["unt" + b][0] + "</div>");
    a.push("<div class='count'>" + addCommas(parseInt(seed.units["city" + currentcityid]["unt" + b])) + "</div>");
    a.push("</div>");
    a.push("<div class='unit_ipt clearfix'><input type='text' id='barracks_dismiss_ipt' onkeyup='modal_barracks_dismiss_keyup(");
    a.push(seed.units["city" + currentcityid]["unt" + b]);
    a.push(");'/><a  class='button20' onclick='modal_barracks_dismiss_max(");
    a.push(seed.units["city" + currentcityid]["unt" + b]);
    a.push(");return false;'><span>" + g_js_strings.commonstr.max + "</span></a></div>");
    a.push("<div class='unit_btns clearfix'><a  class='button20' onclick='modal_barracks_dismiss_confirm(");
    a.push(b);
    a.push(");return false;'><span>" + g_js_strings.commonstr.dismiss + "</span></a><a  onclick='Modal.hideModal();return false;' class='cancel'>" + g_js_strings.commonstr.cancel + "</a>");
    a.push("</div>");
    a.push("</div>");
    Modal.showModal(500, 400, 120, 20, g_js_strings.modal_barracks_dismiss.dismisstroops + " - " + unitcost["unt" + b][0], a.join(""))
}
function modal_barracks_dismiss_confirm(b) {
    var a = new Array();
    a.push("<div id='barracks_dismiss' class='clearfix'>");
    a.push("<div class='cfrmhd'>");
    a.push(g_js_strings.modal_barracks_dismiss_confirm.areyousure);
    a.push(" ");
    a.push(addCommas(parseInt($("barracks_dismiss_ipt").value)));
    a.push(" ");
    a.push(unitcost["unt" + b][0]);
    a.push("</div>");
    a.push("<div class='unit_btns clearfix'><a  class='button20' onclick='modal_barracks_dismiss_do(");
    a.push(b);
    a.push(");return false;'><span>");
    a.push(g_js_strings.commonstr.ok);
    a.push("</span></a><a  onclick='Modal.hideModal();return false;' class='cancel'>");
    a.push(g_js_strings.commonstr.cancel);
    a.push("</a>");
    a.push("</div>");
    a.push("</div>");
    Modal.showModal(500, 400, 120, 20, g_js_strings.modal_barracks_dismiss_confirm.confirmttl, a.join(""))
}
function modal_barracks_dismiss_do(unitid) {
    var params = Object.clone(g_ajaxparams);
    params.cid = currentcityid;
    params.type = unitid;
    params.quant = $("barracks_dismiss_ipt").value;
    new Ajax.Request(g_ajaxpath + "ajax/dismissUnits.php" + g_ajaxsuffix, {
        method: "post",
        parameters: params,
        onSuccess: function (message) {
            var rslt = eval("(" + message.responseText + ")");
            if (rslt.ok) {
                seed.units["city" + currentcityid]["unt" + unitid] = parseInt(seed.units["city" + currentcityid]["unt" + unitid]) - parseInt($("barracks_dismiss_ipt").value);
                Modal.hideModalAll()
            } else {
                Modal.showAlert(printLocalError((rslt.error_code || null), (rslt.msg || null), (rslt.feedback || null)))
            }
        },
        onFailure: function () {}
    })
}
function modal_barracks_dismiss_keyup(a) {
    if (!(parseInt(a) > parseInt($("barracks_dismiss_ipt").value)) && $("barracks_dismiss_ipt").value != "") {
        $("barracks_dismiss_ipt").value = a
    }
}
function modal_barracks_dismiss_max(a) {
    $("barracks_dismiss_ipt").value = a
}
function modal_barracks_train(e) {
    var b = new Array();
    b.push("<div id='barracks_train' class='clearfix'>");
    b.push("<img src='");
    b.push(stimgUrl);
    b.push("img/units/unit_");
    b.push(e);
    b.push("_215.jpg?6545'/>");
    b.push("<div class='unitinfo'>");
    b.push("<div class='unitdesc'>");
    b.push(unitcost["unt" + e][10]);
    b.push("</div>");
    b.push("<div class='unitstats'>");
    b.push("<table cellpadding='0' cellspacing='0'>");
    b.push("<tr><td><b>");
    b.push(g_js_strings.modal_barracks_train.attack);
    b.push(":</b> ");
    b.push(unitstats["unt" + e][1]);
    b.push("</td><td><b>");
    b.push(g_js_strings.modal_barracks_train.speed);
    b.push(":</b> ");
    b.push(unitstats["unt" + e][3]);
    b.push("</td></tr>");
    b.push("<tr><td><b>");
    b.push(g_js_strings.modal_barracks_train.defense);
    b.push(":</b> ");
    b.push(unitstats["unt" + e][2]);
    b.push("</td><td><b>");
    b.push(g_js_strings.modal_barracks_train.range);
    b.push(":</b> ");
    b.push(unitstats["unt" + e][4]);
    b.push("</td></tr>");
    b.push("<tr><td><b>");
    b.push(g_js_strings.modal_barracks_train.life);
    b.push(":</b> ");
    b.push(unitstats["unt" + e][0]);
    b.push("</td><td><b>");
    b.push(g_js_strings.modal_barracks_train.load);
    b.push(":</b> ");
    b.push(unitstats["unt" + e][5]);
    b.push("</td></tr>");
    b.push("<tr><td><b>");
    b.push(g_js_strings.commonstr.upkeep);
    b.push(":</b> ");
    b.push(unitupkeeps[e]);
    b.push("</td><td><b>");
    b.push(g_js_strings.commonstr.type);
    b.push(":</b> ");
    b.push(g_unit_types[g_unit_type_map[e]]);
    b.push("</td></tr>");
    b.push("</table>");
    b.push("</div>");
    b.push("<div class='unitreqs'>");
    b.push("<table cellpadding='0' cellspacing='0'><thead><tr><td class='res'>");
    b.push(g_js_strings.commonstr.resource);
    b.push("</td><td class='req'>");
    b.push(g_js_strings.commonstr.required);
    b.push("</td><td class='own'>");
    b.push(g_js_strings.commonstr.youown);
    b.push("</td></tr></thead><tbody>");
    var a = checkreq("unt", e, 1);
    var d = false;
    for (var c = 0; c < a[0].length; c++) {
        b.push("<tr><td class='res'>");
        b.push(a[0][c]);
        b.push("</td><td class='req ");
        if (a[3][c] == 0) {
            b.push("unmet");
            d = true
        } else {
            b.push("met")
        }
        b.push("'>");
        b.push(addCommas(a[1][c]));
        b.push("</td><td class='own'>");
        b.push(addCommas(a[2][c]));
        b.push("</td></tr>")
    }
    b.push("</tbody></table>");
    b.push("</div>");
    b.push("<div class='unit_bottom'>");
    b.push("<div class='unit_youown'><b>");
    b.push(g_js_strings.commonstr.youown);
    b.push(":</b> ");
    b.push(seed.units["city" + currentcityid]["unt" + e]);
    b.push("</div>");
    b.push("<div class='unit_max'><b>");
    b.push(g_js_strings.commonstr.max);
    b.push(":</b> <span id='modal_barracks_max_num'>");
    if (d) {
        b.push(0)
    } else {
        b.push(modal_barracks_train_max(e))
    }
    b.push("</span></div>");
    b.push("</div>");
    b.push("<div class='unit_numtrain'><b>");
    b.push(g_js_strings.modal_barracks_train.numtotrain);
    b.push(":</b><input type='text' id='modal_barracks_num' onkeyup='modal_barracks_train_timecalc(this,");
    b.push(e);
    b.push(");'/><a  class='inlineButton blue14' onclick='modal_barracks_train_maxbtn(");
    b.push(e);
    b.push(");return false;'><span>" + g_js_strings.commonstr.max + "</span></a></div>");
    b.push("<div class='unit_time'><b>");
    b.push(g_js_strings.modal_barracks_train.traintime);
    b.push(":</b> <span id='modal_barracks_traintime'></span></div>");
    b.push("<div class='unit_speedup'>");
    b.push("<input type='checkbox' id='modal_barracks_tut' onclick='clearOtherTuts(1)'/><div class='hlp'><div>");
    b.push("<img src='" + stimgUrl + "img/items/70/36.jpg'/>");
    b.push(itemlist.i36.name);
    b.push("<br/>");
    b.push(g_js_strings.modal_barracks_train.timereduction);
    b.push(": <span id='modal_barracks_tutred'>0 " + g_js_strings.timestr.timesec + "</span>.</div><div>");
    b.push(g_js_strings.commonstr.youown);
    b.push(": ");
    b.push((seed.items.i36 == null) ? 0 : seed.items.i36);
    b.push(". <a  onclick='modal_barracks_getmoreshop();return false;'>");
    b.push(g_js_strings.commonstr.getmore);
    b.push("</a></div></div>");
    b.push("<br />");
    b.push("<input type='checkbox' id='modal_barracks_arthurs_tut' onclick='clearOtherTuts(2)'/><div class='hlp'><div>");
    b.push("<img src='" + stimgUrl + "img/items/70/37.jpg'/>");
    b.push(itemlist.i37.name);
    b.push("<br />");
    b.push(g_js_strings.modal_barracks_train.timereduction);
    b.push(": <span id='modal_barracks_arthurs_tutred'>0 " + g_js_strings.timestr.timesec + "</span>.</div><div>");
    b.push(g_js_strings.commonstr.youown);
    b.push(": ");
    b.push((seed.items.i37 == null) ? 0 : seed.items.i37);
    b.push(". <a  onclick='modal_barracks_getmoreshop();return false;'>");
    b.push(g_js_strings.commonstr.getmore);
    b.push("</a></div></div>");
    b.push("<br />");
    b.push("<input type='checkbox' id='modal_barracks_merlins_tut' onclick='clearOtherTuts(3)'/><div class='hlp'><div>");
    b.push("<img src='" + stimgUrl + "img/items/70/38.jpg'/>");
    b.push(itemlist.i38.name);
    b.push("<br />");
    b.push(g_js_strings.modal_barracks_train.timereduction);
    b.push(": <span id='modal_barracks_merlins_tutred'>0 " + g_js_strings.timestr.timesec + "</span>.</div><div>");
    b.push(g_js_strings.commonstr.youown);
    b.push(": ");
    b.push((seed.items.i38 == null) ? 0 : seed.items.i38);
    b.push(". <a  onclick='modal_barracks_getmoreshop();return false;'>");
    b.push(g_js_strings.commonstr.getmore);
    b.push("</a></div></div>");
    b.push("<br />");
    b.push("</div>");
    b.push("<div class='unit_btns clearfix'><a  class='button25");
    if (d) {
        b.push(" unmet")
    }
    b.push("' id='unit_btns_start' onclick='");
    if (!d) {
        b.push("modal_barracks_train_action(");
        b.push(e);
        b.push(");")
    }
    b.push("return false;'><span>");
    b.push(g_js_strings.modal_barracks_train.starttraining);
    b.push("</span></a></div>");
    b.push("</div>");
    Modal.showModal(500, 400, 120, 20, unitcost["unt" + e][0], b.join(""))
}
function modal_barracks_traintime(b, e) {
    var m = parseInt(parseInt(unitcost["unt" + b][7])) * e;
    var c = 0;
    var d = 0;
    var h = 0;
    var j = Object.keys(seed.buildings["city" + currentcityid]);
    for (var f = 0; f < j.length; f++) {
        var k = seed.buildings["city" + currentcityid][j[f]];
        if ((parseInt(k[0]) == 13) && (parseInt(k[1]) > 0)) {
            c += (parseInt(k[1]) + 9)
        }
        if ((parseInt(k[0]) == 16) && (parseInt(k[1]) > d)) {
            if (parseInt(b) >= 9) {
                d = parseInt(k[1])
            }
        }
        if ((parseInt(k[0]) == 17) && (parseInt(k[1]) > h)) {
            if (parseInt(b) >= 7) {
                h = parseInt(k[1])
            }
        }
    }
    var a = c / 10;
    var l = 0;
    var g = 0;
    var n = seed.knights["city" + currentcityid];
    m = Math.max(1, Math.ceil(m / a));
    a = 1;
    l = d + h;
    if (n) {
        n = n["knt" + seed.leaders["city" + currentcityid].combatKnightId];
        if (n) {
            g = parseInt(n.combat);
            newkntlv = ((parseInt(n.combatBoostExpireUnixtime) - unixtime()) > 0) ? (g * 1.25) : g;
            a = a + (0.005 * newkntlv)
        }
    }
    if (seed.tech) {
        l = l + seed.tech.tch5
    }
    a = a + (0.1 * l);
    m = Math.max(1, Math.ceil(m / a));
    return m
}
function modal_barracks_train_timecalc(e, b) {
    var d = parseInt(e.value, 10);
    if (d) {
        var c = parseInt($("modal_barracks_max_num").innerHTML, 10);
        if (d > c) {
            d = c;
            e.value = c
        } else {
            if (d < 0) {
                d = 0;
                e.value = 0
            }
        }
        if (d == 0) {
            $("modal_barracks_traintime").innerHTML = "0 " + g_js_strings.timestr.timesec;
            $("modal_barracks_tutred").innerHTML = "0 " + g_js_strings.timestr.timesec;
            $("modal_barracks_arthurs_tutred").innerHTML = "0 " + g_js_strings.timestr.timesec;
            $("modal_barracks_merlins_tutred").innerHTML = "0 " + g_js_strings.timestr.timesec
        } else {
            var a = modal_barracks_traintime(b, d);
            $("modal_barracks_traintime").innerHTML = timestr(a, 1);
            $("modal_barracks_tutred").innerHTML = timestr(parseInt(a * 0.3, 10), 1);
            $("modal_barracks_arthurs_tutred").innerHTML = timestr(parseInt(a * 0.5, 10), 1);
            $("modal_barracks_merlins_tutred").innerHTML = timestr(parseInt(a * 0.7, 10), 1)
        }
    } else {
        $("modal_barracks_traintime").innerHTML = "0 " + g_js_strings.timestr.timesec;
        $("modal_barracks_tutred").innerHTML = "0 " + g_js_strings.timestr.timesec;
        $("modal_barracks_arthurs_tutred").innerHTML = "0 " + g_js_strings.timestr.timesec;
        $("modal_barracks_merlins_tutred").innerHTML = "0 " + g_js_strings.timestr.timesec
    }
}
function clearOtherTuts(a) {
    if (a == 1) {
        $("modal_barracks_arthurs_tut").checked = false;
        $("modal_barracks_merlins_tut").checked = false
    } else {
        if (a == 2) {
            $("modal_barracks_tut").checked = false;
            $("modal_barracks_merlins_tut").checked = false
        } else {
            if (a == 3) {
                $("modal_barracks_tut").checked = false;
                $("modal_barracks_arthurs_tut").checked = false
            }
        }
    }
}
function modal_barracks_train_maxbtn(a) {
    $("modal_barracks_num").value = parseInt($("modal_barracks_max_num").innerHTML, 10);
    modal_barracks_train_timecalc($("modal_barracks_num"), a)
}
function modal_barracks_train_max(e) {
    var b = new Array();
    var a = new Array();
    for (var d = 1; d < 5; d++) {
        b.push(parseInt(unitcost["unt" + e][d]) * 3600);
        a.push(parseInt(seed.resources["city" + currentcityid]["rec" + d][0]))
    }
    b.push(parseInt(unitcost["unt" + e][5]));
    a.push(parseInt(seed.citystats["city" + currentcityid].gold[0]));
    b.push(parseInt(unitcost["unt" + e][6]));
    a.push(parseInt(seed.citystats["city" + currentcityid].pop[0]) - parseInt(seed.citystats["city" + currentcityid].pop[3]));
    var c = a[0] / b[0];
    for (var d = 1; d < b.length; d++) {
        if (parseInt(b[d]) != 0) {
            c = Math.min(c, a[d] / b[d])
        }
    }
    return parseInt(c) || 0
}
function modal_barracks_getmoreshop() {
    Modal.hideModalAll();
    modal_shop(2)
}
function modal_barracks_train_action(b) {
    if (!$("unit_btns_start").hasClassName("unmet")) {
        var a = parseInt($("modal_barracks_num").value);
        if (a <= modal_barracks_train_max(b) && a > 0) {
            var c = 0;
            if ($("modal_barracks_tut").checked) {
                if (parseInt(seed.items.i36) > 0) {
                    c = 36
                }
            }
            if ($("modal_barracks_arthurs_tut").checked) {
                if (parseInt(seed.items.i37) > 0) {
                    c = 37
                }
            }
            if ($("modal_barracks_merlins_tut").checked) {
                if (parseInt(seed.items.i38) > 0) {
                    c = 38
                }
            }
            Modal.hideModal();
            train_unit(b, a, c)
        }
    }
}
function changeBarracksModalTabs(a) {
    var c = $("barracksModalTabs").select("a");
    for (var b = 0; b < c.length; b++) {
        c[b].className = "tab";
        $("barracks_" + b).hide()
    }
    $("barracks_" + a).show();
    c[a].addClassName("selected");
    if (a == 0) {
        $("modal_build").className = "tab1"
    } else {
        $("modal_build").className = "tab2";
        modal_barracks_trainingtab()
    }
}
function trainingButton(a, c, b) {
    if (b) {
        a.push("<span class='speedupButton'>")
    }
    a.push("<a id='button_training_cancel' class='" + (b ? "inlineButton20Red" : "button20") + "' href='#' onclick='");
    if (b) {
        cm.log.l("modal_speedup - trainingTS - the new finish time - 5th param: (unt[2])=" + c[2]);
        a.push('modal_speedup( "trn", ' + c[0] + ", " + c[0] + ', "Training", ' + c[2])
    } else {
        a.push("cancelTraining( 0," + currentcityid + "," + c[0] + "," + c[1] + "," + c[3] + "," + c[2] + "," + c[5] + "," + (b ? "true" : "false"))
    }
    a.push(");return false;'>");
    a.push("<span>" + (b ? g_js_strings.commonstr.speedup : g_js_strings.commonstr.cancel) + "</span></a>");
    if (b) {
        a.push("</span>")
    }
}
function modal_barracks_trainingtab() {
    if (seed.queue_unt["city" + currentcityid].length > 0) {
        var b = new Array();
        var h = seed.queue_unt["city" + currentcityid][0];
        b.push("<div class='clearfix traincur'>");
        b.push("<div class='piccol'><img src='");
        b.push(stimgUrl);
        b.push("img/units/unit_");
        b.push(h[0]);
        b.push("_50.jpg?6545'/></div>");
        b.push("<div class='infocol'><div class='untnm'>");
        b.push(unitcost["unt" + h[0]][0]);
        b.push("</div><div>");
        b.push(h[1]);
        b.push("</div>");
        var g = parseInt(h[3]) - parseInt(h[2]);
        var e = unixtime();
        var c = parseInt(h[3]) - e;
        b.push("<div>" + g_js_strings.modal_barracks_trainingtab.totaltraintime + ": " + timestr(g) + "</div>");
        b.push("</div>");
        b.push("</div>");
        b.push("<div class='btnrow clearfix'><div class='est'>");
        b.push(g_js_strings.modal_barracks_trainingtab.esttimeremain);
        b.push(": <b>");
        b.push("<span id='intraining_estimatedtimeremain'></span>");
        b.push("</b></div>");
        trainingButton(b, h);
        trainingButton(b, h, true);
        b.push("</div>");
        $("modal_currentlytraining").update(b.join(""));
        CountDown.addCountDown("intraining_estimatedtimeremain", c, function () {
            update_seed_ajax(true, function () {
                $("intraining_estimatedtimeremain").update(g_js_strings.modal_barracks_trainingtab.completetxt);
                $("button_training_cancel").hide();
                modal_barracks_trainingtab()
            })
        });
        if (seed.queue_unt["city" + currentcityid].length > 1) {
            var a = new Array();
            for (var d = 1; d < seed.queue_unt["city" + currentcityid].length; d++) {
                var f = (d % 2 == 0) ? "" : "stripe";
                a.push("<div class='clearfix queueitem " + f + "'>");
                a.push("<div class='piccol'><img src='");
                a.push(stimgUrl);
                a.push("img/units/unit_");
                a.push(seed.queue_unt["city" + currentcityid][d][0]);
                a.push("_50.jpg'/></div>");
                a.push("<div class='infocol'><div><b>");
                a.push(unitcost["unt" + seed.queue_unt["city" + currentcityid][d][0]][0]);
                a.push(":</b> ");
                a.push(seed.queue_unt["city" + currentcityid][d][1]);
                a.push("</div><div><b>");
                a.push(g_js_strings.modal_barracks_trainingtab.esttime);
                a.push(":</b> ");
                a.push(timestr(parseInt(seed.queue_unt["city" + currentcityid][d][3]) - parseInt(seed.queue_unt["city" + currentcityid][d][2])));
                a.push("<a href='#' class='button20' onclick='cancelTraining(");
                a.push(d + "," + currentcityid + "," + seed.queue_unt["city" + currentcityid][d][0] + "," + seed.queue_unt["city" + currentcityid][d][1] + "," + seed.queue_unt["city" + currentcityid][d][3] + "," + seed.queue_unt["city" + currentcityid][d][2] + "," + seed.queue_unt["city" + currentcityid][d][5]);
                a.push(");return false;'>");
                a.push("<span>" + g_js_strings.commonstr.cancel + "</span></a>");
                a.push("</div></div>");
                a.push("</div>")
            }
            $("modal_trainingqueue").update(a.join(""))
        } else {
            $("modal_trainingqueue").update("")
        }
    } else {
        $("modal_currentlytraining").update("")
    }
};
cm.BLTutorialSteps = [{
    name: "BL_INTRODUCTION",
    events: {
        enter: function () {
            cm.TutorialKeyController.disableKeys();
            if (cm.TutorialProgressChecker.isSawmillPositionOccupied()) {
                cm.TutorialManager.gotoStep("WATCH_SAWMILL_PROGRESS")
            } else {
                var a = [];
                a.push("<div class='content'>");
                a.push("<div class='desc'>" + g_js_strings.tutorialMerlinTutorial.merlin0a.replace("%1$s", seed.player.prefix) + "</div>");
                a.push("<div class='buttonrow clearfix'>");
                a.push("<a class='brownButton' onclick='cm.TutorialEventDispatcher.dispatchTutorialEvent(\"skip\", \"BL_INTRODUCTION\");return false;'>" + g_js_strings.commonstr.nothanks + "</a>");
                a.push("<a class='blueButton' onclick='cm.TutorialEventDispatcher.dispatchTutorialEvent(\"complete\", \"BL_INTRODUCTION\");return false;'>" + g_js_strings.commonstr.next + "</a></div>");
                a.push("</div>");
                var b = new cm.BLTutorialDialog(a.join(""));
                b.show();
                cm.ConversionTracker.track(g_tutorialEntryTag, "FTE Tutorial v3-Merlin Intro-1" + seed.player.g);
                cm.ConversionTracker.track(g_tutorialEntryTag, "FTE Tutorial v3 Skip-Merlin Intro-1" + seed.player.g);
                cm.MixPanelTracker.trackFunnel("FTE Tutorial v3", 1, "Merlin Intro", {
                    usr_gen: seed.player.g,
                    usr_byr: seed.player.y,
                    usr_ttl: titlenames[seed.player.title],
                    distinct_id: tvuid
                });
                cm.MixPanelTracker.trackFunnel("FTE Tutorial v3 Skip", 1, "Merlin Intro", {
                    usr_gen: seed.player.g,
                    usr_byr: seed.player.y,
                    usr_ttl: titlenames[seed.player.title],
                    distinct_id: tvuid
                });
                if (numWorlds == 1) {
                    cm.ConversionTracker.track("", "fte_conv_merlin_intro");
                    fteConversionTracker("fte_conv_merlin_intro")
                }
            }
        },
        complete: function () {
            cm.TutorialManager.gotoNextStep()
        },
        skip: function () {
            cm.TutorialManager.gotoStep("BL_SKIP")
        }
    }
}, {
    name: "CLICK_LOT_BUILD_SAWMILL",
    events: {
        enter: function () {
            if (cm.TutorialProgressChecker.isSawmillPositionOccupied()) {
                cm.TutorialManager.gotoStep("WATCH_SAWMILL_PROGRESS")
            } else {
                if (!$("maparea_fields").visible()) {
                    changeview_fields($("mod_views_field"))
                }
                $("arrowtip").innerHTML = "<div class='arrowdown'><div style='margin-top:-80px;width:200px;'>" + g_js_strings.tutorialCheck.clickforsawmill_a + "</div></div>";
                $("arrowtip").style.top = "210px";
                $("arrowtip").style.left = "300px";
                $("arrowtip").show();
                $("tutorialCover").addClassName("sawmill");
                tutorialUpdateCover2(278, 306, 91, 51);
                $("tutorialCover").show();
                if (numWorlds == 1) {
                    cm.ConversionTracker.track("", "fte_conv_start_sawmill");
                    fteConversionTracker("fte_conv_start_sawmill")
                }
            }
        },
        complete: function () {
            cm.TutorialManager.gotoNextStep()
        }
    }
}, {
    name: "CHOOSE_SAWMILL",
    events: {
        enter: function () {
            if (cm.TutorialProgressChecker.isSawmillPositionOccupied()) {
                cm.TutorialManager.gotoStep("WATCH_SAWMILL_PROGRESS")
            } else {
                $("arrowtip").innerHTML = "<div class='arrowleft'><div>" + g_js_strings.tutorialCheck.clickheresawmill_a + "</div></div>";
                $("arrowtip").style.top = "251px";
                $("arrowtip").style.left = "244px";
                $("arrowtip").show();
                $("tutorialCover").addClassName("clicksawmill");
                tutorialUpdateCover2(128, 118, 105, 206);
                $("tutorialCover").show();
                if (numWorlds == 1) {
                    cm.ConversionTracker.track("", "fte_conv_select_sawmill");
                    fteConversionTracker("fte_conv_select_sawmill")
                }
            }
        },
        complete: function () {
            cm.TutorialManager.gotoNextStep()
        }
    }
}, {
    name: "CLICK_BUILD_BUTTON_SAWMILL",
    events: {
        enter: function () {
            if (cm.TutorialProgressChecker.isSawmillPositionOccupied()) {
                cm.TutorialManager.gotoStep("WATCH_SAWMILL_PROGRESS")
            } else {
                $("modalControls1").hide();
                if ($("modal_whats_this_link")) {
                    $("modal_whats_this_link").style.visibility = "hidden"
                }
                $("arrowtip").innerHTML = "<div class='arrowdown'><div>" + g_js_strings.tutorialCheck.clickbuildnohelp_a + "</div></div>";
                $("arrowtip").style.top = "175px";
                $("arrowtip").style.left = "379px";
                $("arrowtip").show();
                Modal.showCurtain()
            }
        },
        complete: function () {
            cm.TutorialManager.gotoNextStep()
        }
    }
}, {
    name: "WATCH_SAWMILL_PROGRESS",
    events: {
        enter: function () {
            if (cm.TutorialProgressChecker.isSawmillBuilding()) {
                $("arrowtip").innerHTML = "<div class='arrowdown'><div style='margin-top:-150px;width:150px;'>" + g_js_strings.tutorialCheck.buildingtimeline + "</div></div>";
                $("arrowtip").style.top = "465px";
                $("arrowtip").style.left = "500px";
                $("arrowtip").show();
                Modal.showCurtain();
                $("modalCurtain0").setOpacity(0.3)
            } else {
                cm.TutorialManager.gotoNextStep()
            }
        },
        complete: function () {
            cm.TutorialManager.gotoNextStep();
            tutorialAdvance(1, 15)
        }
    }
}, {
    name: "CLICK_QUEST_SAWMILL_REWARD",
    events: {
        enter: function () {
            if (cm.TutorialProgressChecker.isSawmillRewardClaimed()) {
                cm.TutorialManager.gotoStep("CLICK_CITY_TAB")
            } else {
                tutorialAdvance(1, 16);
                Modal.hideModalAll();
                $("arrowtip").innerHTML = "<div class='arrowup'><div style='width:200px;'>" + g_js_strings.tutorialCheck.clickforquests_a + "</div></div>";
                $("arrowtip").style.top = "100px";
                $("arrowtip").style.left = "209px";
                $("arrowtip").show();
                $("tutorialCover").addClassName("quest");
                tutorialUpdateCover2(190, 40, 55, 55);
                $("tutorialCover").show();
                if (numWorlds == 1) {
                    cm.ConversionTracker.track("", "fte_conv_click_quest");
                    fteConversionTracker("fte_conv_click_quest")
                }
            }
        },
        complete: function () {
            cm.TutorialManager.gotoNextStep()
        }
    }
}, {
    name: "CLICK_QUEST_REWARD_BUTTON",
    events: {
        enter: function () {
            if (cm.TutorialProgressChecker.isSawmillRewardClaimed()) {
                cm.TutorialManager.gotoStep("CLICK_CITY_TAB")
            } else {
                modal_quests_doquests();
                $("modalControls1").hide();
                Event.observe("modalControlsClose1", "click", modal_questsFTEClose1);
                $("arrowtip").innerHTML = "<div class='arrowright'><div>" + g_js_strings.tutorialCheck.clickforreward + "</div></div>";
                $("arrowtip").style.top = "497px";
                $("arrowtip").style.left = "340px";
                $("arrowtip").show();
                Modal.showCurtain();
                if (numWorlds == 1) {
                    cm.ConversionTracker.track("", "fte_conv_get_quest_reward");
                    fteConversionTracker("fte_conv_get_quest_reward")
                }
            }
        },
        complete: function () {
            cm.TutorialManager.gotoNextStep()
        }
    }
}, {
    name: "CLICK_QUEST_CLOSE_BUTTON",
    events: {
        enter: function () {
            if (cm.TutorialProgressChecker.isSawmillRewardClaimed()) {
                cm.TutorialManager.gotoStep("CLICK_CITY_TAB")
            } else {
                $("arrowtip").innerHTML = "<div class='arrowright'><div style='margin-left:-100px'>" + g_js_strings.tutorialCheck.clickclosetofieldview + "</div></div>";
                $("arrowtip").style.top = "497px";
                $("arrowtip").style.left = "570px";
                $("arrowtip").show();
                var a = document.createElement("div");
                a.id = "questClickCover";
                a.className = "clickCover";
                document.body.appendChild(a);
                Modal.showCurtain();
                $("modal_quests_fte_close_btn").show();
                $("modalControls1").show();
                tutorialFlag = true
            }
        },
        complete: function () {
            tutorialAdvance(1, 18);
            cm.TutorialManager.gotoNextStep()
        }
    }
}, {
    name: "CLICK_CITY_TAB",
    events: {
        enter: function () {
            if (cm.TutorialProgressChecker.isCottagePositionOccupied()) {
                cm.TutorialManager.gotoStep("BL_CONGRATULATIONS")
            } else {
                tutorialAdvance(1, 19);
                $("arrowtip").innerHTML = "<div class='arrowup'><div style='width:200px;'>" + g_js_strings.tutorialCheck.clickforcity_a + "</div></div>";
                $("arrowtip").style.top = "148px";
                $("arrowtip").style.left = "6px";
                $("arrowtip").show();
                $("tutorialCover").addClassName("cityview");
                tutorialUpdateCover2(-6, 103, 43, 24);
                $("tutorialCover").show();
                if (numWorlds == 1) {
                    cm.ConversionTracker.track("", "fte_conv_city_view");
                    fteConversionTracker("fte_conv_city_view")
                }
            }
        },
        complete: function () {
            cm.TutorialManager.gotoNextStep()
        }
    }
}, {
    name: "CLICK_LOT_BUILD_COTTAGE",
    events: {
        enter: function () {
            if (cm.TutorialProgressChecker.isCottagePositionOccupied()) {
                cm.TutorialManager.gotoStep("BL_CONGRATULATIONS")
            } else {
                $("arrowtip").innerHTML = "<div class='arrowdown'><div style='margin-top:-80px;width:200px;'>" + g_js_strings.tutorialCheck.clickforcott_a + "</div></div>";
                $("arrowtip").style.top = "236px";
                $("arrowtip").style.left = "240px";
                $("arrowtip").show();
                $("tutorialCover").addClassName("cottage");
                tutorialUpdateCover2(235, 322, 43, 59);
                $("tutorialCover").show();
                if (numWorlds == 1) {
                    cm.ConversionTracker.track("", "fte_conv_start_cottage");
                    fteConversionTracker("fte_conv_start_cottage")
                }
            }
        },
        complete: function () {
            cm.TutorialManager.gotoNextStep()
        }
    }
}, {
    name: "CHOOSE_COTTAGE",
    events: {
        enter: function () {
            $("arrowtip").innerHTML = "<div class='arrowleft'><div>" + g_js_strings.tutorialCheck.clickherecottage_a + "</div></div>";
            $("arrowtip").style.top = "264px";
            $("arrowtip").style.left = "130px";
            $("arrowtip").show();
            $("tutorialCover").addClassName("clickcottage");
            tutorialUpdateCover2(16, 117, 105, 206);
            $("tutorialCover").show();
            if (numWorlds == 1) {
                cm.ConversionTracker.track("", "fte_conv_select_cottage");
                fteConversionTracker("fte_conv_select_cottage")
            }
        },
        complete: function () {
            cm.TutorialManager.gotoNextStep()
        }
    }
}, {
    name: "CLICK_BUILD_BUTTON_COTTAGE",
    events: {
        enter: function () {
            if (cm.TutorialProgressChecker.isCottagePositionOccupied()) {
                cm.TutorialManager.gotoStep("BL_CONGRATULATIONS")
            } else {
                $("modalControls1").hide();
                if ($("modal_whats_this_link")) {
                    $("modal_whats_this_link").style.visibility = "hidden"
                }
                $("arrowtip").innerHTML = "<div class='arrowdown'><div>" + g_js_strings.tutorialCheck.clickbuildnohelpcottage + "</div></div>";
                $("arrowtip").style.top = "175px";
                $("arrowtip").style.left = "379px";
                $("arrowtip").show();
                Modal.showCurtain()
            }
        },
        complete: function () {
            tutorialAdvance(1, 21);
            cm.TutorialManager.gotoNextStep()
        }
    }
}, {
    name: "BL_CONGRATULATIONS",
    nextStepName: "ENDING",
    events: {
        enter: function () {
            var a = [];
            a.push("<div class='content'>");
            a.push("<div class='desc'>" + g_js_strings.tutorialMerlinTutorial.merlin5a + "</div>");
            a.push("<div class='buttonrow'>");
            a.push("<a class='blueButton' onclick='cm.TutorialEventDispatcher.dispatchTutorialEvent(\"complete\",\"BL_CONGRATULATIONS\");return false;'><span>" + g_js_strings.commonstr.next + "</span></a><br clear='all' /></div>");
            a.push("</div>");
            var b = new cm.BLTutorialDialog(a.join(""));
            b.setClassName("bltutorial ending");
            b.show();
            cm.ConversionTracker.track(g_tutorialEntryTag, "FTE Tutorial v3-Merlin Level Up-5");
            cm.MixPanelTracker.trackFunnel("FTE Tutorial v3", 5, "Merlin Level Up", {
                usr_gen: seed.player.g,
                usr_byr: seed.player.y,
                usr_ttl: titlenames[seed.player.title],
                distinct_id: tvuid
            });
            if (numWorlds == 1) {
                cm.ConversionTracker.track("", "fte_conv_merlin_level_up");
                fteConversionTracker("fte_conv_merlin_level_up")
            }
        },
        complete: function () {
            seed.tutorial.t1 = 50;
            tutorialMerlinOver();
            cm.TutorialManager.gotoNextStep()
        }
    }
}, {
    name: "BL_SKIP",
    events: {
        enter: function () {
            var a = [];
            a.push("<div class='content'>");
            a.push("<div class='desc'>" + g_js_strings.tutorialMerlinTutorial.merlin10a + "</div>");
            a.push("<div class='buttonrow clearfix'>");
            a.push("<a class='brownButton' onclick='cm.TutorialEventDispatcher.dispatchTutorialEvent(\"complete\", \"BL_SKIP\");return false;'>" + g_js_strings.tutorialMerlinTutorial.skiptutorial + "</span></a>");
            a.push("<a class='blueButton' onclick='cm.TutorialEventDispatcher.dispatchTutorialEvent(\"cancel\", \"BL_SKIP\");return false;'><span>" + g_js_strings.commonstr.cancel + "</span></a>");
            a.push("</div>");
            a.push("</div>");
            var b = new cm.BLTutorialDialog(a.join(""));
            b.show()
        },
        complete: function () {
            tutorialNoShow();
            cm.TutorialManager.gotoNextStep()
        },
        cancel: function () {
            cm.TutorialManager.startFromBeginning()
        }
    }
}, {
    name: "ENDING",
    events: {
        enter: function () {
            cm.TutorialManager.end();
            cm.BLTutorialSteps = cm.MerlinTutorialSteps = null
        }
    }
}];

function setBookmarkLocation(tileId, bookmarkName) {
    var params = Object.clone(g_ajaxparams);
    params.requestType = "BOOKMARK_LOCATION";
    params.tileId = tileId;
    params.bookmarkName = bookmarkName || "";
    new Ajax.Request(g_ajaxpath + "ajax/tileBookmark.php" + g_ajaxsuffix, {
        method: "post",
        parameters: params,
        onSuccess: function (message) {
            cm.Bookmarks.get(null, true);
            var rslt = eval("(" + message.responseText + ")");
            if (rslt.ok) {
                Modal.hideModal()
            }
            if (!rslt.ok) {
                Modal.hideModal()
            }
        },
        onFailure: function () {}
    });
    if ($("bookmarkLocLink").className == "open") {
        $("bookmarkLocLink").className = "close";
        $("bookmarksBox").hide()
    }
}
function openBookMarks() {
    if ($("bookmarkLocLink").className == "open") {
        $("bookmarkLocLink").className = "close";
        $("bookmarksBox").hide()
    } else {
        $("bookmarksBox").show();
        $("bookmarkLocLink").className = "open";
        cm.Bookmarks.get(function (d) {
            var a = [];
            var c = null;
            a.push("<div class='bookmarkswrap'>");
            for (var b = 0; b < d.length; ++b) {
                c = d[b];
                a.push("<div class='bookmarkrow'>");
                a.push("<a class='location'  onclick='setBookmarkCoord(" + c.left + "," + c.top + ");return false;'>" + unescape(c.name) + " (" + c.left + ", " + c.top + ") </a>");
                if (undefined != c.bookmark_id) {
                    a.push("<a class='delete' onclick='deleteBookmark(this," + c.bookmark_id + ");return false;'>X</a>")
                }
                a.push("</div>")
            }
            a.push("</div>");
            $("bookmarksBox").innerHTML = a.join("")
        })
    }
}
function setBookmarkCoord(b, a) {
    $("mapXCoor").value = b;
    $("mapYCoor").value = a;
    reCenterMapWithCoor();
    openBookMarks()
}
function deleteBookmark(tgt, bid) {
    var params = Object.clone(g_ajaxparams);
    params.requestType = "REMOVE_BOOKMARK";
    params.bookmarkId = bid;
    new Ajax.Request(g_ajaxpath + "ajax/tileBookmark.php" + g_ajaxsuffix, {
        method: "post",
        parameters: params,
        onSuccess: function (message) {
            cm.Bookmarks.get(null, true);
            var rslt = eval("(" + message.responseText + ")");
            if (rslt.ok) {
                var bmrow = tgt.parentNode;
                Object.extend(bmrow);
                bmrow.remove();
                openBookMarks()
            }
        },
        onFailure: function () {}
    })
}
cm = cm || {};
cm.Bookmarks = function ($) {
    var bookmarks_ = null;
    var get_ = function (callback, is_latest) {
            if (is_latest || (null == bookmarks_)) {
                sync_(callback)
            } else {
                return_(callback)
            }
        };
    var return_ = function (callback) {
            var result = [];
            for (var i = 0; i < seed.cities.length; i++) {
                result.push({
                    name: seed.cities[i][1],
                    left: seed.cities[i][2],
                    top: seed.cities[i][3]
                })
            }
            if (callback) {
                callback(result.concat(bookmarks_))
            }
        };
    var sync_ = function (callback) {
            var params = Object.clone(g_ajaxparams);
            params.requestType = "GET_BOOKMARK_INFO";
            new Ajax.Request(g_ajaxpath + "ajax/tileBookmark.php" + g_ajaxsuffix, {
                method: "post",
                parameters: params,
                onSuccess: function (message) {
                    var rslt = eval("(" + message.responseText + ")");
                    if (rslt.ok) {
                        bookmarks_ = [];
                        var bookmarkInfo = rslt.bookmarkInfo;
                        for (id in bookmarkInfo) {
                            bookmarks_.push({
                                name: bookmarkInfo[id].name,
                                left: bookmarkInfo[id].xCoord,
                                top: bookmarkInfo[id].yCoord,
                                bookmark_id: bookmarkInfo[id].bookmarkId
                            })
                        }
                        return_(callback)
                    }
                },
                onFailure: function () {}
            })
        };
    return {
        get: get_
    }
}(jQuery);
cm = cm || {};
cm.BoostModel = jQueryClass.extend({
    init: function (a) {
        this.id = a[0];
        this.expireTime = Number(a[1])
    },
    isActive: function () {
        return (this.expireTime > unixtime())
    },
    addTime: function (a) {
        this.expireTime = this.expireTime + a;
        return this.expireTime
    },
    setTime: function (a) {
        this.expireTime = a;
        return this.expireTime
    },
    timeLeft: function () {
        return this.expireTime
    }
});
var cm = cm || {};
cm.FlashingNotifier = function (f) {
    var d = 0;
    var k = null;
    var b = 0;
    var i = 1;
    var g = 6;
    var h = function (l) {
            if (undefined != l.duration) {
                d = l.duration
            }
            if (undefined != l.element) {
                k = l.element;
                i = k.css("opacity")
            }
            if (undefined != l.repeat_times) {
                g = l.repeat_times
            }
        };
    var c = function () {
            if (d < 1 || null == k || g < 1) {
                return
            }
            if (b < unixtime()) {
                return
            }
            j();
            k.fadeIn(100, "swing");
            for (var l = 0; l < g - 1; ++l) {
                k.fadeToggle(d, "swing")
            }
            k.fadeIn(d, "swing")
        };
    var a = function (l) {
            d = l
        };
    var e = function (l) {
            b = l
        };
    var j = function () {
            if (null == k) {
                return
            }
            k.clearQueue();
            k.stop();
            k.css("opacity", i)
        };
    this.run = c;
    this.setDuration = a;
    this.setEndTime = e;
    this.stop = j;
    h(f)
};
cm.BoostsExpireNotifier = function (d) {
    var a = 6;
    var f = [166, 333, 500];
    var j = {
        production: {
            selector: "#maparea_boosts_production",
            flasher: null
        },
        combat: {
            selector: "#maparea_boosts_combat",
            flasher: null
        },
        fog: {
            selector: "#maparea_boosts_fog",
            flasher: null
        }
    };
    var b = null;
    var i = null;
    var e = function () {
            b = cm.BoostExpiration.expirationTable();
            d.each(j, function (l, k) {
                k.flasher = new cm.FlashingNotifier({
                    duration: 0,
                    element: d(k.selector),
                    repeat_times: a
                })
            });
            d(document).bind("onUpdateBoost", g);
            d(document).bind("onStopBoostNotifier", h)
        };
    var c = function () {
            for (boost_type in j) {
                j[boost_type].flasher.run()
            }
        };
    var h = function (l, k) {
            if (undefined == j[k] || null == j[k].flasher) {
                return
            }
            j[k].flasher.stop()
        };
    var g = function () {
            var s = null;
            var k = null;
            var m = null;
            var l = unixtime();
            var p = 0;
            var q = 0;
            var n = 0;
            var o = 0;
            var t = [];
            var r = false;
            for (s in j) {
                m = j[s];
                n = f.length;
                o = 0;
                t = b[s];
                for (k in t) {
                    if (undefined == seed.playerEffects[k]) {
                        continue
                    }
                    p = seed.playerEffects[k] - l;
                    if (p < 0) {
                        continue
                    }
                    for (q = 0; q < f.length; ++q) {
                        if (p < t[k][q]) {
                            break
                        }
                    }
                    if (q >= f.length) {
                        continue
                    }
                    n = Math.min(n, q);
                    if (o) {
                        o = Math.min(o, seed.playerEffects[k])
                    } else {
                        o = seed.playerEffects[k]
                    }
                }
                if (n < f.length) {
                    m.flasher.setDuration(f[n]);
                    m.flasher.setEndTime(o);
                    r = true
                } else {
                    m.flasher.setDuration(0);
                    m.flasher.setEndTime(0)
                }
            }
            if (r) {
                if (null == i) {
                    i = setInterval(c, 6000);
                    setTimeout(c, 5)
                }
            } else {
                if (null != i) {
                    clearTimeout(i);
                    i = null
                }
            }
        };
    d(document).ready(e);
    return {
        stop: function (k) {
            h(null, k)
        },
        update: g
    }
}(jQuery);
var cm = cm || {};
cm.BoostExpiration = function () {
    var a = {
        production: {
            r0BstExp: [3600, 7200, 14400],
            r1BstExp: [3600, 7200, 14400],
            r2BstExp: [3600, 7200, 14400],
            r3BstExp: [3600, 7200, 14400],
            r4BstExp: [3600, 7200, 14400]
        },
        combat: {
            troopUpkeepReductExp: [3600, 7200, 14400],
            atkExpire: [3600, 7200, 14400],
            atk2Expire: [3600, 7200, 14400],
            defExpire: [3600, 7200, 14400],
            def2Expire: [3600, 7200, 14400],
            truceExpireUnixTime: [3600, 7200, 14400]
        },
        fog: {
            fogExpire: [3600, 43200, 86400]
        }
    };
    var b = function () {
            var d = [];
            var f = null;
            if (arguments.length > 1) {
                d.push(arguments[0]);
                f = arguments[1]
            } else {
                d = ["production", "combat", "fog"];
                f = arguments[0]
            }
            var e = "";
            var c = null;
            while (d.length) {
                e = d.pop();
                c = a[e];
                if (undefined == c) {
                    continue
                }
                if (undefined != c[f]) {
                    return c[f][c[f].length - 1]
                }
            }
            return -1
        };
    return {
        expirationTable: function () {
            return a
        },
        getMaxNotificationTime: b
    }
}();

function update_boosts() {
    var d = false;
    var b = false;
    var e = false;
    var c = unixtime();
    if (parseInt(seed.playerEffects.fogExpire) > c) {
        e = true
    }
    for (var a = 0; a < 5; a++) {
        if (parseInt(seed.playerEffects["r" + a + "BstExp"]) > c) {
            d = true;
            break
        }
    }
    if (parseInt(seed.playerEffects.atkExpire) > c || parseInt(seed.playerEffects.atk2Expire) > c || parseInt(seed.playerEffects.defExpire) > c || parseInt(seed.playerEffects.def2Expire) > c || parseInt(seed.playerEffects.troopUpkeepReductExp) > c || parseInt(seed.playerEffects.loadExpire) > c || parseInt(seed.playerEffects.returnExpire) > c || parseInt(seed.playerEffects.lifeExpire) > c) {
        b = true
    }
    if (undefined != seed.player.truceExpireUnixTime && seed.player.truceExpireUnixTime > c) {
        seed.playerEffects.truceExpireUnixTime = seed.player.truceExpireUnixTime;
        b = true
    } else {
        delete seed.playerEffects.truceExpireUnixTime
    }
    jQuery(document).trigger("onUpdateBoost");
    if (e) {
        $("maparea_boosts_fog").show()
    } else {
        jQuery(document).trigger("onStopBoostNotifier", ["fog"]);
        $("maparea_boosts_fog").hide()
    }
    if (d) {
        $("maparea_boosts_production").show()
    } else {
        jQuery(document).trigger("onStopBoostNotifier", ["production"]);
        $("maparea_boosts_production").hide()
    }
    if (b) {
        $("maparea_boosts_combat").show()
    } else {
        jQuery(document).trigger("onStopBoostNotifier", ["combat"]);
        $("maparea_boosts_combat").hide()
    }
    if (d || b || e) {
        $("maparea_boosts").show()
    } else {
        $("maparea_boosts").hide()
    }
}
function boosts_tooltip_fog(g, a, e) {
    var d = new Array();
    d.push("<div id='boosts_tooltip'>");
    var c = unixtime();
    if (parseInt(seed.playerEffects.fogExpire) > c) {
        d.push("<div class='effect'>");
        d.push(g_js_strings.boosts_tooltip_fog.fog);
        d.push("</div>");
        var b = parseInt(seed.playerEffects.fogExpire) - c;
        var f = cm.BoostExpiration.getMaxNotificationTime("fog", "fogExpire");
        if (f > 0 && b < f) {
            d.push("<div class='time expired'>")
        } else {
            d.push("<div class='time'>")
        }
        d.push(g_js_strings.boosts_tooltip_production.aleft.replace("%1$s", timestr(b)));
        d.push("</div>")
    }
    d.push("</div>");
    showTooltip(d.join(""), g, a, e)
}
function boosts_tooltip_production(d, h, g) {
    var b = new Array();
    b.push("<div id='boosts_tooltip'>");
    var c = unixtime();
    var e = 0;
    var a = -1;
    if (parseInt(seed.playerEffects.r0BstExp) > c) {
        e = parseInt(seed.playerEffects.r0BstExp) - c;
        a = cm.BoostExpiration.getMaxNotificationTime("production", "r0BstExp");
        b.push("<div class='effect'>");
        b.push(g_js_strings.boosts_tooltip_production.goldprodincrease);
        b.push("</div>");
        if (a > 0 && e < a) {
            b.push("<div class='time expired'>")
        } else {
            b.push("<div class='time'>")
        }
        b.push(g_js_strings.boosts_tooltip_production.aleft.replace("%1$s", timestr(e)));
        b.push("</div>")
    }
    var j = "";
    for (var f = 1; f < 5; f++) {
        j = "r" + f + "BstExp";
        if (parseInt(seed.playerEffects[j]) > c) {
            e = parseInt(seed.playerEffects[j]) - c;
            a = cm.BoostExpiration.getMaxNotificationTime("production", j);
            b.push("<div class='effect'>");
            b.push(g_js_strings.boosts_tooltip_production.aprodincrease.replace("%1$s", resourceinfo["rec" + f]));
            b.push("</div>");
            if (a > 0 && e < a) {
                b.push("<div class='time expired'>")
            } else {
                b.push("<div class='time'>")
            }
            b.push(g_js_strings.boosts_tooltip_production.aleft.replace("%1$s", timestr(e)));
            b.push("</div>")
        }
    }
    b.push("</div>");
    showTooltip(b.join(""), d, h, g)
}
function boosts_tooltip_combat(e, i, g) {
    var c = [];
    c.push("<div id='boosts_tooltip'>");
    var d = unixtime();
    var h = {
        atkExpire: g_js_strings.boosts_tooltip_combat.troopatkinc,
        defExpire: g_js_strings.boosts_tooltip_combat.troopdefinc,
        atk2Expire: g_js_strings.boosts_tooltip_combat.troopatkinc2,
        def2Expire: g_js_strings.boosts_tooltip_combat.troopdefinc2,
        truceExpireUnixTime: g_js_strings.boosts_tooltip_combat.cityinpeace,
        troopUpkeepReductExp: g_js_strings.boosts_tooltip_combat.troopupkeepreduct,
        loadExpire: g_js_strings.boosts_tooltip_combat.loadincrease,
        returnExpire: g_js_strings.boosts_tooltip_combat.troopreturnreduct,
        lifeExpire: g_js_strings.boosts_tooltip_combat.troophealthincrease
    };
    var f = 0;
    var a = -1;
    for (var b in h) {
        if (seed.playerEffects[b] && seed.playerEffects[b] > d) {
            f = parseInt(seed.playerEffects[b]) - d;
            a = cm.BoostExpiration.getMaxNotificationTime("combat", b);
            c.push("<div class='effect'>");
            c.push(h[b]);
            c.push("</div>");
            if (a > 0 && f < a) {
                c.push("<div class='time expired'>")
            } else {
                c.push("<div class='time'>")
            }
            c.push(g_js_strings.boosts_tooltip_production.aleft.replace("%1$s", timestr(f)));
            c.push("</div>")
        }
    }
    c.push("</div>");
    showTooltip(c.join(""), e, i, g)
};
var cm = cm || {};
cm.SpeedUpType = {
    build: "buildWithHelp" + tvuid,
    upgrade: "upgradeWithHelp" + tvuid,
    research: "researchWithHelp" + tvuid
};
cm.BuildingSpeedupController = new function () {
    var a = function (g) {
            var f = Event.element(g);
            while (!f.name) {
                f = f.parentNode
            }
            var d = f.name;
            return d
        };
    var b = "Speedup_Building_Click";
    var c = "bdg";
    this.queueClick = function (g, f) {
        var d = a(g);
        modal_speedup(c, d, undefined, f);
        cm.MixPanelTracker.track(b, {
            from: "queue"
        })
    };
    this.buildingClick = function (g) {
        var d = a(g);
        var f = jQuery(g.target).parent().parent().parent().attr("id");
        modal_speedup(c, d, f);
        cm.MixPanelTracker.track(b, {
            from: "building"
        });
        Event.stop(g)
    };
    this.popupClick = function (f) {
        var d = a(f);
        modal_speedup(c, d);
        cm.MixPanelTracker.track(b, {
            from: "popup"
        })
    }
};
cm.BuildingController = function (b, a) {
    var c = this;
    var d = b;
    var e = a;
    this.buildButtonClicked = function (j) {
        var l = d.getHelped();
        var f = d.getBuildingId();
        var g = d.getSlotId();
        var i = d.getCurrentLevel();
        var h = d.getWarStatus();
        if (f == 0 && g == 0 && i == 4 && h == 2) {
            protect_off_confirm(f, i, g, l)
        } else {
            build(f, i, g, l)
        }
    };
    this.askHelpCheckboxChanged = function (i) {
        var h = i.srcElement ? i.srcElement : i.target;
        d.setHelped(h.checked);
        var g = d.getCurrentLevel();
        var f = g > 0 ? cm.SpeedUpType.upgrade : cm.SpeedUpType.build;
        cm.ClientSideCookieManager.setCookie(f, h.checked);
        e.getElement("buildTimeText").innerHTML = d.getTime()
    }
};
cm.BuildingModel = function (f) {
    var d = f.buildingId;
    var j = f.slotId;
    var e = f.baseTime;
    var g = f.speedTime;
    var a = f.currentLevel;
    var b = f.nextLevel;
    var h = f.warStatus;
    var i = f.tutorialMode;
    var c = i ? false : f.helped;
    this.getBuildingId = function () {
        return d
    };
    this.getSlotId = function () {
        return j
    };
    this.getCurrentLevel = function () {
        return a
    };
    this.getNextLevel = function () {
        return _nextLevel
    };
    this.setHelped = function (l) {
        c = i ? false : l
    };
    this.getHelped = function () {
        return c
    };
    this.getTime = function () {
        return c ? g : e
    };
    this.getWarStatus = function () {
        return h
    };
    this.isTutorialMode = function () {
        return i
    }
};
cm.BuildingView = function (e, c) {
    var b = this;
    var a = e;
    var f = c;
    var d = function () {
            b.getElement("buildTimeText").innerHTML = f.getTime();
            b.getElement("askHelpCheckbox").checked = f.getHelped();
            b.getElement("whatIsThisLink").style.visibility = f.isTutorialMode() ? "hidden" : "visible";
            b.getElement("askHelpCheckbox").parentNode.style.visibility = f.isTutorialMode() ? "hidden" : "visible"
        };
    this.getElement = function (g) {
        return $(a[g])
    };
    d()
};
var buildingModel;
var buildingController;
var buildingView;

function modal_build_waiting_state() {
    $("modal_build_spinny").show();
    $("modal_build_body").hide()
}
function modal_build_show_state() {
    $("modal_build_spinny").hide();
    $("modal_build_body").show()
}
function modal_build_help_tooltip(c, a) {
    var b = "<div>" + g_js_strings.modal_build_help_tooltip.newfriendbuildtimedesc1 + "</div>";
    showTooltip(b, c, a, "modal_build")
}
function modal_build_demolish(b, d, a) {
    if (b == 1) {
        var c = "<div>" + g_js_strings.modal_build_demolish.deconstructiondesc + "</div>"
    } else {
        if (b == 2) {
            var c = "<div>" + g_js_strings.modal_build_demolish.destroydesc + "</div>"
        }
    }
    showTooltip(c, d, a, "modal_build")
}
function modal_build(z, o) {
    buildingModel = null;
    Modal.hideModalAll();
    var e = new Array();
    var G = seed.buildings["city" + currentcityid]["pos" + z];
    if (G == null) {
        var R = o;
        var m = 0;
        var r = 1;
        var P = g_js_strings.modal_build.newbuilding + " - " + buildingcost["bdg" + R][0] + " " + g_js_strings.commonstr.lv + "1";
        var u = 1
    } else {
        var R = G[0];
        var m = parseInt(G[1]);
        var r = m + 1;
        var P = buildingcost["bdg" + R][0] + " " + g_js_strings.commonstr.lv + m;
        var u = (r > 5) ? 5 : 1
    }
    var I = Math.pow(2, m);
    e.push("<div id='modal_build' class='tab1'>");
    e.push("<div class='modal_build_body' id='modal_build_spinny' style='display:none;'>");
    e.push("<div class='modal_build_spinny'></div>");
    e.push("</div>");
    if (seed.cities[5] && currentcityid === parseInt(seed.cities[5][0], 10)) {
        e.push("<div class='modal_build_body city6' id='modal_build_body'>")
    } else {
        if (seed.cities[6] && currentcityid === parseInt(seed.cities[6][0], 10)) {
            e.push("<div class='modal_build_body city7' id='modal_build_body'>")
        } else {
            e.push("<div class='modal_build_body' id='modal_build_body'>")
        }
    }
    e.push("<div class='buildinginfo clearfix'>");
    e.push("<div class='buildingpic'>");
    e.push("<div class='building b");
    e.push(R);
    e.push("_" + u + "'>");
    e.push("</div>");
    e.push("</div>");
    e.push("<div class='buildingdesc'>");
    e.push(buildingcost["bdg" + R][10]);
    e.push("</div>");
    e.push("<div class='destructbtns'>");
    if (m > 0 && parseInt(z) != 0 && parseInt(z) != 1 && !(cm.TutorialManager.inTutorialMode())) {
        e.push("<a class='buttonDown20' onclick='deconstructBuilding(" + G[3] + "," + z + ")' onmouseover='modal_build_demolish(1,this,event);' onmouseout='removeTooltip();'><span>" + g_js_strings.commonstr.decontruct + "</span></a>");
        if (m > 1) {
            e.push("<div id='divDestroyBuilding' class='destroycol'>");
            e.push("<div class='clearfix'><a class='button20' onclick='destructBuilding(" + G[3] + "," + z + ")' onmouseover='modal_build_demolish(2,this,event);' onmouseout='removeTooltip();'><span>" + g_js_strings.commonstr.destroy + "</span></a></div>");
            e.push("<div class='dragonstomp'>(" + g_js_strings.modal_build.usedragon + ")</div>");
            e.push("</div>")
        }
    } else {
        if (parseInt(z) == 0 && seed.cities.length > 1) {
            e.push("<div><div class='clearfix' id='divDestroyBuilding' style='display:block;margin-left:6px;margin-top:5px;'><a class='button20' onclick='cityaction_abandonprompt();return false;'><span>" + g_js_strings.modal_build.abandoncity + "</span></a></div></div>")
        }
    }
    e.push("</div>");
    e.push("</div>");
    e.push("<div class='buildingdetail'>");
    if (m < 10 || (m === 10 && parseInt(R, 10) === 0) || (m === 10 && parseInt(R, 10) === 1) || (m === 10 && parseInt(R, 10) === 2) || (m === 10 && parseInt(R, 10) === 3) || (m === 10 && parseInt(R, 10) === 4) || (m === 10 && parseInt(R, 10) === 8) || (m === 10 && parseInt(R, 10) === 9) || (m === 10 && parseInt(R, 10) === 11) || (m === 10 && parseInt(R, 10) === 12) || (m === 10 && parseInt(R, 10) === 18) || (m === 10 && parseInt(R, 10) === 19)) {
        var O = true;
        e.push("<div class='reqhd'>" + g_js_strings.commonstr.level + " ");
        e.push(r);
        e.push(" " + g_js_strings.commonstr.requirement + "</div>");
        e.push("<div class='buildreq clearfix'>");
        e.push("<div class='leftColumn'>");
        e.push("<table cellpadding='0' cellspacing='0'><thead><tr><td class='rec'>" + g_js_strings.commonstr.resource + "</td><td class='req'>" + g_js_strings.commonstr.required + "</td><td class='own'>" + g_js_strings.commonstr.youown + "</td></tr></thead><tbody>");
        var a = checkreq("bdg", R, r);
        var x = new Array();
        var J = new Array();
        var c = new Array();
        for (var M = 0; M < a[0].length; M++) {
            if (typeof a[1][M] != "string" || a[1][M].indexOf("Lv.0") == -1) {
                x.push("<div>");
                x.push(a[0][M]);
                x.push("</div>");
                if (a[3][M] == 0) {
                    O = false;
                    J.push("<div class='unmet'>")
                } else {
                    if (M === 0 && m === 10 && parseInt(R, 10) === 0) {
                        if (getBuildingLevel(19) >= 10) {
                            J.push("<div class='met'>")
                        } else {
                            J.push("<div class='unmet'>");
                            O = false
                        }
                    } else {
                        J.push("<div class='met'>")
                    }
                }
                if (parseInt(a[1][M]) > 0) {
                    J.push(addCommas(parseInt(a[1][M])))
                } else {
                    if (m === 10 && parseInt(R, 10) === 0) {
                        J.push(g_js_strings.commonstr.lv + "10 " + buildingcost.bdg19[0])
                    } else {
                        J.push(a[1][M])
                    }
                }
                J.push("</div>");
                c.push("<div>");
                if (parseInt(a[2][M]) > 0) {
                    c.push(addCommas(parseInt(a[2][M])))
                } else {
                    c.push(a[2][M])
                }
                c.push("</div>")
            }
        }
        e.push("<td class='rec'>");
        e.push(x.join(""));
        e.push("</td>");
        e.push("<td>");
        e.push(J.join(""));
        e.push("</td>");
        e.push("<td class='ownres'>");
        e.push(c.join(""));
        e.push("</td>");
        e.push("</tr>");
        if (parseInt(m) == 9) {
            e.push("<tr>");
            e.push("<td class='rec'><div>");
            e.push(g_js_strings.modal_build.divineinsp);
            e.push("</div></td>");
            e.push("<td>");
            if (parseInt(seed.items.i401, 10)) {
                e.push("<div class='met'>")
            } else {
                e.push("<div class='unmet'>")
            }
            e.push(1);
            e.push("</div>");
            e.push("</td>");
            e.push("<td class='ownres'><div>");
            if (parseInt(seed.items.i401, 10)) {
                e.push(addCommas(parseInt(seed.items.i401)))
            } else {
                e.push(0);
                O = false
            }
            e.push("</div></td>");
            e.push("</tr>")
        } else {
            if (m === 10) {
                if (parseInt(R, 10) === 0) {
                    e.push("<tr>");
                    e.push("<td class='rec'><div>");
                    e.push(g_js_strings.modal_build.divineprov);
                    e.push("</div></td>");
                    e.push("<td>");
                    if (parseInt(seed.items.i402, 10)) {
                        e.push("<div class='met'>")
                    } else {
                        e.push("<div class='unmet'>")
                    }
                    e.push(1);
                    e.push("</div>");
                    e.push("</td>");
                    e.push("<td class='ownres'><div>");
                    if (parseInt(seed.items.i402, 10)) {
                        e.push(addCommas(parseInt(seed.items.i402)))
                    } else {
                        e.push(0);
                        O = false
                    }
                    e.push("</div></td>");
                    e.push("</tr>")
                } else {
                    if (parseInt(R, 10) === 19 || parseInt(R, 10) === 12 || parseInt(R, 10) === 11 || parseInt(R, 10) === 8 || parseInt(R, 10) === 9 || parseInt(R, 10) === 18 || parseInt(R, 10) === 1 || parseInt(R, 10) === 2 || parseInt(R, 10) === 3 || parseInt(R, 10) === 4) {
                        e.push("<tr>");
                        e.push("<td class='rec'><div>");
                        e.push(g_js_strings.modal_build.divineinsp);
                        e.push("</div></td>");
                        e.push("<td>");
                        if (parseInt(seed.items.i401, 10)) {
                            e.push("<div class='met'>")
                        } else {
                            e.push("<div class='unmet'>")
                        }
                        e.push(1);
                        e.push("</div>");
                        e.push("</td>");
                        e.push("<td class='ownres'><div>");
                        if (parseInt(seed.items.i401, 10)) {
                            e.push(addCommas(parseInt(seed.items.i401)))
                        } else {
                            e.push(0)
                        }
                        e.push("</div></td>");
                        e.push("</tr>")
                    }
                }
            }
        }
        e.push("</tbody></table>");
        e.push("</div>");
        var d = 0;
        var H = seed.queue_con["city" + currentcityid];
        var g = 0;
        var b = 0;
        if (H.length > 0) {
            d = 1;
            for (var N = 0; N < H.length; N++) {
                if (parseInt(z) == parseInt(H[N][7])) {
                    d = 2;
                    g = parseInt(H[N][4]) - parseInt(H[N][3]);
                    b = H[N][2];
                    break
                }
            }
        }
        if (d == 0 && O) {
            var w = g_js_strings.commonstr.build;
            var A = cm.SpeedUpType.build;
            if (m > 0) {
                w = g_js_strings.commonstr.upgrade;
                A = cm.SpeedUpType.upgrade
            }
            var B = g_js_strings.modal_build.buildandaskhelp;
            if (m > 0) {
                B = g_js_strings.modal_build.upgradeandaskhelp
            }
            var t = seed.knights["city" + currentcityid];
            var Q = 0;
            if (t) {
                t = t["knt" + seed.leaders["city" + currentcityid].politicsKnightId];
                if (t) {
                    Q = parseInt(t.politics);
                    if ((parseInt(t.politicsBoostExpireUnixtime) - unixtime()) > 0) {
                        Q = parseInt(Q * 1.25)
                    }
                }
            }
            var q = buildingcost["bdg" + R][7] * I;
            if (parseInt(R) < 6 && parseInt(R) > 0 && I == 1) {
                q = 15
            }
            q = parseInt(q / (1 + 0.005 * Q + 0.1 * parseInt(seed.tech.tch16)));
            var n = Math.max(600, parseInt(q * 0.1));
            var y = (q - n) < 0 ? 0 : (q - n);
            var l = q;
            var C = cm.TutorialManager.inTutorialMode();
            e.push("<div class='rightColumn'>");
            e.push("<div>");
            e.push("<div class='buttonRow'>");
            e.push("<a class='button20' onclick='buildingController.buildButtonClicked(event);return false;'>");
            e.push("<span>");
            e.push(w);
            e.push("</span></a>");
            e.push("<a id='modal_whats_this_link' class='helptext' style='visibility:hidden' onclick='Modal.showAlert(\"");
            e.push(g_js_strings.modal_build.whatsthiscontent);
            e.push("\");return false;'>");
            e.push(g_js_strings.modal_build.whatsthis);
            e.push("</a>");
            e.push("<span class='time'>" + g_js_strings.commonstr.time + ": ");
            e.push("<span id='buildTimeText'>");
            e.push(timestr(l));
            e.push("</span>");
            e.push("</span>");
            e.push("</div>");
            e.push("<div class='checkboxRow'style='visibility:hidden'>");
            e.push("<input id='askHelpCheckbox' type='checkbox'onclick='buildingController.askHelpCheckboxChanged(event)' />");
            e.push("<label for='askHelpCheckbox'>" + g_js_strings.modal_build.sharemessagebuildorresearch + "</label>");
            e.push("</div>");
            e.push("</div>");
            e.push("<div class='upgrade'>");
            e.push("<table cellpadding='0' cellspacing='0'><thead><tr><td class='lvcol'>" + g_js_strings.commonstr.lvl + "</td><td class='ycol'><div>" + g_js_strings.commonstr.yield + "</div></td></tr></thead><tbody>");
            if (m > 0) {
                e.push("<tr><td class='lvcol'><div>");
                e.push(m);
                e.push("</div><div class='cur'>" + g_js_strings.commonstr.current + "</div></td><td class='ycol'><div>");
                e.push(buildingupgradedesc[parseInt(R)][m - 1]);
                e.push("</div></td></tr>")
            }
            if (m <= 10) {
                e.push("<tr class='nextrow'><td class='lvcol'><div>");
                e.push(m + 1);
                e.push("</div></td><td class='ycol'><div>");
                e.push(buildingupgradedesc[parseInt(R)][m]);
                e.push("</div></td></tr>")
            }
            e.push("</tbody></table>");
            e.push("</div>");
            e.push("</div>");
            var p = false;
            var E = cm.ClientSideCookieManager.getCookie(A);
            if ((E == null || E == "true") && seed.tutorial.t1 > 21) {
                p = true
            }
            var h = {
                buildingId: R,
                currentLevel: m,
                slotId: z,
                nextLevel: r,
                buildingTitle: P,
                image: u,
                baseTime: timestr(q),
                speedTime: timestr(y),
                warStatus: parseInt(seed.player.warStatus),
                helped: p,
                tutorialMode: C
            };
            buildingModel = new cm.BuildingModel(h);
            var f = {
                askHelpCheckbox: "askHelpCheckbox",
                buildTimeText: "buildTimeText",
                whatIsThisLink: "modal_whats_this_link"
            }
        } else {
            if (d == 2) {
                e.push("<div class='btns'><div class='clearfix btnrow'><a class='inlineButton25Red' name='" + b + "'");
                e.push(" onclick='cm.BuildingSpeedupController.popupClick(event)'>");
                e.push("<span>" + g_js_strings.commonstr.speedup + "</span></a></div><div><b>" + g_js_strings.modal_build.timeremaining + ": <span id='modal_build_timeremaining'>");
                e.push("</span></b></div>");
                if (getBuildHelpEligible(b, currentcityid) == false) {
                    e.push("<div class='clearfix btnrow' style='margin:10px 0px;'><a class='button25' onclick='build_gethelp(");
                    e.push(b);
                    e.push(");return false;'><span>" + g_js_strings.modal_quests.askhelp + "</span></a>");
                    e.push("<a class='helptext' onclick='Modal.showAlert(\"");
                    e.push(g_js_strings.modal_build.whatsthiscontent);
                    e.push("\");return false;'>");
                    e.push(g_js_strings.modal_build.whatsthis);
                    e.push("</a>");
                    e.push("</div>")
                }
                e.push("<div class='btnrow clearfix'><a onclick='cancelConstruction(" + m + "," + z + "," + m + ");return false;' class='button25' ><span>" + g_js_strings.modal_build.cancelcurrconstuct + "</span></a></div>");
                e.push("</div>")
            } else {
                if (d == 1) {
                    e.push("<div class='btns'><div class='unable'>" + g_js_strings.modal_build.buildoneattime + "</div>");
                    e.push("<div class='upgrade'>");
                    e.push("<table cellpadding='0' cellspacing='0'><thead><tr><td class='lvcol'>" + g_js_strings.commonstr.lvl + "</td><td class='ycol'><div>" + g_js_strings.commonstr.yield + "</div></td></tr></thead><tbody>");
                    if (m > 0) {
                        e.push("<tr><td class='lvcol'><div>");
                        e.push(m);
                        e.push("</div><div class='cur'>" + g_js_strings.commonstr.current + "</div></td><td class='ycol'><div>");
                        e.push(buildingupgradedesc[parseInt(R)][m - 1]);
                        e.push("</div></td></tr>")
                    }
                    if (m <= 10) {
                        e.push("<tr class='nextrow'><td class='lvcol'><div>");
                        e.push(m + 1);
                        e.push("</div></td><td class='ycol'><div>");
                        e.push(buildingupgradedesc[parseInt(R)][m]);
                        e.push("</div></td></tr>")
                    }
                    e.push("</tbody></table>");
                    e.push("</div>");
                    e.push("</div>")
                } else {
                    e.push("<div class='btns'><div class='unable'>" + g_js_strings.modal_build.reqnotmet + "</div>");
                    e.push("<div class='upgrade'>");
                    e.push("<table cellpadding='0' cellspacing='0'><thead><tr><td class='lvcol'>" + g_js_strings.commonstr.lvl + "</td><td class='ycol'><div>" + g_js_strings.commonstr.yield + "</div></td></tr></thead><tbody>");
                    if (m > 0) {
                        e.push("<tr><td class='lvcol'><div>");
                        e.push(m);
                        e.push("</div><div class='cur'>" + g_js_strings.commonstr.current + "</div></td><td class='ycol'><div>");
                        e.push(buildingupgradedesc[parseInt(R)][m - 1]);
                        e.push("</div></td></tr>")
                    }
                    if (m <= 10) {
                        e.push("<tr class='nextrow'><td class='lvcol'><div>");
                        e.push(m + 1);
                        e.push("</div></td><td class='ycol'><div>");
                        e.push(buildingupgradedesc[parseInt(R)][m]);
                        e.push("</div></td></tr>")
                    }
                    e.push("</tbody></table>");
                    e.push("</div>");
                    e.push("</div>")
                }
            }
        }
        e.push("</div>")
    } else {
        var d = 0;
        var H = seed.queue_con["city" + currentcityid];
        if (H.length > 0) {
            d = 1;
            for (var N = 0; N < H.length; N++) {
                if (parseInt(z) == parseInt(H[N][7])) {
                    d = 2;
                    g = parseInt(H[N][4]) - parseInt(H[N][3]);
                    b = H[N][2];
                    break
                }
            }
        }
        if (d == 2) {
            e.push("<div class='btns'><div class='clearfix btnrow'><a  class='button25' onclick='build_speedup(");
            e.push(b);
            e.push(");return false;'><span>" + g_js_strings.commonstr.speedup + "</span></a></div><div><b>" + g_js_strings.modal_build.timeremaining + ": <span id='modal_build_timeremaining'>");
            e.push("</span></b></div>");
            e.push("<br/><div class='btnrow'><a onclick='cancelConstruction(" + m + "," + z + ");return false;' class='button25' ><span>" + g_js_strings.modal_build.cancelcurrconstuct + "</span></a></div>");
            e.push("</div>")
        }
        e.push("<div class='reqhd'>&nbsp;</div><div class='buildreq clearfix' style='background:none;'><div class='btns' style='left:0;'>");
        e.push("<div class='upgrade'>");
        e.push("<table cellpadding='0' cellspacing='0'><thead><tr><td class='lvcol'>" + g_js_strings.commonstr.lvl + "</td><td class='ycol'><div>" + g_js_strings.commonstr.yield + "</div></td></tr></thead><tbody>");
        e.push("<tr><td class='lvcol'><div>");
        e.push(m);
        e.push("</div><div class='cur'>" + g_js_strings.commonstr.current + "</div></td><td class='ycol'><div>");
        e.push(buildingupgradedesc[parseInt(R)][m - 1]);
        e.push("</div></td></tr>");
        e.push("</tbody></table>");
        e.push("</div>");
        e.push("</div></div>")
    }
    e.push("</div>");
    e.push("<div class='buildingdetailbottom'></div>");
    e.push("</div>");
    e.push("<div id='modal_build_resourcebar' class='modal_build_resourcebar'>");
    e.push("</div>");
    e.push("<div id='modal_build_content' class='modal_build_content'>");
    e.push("</div>");
    e.push("</div>");
    e.push("<div id='modal_build_foot' class='clearfix'>");
    e.push("<img src='");
    e.push(stimgUrl);
    e.push("img/build_asterisk.png'/>");
    e.push(g_js_strings.modal_build.newreducebuildtimedesc);
    e.push("</div>");
    if (cm.TutorialManager.inTutorialMode()) {
        Modal.showModal(740, 400, 10, 10, P, e.join(""));
        cm.TutorialEventDispatcher.dispatchTutorialEvent("complete", "CHOOSE_SAWMILL");
        cm.TutorialEventDispatcher.dispatchTutorialEvent("complete", "CHOOSE_COTTAGE")
    } else {
        if (parseInt(R) == 0) {
            Modal.showModal(740, 400, 10, 10, P, e.join(""), function () {
                if (m > 0) {
                    openCastle();
                    buildtutorial(R)
                }
            })
        } else {
            if (parseInt(R) == 7) {
                Modal.showModal(740, 400, 10, 10, P, e.join(""), function () {
                    if (m > 0) {
                        openKnights();
                        buildtutorial(R)
                    }
                })
            } else {
                if (parseInt(R) == 8) {
                    Modal.showModal(740, 400, 10, 10, P, e.join(""), function () {
                        if (m > 0) {
                            openEmbassy();
                            buildtutorial(R, m)
                        }
                    })
                } else {
                    if (parseInt(R) == 11) {
                        Modal.showModal(740, 400, 10, 10, P, e.join(""), function () {
                            if (m > 0) {
                                modal_openAlchemy();
                                buildtutorial(R, m)
                            }
                        })
                    } else {
                        if (parseInt(R) == 13) {
                            Modal.showModal(740, 400, 10, 10, P, e.join(""), function () {
                                if (m > 0) {
                                    modal_openBarracks();
                                    buildtutorial(R, m)
                                }
                            })
                        } else {
                            if (parseInt(R) == 10) {
                                Modal.showModal(740, 400, 10, 10, P, e.join(""), function () {
                                    if (m > 0) {
                                        modal_openMarket(m);
                                        buildtutorial(R, m)
                                    }
                                })
                            } else {
                                if (parseInt(R) == 12) {
                                    Modal.showModal(740, 400, 10, 10, P, e.join(""), function () {
                                        if (m > 0) {
                                            modal_openRallypoint();
                                            buildtutorial(R, m)
                                        }
                                    })
                                } else {
                                    if (parseInt(R) == 19) {
                                        Modal.showModal(740, 400, 10, 10, P, e.join(""), function () {
                                            if (m > 0) {
                                                modal_openWalls();
                                                buildtutorial(R, m)
                                            }
                                        })
                                    } else {
                                        if (R == cm.BUILDING_TYPES.WATCH_TOWER) {
                                            var L = m > 0;
                                            if (L) {
                                                Modal.onCloseCallback = function () {
                                                    s.remove()
                                                }
                                            }
                                            Modal.showModal(740, 400, 10, 10, P, e.join(""), function () {
                                                if (m > 0) {
                                                    buildtutorial(R, m)
                                                }
                                            });
                                            if (L) {
                                                var D = document.createElement("div");
                                                D.className = "modal_build_content";
                                                D.innerHTML = '<div class="tabsbar"><a class="tab selected" style="width:auto;font:bold 11px Georgia"><span style="padding:0px 20px">' + g_js_strings.modaltitles.impatks + "</span></a></div>";
                                                var v = document.createElement("div");
                                                v.className = "modal_tab_content";
                                                D.appendChild(v);
                                                var K = $("modal_build_foot");
                                                K.parentNode.insertBefore(D, K);
                                                var F = {
                                                    text: {
                                                        impendingAttacks: "Impending Attacks",
                                                        marchType: "March Type",
                                                        target: "Target",
                                                        timeRemaining: "Time Remaining",
                                                        status: "Status"
                                                    },
                                                    attacks: cm.IncomingAttackManager.getAllAttacks(),
                                                    recalledAttacks: cm.IncomingAttackManager.getRecalledAttacks(),
                                                    parentElement: v
                                                };
                                                var s = new cm.ImpendingAttackReport(F);
                                                s.show()
                                            }
                                        } else {
                                            Modal.showModal(740, 400, 10, 10, P, e.join(""), function () {
                                                if (m > 0) {
                                                    buildtutorial(R, m)
                                                }
                                            })
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    if (buildingModel) {
        buildingView = new cm.BuildingView(f, buildingModel);
        buildingController = new cm.BuildingController(buildingModel, buildingView)
    }
}
function cancelConstruction(f, h) {
    var n = new Array();
    n.push("<div id='modal_lv10'>");
    n.push("<div class='lv10 clearfix'>");
    n.push("<div class='info' style='margin-left: 10px; width: 340px;'><div class='ttl'>");
    n.push(g_js_strings.cancelconstruction.cancelconstructiontakes);
    if (seed.buildings["city" + currentcityid]["pos" + h]) {
        bldType = seed.buildings["city" + currentcityid]["pos" + h][0];
        bldLvl = seed.buildings["city" + currentcityid]["pos" + h][1];
        if (bldLvl > 0) {
            var b = Math.pow(2, (bldLvl - 1));
            var m = checkreq("bdg", bldType, bldLvl);
            var d = new Array();
            n.push("<table cellpadding='2' cellspacing='0'><tbody><tr>");
            var e = [resourceinfo.rec1, resourceinfo.rec2, resourceinfo.rec3, resourceinfo.rec4];
            var a = 1;
            for (var c = 0; c < m[0].length; c++) {
                if (e.indexOf(m[0][c]) != -1) {
                    var l = new Array();
                    l.push("<td class='recdesc'>" + m[0][c] + "</td>");
                    if (parseInt(m[1][c]) > 0) {
                        l.push("<td class='rec'>" + addCommas(parseInt(m[1][c])) + "</td>")
                    } else {
                        l.push("<td class='rec'>" + m[1][c] + "</td>")
                    }
                    if (a % 2 == 0) {
                        n.push(l.join("") + "</tr>")
                    } else {
                        n.push(l.join(""))
                    }
                    a++
                }
            }
            if (bldLvl >= 9) {
                var i = h == 0;
                itemKey = i && bldLvl == 10 ? "divineProvidence" : "divineInspiration";
                var g = {
                    divineInspiration: itemlist.i401.name,
                    divineProvidence: itemlist.i402.name
                };
                var o = g[itemKey];
                n.push('<tr><td colspan="4" class="warning">');
                n.push(cm.StringFormatter.applyTemplate(g_js_strings.cancelconstruction.cancelconstructionloseitem, {
                    itemName: o
                }));
                n.push("</td></tr>")
            }
            n.push("</tbody></table>")
        }
    } else {
        n.push(g_js_strings.deconstructBuilding.deconstructinvalid)
    }
    n.push("</div></div>");
    n.push("</div>");
    n.push("<div class='btns clearfix'>");
    n.push("<a  class='button20' onclick='removeConstruction(" + h + "," + f + ");return false;'><span>" + g_js_strings.cancelconstruction.cancelconstruction + "</span></a>");
    n.push("<a  class='cancel' onclick='Modal.hideModal();return false;'>" + g_js_strings.commonstr.cancel + "</a>");
    n.push("</div></div>");
    Modal.showModal(400, 400, 130, 130, g_js_strings.cancelconstruction.cancelconstructiontitle, n.join(""))
}
function removeConstruction(bldSlotId, currLevel) {
    var params = Object.clone(g_ajaxparams);
    params.requestType = "CANCEL_CONSTRUCTION";
    params.cityId = currentcityid;
    params.buildingPosition = bldSlotId;
    params.buildingId = seed.buildings["city" + currentcityid]["pos" + bldSlotId][3];
    new Ajax.Request(g_ajaxpath + "ajax/cancelConstruction.php" + g_ajaxsuffix, {
        method: "post",
        parameters: params,
        onSuccess: function (message) {
            var rslt = eval("(" + message.responseText + ")");
            if (rslt.ok) {
                var tgtlv = parseInt(seed.queue_con["city" + currentcityid][0][1]);
                seed.queue_con["city" + currentcityid] = [];
                Modal.hideModal();
                if (currLevel == 0) {
                    removeCityFromView(bldSlotId);
                    modal_buildnew(bldSlotId)
                } else {
                    modal_build(bldSlotId)
                }
                if ($("mod_views_city").hasClassName("sel")) {
                    changeview_city($("mod_views_field"))
                } else {
                    if ($("mod_views_field").hasClassName("sel")) {
                        changeview_fields($("mod_views_field"))
                    }
                }
                bldLvl = seed.buildings["city" + currentcityid]["pos" + bldSlotId][1];
                bdgType = seed.buildings["city" + currentcityid]["pos" + bldSlotId][0];
                if (bldLvl > 0 && tgtlv != 0) {
                    mult = Math.pow(2, (bldLvl - 1));
                    seed.resources["city" + currentcityid].rec1[0] += parseInt(buildingcost["bdg" + bdgType][1]) * mult * 3600;
                    seed.resources["city" + currentcityid].rec2[0] += parseInt(buildingcost["bdg" + bdgType][2]) * mult * 3600;
                    seed.resources["city" + currentcityid].rec3[0] += parseInt(buildingcost["bdg" + bdgType][3]) * mult * 3600;
                    seed.resources["city" + currentcityid].rec4[0] += parseInt(buildingcost["bdg" + bdgType][4]) * mult * 3600;
                    seed.citystats["city" + currentcityid].gold[0] += parseInt(buildingcost["bdg" + bdgType][5]) * mult;
                    update_gold()
                }
                update_bdg()
            }
        },
        onFailure: function () {}
    })
}
function deconstructBuilding(a, h) {
    var n = new Array();
    n.push("<div id='modal_lv10'>");
    n.push("<div class='lv10 clearfix'>");
    n.push("<div class='info' style='margin-left: 10px; width: 340px;'><div class='ttl'>");
    if (seed.buildings["city" + currentcityid]["pos" + h]) {
        bldType = seed.buildings["city" + currentcityid]["pos" + h][0];
        bldLvl = seed.buildings["city" + currentcityid]["pos" + h][1] - 1;
        var o = seed.knights["city" + currentcityid];
        var b = 0;
        if (o) {
            o = o["knt" + seed.leaders["city" + currentcityid].politicsKnightId];
            if (o) {
                b = parseInt(o.politics)
            }
        }
        if (bldLvl == 0) {
            n.push(g_js_strings.deconstructBuilding.lvl1deconstructdesc)
        }
        if (bldLvl > 0) {
            var d = Math.pow(2, (bldLvl - 1));
            var i = buildingcost["bdg" + bldType][7] * d;
            if (parseInt(bldType) < 6 && parseInt(bldType) > 0 && d == 1) {
                i = 15
            }
            i = parseInt(i / (1 + 0.005 * b + 0.1 * parseInt(seed.tech.tch16)));
            n.push(g_js_strings.deconstructBuilding.deconstructtakes.replace("%1$s", timestr(i)));
            var m = checkreq("bdg", bldType, bldLvl);
            var g = new Array();
            n.push("<table cellpadding='2' cellspacing='0'><tbody><tr>");
            var f = [resourceinfo.rec1, resourceinfo.rec2, resourceinfo.rec3, resourceinfo.rec4];
            var c = 1;
            for (var e = 0; e < m[0].length; e++) {
                if (f.indexOf(m[0][e]) != -1) {
                    var l = new Array();
                    l.push("<td class='recdesc'>" + m[0][e] + "</td>");
                    if (parseInt(m[1][e]) > 0) {
                        l.push("<td class='rec'>" + addCommas(parseInt(m[1][e])) + "</td>")
                    } else {
                        l.push("<td class='rec'>" + m[1][e] + "</td>")
                    }
                    if (c % 2 == 0) {
                        n.push(l.join("") + "</tr>")
                    } else {
                        n.push(l.join(""))
                    }
                    c++
                }
            }
            n.push("</tbody></table>")
        }
    } else {
        n.push(g_js_strings.deconstructBuilding.deconstructinvalid)
    }
    n.push("</div></div>");
    n.push("</div>");
    n.push("<div class='btns clearfix'>");
    n.push("<a  class='button20' onclick='deleteaction(" + bldType + "," + (bldLvl + 1) + "," + h + ");return false;'><span>" + g_js_strings.commonstr.decontruct + "</span></a>");
    n.push("<a  class='cancel' onclick='Modal.hideModal();return false;'>" + g_js_strings.commonstr.cancel + "</a>");
    n.push("</div></div>");
    Modal.showModal(400, 400, 130, 130, g_js_strings.modaltitles.deconstructbuild, n.join(""))
}
function destructBuilding(b, a) {
    var c = new Array();
    c.push("<div id='modal_lv10'>");
    c.push("<div class='lv10 clearfix'>");
    c.push("<img src='");
    c.push(stimgUrl);
    c.push("img/items/70/9.jpg'/>");
    c.push("<div class='info'><div class='ttl'>");
    c.push(g_js_strings.destructBuilding.needtodestruct.replace("%1$s", itemlist.i9.name));
    c.push("</div><div class='own'>" + g_js_strings.commonstr.youown + ": ");
    if (seed.items.i9 > 0) {
        c.push(seed.items.i9)
    } else {
        c.push(0)
    }
    c.push("</div></div>");
    c.push("</div>");
    c.push("<div class='btns clearfix'>");
    if (seed.items.i9 > 0) {
        c.push("<a  class='button20' onclick='destructBuildingConfirm(" + b + "," + a + ");return false;'><span>" + g_js_strings.commonstr.destroy + "</span></a>")
    } else {
        c.push("<a  class='button20' onclick='Modal.hideModalAll();cm.ShopView.openShop();return false;'><span>" + g_js_strings.commonstr.getmore + "</span></a>")
    }
    c.push("<a  class='cancel' onclick='Modal.hideModal();return false;'>" + g_js_strings.commonstr.cancel + "</a>");
    c.push("</div></div>");
    Modal.showModal(400, 400, 130, 130, g_js_strings.modaltitles.destroybuild, c.join(""))
}
function destructBuildingConfirm(buildingId, bldSlotId) {
    var params = Object.clone(g_ajaxparams);
    params.requestType = "DESTROY_BUILDING_DRAGON_STOMP_MEDAL";
    params.cityId = currentcityid;
    params.buildingId = buildingId;
    params.pos = bldSlotId;
    new Ajax.Request(g_ajaxpath + "ajax/destroyBuilding.php" + g_ajaxsuffix, {
        method: "post",
        parameters: params,
        onSuccess: function (message) {
            var rslt = eval("(" + message.responseText + ")");
            if (rslt.ok) {
                Modal.hideModalAll();
                Modal.showAlert(g_js_strings.destructbuildingconfirm.builddestroyed);
                var bdgLvl = seed.buildings["city" + currentcityid]["pos" + bldSlotId][1];
                var bdgType = seed.buildings["city" + currentcityid]["pos" + bldSlotId][0];
                seed.items.i9 = Number(seed.items.i9) - 1;
                ksoItems[9].subtract();
                removeCityFromView(bldSlotId);
                if ($("mod_views_city").hasClassName("sel")) {
                    changeview_city($("mod_views_field"))
                } else {
                    if ($("mod_views_field").hasClassName("sel")) {
                        changeview_fields($("mod_views_field"))
                    }
                }
                var plyrMight = parseInt(seed.player.might);
                for (var j = bdgLvl - 1; j > -1; j--) {
                    plyrMight -= buildingmight[parseInt(bdgType)][j]
                }
                seed.player.might = plyrMight;
                update_might();
                if (!buildingmulti["b" + bdgType] && maxbdglvl["b" + bdgType]) {
                    delete maxbdglvl["b" + bdgType]
                }
                if (bdgType > 0 && bdgType < 5) {
                    var laborForce = parseInt(seed.citystats["city" + currentcityid]["pop"][3]);
                    var resCap = parseInt(seed.citystats["city" + currentcityid]["pop"][3]) + bdglvl * 10;
                    for (k = bdgLvl; k > 0; k--) {
                        laborForce -= k * 10
                    }
                    seed.citystats["city" + currentcityid]["pop"][3] = laborForce;
                    seed.citystats["city" + currentcityid]["pop"][3] = parseInt(seed.citystats["city" + currentcityid]["pop"][3]) + bdglvl * 10
                } else {
                    if (bdgType == 5) {
                        var popCap = seed.citystats["city" + currentcityid]["pop"][1];
                        var pop = seed.citystats["city" + currentcityid]["pop"][0];
                        for (k = bdgLvl; k > 0; k--) {
                            popCap -= k * 100
                        }
                        if (popCap < 51) {
                            popCap = 50
                        }
                        if (pop > popCap) {
                            seed.citystats["city" + currentcityid]["pop"][0] = popCap
                        }
                        seed.citystats["city" + currentcityid]["pop"][1] = popCap
                    } else {
                        if (bdgType == cm.BUILDING_TYPES.WATCH_TOWER) {
                            var watchTower = cm.WatchTowerList.getCityWatchTower(currentcityid);
                            if (watchTower) {
                                watchTower.demolish()
                            }
                        }
                    }
                }
                update_pop()
            } else {
                Modal.showAlert(printLocalError((rslt.error_code || null), (rslt.msg || null), (rslt.feedback || null)))
            }
        },
        onFailure: function () {}
    })
}
function removeCityFromView(a) {
    delete seed.buildings["city" + currentcityid]["pos" + a];
    if ($("slot_" + a)) {
        $("slot_" + a).innerHTML = "";
        $("slot_" + a).className = "blank"
    }
    for (var b = 0; b < seed.queue_con["city" + currentcityid].length; b++) {
        if (parseInt(seed.queue_con["city" + currentcityid][b][7]) == parseInt(a)) {
            seed.queue_con["city" + currentcityid].splice(b, 1);
            break
        }
    }
    return true
}
function build_speedup(a) {
    Modal.hideModalAll();
    modal_speedup("bdg", a)
}
function getBuildingLevel(c) {
    var d = seed.buildings["city" + currentcityid],
        e = 0,
        b, a = parseInt(c, 10);
    if (a === 0) {
        e = parseInt(d.pos0[1], 10)
    } else {
        if (a === 19 && d.pos1) {
            e = parseInt(d.pos1[1], 10)
        } else {
            for (b in d) {
                if (parseInt(d[b][0], 10) === a && parseInt(d[b][1], 10) >= e) {
                    e = parseInt(d[b][1], 10)
                }
            }
        }
    }
    return e
}
function buildtutorial(a) {}
function modal_buildnew_tooltip(b, d, a) {
    var c = buildingcost["bdg" + b][10];
    showTooltip(c, d, a, "modal_newbuild")
}
function modal_buildnew(a) {
    var c = new Array();
    c.push("<div id='modal_newbuild'>");
    c.push("<div class='buildttl'>" + g_js_strings.modal_buildnew.whatbuild + "</div>");
    c.push("<div class='buildsubttl'>(" + g_js_strings.modal_buildnew.clicktoview.replace("%1$s", "<b>").replace("%2$s", "</b>") + ")</div>");
    c.push("<div class='clearfix buildlist'>");
    if (a > 1 && a < 100) {
        var h = 0;
        var g = 21;
        for (var e = 5; e < g; e++) {
            if (buildingcost["bdg" + e] && e != 19 && (!maxbdglvl["b" + e] || buildingmulti["b" + e])) {
                var b = checkreq("bdg", e, 1);
                var f = true;
                for (var d = 0; d < b[3].length; d++) {
                    if (parseInt(b[3][d]) == 0) {
                        f = false;
                        break
                    }
                }
                c.push("<div class='building");
                h++;
                if (!f) {
                    c.push(" invalid")
                }
                if (parseInt(seed.tutorial.t1) == 7 && e != 5) {
                    c.push(" invalid")
                }
                c.push("' onmouseover='modal_buildnew_tooltip(");
                c.push(e);
                c.push(",this,event);' onmouseout='removeTooltip();return false;'>");
                c.push("<div class='rec'></div>");
                c.push("<div class='bldg'>");
                c.push("<div class='bldgttl'>");
                c.push(buildingcost["bdg" + e][0]);
                c.push("</div>");
                c.push("<div class='buildingpic'>");
                c.push("<div class='buildinginside b");
                c.push(e);
                c.push("_1'></div>");
                c.push("</div>");
                c.push("</div>");
                if (!f) {
                    c.push("<div class='reqsnotmet'>" + g_js_strings.modal_buildnew.reqnotmet + "</div>")
                }
                c.push("<div class='btn clearfix'><a class='button");
                c.push("25' onclick='");
                if (!(parseInt(seed.tutorial.t1) == 7 && e != 5)) {
                    c.push("modal_build(");
                    c.push(a + "," + e);
                    c.push(");")
                }
                c.push("return false;'");
                c.push("><span>");
                if (!f) {
                    c.push(g_js_strings.modal_buildnew.viewinfo)
                } else {
                    c.push(g_js_strings.commonstr.select)
                }
                c.push("</span></a></div>");
                c.push("</div>")
            }
            if (h % 6 == 0) {
                c.push("<div style='clear:both;'></div>")
            }
        }
    } else {
        if (a > 99) {
            for (var e = 1; e < 5; e++) {
                var b = checkreq("bdg", e, 1);
                var f = true;
                for (var d = 0; d < b[3].length; d++) {
                    if (parseInt(b[3][d]) == 0) {
                        f = false;
                        break
                    }
                }
                c.push("<div class='building");
                if (!f || (parseInt(seed.tutorial.t1) == 1 && e != 2)) {
                    c.push(" invalid")
                }
                c.push("' onmouseover='modal_buildnew_tooltip(");
                c.push(e);
                c.push(",this,event);' onmouseout='removeTooltip();return false;'>");
                c.push("<div class='rec'></div>");
                c.push("<div class='bldg'>");
                c.push("<div class='bldgttl'>");
                c.push(buildingcost["bdg" + e][0]);
                c.push("</div>");
                c.push("<div class='buildingpic'>");
                c.push("<div class='buildinginside b");
                c.push(e);
                c.push("_1'></div>");
                c.push("</div>");
                c.push("</div>");
                if (!f) {
                    c.push("<div class='reqsnotmet'>" + g_js_strings.modal_buildnew.reqnotmet + "</div>")
                }
                c.push("<div class='btn clearfix'><a  class='button");
                if (!f) {
                    c.push("Down")
                }
                c.push("25' onclick='");
                if (!(parseInt(seed.tutorial.t1) == 1 && e != 2)) {
                    c.push("modal_build(");
                    c.push(a + "," + e);
                    c.push(");")
                }
                c.push("return false;'><span>" + g_js_strings.commonstr.select + "</span></a></div>");
                c.push("</div>")
            }
        } else {
            if (a == 1) {
                c.push("<div class='building'>");
                c.push("<div class='rec'></div>");
                c.push("<div class='bldg'>");
                c.push("<div class='bldgttl'>");
                c.push(buildingcost.bdg19[0]);
                c.push("</div>");
                c.push("<div class='buildingpic'>");
                c.push("<div class='buildinginside b19_1'>");
                c.push("</div>");
                c.push("</div>");
                c.push("</div>");
                c.push("<div class='btn'><a  class='button25' onclick='modal_build(");
                c.push(a + ",19");
                c.push(");return false;'><span>" + g_js_strings.commonstr.select + "</span></a></div>");
                c.push("</div>")
            }
        }
    }
    c.push("</div>");
    c.push("</div>");
    Modal.showModal(740, 400, 10, 10, g_js_strings.modaltitles.buildings, c.join(""));
    cm.TutorialEventDispatcher.dispatchTutorialEvent("complete", "CLICK_LOT_BUILD_SAWMILL");
    cm.TutorialEventDispatcher.dispatchTutorialEvent("complete", "CLICK_LOT_BUILD_COTTAGE")
}
function modal_buildnewFTEsawmill() {
    $("modalControls1").hide();
    if ($("modal_whats_this_link")) {
        $("modal_whats_this_link").style.visibility = "hidden"
    }
}
function modal_buildnewFTEsawmillBuild(a) {
    $("modalControls1").hide();
    if ($("modal_whats_this_link")) {
        $("modal_whats_this_link").style.visibility = "hidden"
    }
    seed.tutorial.t1 = (a + 1);
    tutorialCheck((a + 1))
}
function modal_buildnewFTECottage() {
    modal_buildnewFTEsawmill();
    $("arrowtip").innerHTML = "<div class='arrowdown'><div>" + g_js_strings.tutorialCheck.clickbuildnohelpcottage + "</div></div>";
    $("arrowtip").style.top = "175px";
    $("arrowtip").style.left = "379px";
    $("arrowtip").show()
}
function buildslot(d, c) {
    var b = d.id.split("_")[1];
    var a = seed.buildings["city" + currentcityid]["pos" + b];
    if (a == null) {
        modal_buildnew(b)
    } else {
        modal_build(b)
    }
}
function protect_off_confirm(c, d, b, e) {
    var a = new Array();
    a.push("<div class='modalactionwarning'>");
    a.push("<div>" + g_js_strings.protect_off_confirm.lvlupwarning + "</div>");
    a.push("<div class='confirmbtn clearfix'>");
    a.push("<a class='button25' onclick='build(" + c + "," + d + "," + b);
    if (e) {
        a.push("," + e)
    }
    a.push(");return false;'>");
    a.push("<span>" + g_js_strings.commonstr.build + "</span>");
    a.push("</a>");
    a.push("<a class='button25' onclick='Modal.hideModal();return false;'>");
    a.push("<span>" + g_js_strings.commonstr.cancel + "</span>");
    a.push("</a>");
    a.push("</div>");
    a.push("</div>");
    Modal.showModal(400, 400, 190, 175, g_js_strings.modaltitles.exitbeginnerprotection, a.join(""))
}
function getModalResourceBar() {
    var a = new Array();
    a.push("<div class='resourcebar clearfix'>");
    a.push("<div class='restext'>");
    a.push("Total Resources:");
    a.push("</div>");
    a.push("<div class='resbox resgold'>");
    a.push("<span id='modal_stat_gold_bar'>");
    a.push(addCommas(parseInt(seed.citystats["city" + currentcityid].gold[0])));
    a.push("</span>");
    a.push("</div>");
    a.push("<div class='resbox resfood'>");
    a.push("<span id='modal_stat_rec1_bar_num'>");
    a.push(addCommas(parseInt(seed.resources["city" + currentcityid].rec1[0] / 3600)));
    a.push("</span>");
    a.push("</div>");
    a.push("<div class='resbox reswood'>");
    a.push("<span id='modal_stat_rec2_bar_num'>");
    a.push(addCommas(parseInt(seed.resources["city" + currentcityid].rec2[0] / 3600)));
    a.push("</span>");
    a.push("</div>");
    a.push("<div class='resbox resstone'>");
    a.push("<span id='modal_stat_rec3_bar_num'>");
    a.push(addCommas(parseInt(seed.resources["city" + currentcityid].rec3[0] / 3600)));
    a.push("</span>");
    a.push("</div>");
    a.push("<div class='resbox resore'>");
    a.push("<span id='modal_stat_rec4_bar_num'>");
    a.push(addCommas(parseInt(seed.resources["city" + currentcityid].rec4[0] / 3600)));
    a.push("</span>");
    a.push("</div>");
    a.push("</div>");
    $("modal_build_resourcebar").innerHTML = a.join("")
};

function openCastle() {
    var r = 1;
    var j = parseInt(seed.citystats["city" + currentcityid]["pop"][0]);
    var k = parseInt(seed.citystats["city" + currentcityid]["pop"][3]);
    if (k > j) {
        r = j / k
    }
    var h = new Array();
    h.push("<div class='tabsbar clearfix' id='castleModalTabs'>");
    h.push("<a class='tab selected' onclick='changeCastleModalTabs(0);return false;'><span>");
    h.push(g_js_strings.commonstr.overview);
    h.push("</span></a>");
    h.push("<a class='tab' onclick='changeCastleModalTabs(1);return false;'><span>");
    h.push(g_js_strings.commonstr.buildings);
    h.push("</span></a>");
    h.push("<a class='tab' onclick='changeCastleModalTabs(2);return false;'><span>");
    h.push(g_js_strings.commonstr.wilderness);
    h.push("</span></a>");
    h.push("</div>");
    h.push("<div class='castletablewrap tablewrap' id='castle_0'>");
    h.push("<div class='topstatwrap clearfix'>");
    h.push("<div class='toppic'>");
    h.push("<img src='" + stimgUrl + "img/happiness.png'/>");
    h.push("</div>");
    h.push("<div class='topstat' id='topstat_happy_num'>");
    h.push($("stat_happy_num").innerHTML);
    h.push("</div>");
    h.push("<a class='button25'  onclick='increaseHappiness();return false;'><span>" + g_js_strings.openCastle.inchappiness + "</span></a>");
    h.push("<div class='toppic lborder'>");
    h.push("<img src='" + stimgUrl + "img/gold_30.png'/>");
    h.push("</div>");
    h.push("<div class='topstat'>");
    h.push($("stat_gold_num").innerHTML);
    h.push("</div>");
    h.push("<a class='button25'  onclick='raiseGold();return false;'><span>" + g_js_strings.openCastle.incgold + "</span></a>");
    h.push("<div class='toppic lborder'>");
    h.push("<img src='" + stimgUrl + "img/taxes.png'/>");
    h.push("</div>");
    h.push("<div class='topstat'>");
    h.push($("stat_tax_rate").innerHTML);
    h.push("</div>");
    h.push("<a class='button25'  onclick='changeTax();return false;'><span>" + g_js_strings.openCastle.chgtaxrate + "</span></a>");
    h.push("</div>");
    h.push("<div class='clearfix sanctuary'>");
    h.push("<div class='hide'><input type='radio' name='sanctuary' value='0' onclick='sanctuaryChange(0);' id='castle_sanctuary_0_ipt'");
    if (parseInt(seed.citystats["city" + currentcityid].gate) == 0) {
        h.push(" checked")
    }
    h.push("/><label for='castle_sanctuary_0_ipt'>" + g_js_strings.openCastle.hidesanct + "</label></div>");
    h.push("<div class='fight'><input type='radio' name='sanctuary' value='1' onclick='sanctuaryChange(1);' id='castle_sanctuary_1_ipt'");
    if (parseInt(seed.citystats["city" + currentcityid].gate) == 1) {
        h.push(" checked")
    }
    h.push("/><label for='castle_sanctuary_1_ipt'>" + g_js_strings.openCastle.orderdefend + "</label></div>");
    h.push("</div>");
    h.push("<div class='prodtablewrap'>");
    h.push("<div class='prodtableheader'>" + g_js_strings.openCastle.resprod);
    if (k > j) {
        h.push("<span class='right'>" + j + "/" + k + " " + g_js_strings.commonstr.workers.toLowerCase() + " (" + parseInt((j / k) * 100) + "% " + g_js_strings.commonstr.efficiency.toLowerCase() + ")</span>")
    }
    h.push("</div>");
    h.push("<table class='prodtable' border='0' cellspacing='0' cellpadding='0'>");
    h.push("<thead>");
    h.push("<tr class='hdg'>");
    h.push("<td class='stat'>");
    h.push(g_js_strings.commonstr.stat);
    h.push("</td>");
    h.push("<td>");
    h.push(resourceinfo.rec1);
    h.push("</td>");
    h.push("<td>");
    h.push(resourceinfo.rec2);
    h.push("</td>");
    h.push("<td>");
    h.push(resourceinfo.rec3);
    h.push("</td>");
    h.push("<td>");
    h.push(resourceinfo.rec4);
    h.push("</td>");
    h.push("</tr>");
    h.push("</thead>");
    var n = new Array();
    var f = new Array();
    h.push("<tbody>");
    h.push("<tr class='stripe hdg'>");
    h.push("<td class='stat'>");
    h.push(g_js_strings.openCastle.baseprod);
    h.push("</td>");
    for (var m = 1; m < 5; m++) {
        n[m] = parseInt(seed.resources["city" + currentcityid]["rec" + m][2] * r);
        f[m] = n[m];
        h.push("<td>");
        h.push(addCommas(n[m]));
        h.push("</td>")
    }
    h.push("</tr>");
    h.push("<tr><td class='stat'>" + g_js_strings.openCastle.knightbonus + "</td>");
    var p = 0;
    var c = seed.knights["city" + currentcityid];
    if (c) {
        c = c["knt" + seed.leaders["city" + currentcityid].resourcefulnessKnightId];
        if (c) {
            p = parseInt(c.resourcefulness);
            var a = new Date;
            if (c.resourcefulnessBoostExpireUnixtime > parseInt(a.getTime() / 1000)) {
                p *= 1.25
            }
        }
    }
    for (var m = 1; m < 5; m++) {
        var d = parseInt(n[m] * (p / 100));
        f[m] = f[m] + d;
        h.push("<td>");
        h.push(addCommas(d));
        h.push("</td>")
    }
    h.push("</tr>");
    h.push("<tr class='stripe'><td class='stat'>" + g_js_strings.openCastle.resbonus + "</td>");
    for (var m = 1; m < 5; m++) {
        var o = parseInt(n[m] * (parseInt(seed.tech["tch" + m]) / 10));
        f[m] = f[m] + o;
        h.push("<td>");
        h.push(addCommas(o));
        h.push("</td>")
    }
    h.push("</tr>");
    h.push("<tr><td class='stat'>" + g_js_strings.openCastle.wildbonus + "</td>");
    var e = [0, 0, 0, 0, 0];
    if (!Object.isArray(seed.wilderness["city" + currentcityid])) {
        var q = Object.keys(seed.wilderness["city" + currentcityid]);
        for (var m = 0; m < q.length; m++) {
            var l = 0;
            switch (parseInt(seed.wilderness["city" + currentcityid][q[m]].tileType)) {
            case 10:
                l = 1;
                break;
            case 11:
                l = 1;
                break;
            case 20:
                l = 2;
                break;
            case 30:
                l = 3;
                break;
            case 40:
                l = 4;
                break
            }
            e[l] += parseInt(seed.wilderness["city" + currentcityid][q[m]].tileLevel)
        }
    }
    for (var m = 1; m < 5; m++) {
        var b = parseInt(n[m] * 0.05 * e[m]);
        f[m] = f[m] + b;
        h.push("<td>");
        h.push(addCommas(b));
        h.push("</td>")
    }
    h.push("</tr>");
    h.push("<tr class='stripe'><td class='stat'>" + g_js_strings.openCastle.provbonus + "</td><td>100</td><td>100</td><td>100</td><td>100</td></tr>");
    h.push("<tr><td class='stat'>" + g_js_strings.openCastle.itembonus + "</td>");
    for (var m = 1; m < 5; m++) {
        var s = 0;
        if (parseInt(seed.playerEffects["r" + m + "BstExp"]) > unixtime()) {
            s = parseInt(n[m] * 0.25)
        }
        f[m] = f[m] + s;
        h.push("<td>");
        h.push(addCommas(s));
        h.push("</td>")
    }
    h.push("</tr>");
    h.push("<tr class='stripe'><td class='stat'>" + g_js_strings.commonstr.upkeep + "</td>");
    for (var m = 1; m < 5; m++) {
        var g = parseInt(seed.resources["city" + currentcityid]["rec" + m][3]);
        f[m] = f[m] - g;
        h.push("<td class='neg'>");
        if (g > 0) {
            h.push("-")
        }
        h.push(addCommas(g));
        h.push("</td>")
    }
    h.push("</tr>");
    h.push("</tbody>");
    h.push("<tfoot>");
    h.push("<tr class='hdg'>");
    h.push("<td class='stat'>");
    h.push(g_js_strings.openCastle.totalprod);
    h.push("</td>");
    for (var m = 1; m < 5; m++) {
        h.push("<td");
        f[m] += 100;
        if (f[m] < 0) {
            h.push(" class='neg'")
        }
        h.push(">");
        h.push(addCommas(f[m]));
        h.push("</td>")
    }
    h.push("</tr>");
    h.push("</tfoot>");
    h.push("</table>");
    h.push("</div>");
    h.push("</div>");
    h.push("<div class='castletablewrap tablewrap' id='castle_1' style='display:none;'>");
    h.push("<div class='waiting'></div>");
    h.push("</div>");
    h.push("<div class='castletablewrap tablewrap' id='castle_2' style='display:none;'>");
    h.push("<div class='waiting'></div>");
    h.push("</div>");
    $("modal_build_content").innerHTML = h.join("")
}
function sanctuaryChange(sanctype) {
    var params = Object.clone(g_ajaxparams);
    params.cid = currentcityid;
    params.state = sanctype;
    new Ajax.Request(g_ajaxpath + "ajax/gate.php" + g_ajaxsuffix, {
        method: "post",
        parameters: params,
        onSuccess: function (transport) {
            var rslt = eval("(" + transport.responseText + ")");
            if (rslt.ok) {
                seed.citystats["city" + currentcityid].gate = sanctype;
                if (rslt.updateSeed) {
                    update_seed(rslt.updateSeed)
                }
            } else {
                Modal.hideModal();
                Modal.showAlert(printLocalError((rslt.error_code || null), (rslt.msg || null), (rslt.feedback || null)))
            }
        },
        onFailure: function () {}
    })
}
function changeTax() {
    var b = parseInt(seed.citystats["city" + currentcityid].gold[1]);
    var a = new Array();
    a.push("<div class='castlemessagewrap'>");
    a.push("<div class='castlemessage'>");
    a.push("<div class='desc'>" + g_js_strings.changeTax.changetaxdesc + "</div>");
    a.push("<div class='newratebox'><div>" + g_js_strings.changeTax.newtaxrate + "</div><div><input id='newTaxRate' value=''/>%</div></div>");
    a.push("<div class='errorbox'><div id='taxError' style='display:none;'>" + g_js_strings.changeTax.entertaxrate + "</div></div>");
    a.push("<div class='oldratebox'><div>" + g_js_strings.changeTax.taxrate + "</div><div><img src='" + stimgUrl + "img/taxes.png'/>" + b + "%</div></div>");
    a.push("</div>");
    a.push("<div class='btnlink clearfix'>");
    a.push("<a class='button25'  onclick='modal_change_tax();return false;'><span>" + g_js_strings.commonstr.submit + "</span></a>");
    a.push("<a class='link'  onclick='Modal.hideModal();return false;'>" + g_js_strings.commonstr.cancel + "</a>");
    a.push("</div>");
    a.push("</div>");
    Modal.showModal(500, 500, 10, 10, g_js_strings.modaltitles.changetaxrate, a.join(""))
}
function modal_change_tax() {
    if (isNaN(parseInt($("newTaxRate").value)) || parseInt($("newTaxRate").value) < 0 || parseInt($("newTaxRate").value) > 100) {
        $("taxError").show();
        return false
    } else {
        var params = Object.clone(g_ajaxparams);
        params.cid = currentcityid;
        params.rate = parseInt($("newTaxRate").value);
        new Ajax.Request(g_ajaxpath + "ajax/changeTax.php" + g_ajaxsuffix, {
            method: "post",
            parameters: params,
            onSuccess: function (transport) {
                var rslt = eval("(" + transport.responseText + ")");
                if (rslt.ok) {
                    Modal.hideModal();
                    if (rslt.updateSeed) {
                        update_seed(rslt.updateSeed);
                        var taxRate = rslt.updateSeed.city[currentcityid].production.taxRate;
                        $("stat_tax_rate").innerHTML = taxRate + "%";
                        seed.citystats["city" + currentcityid].gold[1] = taxRate
                    }
                    modal_change_tax_confirm();
                    update_gold()
                } else {
                    Modal.hideModal();
                    Modal.showAlert(printLocalError((rslt.error_code || null), (rslt.msg || null), (rslt.feedback || null)))
                }
            },
            onFailure: function () {}
        })
    }
}
function modal_change_tax_confirm() {
    var a = new Array();
    a.push("<div class='castlemessagewrap'>");
    a.push("<div class='castlemessage'>");
    a.push("<div class='desc'>" + g_js_strings.modal_change_tax_confirm.yourtaxrate + ":</div>");
    a.push("<div class='stats'><img src='" + stimgUrl + "img/taxes.png'/> <span>" + seed.citystats["city" + currentcityid].gold[1] + "%</span></div>");
    a.push("</div>");
    a.push("<div class='btnlink clearfix'>");
    a.push("<a class='button25'  onclick='Modal.hideModal();openCastle();return false;'><span>" + g_js_strings.commonstr.ok + "</span></a>");
    a.push("</div>");
    a.push("</div>");
    Modal.showModal(500, 500, 10, 10, g_js_strings.modaltitles.changetaxrate, a.join(""))
}
function raiseGold() {
    var a = parseInt(seed.citystats["city" + currentcityid].pop[2]);
    var b = new Array();
    if (a < 20) {
        b.push("<div class='castlemessagewrap'>");
        b.push("<div class='castlemessage'>");
        b.push("<div class='desc'>" + g_js_strings.raiseGold.notenoughgold + "</div>");
        b.push("</div>");
        b.push("<div class='btnlink clearfix'>");
        b.push("<a class='button25' onclick='Modal.hideModal();return false;'><span>" + g_js_strings.commonstr.ok + "</span></a>");
        b.push("</div>");
        b.push("</div>")
    } else {
        b.push("<div class='castlemessagewrap'>");
        b.push("<div class='castlemessage'>");
        b.push("<div class='desc'>" + g_js_strings.raiseGold.collectgolddesc + "</div>");
        b.push("<div class='stats'>" + g_js_strings.raiseGold.goldcollected + ": <span>" + addCommas(parseInt(seed.citystats["city" + currentcityid].pop[0]) * 10) + "</span></div>");
        b.push("<div class='stats'>" + g_js_strings.raiseGold.happdecreased + ": <span>20</span></div>");
        b.push("</div>");
        b.push("<div class='btnlink clearfix'>");
        b.push("<a class='button25' onclick='modal_raise_gold();return false;'><span>" + g_js_strings.commonstr.submit + "</span></a>");
        b.push("<a class='link' onclick='Modal.hideModal();return false;'>" + g_js_strings.commonstr.cancel + "</a>");
        b.push("</div>");
        b.push("</div>")
    }
    Modal.showModal(500, 500, 10, 10, g_js_strings.modaltitles.collectgold, b.join(""))
}
function modal_raise_gold() {
    var params = Object.clone(g_ajaxparams);
    params.cid = currentcityid;
    new Ajax.Request(g_ajaxpath + "ajax/levyGold.php" + g_ajaxsuffix, {
        method: "post",
        parameters: params,
        onSuccess: function (transport) {
            var rslt = eval("(" + transport.responseText + ")");
            if (rslt.ok) {
                Modal.hideModal();
                modal_raise_gold_confirm();
                if (rslt.updateSeed) {
                    update_seed(rslt.updateSeed)
                }
            } else {
                Modal.hideModal();
                Modal.showAlert(printLocalError((rslt.error_code || null), (rslt.msg || null), (rslt.feedback || null)))
            }
        },
        onFailure: function () {}
    })
}
function modal_raise_gold_confirm() {
    var b = parseInt(seed.citystats["city" + currentcityid].pop[0]) * 10 + seed.citystats["city" + currentcityid].gold[0];
    var a = new Array();
    a.push("<div class='castlemessagewrap'>");
    a.push("<div class='castlemessage'>");
    a.push("<div class='desc'>" + g_js_strings.modal_raise_gold_confirm.yourgoldinc + "</div>");
    a.push("<div class='stats'><img src='" + stimgUrl + "img/gold_30.png'/><span>" + addCommas(b) + "</span></div>");
    a.push("</div>");
    a.push("<div class='btnlink clearfix'>");
    a.push("<a class='button25' onclick='Modal.hideModal();openCastle();return false;'><span>" + g_js_strings.commonstr.ok + "</span></a>");
    a.push("</div>");
    a.push("</div>");
    Modal.showModal(500, 500, 10, 10, g_js_strings.modaltitles.collectgold, a.join(""))
}
function increaseHappiness() {
    var b = parseInt(seed.citystats["city" + currentcityid].pop[0]) * 10;
    var a = new Array();
    a.push("<div class='castlemessagewrap'>");
    a.push("<div class='castlemessage'>");
    a.push("<div class='desc'>" + g_js_strings.increaseHappiness.increasehappdesc + "</div>");
    a.push("<div class='stats'>" + g_js_strings.increaseHappiness.happinc + ": <span>10 (max 100%)</span></div>");
    a.push("<div class='stats'>" + g_js_strings.commonstr.cost + ": <span>" + addCommas(b) + " " + g_js_strings.commonstr.gold + "</span></div>");
    a.push("</div>");
    a.push("<div class='btnlink clearfix'>");
    a.push("<a class='button25'  onclick='modal_increase_happiness();return false;'><span>" + g_js_strings.commonstr.submit + "</span></a>");
    a.push("<a class='link'  onclick='Modal.hideModal();return false;'>" + g_js_strings.commonstr.cancel + "</a>");
    a.push("</div>");
    a.push("</div>");
    Modal.showModal(500, 500, 10, 10, g_js_strings.modaltitles.inchapp, a.join(""))
}
function modal_increase_happiness() {
    var params = Object.clone(g_ajaxparams);
    params.cid = currentcityid;
    new Ajax.Request(g_ajaxpath + "ajax/spreadWealth.php" + g_ajaxsuffix, {
        method: "post",
        parameters: params,
        onSuccess: function (transport) {
            var rslt = eval("(" + transport.responseText + ")");
            if (rslt.ok) {
                Modal.hideModal();
                modal_increase_happiness_confirm();
                if (rslt.updateSeed) {
                    update_seed(rslt.updateSeed)
                }
            } else {
                Modal.hideModal();
                Modal.showAlert(printLocalError((rslt.error_code || null), (rslt.msg || null), (rslt.feedback || null)))
            }
        },
        onFailure: function () {}
    })
}
function modal_increase_happiness_confirm() {
    var b = seed.citystats["city" + currentcityid].pop[2] + 10;
    var a = new Array();
    a.push("<div class='castlemessagewrap'>");
    a.push("<div class='castlemessage'>");
    a.push("<div class='desc'>" + g_js_strings.modal_increase_happiness_confirm.yourhapp + "</div>");
    a.push("<div class='stats'><img src='" + stimgUrl + "img/happiness.png'/> <span>" + b + "</span></div>");
    a.push("</div>");
    a.push("<div class='btnlink clearfix'>");
    a.push("<a class='button25' onclick='Modal.hideModal();openCastle();return false;'><span>" + g_js_strings.commonstr.ok + "</span></a>");
    a.push("</div>");
    a.push("</div>");
    Modal.showModal(500, 500, 10, 10, g_js_strings.modaltitles.inchapp, a.join(""))
}
function showMyWilderness() {
    var a = new Array();
    a.push("<div class='prodtablewrap'>");
    a.push("<div class='prodtableheader'>" + g_js_strings.showMyWilderness.conqueredwild + "<div class='right'>" + g_js_strings.commonstr.limit + ": ");
    if (getBuildingLevel(0) === 11) {
        a.push("12")
    } else {
        a.push(seed.buildings["city" + currentcityid]["pos0"][1])
    }
    a.push("</div></div>");
    a.push("<table class='prodtable wild' border='0' cellspacing='0' cellpadding='0'>");
    a.push("<thead>");
    a.push("<tr>");
    a.push("<td class='type'>");
    a.push(g_js_strings.commonstr.type);
    a.push("</td>");
    a.push("<td class='coord'>");
    a.push(g_js_strings.commonstr.coordinates);
    a.push("</td>");
    a.push("<td class='lvl'>");
    a.push(g_js_strings.commonstr.level);
    a.push("</td>");
    a.push("<td>");
    a.push(g_js_strings.commonstr.status);
    a.push("</td>");
    a.push("<td>");
    a.push(g_js_strings.commonstr.abandon);
    a.push("</td>");
    a.push("<td>");
    a.push(g_js_strings.commonstr.defend);
    a.push("</td>");
    a.push("</tr>");
    a.push("</thead>");
    a.push("<tbody>");
    if (seed.wilderness.length != 0 && seed.wilderness["city" + currentcityid].length != 0) {
        var b = new Hash(seed.wilderness["city" + currentcityid]);
        var c = true;
        b.each(function (e) {
            a.push("<tr" + ((c) ? " class='stripe'" : "") + ">");
            a.push("<td class='type'>");
            a.push(g_mapObject.typename[g_mapObject.types[parseInt(e.value.tileType)]].capitalize());
            a.push("</td>");
            a.push("<td class='coord'>");
            var d = new cm.utils.CoordinateLink(e.value.xCoord, e.value.yCoord);
            d.setClassName("coordinateLink");
            a.push(d.getHTML());
            a.push("</td>");
            a.push("<td class='lvl'>");
            a.push(e.value.tileLevel);
            a.push("</td>");
            a.push("<td>");
            a.push(g_js_strings.commonstr.normal);
            a.push("</td>");
            a.push("<td>");
            a.push("<a  class='button20' onclick='modal_wilderness_abandon(" + e.value.tileId + "," + e.value.tileLevel + "," + e.value.tileType + "," + e.value.xCoord + "," + e.value.yCoord + ");return false;'><span>" + g_js_strings.commonstr.abandon + "</span></a>");
            a.push("</td>");
            a.push("<td>");
            a.push("<a  class='button20' onclick='WildDefense.defenseModal(" + e.value.tileId + ",1);return false;'><span>" + g_js_strings.commonstr.defend + "</span></a>");
            a.push("</td>");
            a.push("</tr>");
            c = !c
        })
    }
    a.push("</tbody>");
    a.push("</table>");
    a.push("</div>");
    $("castle_2").innerHTML = a.join("")
}
function showMyBuildings() {
    var a = new Array();
    var e = new Array();
    var b = new Array();
    if (seed.buildings.length != 0) {
        var f = new Hash(seed.buildings["city" + currentcityid]);
        var d = true;
        var c = true;
        f.each(function (g) {
            if (parseInt(g.key.substring(3)) >= 100) {
                e.push("<tr" + ((d) ? " class='stripe'" : "") + ">");
                e.push("<td class='res'>");
                e.push(buildingcost["bdg" + g.value[0]][0]);
                e.push("</td>");
                e.push("<td>");
                e.push(g_js_strings.commonstr.normal);
                e.push("</td>");
                e.push("<td>");
                e.push(g.value[1]);
                e.push("</td>");
                e.push("</tr>");
                d = !d
            } else {
                b.push("<tr" + ((c) ? " class='stripe'" : "") + ">");
                b.push("<td class='res'>");
                b.push(buildingcost["bdg" + g.value[0]][0]);
                b.push("</td>");
                b.push("<td>");
                b.push(g_js_strings.commonstr.normal);
                b.push("</td>");
                b.push("<td>");
                b.push(g.value[1]);
                b.push("</td>");
                b.push("</tr>");
                c = !c
            }
        })
    }
    a.push("<div class='buildboxwrap clearfix'>");
    a.push("<div class='restablewrap'>");
    a.push("<div class='restableheader'>" + g_js_strings.commonstr.resources + "</div>");
    a.push("<table class='restable' border='0' cellspacing='0' cellpadding='0'>");
    a.push("<thead>");
    a.push("<tr>");
    a.push("<td class='res'>");
    a.push(g_js_strings.commonstr.resources);
    a.push("</td>");
    a.push("<td>");
    a.push(g_js_strings.commonstr.status);
    a.push("</td>");
    a.push("<td>");
    a.push(g_js_strings.commonstr.level);
    a.push("</td>");
    a.push("</tr>");
    a.push("</thead>");
    a.push("<tbody>");
    a.push(e.join(""));
    a.push("</tbody>");
    a.push("</table>");
    a.push("</div>");
    a.push("<div class='restablewrap'>");
    a.push("<div class='restableheader'>" + g_js_strings.commonstr.buildings + "</div>");
    a.push("<table class='restable' border='0' cellspacing='0' cellpadding='0'>");
    a.push("<thead>");
    a.push("<tr>");
    a.push("<td class='res'>");
    a.push(g_js_strings.commonstr.resources);
    a.push("</td>");
    a.push("<td>");
    a.push(g_js_strings.commonstr.status);
    a.push("</td>");
    a.push("<td>");
    a.push(g_js_strings.commonstr.level);
    a.push("</td>");
    a.push("</tr>");
    a.push("</thead>");
    a.push("<tbody>");
    a.push(b.join(""));
    a.push("</tbody>");
    a.push("</table>");
    a.push("</div>");
    a.push("</div>");
    $("castle_1").innerHTML = a.join("")
}
function changeCastleModalTabs(a) {
    var c = $("castleModalTabs").select("a");
    for (var b = 0; b < c.length; b++) {
        c[b].className = "tab";
        $("castle_" + b).hide()
    }
    c[parseInt(a)].className = "tab selected";
    $("castle_" + a).show();
    if (a == 0) {
        openCastle()
    } else {
        if (a == 1) {
            showMyBuildings()
        } else {
            if (a == 2) {
                showMyWilderness()
            }
        }
    }
    if (a == 0) {
        $("modal_build").className = "tab1"
    } else {
        if (a == 1) {
            $("modal_build").className = "tab2"
        } else {
            $("modal_build").className = "tab3"
        }
    }
}
function cityaction_abandonprompt() {
    Modal.hideModalAll();
    changeview_city($("mod_views_city"));
    var a = new Array();
    a.push('<div id="modal_abandonpromptdiv">');
    a.push('<div class="hdtx">' + g_js_strings.cityaction_abandonprompt.abandona.replace("%1$s", currentcityinfo[1]) + "</div>");
    a.push('<div class="instr">' + g_js_strings.cityaction_abandonprompt.confirmdesc + "</div>");
    a.push('<div class="ipt"><input type="text" id="modal_abandonpromptdiv_ipt" maxlength="15"/></div>');
    a.push("<div class='clearfix btns'><a class='button20' onclick='cityaction_abandonprompt_confirm();return false;'><span>" + g_js_strings.commonstr.abandon + "</span></a><a class='cancel' onclick='Modal.hideModal();return false;'>" + g_js_strings.commonstr.cancel + "</a></div>");
    a.push("</div>");
    Modal.showModal(500, 400, 130, 75, g_js_strings.modaltitles.abandoncity, a.join(""))
}
function cityaction_abandonprompt_confirm() {
    if ($("modal_abandonpromptdiv_ipt").value == currentcityinfo[1].split("").reverse().join("")) {
        cityaction_abandon(currentcityinfo[5], currentcityinfo[0], currentcityinfo[2], currentcityinfo[3])
    } else {
        Modal.showAlert(g_js_strings.cityaction_abandonprompt_confirm.typename)
    }
}
function cityaction_abandon(tileid, cityid, xcoord, ycoord) {
    var params = Object.clone(g_ajaxparams);
    params.cid = cityid;
    params.xCoord = xcoord;
    params.yCoord = ycoord;
    params.tid = tileid;
    new Ajax.Request(g_ajaxpath + "ajax/abandonCity.php" + g_ajaxsuffix, {
        method: "post",
        parameters: params,
        onSuccess: function (transport) {
            var rslt = eval("(" + transport.responseText + ")");
            if (rslt.ok) {
                top.location = appUrl
            } else {
                Modal.showAlert(printLocalError((rslt.error_code || null), (rslt.msg || null), (rslt.feedback || null)))
            }
        },
        onFailure: function () {}
    })
};
if (!window.Chat) {
    var Chat = new Object()
}
g_chatcurWritten = new Object();
g_chatcurWritten.c1 = -2;
g_chatcurWritten.c2 = -2;
g_chatcurWritten.c3 = -2;
g_chatcount = 0;
Chat.Properties = {
    chatType: 1,
    chatTypeId: 1,
    curNewest1: -1,
    curWritten1: -1,
    curNewest2: -1,
    curWritten2: -1,
    curNewest3: -1,
    curWritten3: -1,
    hasNewChat: [true, true, true],
    lastActiveState: true,
    recipients: new Object(),
    timestamp: 0
};
Chat.Methods = {
    changeTab: function (a) {
        $("mod_comm_list" + this.chatType).hide();
        $("mod_comm_list" + a).show();
        $("comm_tabs").className = "comm_tabs seltab" + a;
        this.chatType = a
    },
    keyup: function (b) {
        var a;
        if (!b) {
            var b = window.event
        }
        if (b.keyCode) {
            a = b.keyCode
        } else {
            if (b.which) {
                a = b.which
            }
        }
        if (a == 13) {
            this.sendChat()
        }
    },
    ignoreUserConfirm: function (a) {
        var b = new Array();
        b.push("<div class='ignorebox'>");
        b.push("<div>" + g_js_strings.ignoreUserConfirm.ignoreuser + "</div>");
        b.push("<div class='clearfix'><a  class='button20' onclick='Chat.ignoreUser(");
        b.push(a);
        b.push(");return false;'><span>" + g_js_strings.commonstr.yes + "</span></a><a  onclick='Modal.hideModal();return false;'>" + g_js_strings.commonstr.no + "</a></div>");
        b.push("</div>");
        Modal.showModal(400, 400, 130, 400, g_js_strings.modaltitles.ignoreuser, b.join(""))
    },
    ignoreUser: function (userid) {
        if (Object.isArray(ignored)) {
            ignored = {}
        }
        ignored["u" + userid] = true;
        var params = Object.clone(g_ajaxparams);
        params.ignoreId = userid;
        params.set = 1;
        new Ajax.Request(g_ajaxpath + "ajax/ignore.php" + g_ajaxsuffix, {
            method: "post",
            parameters: params,
            onSuccess: function (transport) {
                var rslt = eval("(" + transport.responseText + ")");
                if (rslt.ok) {
                    Modal.hideModalAll()
                }
            },
            onFailure: function () {}
        })
    },
    silenceUserConfirm: function (a) {
        var b = new Array();
        b.push("<div class='ignorebox'>");
        b.push("<div>" + g_js_strings.silenceUserConfirm.silenceuser + "</div>");
        b.push("<div class='clearfix'><a class='button20' onclick='Chat.silenceUser(");
        b.push(a);
        b.push(");Modal.hideModal();return false;'><span>" + g_js_strings.commonstr.yes + "</span></a><a onclick='Modal.hideModal();return false;'>" + g_js_strings.commonstr.no + "</a></div>");
        b.push("</div>");
        Modal.showModal(400, 400, 130, 400, g_js_strings.modaltitles.silenceuser, b.join(""))
    },
    silenceUser: function (userid) {
        var params = Object.clone(g_ajaxparams);
        params.silenceId = userid;
        params.reason = prompt("Reason:", "");
        params.set = 1;
        new Ajax.Request(g_ajaxpath + "ajax/silence.php" + g_ajaxsuffix, {
            method: "post",
            parameters: params,
            onSuccess: function (transport) {
                var rslt = eval("(" + transport.responseText + ")");
                if (rslt.ok) {
                    Modal.hideModalAll()
                }
            },
            onFailure: function () {}
        })
    },
    renameUserConfirm: function (a) {
        var b = new Array();
        b.push("<div class='ignorebox'>");
        b.push("<div>" + g_js_strings.renameUserConfirm.renameuser + "</div>");
        b.push("<div class='clearfix'><a class='button20' onclick='Chat.renameUser(");
        b.push(a);
        b.push(");Modal.hideModal();return false;'><span>" + g_js_strings.commonstr.yes + "</span></a><a  onclick='Modal.hideModal();return false;'>" + g_js_strings.commonstr.no + "</a></div>");
        b.push("</div>");
        Modal.showModal(400, 400, 130, 400, g_js_strings.modaltitles.renameuser, b.join(""))
    },
    renameUser: function (userid) {
        var params = Object.clone(g_ajaxparams);
        params.renameId = userid;
        params.newName = prompt("Name:", "");
        params.set = 1;
        new Ajax.Request(g_ajaxpath + "ajax/rename.php" + g_ajaxsuffix, {
            method: "post",
            parameters: params,
            onSuccess: function (transport) {
                var rslt = eval("(" + transport.responseText + ")");
                if (rslt.ok) {
                    Modal.hideModalAll()
                } else {
                    Modal.showAlert(g_js_strings.renameUser.didnotwork)
                }
            },
            onFailure: function () {}
        })
    },
    viewProfile: function (f, a, c) {
        var e = new Array();
        e.push("<div class='ignorebox clearfix'>");
        e.push("<a  class='button20' onclick='changeview_court(");
        e.push(a);
        e.push(");return false;'><span>" + g_js_strings.commonstr.viewcourt + "</span></a>");
        if (!c) {
            e.push("<a class='button20' onclick='Chat.ignoreUserConfirm(");
            e.push(a);
            e.push(");return false;'><span>" + g_js_strings.commonstr.ignore + "</span></a>")
        }
        var d = false;
        for (var b = 0; b < officers.length; b++) {
            if (officers[b] == tvuid) {
                e.push("<a  class='button20' onclick='Chat.silenceUserConfirm(");
                e.push(a);
                e.push(");return false;'><span>" + g_js_strings.commonstr.silence + "</span></a>");
                if (tvuid != a && !c) {
                    e.push("<a  class='button20' onclick='Chat.renameUserConfirm(");
                    e.push(a);
                    e.push(");return false;'><span>" + g_js_strings.commonstr.rename + "</span></a>")
                }
                d = true;
                break
            }
        }
        if (!d) {
            for (var b = 0; b < moderators.length; b++) {
                if (moderators[b] == tvuid) {
                    e.push("<a class='button20' onclick='Chat.silenceUserConfirm(");
                    e.push(a);
                    e.push(");return false;'><span>" + g_js_strings.commonstr.silence + "</span></a>");
                    if (tvuid != a && !c) {
                        e.push("<a class='button20' onclick='Chat.renameUserConfirm(");
                        e.push(a);
                        e.push(");return false;'><span>" + g_js_strings.commonstr.rename + "</span></a>")
                    }
                    break
                }
            }
        }
        e.push("</div>");
        Modal.showModal(400, 400, 130, 400, f.innerHTML, e.join(""))
    },
    getChat: function () {
        var ut = unixtime();
        var chatloc = "";
        var can_get_chat = false;
        if (cm.WorldSettings.getSetting("CHAT_THROTTLE") != "true") {
            var chatoffset = parseInt(g_chatcount / 10);
            if (chatoffset > 20) {
                chatoffset = 20
            }
            if (ut - this.timestamp > (8 + chatoffset)) {
                can_get_chat = true
            }
        } else {
            can_get_chat = cm.chat.Active()
        }
        if (!can_get_chat) {
            return
        }
        g_chatcount++;
        this.timestamp = ut;
        var params = Object.clone(g_ajaxparams);
        params.ctype = this.chatType;
        params.ctypeId = this.chatTypeId;
        params.curNewest1 = this.curNewest1;
        params.curNewest2 = this.curNewest2;
        params.curNewest3 = this.curNewest3;
        params.sid = g_server;
        var that = this;
        cm.chat.Send();
        new Ajax.Request(g_ajaxpath + "ajax/getChat.php" + g_ajaxsuffix, {
            method: "post",
            parameters: params,
            onSuccess: function (transport) {
                var rslt = eval("(" + transport.responseText + ")");
                if (rslt.ok) {
                    for (var i = 1; i < 4; i++) {
                        if (rslt.data.newChats[i].length > 0) {
                            if (parseInt(params["curNewest" + i]) > parseInt(g_chatcurWritten["c" + i])) {
                                g_chatcurWritten["c" + i] = parseInt(params["curNewest" + i])
                            } else {
                                rslt.data.newChats[i] = []
                            }
                        }
                        for (var j = 0; j < rslt.data.newChats[i].length; j++) {
                            if (ignored["u" + rslt.data.newChats[i][j][4]] == null) {
                                var chatwrap = document.createElement("div");
                                var chatwrapb = document.createElement("div");
                                if (i == 3) {
                                    chatwrap.className = "chatwrap clearfix direct";
                                    chatwrapb.className = "chatwrap clearfix direct";
                                    chatloc = "<b style='color:#A56631;font-size:9px;'> " + g_js_strings.getChat.whisperstoyou + ":</b> "
                                } else {
                                    if (i == 2) {
                                        chatwrap.className = "chatwrap clearfix";
                                        chatwrapb.className = "chatwrap clearfix";
                                        chatloc = "<b style='color:#A56631;font-size:9px;'> " + g_js_strings.getChat.saystoalliance + ":</b> "
                                    } else {
                                        chatwrap.className = "chatwrap clearfix"
                                    }
                                }
                                if (parseInt(rslt.data.newChats[i][j][4]) == 0) {
                                    chatwrap.className = "chatwrap clearfix admin";
                                    if (rslt.data.newChats[i][j][3] == "RELOAD") {
                                        top.location.href = appUrl;
                                        return false
                                    }
                                } else {
                                    var chatid = parseInt(rslt.data.newChats[i][j][4]);
                                    var isofficer = false;
                                    var ismod = false;
                                    for (var k = 0; k < officers.length; k++) {
                                        if (chatid == parseInt(officers[k])) {
                                            chatwrap.className = "chatwrap clearfix officer";
                                            k = officers.length;
                                            isofficer = true
                                        }
                                    }
                                    if (!isofficer) {
                                        for (var k = 0; k < moderators.length; k++) {
                                            if (chatid == parseInt(moderators[k])) {
                                                chatwrap.className = "chatwrap clearfix moderator";
                                                k = moderators.length;
                                                ismod = true
                                            }
                                        }
                                    }
                                }
                                if (parseInt(rslt.data.newChats[i][j][6]) == 1) {
                                    var linkComment = true
                                } else {
                                    var linkComment = false
                                }
                                chatwrap.innerHTML = Chat.chatDivContent(rslt.data.newChats[i][j][0], rslt.data.newChats[i][j][1], rslt.data.newChats[i][j][2], rslt.data.newChats[i][j][3], rslt.data.newChats[i][j][4], rslt.data.newChats[i][j][5], chatloc, isofficer, ismod, linkComment);
                                chatwrapb.innerHTML = Chat.chatDivContent(rslt.data.newChats[i][j][0], rslt.data.newChats[i][j][1], rslt.data.newChats[i][j][2], rslt.data.newChats[i][j][3], rslt.data.newChats[i][j][4], rslt.data.newChats[i][j][5], chatloc, isofficer, ismod, linkComment);
                                if (i == 3 || i == 2) {
                                    that.insertChatMessage(2, {
                                        top: chatwrapb
                                    });
                                    that.insertChatMessage(1, {
                                        top: chatwrap
                                    })
                                } else {
                                    that.insertChatMessage(i, {
                                        top: chatwrap
                                    })
                                }
                            }
                        }
                        Chat["curNewest" + i] = parseInt(rslt.data.nextNewests[i])
                    }
                    if (parseInt(params.curNewest1) == -1) {
                        var chatguidelines = "<b>" + g_js_strings.getChat.chatrules + ":</b> " + g_js_strings.getChat.nobadlang + "";
                        $("mod_comm_list1").insert({
                            top: '<div class="chatwrap clearfix noalliance" style="padding:3px;">' + chatguidelines + "</div>"
                        });
                        $("mod_comm_list2").insert({
                            top: '<div class="chatwrap clearfix noalliance" style="padding:3px;">' + chatguidelines + "</div>"
                        })
                    }
                    calibratetime(rslt.resmicrotime)
                }
            },
            onFailure: function () {}
        })
    },
    chatDivContent: function (k, d, h, g, f, b, c, l, a, j) {
        var i = l || a;
        var e = new Array();
        e.push("<img src='");
        e.push(h);
        e.push("'/>");
        e.push("<div class='content'>");
        e.push("<div class='info'>");
        if (f && parseInt(f) != 0) {
            e.push("<a  class='nm' onclick='Chat.viewProfile(this,");
            e.push(f);
            e.push("," + i + ");return false;'>")
        } else {
            e.push("<span class='nm'>")
        }
        e.push(k);
        if (f && parseInt(f) != 0) {
            e.push("</a>")
        } else {
            e.push("</span>")
        }
        if (c != undefined) {
            if (c.length > 0) {
                e.push(c)
            }
        }
        e.push("<span class='time'>");
        e.push(d);
        e.push("</span>");
        e.push("</div>");
        e.push("<div class='clearfix'>");
        e.push("<div class='tx'>");
        if (j) {
            e.push((g).unescapeHTML().replace(/&#39;/g, "'"))
        } else {
            e.push(g)
        }
        e.push("</div>");
        if (b) {
            e.push("<div class='flag f" + b + "'></div>")
        }
        e.push("</div>");
        e.push("</div>");
        return e.join("")
    },
    insertChatMessage: function (a, b) {
        $("mod_comm_list" + a).insert(b);
        this.hasNewChat[a] = true
    },
    sendChat: function (bhelpComment) {
        g_chatcount = 0;
        var comment = $("mod_comm_input").value.strip();
        if (bhelpComment) {
            var comment = bhelpComment.strip()
        }
        if (comment.length < 1) {
            return
        }
        jQuery(".comm_body").trigger("chatsent");
        $("mod_comm_input").value = "";
        var date = new Date(unixtime() * 1000);
        var chatloc = "";
        var chatwrap = document.createElement("div");
        if (comment.charAt(0) == "@" || comment.charAt(0) == "/") {
            chatwrap.className = "chatwrap clearfix direct"
        } else {
            chatwrap.className = "chatwrap clearfix"
        }
        var mins = date.getMinutes();
        if (mins < 10) {
            mins = "0" + mins
        }
        if (parseInt(this.chatType) == 2 && (!seed.allianceDiplomacies || parseInt(seed.allianceDiplomacies.allianceId) < 1)) {
            var chatwrap2 = document.createElement("div");
            chatwrap2.className = "chatwrap clearfix noalliance";
            chatwrap2.innerHTML = "<div>" + g_js_strings.sendChat.talkingtoyourself + " <a  onclick='modal_alliance();return false;'>" + g_js_strings.sendChat.joinorcreate + "</a></div>";
            this.insertChatMessage(this.chatType, {
                top: chatwrap2
            });
            return false
        }
        var params = Object.clone(g_ajaxparams);
        if (comment.charAt(0) == "@" || comment.charAt(0) == "/") {
            params.ctype = 3;
            var comps = comment.split(" ");
            var nm = comps[0].substring(1);
            if (Chat.recipients[nm.toLowerCase()]) {
                params.recipient = Chat.recipients[nm.toLowerCase()]
            } else {
                params.name = nm
            }
            params.comment = comps.slice(1).join(" ");
            params.comment = params.comment.strip();
            if (params.comment == "") {
                return false
            }
            if (nm == "a") {
                params.ctype = 2;
                chatwrap.className = "chatwrap clearfix";
                comment = params.comment;
                chatloc = "<b style='color:#A56631;font-size:9px;'> " + g_js_strings.sendChat.saystoalliance + ":</b> ";
                if (!seed.allianceDiplomacies || parseInt(seed.allianceDiplomacies.allianceId) < 1) {
                    var chatwrap2 = document.createElement("div");
                    chatwrap2.className = "chatwrap clearfix noalliance";
                    chatwrap2.innerHTML = "<div>" + g_js_strings.sendChat.talkingtoyourself + " <a  onclick='modal_alliance();return false;'>" + g_js_strings.sendChat.joinorcreate + "</a></div>";
                    this.insertChatMessage(1, {
                        top: chatwrap2
                    });
                    return false
                }
            } else {
                if (nm == "g") {
                    chatwrap.className = "chatwrap clearfix";
                    params.ctype = 1;
                    comment = params.comment
                } else {
                    comment = params.comment
                }
            }
        } else {
            params.ctype = this.chatType;
            params.comment = comment;
            if (params.ctype == 2) {
                chatloc = "<b style='color:#A56631;font-size:9px;'> " + g_js_strings.sendChat.saystoalliance + ":</b> "
            }
        }
        params.ctypeId = this.chatTypeId;
        params.nm = nm;
        if (bhelpComment) {
            params.linkflag = true
        }
        var that = this;
        params.sid = g_server;
        new Ajax.Request(g_ajaxpath + "ajax/sendChat.php" + g_ajaxsuffix, {
            method: "post",
            parameters: params,
            onSuccess: function (transport) {
                var rslt = eval("(" + transport.responseText + ")");
                if (rslt.ok) {
                    if (params.name) {
                        Chat.recipients[params.name.toLowerCase()] = rslt.data.recipientId
                    }
                } else {}
                var courtflag = 0;
                for (var i = 0; i < seed.courtItems.length; i++) {
                    if (parseInt(seed.courtItems[i]) >= 860 && parseInt(seed.courtItems[i]) <= 893) {
                        courtflag = seed.courtItems[i]
                    }
                }
                var chatwrap = document.createElement("div");
                var chatwrapb = document.createElement("div");
                var avatar = stimgUrl + "img/avatars/25/" + ((seed.player.prefix == "Lord") ? "m" : "f") + seed.player.avatarId + ".jpg";
                if (rslt.data.recipientId == false) {
                    chatwrap.className = "chatwrap clearfix noalliance";
                    chatwrap.innerHTML = "<div>" + params.name + " " + g_js_strings.sendChat.maybenotonline + "</div>";
                    chatwrapb.className = "chatwrap clearfix noalliance";
                    chatwrapb.innerHTML = "<div>" + params.name + " " + g_js_strings.sendChat.maybenotonline + "</div>";
                    that.insertChatMessage(1, {
                        top: chatwrap
                    });
                    that.insertChatMessage(2, {
                        top: chatwrapb
                    })
                } else {
                    if (rslt.data.recipientId) {
                        chatwrap.className = "chatwrap clearfix direct";
                        chatwrapb.className = "chatwrap clearfix direct";
                        var nm = "<a  class='nm' onclick='Chat.viewProfile(this," + rslt.data.recipientId + "); return false;'>" + params.nm + "</a>";
                        var chatloc = "<b style='color:#A56631;font-size:9px;'> " + g_js_strings.sendChat.whispersto + " " + nm + ":</b> ";
                        chatwrap.innerHTML = Chat.chatDivContent(seed.player.prefix + " " + seed.player.name, date.getHours() + ":" + mins, avatar, params.comment, "", courtflag, chatloc);
                        that.insertChatMessage(1, {
                            top: chatwrap
                        });
                        chatwrapb.innerHTML = Chat.chatDivContent(seed.player.prefix + " " + seed.player.name, date.getHours() + ":" + mins, avatar, params.comment, "", courtflag, chatloc);
                        that.insertChatMessage(2, {
                            top: chatwrapb
                        })
                    } else {
                        if (params.ctype == 2) {
                            chatwrap.className = "chatwrap clearfix";
                            chatwrapb.className = "chatwrap clearfix";
                            chatloc = "<b style='color:#A56631;font-size:9px;'> " + g_js_strings.sendChat.saystoalliance + ":</b> ";
                            chatwrap.innerHTML = Chat.chatDivContent(seed.player.prefix + " " + seed.player.name, date.getHours() + ":" + mins, avatar, params.comment, "", courtflag, chatloc);
                            that.insertChatMessage(1, {
                                top: chatwrap
                            });
                            chatwrapb.innerHTML = Chat.chatDivContent(seed.player.prefix + " " + seed.player.name, date.getHours() + ":" + mins, avatar, params.comment, "", courtflag, chatloc);
                            that.insertChatMessage(2, {
                                top: chatwrapb
                            })
                        } else {
                            chatwrap.className = "chatwrap clearfix";
                            chatwrapb.className = "chatwrap clearfix";
                            chatwrap.innerHTML = Chat.chatDivContent(seed.player.prefix + " " + seed.player.name, date.getHours() + ":" + mins, avatar, params.comment, "", courtflag, chatloc);
                            that.insertChatMessage(1, {
                                top: chatwrap
                            })
                        }
                    }
                }
            },
            onFailure: function () {}
        })
    }
};
Object.extend(Chat, Chat.Methods);
Object.extend(Chat, Chat.Properties);
cm.chat = function (d) {
    var i = [10, 20, 30, 60];
    var c = {
        "10": 60,
        "20": 240,
        "30": 750,
        "60": Number.POSITIVE_INFINITY
    };
    var g = 0;
    var e = 0;
    var h = function () {
            e = a()
        };
    var f = function () {
            d("#comm_tabs a").bind("click", h);
            d(".chatlist").bind("scroll DOMMouseScroll mousewheel", h);
            d(".comm_body").bind("chatsent", h)
        };
    var b = function () {
            e = a() + 30;
            d(document).ready(f)
        };
    var a = function () {
            return (new Date()).getTime() / 1000
        };
    b();
    return {
        Send: function () {
            g = a()
        },
        Active: function () {
            var m = a();
            var l = m - e;
            var j = m - g;
            for (var n in i) {
                var k = i[n];
                if (l < c[k] && j >= k) {
                    return true
                }
            }
            return false
        }
    }
}(jQuery);
cm.cheatDetector = function (e) {
    var c = 0;
    var d = null;
    var b = 0;

    function a() {
        if (c < 1) {
            var h = ["ptOfficial", "gmTabs", "KOCAttackToggle", "KOCAttackOptions", "KOCAttackTab", "KOCAttackOptionsLink", "main_engagement_tabs"];
            var m = {};
            b = 0;
            for (var f in h) {
                if (h.hasOwnProperty(f)) {
                    m[h[f]] = (e("#" + h[f]).length > 0 ? "true" : "false");
                    if (m[h[f]] == "true") {
                        b++
                    }
                }
            }
            var l = window.location.href.substr(0, 35);
            var k = 2;
            if (b >= k && window.mpmetrics) {
                m.location_href = l;
                var g = e.extend({
                    distinct_id: user_id
                }, m);
                mpmetrics = new MixpanelLib("20336e560bf9f33eb8ad661529dd45b7");
                var j = mpmetrics.register(g);
                var i = mpmetrics.track("scripting");
                c++
            } else {}
        } else {
            clearInterval(d)
        }
    }
    return {}
}(jQuery);
var cm = cm || {};
cm.chestItemUsage = function ($) {
    function addItemsToSeed(items) {
        var itmList = new Hash(items);
        itmList.each(function (pair) {
            if (seed.items["i" + pair.key]) {
                seed.items["i" + pair.key] = (parseInt(seed.items["i" + pair.key]) + parseInt(pair.value)).toString();
                ksoItems.add(Number(pair.value))
            } else {
                seed.items["i" + pair.key] = pair.value.toString();
                ksoItems.add(Number(pair.value))
            }
        })
    }
    function open(iid) {
        var params = Object.clone(g_ajaxparams);
        params.chestId = parseInt(iid);
        new Ajax.Request(g_ajaxpath + "ajax/useMysteryChest.php" + g_ajaxsuffix, {
            method: "post",
            parameters: params,
            onSuccess: function (transport) {
                var rslt = eval("(" + transport.responseText + ")");
                if (rslt.ok) {
                    cm.InventoryView.removeItemFromInventory(iid);
                    if (iid == 10029) {
                        cm.makeAnimatedChest.modal(rslt);
                        addItemsToSeed(rslt.items)
                    } else {
                        cm.log.l("chestItemUsage: I only make mysteryChest opens: iid needs to be 10029 but is iid=" + iid)
                    }
                } else {
                    cm.log.l("useMysteryChest.php err=" + (rslt.err || rslt.error || "unknown"))
                }
            },
            onFailure: function () {}
        })
    }
    return {
        open: function (iid) {
            open(iid)
        }
    }
}(jQuery);
var cm = cm || {};
cm.CityIncomingAttackController = function (a) {
    var h = this;
    var k = a;
    var j = function (n) {
            var m = n.getTarget();
            var l = m.getMarchStatus();
            if (l == cm.MARCH_STATUS.MARCH_STATUS_INACTIVE || l == cm.MARCH_STATUS.MARCH_STATUS_ABORTING) {
                k.remove(m)
            }
        };
    var d = function () {
            if (cm.CurrentWatchTowerTimer && cm.CurrentWatchTowerTimer.isActive()) {
                cm.CurrentWatchTowerTimer.remove()
            }
        };
    var c = function (n) {
            n.addEventListener(cm.IncomingAttackEvent.STATUS_CHANGED, j);
            var m = n.getDestinationCityId();
            if (currentcityid != m) {
                return
            }
            var l = cm.WatchTowerList.getCityWatchTower(currentcityid);
            if (l) {
                var o = document.getElementById("slot_" + l.getSlot());
                cm.CurrentWatchTowerTimer = new cm.WatchTowerTimerView(n, k);
                cm.CurrentWatchTowerTimer.setParentElement(o);
                cm.CurrentWatchTowerTimer.show()
            }
        };
    var g = function (m) {
            var n = m.getTarget();
            n.removeEventListener(cm.IncomingAttackEvent.STATUS_CHANGED, j);
            if (k.getCount() > 0) {
                var l = k.getElementAtPosition(0);
                c(l)
            }
        };
    var i = function (m) {
            var l = m.getTarget();
            if (k.getElementAtPosition(0).getId() == l.getId()) {
                c(l)
            }
        };
    var e = function (m) {
            if (k.getCount() > 0) {
                var l = k.getElementAtPosition(0);
                c(l)
            }
        };
    var b = function (o) {
            var n = o.getTarget();
            var p = n.currentView;
            var m = n.previousView;
            if (p === "city") {
                if (k.getCount() > 0) {
                    var l = k.getElementAtPosition(0);
                    c(l)
                }
            }
        };
    var f = function () {
            k.addEventListener(cm.CollectionEvent.ELEMENT_ADDED, i);
            k.addEventListener(cm.CollectionEvent.ELEMENT_REMOVED, g);
            cm.CitySwitch.addEventListener(cm.CitySwitchEvent.CITY_CHANGED, e);
            cm.CitySwitch.addEventListener(cm.CitySwitchEvent.VIEW_CHANGED, b)
        };
    f()
};
cm = cm || {};
cm.CityModel = jQueryClass.extend({
    init: function (a) {
        this.cityId = Number(a[0]);
        this.name = a[1];
        this.x = Number(a[2]);
        this.y = Number(a[3]);
        this.provinceId = Number(a[4]);
        this.tileId = Number(a[5]);
        this.positionId = 0;
        this.silver = 0;
        this.taxRate = 0;
        this.resources = {};
        this.buildings = {};
        this.cityFortifications = {};
        this.wildFortifications = {};
        this.army = {};
        this.knights = {};
        this.leaders = {
            politics: null,
            combat: null,
            intelligence: null,
            resource: null
        };
        this.marches = {
            incoming: {},
            outgoing: {}
        };
        this.queues = {
            training: {},
            cityFortifications: {},
            wildFortifications: {},
            building: {},
            research: {}
        };
        this.wilds = {}
    }
});

function showClearingTooltip(c, b, a) {
    showTooltip(getMsg(a || c.id), c, b, "mod_maparea")
}
function getMsg(g) {
    var b = g.split("_")[1];
    var e = "<div>" + g_js_strings.showClearingTooltip.bdgsite + "</div>";
    var f = seed.buildings["city" + currentcityid]["pos" + b];
    var a = "";
    if (b == 500) {
        if (f == undefined) {
            f = ["50"]
        }
        f[1] = cm.guardianModalModel.getLevel();
        f[0] = "50";
        if (parseInt(f[1]) == 0) {
            return g_js_strings.guardian.tooltip
        }
        a = fUp(cm.guardianModalModel.getType()) + " Guardian"
    } else {
        if (f) {
            a = buildingcost["bdg" + f[0]][0]
        }
    }
    if (f) {
        e = "<div>" + a + " (" + g_js_strings.commonstr.lv + f[1] + ")</div>";
        if (parseInt(f[0]) < 5 && parseInt(f[0]) > 0) {
            var d = 0;
            for (var c = 1; c <= parseInt(f[1]); c++) {
                d += (100 * c)
            }
            if (parseInt(f[1]) === 8) {
                d = 4000
            } else {
                if (parseInt(f[1]) === 9) {
                    d = 5750
                } else {
                    if (parseInt(f[1]) === 10) {
                        d = 7700
                    } else {
                        if (parseInt(f[1]) === 11) {
                            d = 9850
                        }
                    }
                }
            }
            e += "<div>" + d + " " + resourceinfo["rec" + f[0]] + "/hr</div>"
        }
    }
    return e
};

function comingsoon() {
    Modal.showAlert(g_js_strings.comingsoon.comingsoon)
}
function load_start() {
    Modal.showModal(740, 400, 10, 10, "", g_js_strings.commonstr.loadingddd)
}
function load_stop() {
    Modal.hideModal()
}
function track_chrome_btn(a) {}
function common_postToProfile(a, j, b, c, f, k) {
    f.push(["REPLACE_CiTyId", currentcityid]);
    f.push(["REPLACE_CiTyNaMe", currentcityinfo[1]]);
    f.push(["REPLACE_TiTlEnAmE", titlenames[seed.player.title]]);
    f.push(["REPLACE_LoRdNaMe", seed.player.name]);
    if (seed.player.fname && seed.player.fname.length > 0) {
        var l = seed.player.fname + " " + seed.player.lname;
        f.push(["REPLACE_DiSpLaYnAmE", l])
    } else {
        f.push(["REPLACE_DiSpLaYnAmE", seed.player.name])
    }
    f.push(["REPLACE_PrEfIx", seed.player.prefix]);
    f.push(["REPLACE_LeVeL", seed.player.title]);
    f.push(["REPLACE_SeRvErId", g_server]);
    f.push(["REPLACE_SeRvErNaMe", domainName]);
    if (seed.allianceDiplomacies) {
        f.push(["REPLACE_AlLiAnCeId", seed.allianceDiplomacies.allianceId]);
        f.push(["REPLACE_AlLiAnCeNaMe", seed.allianceDiplomacies.allianceName])
    }
    for (var g = 0; g < f.length; g++) {
        var d = new RegExp(f[g][0], "g");
        if (j.caption) {
            j.caption = j.caption.replace(d, f[g][1])
        }
        if (j.name) {
            j.name = j.name.replace(d, f[g][1])
        }
        j.href = j.href.replace(d, f[g][1]);
        j.media[0].href = j.media[0].href.replace(d, f[g][1]);
        j.media[0].src = j.media[0].src.replace(d, f[g][1]);
        b[0].href = b[0].href.replace(d, f[g][1]);
        b[0].text = b[0].text.replace(d, f[g][1])
    }
    try {
        postToProfile(a, j, b, [], c, null, k)
    } catch (h) {}
}
function modal_disc(a) {
    var b = new Array();
    b.push("<iframe src='");
    b.push(a);
    b.push("' width='720' height='600' style='margin:10px 0 10px 10px;overflow:hidden;overflow-y:scroll;' frameborder='0'></iframe>");
    Modal.showModal(740, 400, 10, 10, g_js_strings.modaltitles.discussion, b.join(""))
}
function changeview_city(c) {
    var a = $("mod_views").getElementsByTagName("a");
    for (var b = 0; b < a.length; b++) {
        a[b].className = ""
    }
    a[0].className = "sel";
    $("maparea_city").show();
    $("maparea_fields").hide();
    $("maparea_map").hide();
    cm.CitySwitch.setView("city");
    cm.TutorialEventDispatcher.dispatchTutorialEvent("complete", "CLICK_CITY_TAB")
}
function changeview_fields(e) {
    var a = $("mod_views").getElementsByTagName("a");
    for (var b = 0; b < a.length; b++) {
        a[b].className = ""
    }
    e.className = "sel";
    $("maparea_city").hide();
    $("maparea_fields").show();
    var d = cm.cities.selectedIndex();
    var c = "fieldNum" + d;
    $("fieldmap").className = (d != 6 ? "fieldmap " : "") + c + " lv" + seed.buildings["city" + currentcityid].pos0[1];
    if (seed.courtItems) {
        if (seed.courtItems.indexOf("831") >= 0) {
            $("fieldmap").addClassName("red")
        } else {
            if (seed.courtItems.indexOf("832") >= 0) {
                $("fieldmap").addClassName("blue")
            } else {
                if (seed.courtItems.indexOf("833") >= 0) {
                    $("fieldmap").addClassName("purple")
                } else {
                    if (seed.courtItems.indexOf("834") >= 0) {
                        $("fieldmap").addClassName("green")
                    } else {
                        if (seed.courtItems.indexOf("835") >= 0) {
                            $("fieldmap").addClassName("yellow")
                        }
                    }
                }
            }
        }
    }
    $("maparea_map").hide();
    cm.TutorialEventDispatcher.dispatchTutorialEvent("complete", "CLICK_FIELD_TAB");
    cm.CitySwitch.setView("field");
    fields_generate()
}
function changeview_map(c) {
    var a = $("mod_views").getElementsByTagName("a");
    for (var b = 0; b < a.length; b++) {
        a[b].className = ""
    }
    c.className = "sel";
    $("maparea_city").hide();
    $("maparea_fields").hide();
    $("maparea_map").show();
    cm.CitySwitch.setView("map");
    tutorialClear()
}
function fields_generate() {
    var c = new Array();
    var a = getBuildingLevel(0);
    var b;
    if (a === 11) {
        b = 10 + 3 * 10
    } else {
        b = 10 + 3 * parseInt(seed.buildings["city" + currentcityid].pos0[1])
    }
    for (var d = 0; d < b; d++) {
        c.push("<a id='slot_");
        c.push(100 + d);
        c.push("' onclick='buildslot(this,event);return false;' class='");
        if (seed.buildings["city" + currentcityid]["pos" + (100 + d)] != null) {
            c.push("bldg_" + seed.buildings["city" + currentcityid]["pos" + (100 + d)][0] + "_" + seed.buildings["city" + currentcityid]["pos" + (100 + d)][1])
        } else {
            c.push("blank")
        }
        c.push("'  onmouseover='showClearingTooltip(this,event);return false;' onmouseout='removeTooltip();return false;'>");
        if (seed.buildings["city" + currentcityid]["pos" + (100 + d)] != null) {
            c.push("<span class='leveltag'>");
            c.push(seed.buildings["city" + currentcityid]["pos" + (100 + d)][1]);
            c.push("</span></a>")
        }
    }
    $("fieldmapbuildings").innerHTML = c.join("");
    update_bdg()
}
function queue_changetab_building() {
    $("queue_head_building").addClassName("sel");
    $("queue_head_train").removeClassName("sel");
    $("queue_head_market").removeClassName("sel");
    $("queue_train").hide();
    $("queue_market").hide();
    $("queue_building").show();
    if (!$("queue_list").visible()) {
        queue_toggle()
    }
}
function queue_changetab_train() {
    $("queue_head_building").removeClassName("sel");
    $("queue_head_market").removeClassName("sel");
    $("queue_head_train").addClassName("sel");
    $("queue_building").hide();
    $("queue_market").hide();
    $("queue_train").show();
    if (!$("queue_list").visible()) {
        queue_toggle()
    }
}
function queue_changetab_market() {
    $("queue_head_building").removeClassName("sel");
    $("queue_head_train").removeClassName("sel");
    $("queue_head_market").addClassName("sel");
    $("queue_building").hide();
    $("queue_train").hide();
    $("queue_market").show();
    if (!$("queue_list").visible()) {
        queue_toggle()
    }
}
function queue_toggle() {
    $("queue_list").toggle();
    if ($("queue_list").visible()) {
        $("queue_head_toggle").removeClassName("expand_button");
        $("queue_head_toggle").addClassName("collapse_button")
    } else {
        $("queue_head_toggle").removeClassName("collapse_button");
        $("queue_head_toggle").addClassName("expand_button")
    }
}
function showResourceTooltip(g, c, f) {
    var b = g.id.split("_")[1];
    switch (b) {
    case "rec1":
        var a = resourceinfo.rec1;
        break;
    case "rec2":
        var a = resourceinfo.rec2;
        break;
    case "rec3":
        var a = resourceinfo.rec3;
        break;
    case "rec4":
        var a = resourceinfo.rec4;
        break
    }
    var d = seed.resources["city" + currentcityid][b];
    var e = "<div>" + a + "</div>";
    e += "<div>" + g_js_strings.commonstr.youown + ": " + addCommas(parseInt(d[0] / 3600)) + "</div>";
    e += "<div>" + g_js_strings.showResourceTooltip.caplimit + ": " + addCommas(parseInt(d[1] / 3600)) + "</div>";
    e += "<div>" + g_js_strings.showResourceTooltip.hrprod + ": " + addCommas(parseInt($("stat_" + b + "_grw").innerHTML.split(",").join("")) + d[3]) + "</div>";
    if (b == "rec1") {
        e += "<div>" + g_js_strings.showResourceTooltip.troopsupkeep + ": " + addCommas(parseInt(d[3])) + "</div>"
    }
    showTooltip(e, g, c, f)
}
function showHappyTooltip(d, a, c) {
    var b = "<div class='title'>" + g_js_strings.commonstr.happiness + "</div>";
    b += "<div>" + g_js_strings.commonstr.happiness + ": " + seed.citystats["city" + currentcityid]["pop"][2] + "</div>";
    b += "<div>" + g_js_strings.showHappyTooltip.taxrate + ": " + seed.citystats["city" + currentcityid].gold[1];
    showTooltip(b, d, a, c)
}
function showGoldTooltip(g, a, e) {
    var d = "<div class='title'>" + resourceinfo.rec0 + "</div>";
    var c = 1;
    if (parseInt(seed.playerEffects.r0BstExp) > unixtime()) {
        c = 2
    }
    var f = parseInt(parseInt(seed.citystats["city" + currentcityid]["gold"][1] * seed.citystats["city" + currentcityid]["pop"][0]) * 0.01) * c;
    var b = parseInt(seed.citystats["city" + currentcityid]["gold"][2] * 10 * -1);
    d += "<div>" + g_js_strings.commonstr.youown + ": " + addCommas(seed.citystats["city" + currentcityid]["gold"][0]) + "</div>";
    d += "<div>" + g_js_strings.showGoldTooltip.taxrev + ": " + addCommas(f) + "</div>";
    d += "<div>" + g_js_strings.commonstr.salaries + ": " + addCommas(-1 * parseInt(b)) + "</div>";
    d += "<div>" + g_js_strings.showGoldTooltip.netincome + ": " + addCommas(f + b) + "</div>";
    showTooltip(d, g, a, e)
}
function showPopTooltip(c, j, h) {
    var d = seed.citystats["city" + currentcityid]["pop"][0];
    var e = seed.citystats["city" + currentcityid]["pop"][1];
    var a = seed.citystats["city" + currentcityid]["pop"][3];
    var f = d - a;
    var i = parseInt((seed.citystats["city" + currentcityid]["pop"][2] / 100) * e);
    var g = g_js_strings.commonstr.stable;
    if (d > i) {
        g = g_js_strings.commonstr.downward
    } else {
        if (d < i) {
            g = g_js_strings.commonstr.upward
        }
    }
    var b = "<div class='title'>" + g_js_strings.commonstr.population + "</div>";
    b += "<div>" + g_js_strings.showPopTooltip.poplimit + ": " + addCommas(e) + "</div>";
    b += "<div>" + g_js_strings.showPopTooltip.currpop + ": " + addCommas(d) + "</div>";
    b += "<div>" + g_js_strings.showPopTooltip.lbrforce + ": " + addCommas(a) + "</div>";
    b += "<div>" + g_js_strings.showPopTooltip.idlepop + ": " + addCommas(f) + "</div>";
    b += "<div>" + g_js_strings.showPopTooltip.poptrend + ": " + g + "</div>";
    showTooltip(b, c, j, h)
}
function showAddCityTooltip(d, a, c) {
    var b = "<div class='title'>" + g_js_strings.showAddCityTooltip.addcities + "</div>";
    showTooltip(b, d, a, c)
}
function showCityTooltip(d, k, h) {
    var j = parseInt(d.id.split("_")[1]) - 1;
    var g = seed.cities[j][0];
    var i = seed.cities[j][1];
    var f = seed.cities[j][2];
    var e = seed.cities[j][3];
    var c = seed.citystats["city" + g]["pop"][0];
    var b = parseInt(seed.resources["city" + g]["rec1"][0] / 3600);
    var l = seed.citystats["city" + g]["pop"][2];
    var a = "<div class='title'>" + i + " (" + f + ", " + e + ")</div>";
    a += "<div>" + g_js_strings.showPopTooltip.currpop + ": " + addCommas(c) + "</div>";
    a += "<div>" + g_js_strings.showCityTooltip.foodsupply + ": " + addCommas(b) + "</div>";
    a += "<div>" + g_js_strings.commonstr.happiness + ": " + addCommas(l) + "</div>";
    showTooltip(a, d, k, h)
}
function removeFriendTooltip() {
    if ($("friendlist_tooltip")) {
        $("friendlist_tooltip").remove()
    }
}
function showFriendTooltip(a, d, l, j) {
    Event.extend(l);
    var c = l.pointerX();
    var b = l.pointerY();
    removeFriendTooltip();
    var h = d;
    Element.extend(h);
    var n = document.createElement("div");
    Element.extend(n);
    var f = $(j);
    var m = h.cumulativeOffset()[0];
    var g = h.cumulativeOffset()[1] - f.cumulativeOffset()[1];
    var i = h.getWidth();
    var e = h.getHeight();
    n.id = "friendlist_tooltip";
    n.className = "friendlist_tooltip";
    var k = new Array();
    k.push(unescape(a));
    n.innerHTML = k.join("");
    f.appendChild(n)
}
function cityinfo_changetab(a) {
    $("cityinfo_tabs").className = "clearfix cityinfo_tabsel" + a;
    for (var b = 1; b < 5; b++) {
        $("cityinfo_" + b).hide()
    }
    $("cityinfo_" + a).show();
    switch (a) {
    case 1:
        break;
    case 2:
        break;
    case 3:
        cityinfo_army();
        break;
    case 4:
        cityinfo_defenses();
        break;
    default:
        return true
    }
}
function cityinfo_army() {
    var e = new Array();
    var b = Object.keys(seed.units["city" + currentcityid]);
    e.push("<table class='unitcontainer' cellpadding='0' cellspacing='0'><tbody>");
    var a = false;
    for (var c = 0; c < b.length; c++) {
        var d = b[c].split("unt")[1];
        if (c % 2 == 0) {
            e.push("<tr>")
        }
        e.push("<td>");
        e.push("<div class='unit' onmouseover='show_tooltip_cityinfo_army(this,event,\"kocmain_bottom\");return false;' onmouseout='removeTooltip();return false;' name='");
        e.push(unitcost[b[c]][0]);
        e.push("'><img src='");
        e.push(stimgUrl);
        e.push("img/units/unit_");
        e.push(d);
        e.push("_30.jpg?6545'/>");
        e.push(seed.units["city" + currentcityid][b[c]]);
        e.push("</div>");
        e.push("</td>");
        if (c % 2 == 1) {
            e.push("</tr>");
            a = true
        } else {
            a = false
        }
    }
    if (!a) {
        e.push("</tr>")
    }
    e.push("</tbody></table>");
    $("cityinfo_3").innerHTML = e.join("")
}
function cityinfo_defenses() {
    var e = new Array();
    var b = Object.keys(seed.fortifications["city" + currentcityid]);
    e.push("<table class='unitcontainer' cellpadding='0' cellspacing='0'><tbody>");
    var a = false;
    for (var c = 0; c < b.length; c++) {
        var d = b[c].split("fort")[1];
        if (c % 2 == 0) {
            e.push("<tr>")
        }
        e.push("<td>");
        e.push("<div class='unit' onmouseover='show_tooltip_cityinfo_army(this,event,\"kocmain_bottom\");return false;' onmouseout='removeTooltip();return false;' name='");
        e.push(fortcost["frt" + d][0]);
        e.push("'><img src='");
        e.push(stimgUrl);
        e.push("img/units/unit_");
        e.push(d);
        e.push("_30.jpg'/>");
        e.push(seed.fortifications["city" + currentcityid][b[c]]);
        e.push("</div>");
        e.push("</td>");
        if (c % 2 == 1) {
            e.push("</tr>");
            a = true
        } else {
            a = false
        }
    }
    if (!a) {
        e.push("</tr>")
    }
    e.push("</tbody></table>");
    $("cityinfo_4").innerHTML = e.join("")
}
function show_tooltip_cityinfo_army(d, a, c) {
    var b = "<div class='title'>" + d.getAttribute("name") + "</div>";
    showTooltip(b, d, a, c)
}
function directory_friends_onlinestatus() {
    if ($("panel_friendlist").visible()) {
        var flist = new Array();
        var friends = $("panel_friendlist").select(".friend");
        for (var i = 0; i < friends.length; i++) {
            flist.push(friends[i].getAttribute("name"))
        }
        var params = Object.clone(g_ajaxparams);
        if (flist.length == 0) {
            return false
        }
        params.checkArr = flist.join(",");
        new Ajax.Request(g_ajaxpath + "ajax/getOnline.php" + g_ajaxsuffix, {
            method: "post",
            parameters: params,
            onSuccess: function (transport) {
                var rslt = eval("(" + transport.responseText + ")");
                if (rslt.ok) {
                    for (var i = 0; i < flist.length; i++) {
                        if ($("friend_onlinestatus_" + flist[i])) {
                            if (rslt.data[flist[i] + ""]) {
                                $("friend_onlinestatus_" + flist[i]).className = "online";
                                $("friend_onlinestatus_" + flist[i]).innerHTML = "(" + g_js_strings.commonstr.online + ")"
                            } else {
                                $("friend_onlinestatus_" + flist[i]).className = "offline";
                                $("friend_onlinestatus_" + flist[i]).innerHTML = "(" + g_js_strings.commonstr.offline + ")"
                            }
                        }
                    }
                }
            },
            onFailure: function () {}
        })
    }
}
function directory_changetab(tabnum) {
    for (var i = 1; i < 3; i++) {
        $("directory_tabs_" + i).hide()
    }
    $("directory_tabs_" + tabnum).show();
    $("directory_tabs").className = "clearfix directory_tabs directory_tabsel" + tabnum;
    if (tabnum == 1) {
        var params = Object.clone(g_ajaxparams);
        params.format = 1;
        new Ajax.Request(g_ajaxpath + "ajax/getLeaderboard.php" + g_ajaxsuffix, {
            method: "post",
            parameters: params,
            onSuccess: function (transport) {
                var rslt = eval("(" + transport.responseText + ")");
                if (rslt.ok) {
                    if (!rslt.data) {
                        $("tournament_tab").innerHTML = "<div class='leaderupsell'>" + g_js_strings.directory_changetab.tourncoming + "</div>"
                    } else {
                        var fhtml = new Array();
                        fhtml.push("<div class='leaderboardheader'>" + rslt.name + "</div>");
                        var arrlen = (rslt.data.length < 5) ? rslt.data.length : 5;
                        for (var i = 0; i < arrlen; i++) {
                            fhtml.push("<div class='leaderrow clearfix'>");
                            fhtml.push("<div class='ranking'>" + rslt.data[i].ranking + "</div>");
                            fhtml.push("<div class='name'>" + rslt.data[i].name + "</div>");
                            fhtml.push("</div>")
                        }
                        fhtml.push("<div class='datefoot'>" + g_js_strings.commonstr.ends + ": <br/>" + new Date(parseInt(rslt.enddate) * 1000).toGMTString() + "</div>");
                        fhtml.push("<a  onclick='modal_tournaments();return false;' class='button20'><span>" + g_js_strings.directory_changetab.viewdet + "</span></a>");
                        $("tournament_tab").innerHTML = fhtml.join("")
                    }
                } else {
                    Modal.showAlert(printLocalError((rslt.error_code || null), (rslt.msg || null), (rslt.feedback || null)))
                }
            },
            onFailure: function () {}
        })
    } else {
        if (tabnum == 3) {
            var params = Object.clone(g_ajaxparams);
            new Ajax.Request(g_ajaxpath + "ajax/getAppFriends.php" + g_ajaxsuffix, {
                method: "post",
                parameters: params,
                onSuccess: function (transport) {
                    var rslt = eval("(" + transport.responseText + ")");
                    if (rslt.ok) {
                        seed.appFriends = rslt.data;
                        var friendlist = Object.keys(rslt.data);
                        var fhtml = new Array();
                        var numOfFriendsPlaying = 0;
                        for (var i = 0; i < friendlist.length && numOfFriendsPlaying == 0; i++) {
                            if (rslt.data[friendlist[i]].userId) {
                                numOfFriendsPlaying++
                            }
                        }
                        if (numOfFriendsPlaying == 0) {
                            fhtml.push("<div class='update_interval'>" + g_js_strings.directory_changetab.updateinterval + "</div>")
                        }
                        var indexHolder = 0;
                        var howmanyneeded = g_friendsperpage - (friendlist.length % g_friendsperpage);
                        for (var j = 0; j < howmanyneeded; j++, indexHolder++) {
                            fhtml.push('<a class="invite" onclick="invite_friends_popup(); return false;"><span>' + g_js_strings.commonstr.invite + "</span></a>")
                        }
                        for (var i = 0; i < friendlist.length; i++, indexHolder++) {
                            var msgTooltip = new Array();
                            if (rslt.data[friendlist[i]].displayName) {
                                msgTooltip.push(rslt.data[friendlist[i]].displayName + "<br/>")
                            } else {
                                msgTooltip.push(rslt.data[friendlist[i]].realName + "<br/>")
                            }
                            if (rslt.data[friendlist[i]].displayName) {
                                msgTooltip.push(rslt.data[friendlist[i]].realName + "<br/>")
                            }
                            if (rslt.data[friendlist[i]].might) {
                                msgTooltip.push(g_js_strings.commonstr.might + ":" + rslt.data[friendlist[i]].might + "<br/>")
                            }
                            fhtml.push('<a class="friend" onmouseout="removeFriendTooltip(); return false;" onmouseover="showFriendTooltip(\'' + msgTooltip.join("") + "',this,event,'friendlist_holder" + (indexHolder % g_friendsperpage) + "'); return false;\" onclick=\"getInfoForAnUser('" + rslt.data[friendlist[i]].userId + '\');return false;" name="' + rslt.data[friendlist[i]].userId + '">');
                            fhtml.push('<img class="pic" src="');
                            if (rslt.data[friendlist[i]].realPhoto == "") {
                                fhtml.push("http://static.ak.facebook.com/pics/s_default.jpg")
                            } else {
                                fhtml.push(rslt.data[friendlist[i]].realPhoto)
                            }
                            fhtml.push('"/>');
                            fhtml.push("<div>" + rslt.data[friendlist[i]].title + "</div>");
                            fhtml.push("</a>")
                        }
                        var totalfriends = howmanyneeded + friendlist.length;
                        var totalpages = totalfriends / g_friendsperpage;
                        var onepagewidth = g_friendsperpage * g_friendlistitemwidth;
                        var totalwidth = (onepagewidth * totalpages);
                        var totalleft = (totalwidth - onepagewidth) * (-1);
                        $("panel_friendlist").setStyle({
                            width: totalwidth + "px"
                        });
                        $("panel_friendlist").innerHTML = fhtml.join("");
                        g_numoffriendlistpages = totalpages;
                        g_currentfriendlistpage = totalpages;
                        friendlist_goto(1);
                        checkoutofdate(rslt.reqtime)
                    } else {
                        Modal.showAlert(printLocalError((rslt.error_code || null), (rslt.msg || null), (rslt.feedback || null)));
                        checkoutofdate(rslt.reqtime)
                    }
                },
                onFailure: function () {}
            })
        }
    }
}
function update_friendlist() {
    var params = Object.clone(g_ajaxparams);
    new Ajax.Request(g_ajaxpath + "ajax/getAppFriends.php" + g_ajaxsuffix, {
        method: "post",
        parameters: params,
        onSuccess: function (transport) {
            var rslt = eval("(" + transport.responseText + ")");
            if (rslt.ok) {
                seed.appFriends = rslt.data;
                var friendlist = (0 === seed.appFriends.length) ? [] : Object.keys(rslt.data);
                var fhtml = new Array();
                var indexHolder = 0;
                var howmanyneeded = Math.max(g_friendsperpage - friendlist.length, 3);
                for (var j = 0; j < howmanyneeded; j++, indexHolder++) {
                    fhtml.push('<a class="invite" onclick="invite_friends_popup(); return false;"><span>' + g_js_strings.commonstr.invite + "</span></a>")
                }
                for (var i = 0; i < friendlist.length - 1; i++) {
                    for (var j = i + 1; j < friendlist.length; j++) {
                        if (parseInt(rslt.data[friendlist[j]].title) < parseInt(rslt.data[friendlist[i]].title)) {
                            var dummy = friendlist[i];
                            friendlist[i] = friendlist[j];
                            friendlist[j] = dummy
                        }
                    }
                }
                for (var i = 0; i < friendlist.length; i++, indexHolder++) {
                    var msgTooltip = new Array();
                    if (rslt.data[friendlist[i]].displayName) {
                        msgTooltip.push("<b>" + escape(rslt.data[friendlist[i]].displayName) + "</b><br/>")
                    } else {
                        msgTooltip.push(escape(rslt.data[friendlist[i]].realName) + "<br/>")
                    }
                    if (rslt.data[friendlist[i]].displayName && rslt.data[friendlist[i]].realName) {
                        msgTooltip.push(escape(rslt.data[friendlist[i]].realName) + "<br/>")
                    }
                    if (rslt.data[friendlist[i]].might) {
                        msgTooltip.push(g_js_strings.commonstr.might + ": " + rslt.data[friendlist[i]].might + "<br/>")
                    }
                    if (rslt.data[friendlist[i]].userId) {
                        fhtml.push('<a href="#top" class="friend" onmouseout="removeFriendTooltip(); return false;" onmouseover="showFriendTooltip(\'' + msgTooltip.join("") + "',this,event,'friendlist_holder" + (indexHolder % g_friendsperpage) + "'); return false;\" onclick=\"getInfoForAnUser('" + rslt.data[friendlist[i]].userId + '\');return true;" name="' + rslt.data[friendlist[i]].userId + '">');
                        fhtml.push('<img class="pic" src="');
                        if (rslt.data[friendlist[i]].realPhoto == "") {
                            fhtml.push("http://static.ak.facebook.com/pics/s_default.jpg")
                        } else {
                            fhtml.push(rslt.data[friendlist[i]].realPhoto)
                        }
                        fhtml.push('"/>');
                        fhtml.push("<div>" + rslt.data[friendlist[i]].title + "</div>");
                        fhtml.push("</a>")
                    } else {
                        fhtml.push('<a class="friend diff_server" onmouseout="removeFriendTooltip(); return false;" onmouseover="showFriendTooltip(\'' + msgTooltip.join("") + "',this,event,'friendlist_holder" + (indexHolder % g_friendsperpage) + '\'); return false;" onclick="return false;" name="' + rslt.data[friendlist[i]].userId + '">');
                        fhtml.push('<img class="pic" src="');
                        if (rslt.data[friendlist[i]].realPhoto == "") {
                            fhtml.push("http://static.ak.facebook.com/pics/s_default.jpg")
                        } else {
                            fhtml.push(rslt.data[friendlist[i]].realPhoto)
                        }
                        fhtml.push('"/>');
                        fhtml.push("<div>-</div>");
                        fhtml.push("</a>")
                    }
                }
                var totalfriends = howmanyneeded + friendlist.length;
                var totalpages = Math.ceil(totalfriends / g_friendsperpage);
                var onepagewidth = g_friendsperpage * g_friendlistitemwidth;
                var totalwidth = (onepagewidth * totalpages);
                var totalleft = (totalwidth - onepagewidth) * (-1);
                $("panel_friendlist").setStyle({
                    width: totalwidth + "px"
                });
                $("panel_friendlist").innerHTML = fhtml.join("");
                g_numoffriendlistpages = totalpages;
                g_currentfriendlistpage = totalpages;
                friendlist_goto(1);
                checkoutofdate(rslt.reqtime)
            } else {
                Modal.showAlert(printLocalError((rslt.error_code || null), (rslt.msg || null), (rslt.feedback || null)));
                checkoutofdate(rslt.reqtime)
            }
            arthurCheck(rslt.arthurCheckArray)
        },
        onFailure: function () {}
    })
}
function checkreq(f, s, r) {
    var g = Math.pow(2, (r - 1));
    var l = new Array();
    for (var w = 0; w < 4; w++) {
        l[w] = new Array()
    }
    var k = new Array();
    if (f == "tch") {
        var o = techcost["tch" + s][8]
    } else {
        if (f == "bdg") {
            var o = buildingcost["bdg" + s][8]
        } else {
            if (f == "unt") {
                var o = unitcost["unt" + s][8]
            } else {
                if (f == "frt") {
                    var o = fortcost["frt" + s][8]
                }
            }
        }
    }
    if (f == "bdg" && (getBuildingLevel(s) === 10 || parseInt(r) === 11) && (parseInt(s) === 19 || parseInt(s) === 12 || parseInt(s) === 11 || parseInt(s) === 18 || (parseInt(s) === 8 && parseInt(r) === 11) || (parseInt(s) === 9 && parseInt(r) === 11) || (parseInt(s) === 1 && parseInt(r) === 11) || (parseInt(s) === 2 && parseInt(r) === 11) || (parseInt(s) === 3 && parseInt(r) === 11) || (parseInt(s) === 4 && parseInt(r) === 11))) {
        var t = getBuildingLevel(0);
        l[0].push(g_js_strings.commonstr.construction);
        l[1].push(g_js_strings.commonstr.lv + "11 " + buildingcost.bdg0[0]);
        l[2].push(g_js_strings.commonstr.lv + t + " " + buildingcost.bdg0[0]);
        if (t === 11) {
            l[3].push(1)
        } else {
            l[3].push(0)
        }
    }
    if (o.length == null) {
        var b = Object.keys(o);
        var x = new Array();
        var v = Object.keys(seed.buildings["city" + currentcityid]);
        for (var w = 0; w < v.length; w++) {
            var h = seed.buildings["city" + currentcityid][v[w]];
            if (x["b" + h[0]] == null) {
                x["b" + h[0]] = parseInt(h[1])
            } else {
                x["b" + h[0]] = (h[1] > x["b" + h[0]]) ? h[1] : x["b" + h[0]]
            }
        }
        for (var w = 0; w < b.length; w++) {
            l[0].push(g_js_strings.commonstr.construction);
            var C = b[w].split("b")[1];
            var c = 0;
            var e = (parseInt(x[b[w]]) > 0) ? (parseInt(x[b[w]])) : 0;
            var n = buildingcost["bdg" + C][0];
            if (parseInt(o[b[w]][0]) == 1) {
                c = parseInt(o[b[w]][1])
            } else {
                c = r + parseInt(o[b[w]][1])
            }
            if (f == "tch") {
                var z = [9, 15, 16, 17];
                if (z.indexOf(parseInt(C)) != -1 && parseInt(r) == 11) {
                    c = 10
                } else {
                    if (parseInt(C) == 11) {
                        c = Math.max(c, r)
                    }
                }
            }
            l[1].push(g_js_strings.commonstr.lv + c + " " + n);
            l[2].push(g_js_strings.commonstr.lv + e + " " + n);
            if (e < c) {
                l[3].push(0)
            } else {
                l[3].push(1)
            }
        }
    }
    var p = new Array();
    if (f == "tch") {
        var F = techcost["tch" + s][9]
    } else {
        if (f == "bdg") {
            var F = buildingcost["bdg" + s][9]
        } else {
            if (f == "unt") {
                var F = unitcost["unt" + s][9]
            } else {
                if (f == "frt") {
                    var F = fortcost["frt" + s][9]
                }
            }
        }
    }
    var j = Object.keys(F);
    if (F.length == null) {
        for (var w = 0; w < j.length; w++) {
            l[0].push(g_js_strings.commonstr.research);
            var m = j[w].split("t")[1];
            var A = 0;
            var E = parseInt(seed.tech["tch" + m]);
            var D = techcost["tch" + m][0];
            if (parseInt(F[j[w]][0]) == 1) {
                A = parseInt(F[j[w]][1])
            } else {
                A = r + parseInt(F[j[w]][1])
            }
            if (f == "bdg" && getBuildingLevel(s) === 10) {
                A = 10
            }
            l[1].push(g_js_strings.commonstr.lv + A + " " + D);
            l[2].push(g_js_strings.commonstr.lv + E + " " + D);
            if (E < A) {
                l[3].push(0)
            } else {
                l[3].push(1)
            }
        }
    }
    if (f == "tch") {
        var a = parseInt(techcost["tch" + s][5]) * g
    } else {
        if (f == "bdg") {
            var a = parseInt(buildingcost["bdg" + s][5]) * g
        } else {
            if (f == "unt") {
                var a = parseInt(unitcost["unt" + s][5]) * g
            } else {
                if (f == "frt") {
                    var a = parseInt(fortcost["frt" + s][5]) * g
                }
            }
        }
    }
    if (a > 0) {
        l[0].push(resourceinfo.rec0);
        var u = parseInt(seed.citystats["city" + currentcityid].gold[0]);
        l[1].push(a);
        l[2].push(u);
        if (u < a) {
            l[3].push(0)
        } else {
            l[3].push(1)
        }
    }
    for (var w = 1; w < 5; w++) {
        if (f == "tch") {
            var d = parseInt(techcost["tch" + s][w]) * g * 3600
        } else {
            if (f == "bdg") {
                var d = parseInt(buildingcost["bdg" + s][w]) * g * 3600
            } else {
                if (f == "unt") {
                    var d = parseInt(unitcost["unt" + s][w]) * g * 3600
                } else {
                    if (f == "frt") {
                        var d = parseInt(fortcost["frt" + s][w]) * g * 3600
                    }
                }
            }
        }
        if (d > 0) {
            l[0].push(resourceinfo["rec" + w]);
            var y = parseInt(seed.resources["city" + currentcityid]["rec" + w][0]);
            l[1].push(parseInt(parseInt(d) / 3600));
            l[2].push(parseInt(parseInt(y) / 3600));
            if (y < d) {
                l[3].push(0)
            } else {
                l[3].push(1)
            }
        }
    }
    if (f == "tch") {
        var B = parseInt(techcost["tch" + s][6]) * g
    } else {
        if (f == "bdg") {
            var B = parseInt(buildingcost["bdg" + s][6]) * g
        } else {
            if (f == "unt") {
                var B = parseInt(unitcost["unt" + s][6]) * g
            } else {
                if (f == "frt") {
                    var B = parseInt(fortcost["frt" + s][6]) * g
                }
            }
        }
    }
    if (B > 0) {
        l[0].push(g_js_strings.commonstr.population);
        var q = parseInt(seed.citystats["city" + currentcityid].pop[0]) - parseInt(seed.citystats["city" + currentcityid].pop[3]);
        l[1].push(B);
        l[2].push(q);
        if (q < B) {
            l[3].push(0)
        } else {
            l[3].push(1)
        }
    }
    return l
}
function modal_guide() {
    var a = new Array();
    a.push('<div class="guideframewrap">');
    a.push('<iframe src="' + guideUrl + 'guide.html" width="700" height="500" class="guideframe">');
    a.push("</iframe>");
    a.push("</div>");
    Modal.showModal(740, 740, 10, 100, "Guide", a.join(""))
}
function citysel_viewother(c) {
    var b = $("mod_citylist").select(".city");
    for (var a = 0; a < b.length; a++) {
        if (parseInt(c) == parseInt(b[a].getAttribute("name"))) {
            currentcityid = parseInt(c);
            changeview_city();
            citysel_click(b[a]);
            break
        }
    }
}
function citysel_click(b) {
    var h = parseInt(b.id.split("_")[1]) - 1;
    cm.cities.setIndex(h + 1);
    var f = seed.cities[h][0];
    var g = seed.cities[h][1];
    var e = parseInt(seed.cities[h][2]);
    var c = parseInt(seed.cities[h][3]);
    $("mapXCoor").value = e;
    $("mapYCoor").value = c;
    $("mod_maparea").className = "mod_maparea city_order_" + b.id.split("_")[1];
    var j = e;
    var a = c;
    g_mapObject = new MapObject(j, a);
    currentcityid = parseInt(f);
    update_gold();
    update_pop();
    for (var d = 0; d < seed.cities.length; d++) {
        if (parseInt(seed.cities[d][0]) == currentcityid) {
            currentcityinfo = seed.cities[d];
            break
        }
    }
    $("mod_cityinfo_cityname").innerHTML = currentcityinfo[1];
    if ($("mod_views_city").hasClassName("sel")) {
        changeview_city($("mod_views_city"))
    } else {
        if ($("mod_views_field").hasClassName("sel")) {
            changeview_fields($("mod_views_field"))
        }
    }
    update_bdg();
    cityinfo_changetab(1);
    update_knights();
    queue_changetab_building();
    attack_generatequeue();
    cm.CitySwitch.setCurrentCity(currentcityid);
    cm.guardianCity.rerender(true)
}
function changedomain_prompt() {
    var params = Object.clone(g_ajaxparams);
    var profiler = new cm.Profiler("ResponseTime", "myServers.php");
    new Ajax.Request(g_ajaxpath + "ajax/myServers.php" + g_ajaxsuffix, {
        method: "post",
        parameters: params,
        onSuccess: function (transport) {
            profiler.stop();
            var rslt = eval("(" + transport.responseText + ")");
            if (rslt.ok) {
                var msgHtml = new Array();
                msgHtml.push('<div id="modal_changedomaindiv">');
                msgHtml.push("<div class='selhd'>" + g_js_strings.changedomain_prompt.selectdomain + "</div>");
                msgHtml.push("<div class='clearfix selopt'>");
                msgHtml.push(rslt.data);
                msgHtml.push("</div><div class='clearfix enterbtn'>");
                msgHtml.push("<a  class='button20' onclick='changedomain_prompt_enterdomain();return false;'><span>" + g_js_strings.changedomain_prompt.enterdomain + "</span></a>");
                msgHtml.push("</div>");
                msgHtml.push("<div class='orhd'>" + g_js_strings.changedomain_prompt.dord + "</div>");
                msgHtml.push("<div class='newcity'><a href='");
                msgHtml.push(newgameUrl);
                msgHtml.push("' target='_top'>" + g_js_strings.changedomain_prompt.createcity + "</a></div>");
                msgHtml.push("</div>");
                Modal.showModal(500, 400, 130, 75, g_js_strings.modaltitles.changedomain, msgHtml.join(""))
            } else {
                Modal.showAlert(printLocalError((rslt.error_code || null), (rslt.msg || null), (rslt.feedback || null)))
            }
        },
        onFailure: function () {
            profiler.stop()
        }
    })
}
function changedomain_prompt_enterdomain() {
    top.location = $("modal_changedomaindiv").select("select")[0].value
}
function change_avatar() {
    var c = (seed.player.prefix == "Lady") ? "f" : "m";
    var a = 16;
    var f = new Array();
    var d = "<img src='" + stimgUrl + "/img/shop_button_left.png'  class='arrow left'><img src='" + stimgUrl + "/img/shop_button_right.png' class='arrow right'>";
    f.push("<div class='avatarcontainer clearfix' id='avatarContainer'>" + d);
    f.push("<div class='c0 container'>");
    for (var b = 1; b <= 8; b++) {
        var e = (b == parseInt(seed.player.avatarId)) ? " selected" : "";
        f.push("<a name='" + b + "' onclick='selectAvatar(this);return false;' class='avatarbox" + e + "'><img src='" + stimgUrl + "img/avatars/100/" + c + b + ".jpg' /></a>")
    }
    f.push("</div><div class='c1 container'>");
    for (var b = 9; b <= 16; b++) {
        var e = (b == parseInt(seed.player.avatarId)) ? " selected" : "";
        f.push("<a name='" + b + "' onclick='selectAvatar(this);return false;' class='avatarbox" + e + "'><img src='" + stimgUrl + "img/avatars/100/" + c + b + ".jpg' /></a>")
    }
    f.push("</div></div>");
    f.push("<div class='avatarsavebuttons clearfix'>");
    f.push("<a class='button20' onclick='change_avatar_do();return false;'><span>" + g_js_strings.commonstr.save + "</span></a>");
    f.push("<a class='button20' onclick='Modal.hideModal();return false;'><span>" + g_js_strings.commonstr.close + "</span></a>");
    f.push("</div>");
    Modal.showModal(500, 400, 210, 135, g_js_strings.modaltitles.pickavatar, f.join(""));
    jQuery(".avatarcontainer .arrow").unbind("click").bind("click", function () {
        jQuery(".avatarcontainer .container").toggle()
    })
}
function selectAvatar(b) {
    var a = $("avatarContainer").select(".selected")[0];
    if ($("avatarContainer").select(".selected") && a) {
        a.removeClassName("selected")
    }
    Element.extend(b);
    b.addClassName("selected")
}
function change_avatar_do() {
    var a = $("avatarContainer").select(".selected")[0].getAttribute("name");
    if (a == seed.player.avatarId) {
        Modal.hideModal();
        return false
    }
    var b = Object.clone(g_ajaxparams);
    b.aid = a;
    new Ajax.Request(g_ajaxpath + "ajax/changeAvatar.php" + g_ajaxsuffix, {
        method: "post",
        parameters: b,
        onSuccess: function (f) {
            Modal.hideModal();
            seed.player.avatarId = a;
            var d = seed.player.avatarurl.lastIndexOf("/");
            var c = seed.player.avatarurl.substr(d + 2);
            var e = a + ".png";
            seed.player.avatarurl = seed.player.avatarurl.replace(c, e);
            $("homepageAvatar").setAttribute("src", seed.player.avatarurl)
        },
        onFailure: function () {}
    })
}
function printLocalError(g, i, b) {
    if (g != null && g_js_strings.errorcode["err_" + g]) {
        var a = null;
        switch (g.toString()) {
        case "0":
            a = "Unexpected Error.";
            break;
        case "1":
            a = "Fatal Error.";
            break;
        case "2":
            a = "Construction is already starting.";
            break;
        case "3":
            a = "Unknown issue when updating game.";
            break;
        case "4":
            var j = b.split("-");
            if (j[0] == 5) {
                var e = resourceinfo["rec" + j[1]];
                return g_js_strings.errorcode.err_4.replace("%1$s", "resources").replace("%2$s", j[2]).replace("%3$s", e)
            } else {
                if (j[0] == 3) {
                    var e = unitcost["unt" + j[1]][0];
                    return g_js_strings.errorcode.err_4.replace("%1$s", "troops").replace("%2$s", j[2]).replace("%3$s", e)
                } else {
                    if (j[0] == 1) {
                        var c = buildingcost["bdg" + j[1]][0];
                        return g_js_strings.errorcode.err_4b.replace("%1$s", c).replace("%2$s", j[2])
                    } else {
                        if (j[0] == 8) {
                            var h = itemlist["i" + j[1]].name;
                            return g_js_strings.errorcode.err_4b.replace("%1$s", h).replace("%2$s", j[2])
                        } else {
                            return g_js_strings.errorcode.err_4z
                        }
                    }
                }
            }
            break;
        case "7":
            var d = new Date(parseInt(b) * 1000);
            return g_js_strings.errorcode.err_7.replace("%1$s", d);
            break;
        case "8":
            a = "Excess traffic.";
            cm.GATracker("Error", a + " (" + g + ")", g_server);
            break;
        case "102":
            a = "Another building already exists on the same spot!";
            break;
        case "103":
            var f = b;
            a = "Can't change to level " + f;
            return {
                tracker: true,
                errorCode: g.toString(),
                msg: a,
                text: g_js_strings.errorcode.err_103.replace("%1$s", f)
            };
            break;
        case "216":
            a = "Can't update knight.";
            break;
        case "1001":
            Modal.onCloseCallback = function () {
                top.location = appUrl
            };
            break;
        case "default":
            a = "Something has gone wrong.";
            cm.GATracker("Error", a + " (" + g + ")", g_server);
            break
        }
        if (a) {
            return {
                tracker: true,
                errorCode: g.toString(),
                msg: a
            }
        }
        return g_js_strings.errorcode["err_" + g]
    } else {
        if (i && !i.blank()) {
            return i
        }
    }
    cm.GATracker("Error", "Something has gone wrong", g_server);
    return {
        tracker: true,
        errorCode: "default",
        msg: "Something has gone wrong."
    }
}
function stopUpdateSeed() {
    if ($("updateSeedState") && $("updateSeedState").innerHTML == "ON") {
        $("updateSeedState").innerHTML = "OFF"
    } else {
        if ($("updateSeedState") && $("updateSeedState").innerHTML == "OFF") {
            $("updateSeedState").innerHTML = "ON";
            update_seed_ajax()
        }
    }
}
function stopGetChat() {
    if ($("getChatState") && $("getChatState").innerHTML == "ON") {
        $("getChatState").innerHTML = "OFF"
    } else {
        if ($("getChatState") && $("getChatState").innerHTML == "OFF") {
            $("getChatState").innerHTML = "ON";
            Chat.getChat()
        }
    }
}
function disableActionButton(b) {
    var a = Element.extend(b);
    a.setOpacity(0.5);
    a.setStyle("cursor:default");
    a.onclick = function () {
        return false
    }
}
function getWildIds(e, d) {
    var a = Object.keys(seed.wilderness["city" + e]);
    var c = [];
    for (var b = 0; b < a.length; b++) {
        if (seed.wilderness["city" + e][a[b]].tileType == d) {
            c.push(a[b])
        }
    }
    return c
}
function check_queue_tch(c) {
    var b = seed.queue_tch["city" + c];
    var a = false;
    if (b[0]) {
        a = b[0][0]
    }
    return a
}
function check_queue_con(c) {
    var b = seed.queue_con["city" + c];
    var a = false;
    if (b[0]) {
        a = b[0][2]
    }
    return a
}
function postToAllianceChat(g, a) {
    var b = seed.player.name;
    b = b.replace("'", "&apos;");
    if (seed.allianceNames) {
        var c = "";
        if (g == 1) {
            var h = Object.keys(seed.queue_tch);
            var k = 0;
            var e = tvuid;
            var j = 0;
            var f = "";
            for (var d = 0; d < h.length; d++) {
                if (seed.queue_tch[h[d]][0]) {
                    k = seed.queue_tch[h[d]][0][1];
                    j = h[d].split("city")[1];
                    f = techcost["tch" + seed.queue_tch[h[d]][0][0]][0];
                    break
                }
            }
            c += g_js_strings.postToAllianceChat.helpmersch.replace("%1$s", f).replace("%2$s", k);
            c += "<br/><a onclick='claimAllianceChatHelp(2," + a + "," + k + "," + e + "," + j + ',"' + seed.player.prefix + '","' + b + "\");return false;'>";
            c += g_js_strings.postToAllianceChat.clicktorsch;
            c += "</a>"
        } else {
            var h = Object.keys(seed.queue_con);
            var k = 0;
            var e = tvuid;
            var j = 0;
            var f = "";
            for (var d = 0; d < h.length; d++) {
                if (seed.queue_con[h[d]][0] && (seed.queue_con[h[d]][0][2] == a)) {
                    k = seed.queue_con[h[d]][0][1];
                    j = h[d].split("city")[1];
                    f = buildingcost["bdg" + seed.queue_con[h[d]][0][0]][0]
                }
            }
            c += g_js_strings.postToAllianceChat.helpmebuild.replace("%1$s", k).replace("%2$s", f);
            c += "<br/><a onclick='claimAllianceChatHelp(1," + a + "," + k + "," + e + "," + j + ',"' + seed.player.prefix + '","' + b + "\");return false;'>";
            c += g_js_strings.postToAllianceChat.clicktobuild;
            c += "</a>"
        }
        Chat.changeTab(2);
        Chat.sendChat(c)
    }
}
function claimAllianceChatHelp(resbld, aid, lvl, inv, cid, pref, nm) {
    var params = Object.clone(g_ajaxparams);
    params.tid = resbld;
    params.gid = aid;
    params.lid = lvl;
    params.inv = inv;
    params.cid = cid;
    new Ajax.Request(g_ajaxpath + "ajax/helpAlliance.php" + g_ajaxsuffix, {
        method: "post",
        parameters: params,
        onSuccess: function (transport) {
            var rslt = eval("(" + transport.responseText + ")");
            if (rslt.ok) {
                if (rslt.a) {
                    showChatMessage(1, pref, nm, rslt.a)
                }
            } else {
                showChatMessage(2, pref, nm, rslt.error_code)
            }
        },
        onFailure: function () {}
    })
}
function showChatMessage(b, e, c, d) {
    if (b == 1) {
        var f = g_js_strings.claimAllianceChatHelp.helpCount.replace("%1$s", d).replace("%2$s", e).replace("%3$s", c)
    } else {
        if (b == 2) {
            var f = g_js_strings.errorcode["err_" + d].replace("%1$s", e).replace("%2$s", c)
        }
    }
    var a = document.createElement("div");
    a.className = "chatwrap clearfix noalliance";
    a.innerHTML = "<div>" + f + "</div>";
    $("mod_comm_list" + Chat.chatType).insert({
        top: a
    })
}
function handleHelpCallback(a) {
    var f = Object.keys(a)[0];
    if (a[f].b) {
        var b = a[f].b;
        var d = Object.keys(seed.queue_con);
        for (var c = 0; c < d.length; c++) {
            if (seed.queue_con[d[c]].length > 0) {
                if (seed.queue_con[d[c]][0][2] == b) {
                    if (Object.isArray(seed.updateHelpConstruct)) {
                        seed.updateHelpConstruct = {}
                    }
                    seed.updateHelpConstruct[d[c]] = a
                }
            }
        }
        postToAllianceChat(0, b)
    } else {
        if (a[f].t) {
            var e = a[f].t;
            var d = Object.keys(seed.queue_tch);
            for (var c = 0; c < d.length; c++) {
                if (seed.queue_tch[d[c]].length > 0) {
                    if (seed.queue_tch[d[c]][0][0] == e) {
                        if (Object.isArray(seed.updateHelpResearch)) {
                            seed.updateHelpResearch = {}
                        }
                        seed.updateHelpResearch[d[c]] = a
                    }
                }
            }
            postToAllianceChat(1, e)
        }
    }
}
function getBuildHelpEligible(c, e) {
    var d = unixtime();
    var a = 60 * 60 * 12;
    var b = seed.queue_con["city" + e][0][1];
    if (!Object.isArray(seed.updateHelpConstruct) && seed.updateHelpConstruct["city" + e] && seed.updateHelpConstruct["city" + e]["b" + c]) {
        if (b == seed.updateHelpConstruct["city" + e]["b" + c].l && ((parseInt(seed.updateHelpConstruct["city" + e]["b" + c].time) + a) > d)) {
            return true
        }
    }
    return false
}
function getTechHelpEligible(d, e) {
    var c = unixtime();
    var a = 60 * 60 * 12;
    var b = seed.queue_tch["city" + e][0][1];
    if (!Object.isArray(seed.updateHelpResearch) && seed.updateHelpResearch["city" + e] && seed.updateHelpResearch["city" + e]["t" + d]) {
        if (b == seed.updateHelpResearch["city" + e]["t" + d].l && ((parseInt(seed.updateHelpResearch["city" + e]["t" + d].time) + a) > c)) {
            return true
        }
    }
    return false
}
function fteConversionTracker(a) {
    cm.MixPanelTracker.track(a, {
        last_fbuid_digit: lastFbuidDigit,
        distinct_id: user_id
    })
}
function tpDotDServer() {
    var a = Object.clone(g_ajaxparams);
    a.campaignId = "419";
    new Ajax.Request(g_ajaxpath + "ajax/frameTracker.php" + g_ajaxsuffix, {
        method: "post",
        parameters: a,
        onSuccess: function (b) {},
        onFailure: function () {}
    })
}
function fUp(a) {
    return a.substr(0, 1).toUpperCase() + a.substr(1)
};
var cm = cm || {};
cm.ClientSideCookieManager = {
    setCookie: function (c, d, b) {
        var a = "";
        if (b) {
            var a = "; expires=" + b.toGMTString()
        }
        document.cookie = c + "=" + d + a + "; path=/"
    },
    getCookie: function (a) {
        var e = a + "=";
        var d = document.cookie.split(";");
        for (var c = 0; c < d.length; c++) {
            var b = d[c];
            while (b.charAt(0) == " ") {
                b = b.substring(1, b.length)
            }
            if (b.indexOf(e) == 0) {
                return b.substring(e.length, b.length)
            }
        }
        return null
    },
    deleteCookie: function (a) {
        if (null == cm.ClientSideCookieManager.getCookie(a)) {
            return
        }
        cm.ClientSideCookieManager.setCookie(a, "", new Date())
    }
};
cm.ConversionTracker = new function () {
    this.track = function (d, a, b) {
        var c = g_env == "prod" ? a : a + "~" + g_env;
        new Ajax.Request(g_ajaxpath + "ajax/track.php" + window.g_ajaxsuffix, {
            method: "post",
            parameters: jQuery.extend({
                userGroup: d,
                tag: c,
                opt: b
            }, g_ajaxparams),
            onSuccess: function (e) {}
        })
    }
};
cm.MixPanelTrackerSetting = new function () {
    var b = "MixPanelTracking";
    var a = cm.ClientSideCookieManager.getCookie(b) == "true";
    this.enable = function () {
        cm.ClientSideCookieManager.setCookie(b, "true");
        a = true
    };
    this.disable = function () {
        cm.ClientSideCookieManager.setCookie(b, "false");
        a = false
    };
    this.isEnabled = function () {
        return false
    }
};
cm.MixPanelTracker = new function () {
    var a = false;
    var b = function () {};
    var c = {
        init: b,
        track: b,
        track_funnel: b,
        register: b,
        register_once: b,
        register_funnel: b,
        identify: b,
        api_host: "no_host"
    };
    this.init = function (e) {
        mpmetrics = c;
        a = cm.MixPanelTrackerSetting.isEnabled();
        if (a) {
            try {
                mpmetrics = new MixpanelLib("20336e560bf9f33eb8ad661529dd45b7")
            } catch (d) {
                mpmetrics = c
            }
            if (e) {
                mpmetrics.register(e)
            }
        }
    };
    this.track = function (d, f) {
        if (a && mpmetrics) {
            var e = g_env == "prod" ? d : d + "~" + g_env;
            mpmetrics.track(e, f)
        }
    };
    this.trackFunnel = function (h, e, d, f) {
        if (a && mpmetrics) {
            var g = g_env == "prod" ? h : h + "~" + g_env;
            mpmetrics.track_funnel(h, e, d, f)
        }
    }
};
cm.GATracker = function (b, c, f, a) {
    try {
        _gaq.push(["_trackEvent", b, c, f, a])
    } catch (d) {}
};
cm.Profiler = function (c, d) {
    var b = null;
    var a = null;
    this.getStartTime = function () {
        return b
    };
    this.start = function (f) {
        try {
            if (arguments.length > 0 && !isNaN(parseInt(f))) {
                b = f
            } else {
                b = (new Date()).getTime()
            }
            return b
        } catch (g) {
            return -1
        }
    };
    this.stop = function (f, h) {
        try {
            f = f ? true : false;
            if ((arguments.length > 1) && !isNaN(parseInt(h))) {
                a = h
            } else {
                a = (new Date()).getTime()
            }
            if (f) {
                return a
            }
            cm.GATracker(c, d, g_server, a - b);
            return a
        } catch (g) {
            return -1
        }
    };
    this.start()
};
var CountDown = Class.create({
    initialize: function (b, c, a) {
        this.elementIds = b;
        this.setSecondsLeft(c);
        this.pe = new PeriodicalExecuter(this.updateCountDown.bind(this), 1);
        this.done = false;
        this.callbackWhenDone = a
    },
    setSecondsLeft: function (a) {
        this.secondsLeft = a;
        this.endDate = new Date(new Date()).getTime() + (a * 1000)
    },
    updateCountDown: function () {
        var a = new Date();
        var b = this.endDate - a;
        if (b <= 0) {
            this.pe.stop();
            this.done = true;
            var c = this;
            $w(this.elementIds).each(function (d) {
                if ($(d) && c.callbackWhenDone) {
                    c.callbackWhenDone(d)
                } else {
                    if ($(d)) {
                        $(d).update("Done!")
                    }
                }
            });
            return
        }
        $w(this.elementIds).each(function (d) {
            if ($(d)) {
                $(d).update(timestr(parseInt(b / 1000)))
            }
        })
    }
});
CountDown.countdownTimers = new Hash();
CountDown.addCountDown = function (c, d, b) {
    if (typeof (CountDown.countdownTimers.get(c)) === "undefined") {
        CountDown.countdownTimers.set(c, new CountDown(c, d, b))
    } else {
        var a = CountDown.countdownTimers.get(c);
        if (a.done && d > 0) {
            CountDown.countdownTimers.unset(c);
            CountDown.countdownTimers.set(c, new CountDown(c, d, b))
        } else {
            a.setSecondsLeft(d);
            if (b && d == 0) {
                b()
            }
        }
    }
};

function changeview_court(b) {
    var a = new Array();
    a.push("<div id='courtView'>");
    a.push("<div class='waiting'></div>");
    a.push("</div>");
    Modal.showModal(740, 400, 10, 10, g_js_strings.modaltitles.court, a.join(""));
    changeview_court_content(b)
}
function changeview_court_content(uid) {
    var pid = uid || tvuid;
    var params = Object.clone(g_ajaxparams);
    params.pid = pid;
    new Ajax.Request(g_ajaxpath + "ajax/viewCourt.php" + g_ajaxsuffix, {
        method: "post",
        parameters: params,
        onSuccess: function (transport) {
            var rslt = eval("(" + transport.responseText + ")");
            if (rslt.ok) {
                var allianceMember = 0;
                if (seed.allianceDiplomacies && (seed.allianceDiplomacies.allianceId == rslt.playerInfo.allianceId)) {
                    allianceMember = 1
                }
                var mine = uid ? 0 : 1;
                var friend = 0;
                if (seed.appFriends && !mine) {
                    var friendids = Object.keys(seed.appFriends);
                    for (var i = 0; i < friendids.length; i++) {
                        if (friendids[i] == pid) {
                            friend = 1;
                            break
                        }
                    }
                }
                var action1 = parseInt(Math.random() * 100 / 25);
                var action2 = parseInt(Math.random() * 100 / 25);
                while (action2 == action1) {
                    action2 = parseInt(Math.random() * 100 / 25)
                }
                var actionFlag = parseInt(rslt.dailyActionFlag);
                var jesterFlag = 0;
                var dogsFlag = 0;
                var sculptFlag = 0;
                var metalFlag = 0;
                var glass = 0;
                var banner = 0;
                var painting = 0;
                var throne = 0;
                var weapons = 0;
                var curtains = "";
                var olympicflag = "";
                for (var i = 0; i < rslt.courtItems.length; i++) {
                    switch (parseInt(rslt.courtItems[i])) {
                    case 711:
                        jesterFlag = 1;
                        break;
                    case 721:
                        dogsFlag = 1;
                        break;
                    case 731:
                        sculptFlag = 1;
                        break;
                    case 741:
                        metalFlag = 1;
                        break;
                    case 801:
                        glass = 1;
                        break;
                    case 802:
                        glass = 2;
                        break;
                    case 803:
                        glass = 3;
                        break;
                    case 804:
                        glass = 4;
                        break;
                    case 805:
                        glass = 5;
                        break;
                    case 811:
                        banner = 1;
                        break;
                    case 812:
                        banner = 2;
                        break;
                    case 813:
                        banner = 3;
                        break;
                    case 814:
                        banner = 4;
                        break;
                    case 821:
                        painting = 1;
                        break;
                    case 822:
                        painting = 2;
                        break;
                    case 823:
                        painting = 3;
                        break;
                    case 824:
                        painting = 4;
                        break;
                    case 825:
                        painting = 5;
                        break;
                    case 831:
                        curtains = "red";
                        break;
                    case 832:
                        curtains = "blue";
                        break;
                    case 833:
                        curtains = "purple";
                        break;
                    case 834:
                        curtains = "green";
                        break;
                    case 835:
                        curtains = "yellow";
                        break;
                    case 891:
                        curtains = "orange";
                    case 841:
                        throne = 1;
                        break;
                    case 842:
                        throne = 2;
                        break;
                    case 843:
                        throne = 3;
                        break;
                    case 844:
                        throne = 4;
                        break;
                    case 845:
                        throne = 5;
                        break;
                    case 851:
                        weapons = 1;
                        break;
                    case 852:
                        weapons = 2;
                        break;
                    case 853:
                        weapons = 3;
                        break;
                    case 854:
                        weapons = 4;
                        break;
                    case 855:
                        weapons = 5;
                        break;
                    case 860:
                        olympicflag = "usa";
                        break;
                    case 861:
                        olympicflag = "uk";
                        break;
                    case 862:
                        olympicflag = "ca";
                        break;
                    case 863:
                        olympicflag = "au";
                        break;
                    case 864:
                        olympicflag = "se";
                        break;
                    case 865:
                        olympicflag = "dk";
                        break;
                    case 866:
                        olympicflag = "no";
                        break;
                    case 867:
                        olympicflag = "it";
                        break;
                    case 868:
                        olympicflag = "de";
                        break;
                    case 869:
                        olympicflag = "fr";
                        break;
                    case 870:
                        olympicflag = "at";
                        break;
                    case 871:
                        olympicflag = "gr";
                        break;
                    case 872:
                        olympicflag = "ir";
                        break;
                    case 873:
                        olympicflag = "br";
                        break;
                    case 874:
                        olympicflag = "ch";
                        break;
                    case 875:
                        olympicflag = "fn";
                        break;
                    case 876:
                        olympicflag = "nl";
                        break;
                    case 877:
                        olympicflag = "cn";
                        break;
                    case 878:
                        olympicflag = "ru";
                        break;
                    case 879:
                        olympicflag = "kr";
                        break;
                    case 880:
                        olympicflag = "pirate";
                        break;
                    case 881:
                        olympicflag = "taiwan";
                        break;
                    case 882:
                        olympicflag = "japan";
                        break;
                    case 883:
                        olympicflag = "spain";
                        break;
                    case 884:
                        olympicflag = "turkey";
                        break;
                    case 885:
                        olympicflag = "england";
                        break;
                    case 886:
                        olympicflag = "scotland";
                        break;
                    case 887:
                        olympicflag = "wales";
                        break;
                    case 888:
                        olympicflag = "philippines";
                        break;
                    case 889:
                        olympicflag = "mexico";
                        break;
                    case 890:
                        olympicflag = "halloween";
                        break;
                    case 892:
                        olympicflag = "giving";
                        break;
                    case 893:
                        olympicflag = "fey";
                        break;
                    default:
                        break
                    }
                }
                var actionStringArr = [g_js_strings.changeview_court_content.havefeast, g_js_strings.changeview_court_content.gohunt, g_js_strings.changeview_court_content.commsculpt, g_js_strings.changeview_court_content.inspectmines];
                var actionDescStringArr = [g_js_strings.changeview_court_content.bonusfood, g_js_strings.changeview_court_content.bonuswood, g_js_strings.changeview_court_content.bonusstone, g_js_strings.changeview_court_content.bonusore];
                var corhtml = new Array();
                corhtml.push("<div class='courtwrap'>");
                corhtml.push("<div class='ladyinfowrap clearfix'>");
                corhtml.push("<div class='profilepic'><img src='" + stimgUrl + "img/avatars/25/" + rslt.playerInfo.playerSex.toLowerCase() + rslt.playerInfo.avatarId + ".jpg'/></div>");
                var playerTitle = g_js_strings.commonstr.lord;
                if (rslt.playerInfo.playerSex == "M") {
                    playerTitle = g_js_strings.commonstr.lord
                } else {
                    playerTitle = g_js_strings.commonstr.lady
                }
                corhtml.push("<div class='profilename'>" + playerTitle + " " + rslt.playerInfo.displayName + "</div>");
                corhtml.push("<div class='profileiconmight'></div>");
                corhtml.push("<div class='profiletext profiletextmight'><span>" + g_js_strings.commonstr.might + ":</span>" + rslt.playerInfo.might + "</div>");
                corhtml.push("<div class='profileicontitle'></div>");
                corhtml.push("<div class='profiletext profiletexttitle'><span>" + g_js_strings.commonstr.title + ":</span>" + titlenames[rslt.playerInfo.title] + "</div>");
                corhtml.push("<div class='profiletext profiletextcities'><span>" + g_js_strings.changeview_court_content.numofcities + ":</span>" + rslt.cityCount + "</div>");
                corhtml.push("<div class='profiletext profiletextalliance'><span>" + g_js_strings.commonstr.alliance + ":</span>" + (rslt.playerInfo.allianceName || "---") + "</div>");
                corhtml.push("</div>");
                corhtml.push("<div class='maincourt'>");
                if (banner) {
                    corhtml.push("<div class='banner banner" + banner + " " + curtains + "'></div>")
                }
                if (curtains) {
                    corhtml.push("<div class='curtain " + curtains + "'></div>")
                }
                if (painting) {
                    corhtml.push("<div class='painting painting" + painting + "'></div>")
                }
                if (weapons) {
                    corhtml.push("<div class='weapons weapons" + weapons + "'></div>")
                }
                if (throne) {
                    corhtml.push("<div class='throne throne" + throne + "'></div>")
                }
                if (glass) {
                    corhtml.push("<div class='glass glass" + glass + "'></div>")
                }
                if (jesterFlag) {
                    corhtml.push("<div class='jester'></div>")
                }
                if (dogsFlag) {
                    corhtml.push("<div class='huntingdog'></div>")
                }
                if (sculptFlag) {
                    corhtml.push("<div class='sculptor'></div>")
                }
                if (metalFlag) {
                    corhtml.push("<div class='metallurgist'></div>")
                }
                if (!olympicflag.blank()) {
                    corhtml.push("<div class='olympicflag " + olympicflag + "'></div>")
                }
                corhtml.push("</div>");
                corhtml.push("<div class='actionbar clearfix'>");
                if (mine) {
                    corhtml.push("<a  class='button14' onclick='cm.InventoryView.openInventory();return false;'><span>" + g_js_strings.commonstr.inventory + "</span></a>")
                } else {
                    if (friend && !allianceMember) {
                        corhtml.push("<a  class='button14' onclick='getMessageWindow(" + rslt.playerInfo.userId + ',"' + ((rslt.playerInfo.playerSex == "F") ? g_js_strings.commonstr.lady + " " : g_js_strings.commonstr.lord + " ") + rslt.playerInfo.displayName + "\");return false;'><span>" + g_js_strings.commonstr.message + "</span></a>");
                        corhtml.push("<a href='" + appUrl + "?page=choosegift' class='button14' target='_top' ><span>" + g_js_strings.changeview_court_content.givegift + "</span></a>");
                        corhtml.push("<a href='" + profileUrl + rslt.playerInfo.fbuid + "' class='button14' target='_blank' ><span>" + g_js_strings.changeview_court_content.viewfbprofile + "</span></a>");
                        if (!actionFlag) {
                            corhtml.push("<div id='courtActionBox'>");
                            corhtml.push("<div class='actiontext'>" + g_js_strings.changeview_court_content.courtlyactions + "</div>");
                            corhtml.push("<a  class='button20' onclick='doCourtAction(" + action1 + "," + pid + ")'><span>" + actionStringArr[action1] + "</span></a>");
                            corhtml.push("<a  class='button20' onclick='doCourtAction(" + action2 + "," + pid + ")'><span>" + actionStringArr[action2] + "</span></a>");
                            corhtml.push("</div>")
                        }
                    } else {
                        if (friend && allianceMember) {
                            corhtml.push("<a  class='button14' onclick='getMessageWindow(" + rslt.playerInfo.userId + ',"' + ((rslt.playerInfo.playerSex == "F") ? g_js_strings.commonstr.lady + " " : g_js_strings.commonstr.lord + " ") + rslt.playerInfo.displayName + "\");return false;'><span>" + g_js_strings.commonstr.message + "</span></a>");
                            corhtml.push("<a href='" + appUrl + "?page=choosegift' class='button14' target='_top' ><span>" + g_js_strings.changeview_court_content.givegift + "</span></a>");
                            corhtml.push("<a href='" + profileUrl + rslt.playerInfo.fbuid + "' class='button14' target='_blank' ><span>" + g_js_strings.changeview_court_content.viewfbprofile + "</span></a>");
                            if (!actionFlag) {
                                corhtml.push("<div id='courtActionBox'>");
                                corhtml.push("<div class='actiontext'>" + g_js_strings.changeview_court_content.courtlyactions + "</div>");
                                corhtml.push("<a  class='button20' onclick='doCourtAction(" + action1 + "," + pid + ")'><span>" + actionStringArr[action1] + "</span></a>");
                                corhtml.push("<a  class='button20' onclick='doCourtAction(" + action2 + "," + pid + ")'><span>" + actionStringArr[action2] + "</span></a>");
                                corhtml.push("</div>")
                            }
                        } else {
                            if (!friend && allianceMember) {
                                corhtml.push("<a  class='button14' onclick='getMessageWindow(" + rslt.playerInfo.userId + ',"' + ((rslt.playerInfo.playerSex == "F") ? g_js_strings.commonstr.lady + " " : g_js_strings.commonstr.lord + " ") + rslt.playerInfo.displayName + "\");return false;'><span>" + g_js_strings.commonstr.message + "</span></a>");
                                if (!actionFlag) {
                                    corhtml.push("<div id='courtActionBox'>");
                                    corhtml.push("<div class='actiontext'>" + g_js_strings.changeview_court_content.courtlyactions + "</div>");
                                    corhtml.push("<a  class='button20' onclick='doCourtAction(" + action1 + "," + pid + ")'><span>" + actionStringArr[action1] + "</span></a>");
                                    corhtml.push("<a  class='button20' onclick='doCourtAction(" + action2 + "," + pid + ")'><span>" + actionStringArr[action2] + "</span></a>");
                                    corhtml.push("</div>")
                                }
                            } else {
                                corhtml.push("<a  class='button14' onclick='getMessageWindow(" + rslt.playerInfo.userId + ',"' + ((rslt.playerInfo.playerSex == "F") ? g_js_strings.commonstr.lady + " " : g_js_strings.commonstr.lord + " ") + rslt.playerInfo.displayName + "\");return false;'><span>" + g_js_strings.commonstr.message + "</span></a>")
                            }
                        }
                    }
                }
                corhtml.push("</div>");
                corhtml.push("</div>");
                $("courtView").innerHTML = corhtml.join("");
                if (!actionFlag && !mine && !(!friend && !allianceMember)) {
                    var coracthtml = [];
                    coracthtml.push("<div class='courtactionbox'>");
                    coracthtml.push("<div class='title'>" + ((rslt.playerInfo.playerSex == "F") ? g_js_strings.commonstr.lady + " " : g_js_strings.commonstr.lord + " ") + rslt.playerInfo.displayName + " " + g_js_strings.commonstr.says.toLowerCase() + ":</div>");
                    coracthtml.push("<div class='pictextwrap clearfix'>");
                    coracthtml.push("<div class='picleft'>");
                    coracthtml.push("<img src='" + stimgUrl + "img/avatars/100/" + rslt.playerInfo.playerSex.toLowerCase() + rslt.playerInfo.avatarId + ".jpg'/>");
                    coracthtml.push("</div>");
                    coracthtml.push("<div class='txtright'>");
                    coracthtml.push(g_js_strings.changeview_court_content.invitedesc.replace("%1$s", seed.player.prefix).replace("%2$s", seed.player.name));
                    coracthtml.push("</div>");
                    coracthtml.push("</div>");
                    coracthtml.push("<div class='actionwrap clearfix'>");
                    coracthtml.push("<div class='action'>");
                    coracthtml.push("<div class='clearfix'><a class='button20' onclick='Modal.hideModal();doCourtAction(" + action1 + "," + pid + ");return false;'><span>" + actionStringArr[action1] + "</span></a></div>");
                    coracthtml.push("<div class='actiontext'>" + actionDescStringArr[action1] + "</div>");
                    coracthtml.push("</div>");
                    coracthtml.push("<div class='action'>");
                    coracthtml.push("<div class='clearfix'><a class='button20' onclick='Modal.hideModal();doCourtAction(" + action2 + "," + pid + ");return false;'><span>" + actionStringArr[action2] + "</span></a></div>");
                    coracthtml.push("<div class='actiontext'>" + actionDescStringArr[action2] + "</div>");
                    coracthtml.push("</div>");
                    coracthtml.push("</div>");
                    coracthtml.push("</div>");
                    Modal.showModal(500, 400, 130, 100, g_js_strings.modaltitles.courtlyaction, coracthtml.join(""))
                }
            } else {
                Modal.showAlert(printLocalError((rslt.error_code || null), (rslt.msg || null), (rslt.feedback || null)))
            }
        },
        onFailure: function () {}
    })
}
function doCourtAction(action, pid) {
    var recid = 1;
    switch (parseInt(action) + 1) {
    case 1:
        var imageName = "action_item_feast.jpg";
        var resourceType = "Food";
        break;
    case 2:
        var imageName = "action_item_hunt.jpg";
        var resourceType = "Wood";
        recid = 2;
        break;
    case 4:
        var imageName = "action_item_mining.jpg";
        var resourceType = "Ore";
        recid = 4;
        break;
    case 3:
        var imageName = "action_item_sculptor.jpg";
        var resourceType = "Stone";
        recid = 3;
        break;
    default:
        var imageName = "action_item_sculptor.jpg";
        var resourceType = "Stone";
        recid = 3;
        break
    }
    var params = Object.clone(g_ajaxparams);
    params.atype = parseInt(action) + 1;
    params.toid = pid;
    params.givercityid = currentcityid;
    new Ajax.Request(g_ajaxpath + "ajax/courtDoAction.php" + g_ajaxsuffix, {
        method: "post",
        parameters: params,
        onSuccess: function (transport) {
            var rslt = eval("(" + transport.responseText + ")");
            if (rslt.ok) {
                $("courtActionBox").hide();
                var coracthtml = [];
                coracthtml.push("<div class='rewardbox'>");
                coracthtml.push("<div class='actionconfirm'><img src='" + stimgUrl + "img/court/" + imageName + "'/></div>");
                coracthtml.push("<div class='actionconfirmbar clearfix'>");
                coracthtml.push("<div class='title'>You received:</div>");
                coracthtml.push("<div class='stat'>+" + rslt.gold + " Gold</div>");
                coracthtml.push("<div class='stat'>+" + rslt.resource + " " + resourceType + "</div>");
                coracthtml.push("<a class='button20'  onclick='Modal.hideModal();return false;'><span>OK</span></a>");
                coracthtml.push("</div>");
                coracthtml.push("</div>");
                seed.citystats["city" + currentcityid].gold[0] = parseInt(seed.citystats["city" + currentcityid].gold[0]) + parseInt(rslt.gold);
                seed.resources["city" + currentcityid]["rec" + recid][0] = parseInt(seed.resources["city" + currentcityid]["rec" + recid][0]) + parseInt(rslt.resource) * 3600;
                update_gold();
                Modal.showModal(500, 400, 132, 89, "Congratulations!", coracthtml.join(""));
                UserEngagement.popViralModalUEP()
            } else {
                Modal.showAlert(printLocalError((rslt.error_code || null), (rslt.msg || null), (rslt.feedback || null)))
            }
        },
        onFailure: function () {}
    })
};
cm = cm || {};
cm.CRMLink = function ($) {
    var url_ = {
        help: "",
        reportChat: "",
        reportMail: ""
    };
    var update_ = function () {
            ajax.Request(g_ajaxpath + "ajax/getHelpUrls.php" + g_ajaxsuffix, {
                method: "post",
                parameters: g_ajaxparams,
                onSuccess: function (transport) {
                    var rslt = eval("(" + transport.responseText + ")");
                    if (rslt.ok) {
                        for (var i in url_) {
                            if (rslt[i + "Url"]) {
                                url_[i] = rslt[i + "Url"]
                            }
                        }
                    }
                }
            })
        };
    update_();
    return {
        update: update_,
        open: function (type) {
            window.open(url_[type]);
            cm.log.l("open " + url_[type])
        }
    }
}(jQuery);
var cm = cm || {};
cm.CrossPromoButton = function (c) {
    var a;
    var b = function () {
            a = document.createElement("a");
            a.className = "crossPromoButton " + c.subclassName;
            a.target = "_blank";
            a.href = c.linkUrl;
            a.name = c.trackingTag
        };
    this.getHtmlElement = function () {
        return a
    };
    b()
};
cm.CrossPromoBar = function (c) {
    var a;
    var b;
    var d = function () {
            b = [];
            a = document.createElement("div");
            a.className = "crossPromoBar";
            var e = document.createElement("div");
            e.className = "logo";
            a.appendChild(e)
        };
    this.addButton = function (e) {
        a.appendChild(e.getHtmlElement());
        b.push(e)
    };
    this.getHtmlElement = function () {
        return a
    };
    this.getButtons = function () {
        return b
    };
    d()
};
cm.CrossPromoBarController = function (b) {
    var c = this;
    var d = function () {
            var g = b.getButtons();
            for (var f = 0; f < g.length; f++) {
                var e = g[f];
                Event.observe(e.getHtmlElement(), "click", a)
            }
        };
    var a = function (h) {
            var g = h.srcElement ? h.srcElement : h.target;
            var f = g.name;
            var i = Object.clone(g_ajaxparams);
            i.userGroup = "xpromo";
            i.tag = f;
            new Ajax.Request(g_ajaxpath + "ajax/track.php" + g_ajaxsuffix, {
                method: "post",
                parameters: i,
                onSuccess: function (e) {}
            })
        };
    d()
};
cm.CrossPromoBarLoader = function (f) {
    var e = [],
        a, d = ["gor", "doa", "gw"];
    d.sort(function () {
        return 0.5 - Math.random()
    });
    f.each(d, function (h, g) {
        ++h;
        a = {};
        if (g == "gor") {
            a.linkUrl = "http://apps.facebook.com/gloryofrome/?entrypt=gor-xpkoc-x-x-x-" + h + "&page=ts";
            a.subclassName = "GoR";
            a.trackingTag = "gor-xpkoc" + h
        } else {
            if (g == "doa") {
                a.linkUrl = "http://apps.facebook.com/dragonsofatlantis/ad/doa-xpkoc-x-x-x-" + h;
                a.subclassName = "DoA";
                a.trackingTag = "doa-xpkoc" + h
            } else {
                if (g == "gw") {
                    a.linkUrl = "http://apps.facebook.com/globalwarfaregame/?entrypt=gw-xpkoc-x-x-x-" + h;
                    a.subclassName = "GW";
                    a.trackingTag = "gw-xpkoc" + h
                }
            }
        }
        e.push(a)
    });
    var c = false;
    var b = function (o, k) {
            var h = f("#crossPromoBarContainer");
            if (h.length < 1) {
                return
            }
            if (seed.tutorial.t1 < 22) {
                return
            }
            if (c) {
                return
            }
            c = true;
            h.css("display", "block");
            var n = e;
            var j = new cm.CrossPromoBar();
            for (var l = 0; l < n.length; ++l) {
                var m = n[l];
                j.addButton(new cm.CrossPromoButton(m))
            }
            var g = new cm.CrossPromoBarController(j);
            h.append(j.getHtmlElement())
        };
    f(document).ready(b);
    f(document).bind("tutorialEnd", b);
    return {}
}(jQuery);

function formatDateByUnixTime(a) {
    return formatDate(new Date(a * 1000), "NNN dd, hh:mm a")
}
var MONTH_NAMES = new Array("January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec");
var DAY_NAMES = new Array("Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat");

function LZ(a) {
    return (a < 0 || a > 9 ? "" : "0") + a
}
function isDate(c, b) {
    var a = getDateFromFormat(c, b);
    if (a == 0) {
        return false
    }
    return true
}
function compareDates(e, f, c, d) {
    var b = getDateFromFormat(e, f);
    var a = getDateFromFormat(c, d);
    if (b == 0 || a == 0) {
        return -1
    } else {
        if (b > a) {
            return 1
        }
    }
    return 0
}
function formatDate(I, D) {
    D = D + "";
    var l = "";
    var v = 0;
    var G = "";
    var f = "";
    var j = I.getYear() + "";
    var g = I.getMonth() + 1;
    var F = I.getDate();
    var o = I.getDay();
    var n = I.getHours();
    var x = I.getMinutes();
    var q = I.getSeconds();
    var t, u, b, r, J, e, C, B, z, p, N, n, L, i, a, A;
    var w = new Object();
    if (j.length < 4) {
        j = "" + (j - 0 + 1900)
    }
    w.y = "" + j;
    w.yyyy = j;
    w.yy = j.substring(2, 4);
    w.M = g;
    w.MM = LZ(g);
    w.MMM = MONTH_NAMES[g - 1];
    w.NNN = MONTH_NAMES[g + 11];
    w.d = F;
    w.dd = LZ(F);
    w.E = DAY_NAMES[o + 7];
    w.EE = DAY_NAMES[o];
    w.H = n;
    w.HH = LZ(n);
    if (n == 0) {
        w.h = 12
    } else {
        if (n > 12) {
            w.h = n - 12
        } else {
            w.h = n
        }
    }
    w.hh = LZ(w.h);
    if (n > 11) {
        w.K = n - 12
    } else {
        w.K = n
    }
    w.k = n + 1;
    w.KK = LZ(w.K);
    w.kk = LZ(w.k);
    if (n > 11) {
        w.a = "PM"
    } else {
        w.a = "AM"
    }
    w.m = x;
    w.mm = LZ(x);
    w.s = q;
    w.ss = LZ(q);
    while (v < D.length) {
        G = D.charAt(v);
        f = "";
        while ((D.charAt(v) == G) && (v < D.length)) {
            f += D.charAt(v++)
        }
        if (w[f] != null) {
            l = l + w[f]
        } else {
            l = l + f
        }
    }
    return l
}
function _isInteger(c) {
    var b = "1234567890";
    for (var a = 0; a < c.length; a++) {
        if (b.indexOf(c.charAt(a)) == -1) {
            return false
        }
    }
    return true
}
function _getInt(f, d, e, c) {
    for (var a = c; a >= e; a--) {
        var b = f.substring(d, d + a);
        if (b.length < e) {
            return null
        }
        if (_isInteger(b)) {
            return b
        }
    }
    return null
}
function getDateFromFormat(w, p) {
    w = w + "";
    p = p + "";
    var v = 0;
    var l = 0;
    var r = "";
    var f = "";
    var u = "";
    var h, g;
    var b = new Date();
    var j = b.getYear();
    var t = b.getMonth() + 1;
    var s = 1;
    var d = b.getHours();
    var q = b.getMinutes();
    var n = b.getSeconds();
    var k = "";
    while (l < p.length) {
        r = p.charAt(l);
        f = "";
        while ((p.charAt(l) == r) && (l < p.length)) {
            f += p.charAt(l++)
        }
        if (f == "yyyy" || f == "yy" || f == "y") {
            if (f == "yyyy") {
                h = 4;
                g = 4
            }
            if (f == "yy") {
                h = 2;
                g = 2
            }
            if (f == "y") {
                h = 2;
                g = 4
            }
            j = _getInt(w, v, h, g);
            if (j == null) {
                return 0
            }
            v += j.length;
            if (j.length == 2) {
                if (j > 70) {
                    j = 1900 + (j - 0)
                } else {
                    j = 2000 + (j - 0)
                }
            }
        } else {
            if (f == "MMM" || f == "NNN") {
                t = 0;
                for (var o = 0; o < MONTH_NAMES.length; o++) {
                    var e = MONTH_NAMES[o];
                    if (w.substring(v, v + e.length).toLowerCase() == e.toLowerCase()) {
                        if (f == "MMM" || (f == "NNN" && o > 11)) {
                            t = o + 1;
                            if (t > 12) {
                                t -= 12
                            }
                            v += e.length;
                            break
                        }
                    }
                }
                if ((t < 1) || (t > 12)) {
                    return 0
                }
            } else {
                if (f == "EE" || f == "E") {
                    for (var o = 0; o < DAY_NAMES.length; o++) {
                        var m = DAY_NAMES[o];
                        if (w.substring(v, v + m.length).toLowerCase() == m.toLowerCase()) {
                            v += m.length;
                            break
                        }
                    }
                } else {
                    if (f == "MM" || f == "M") {
                        t = _getInt(w, v, f.length, 2);
                        if (t == null || (t < 1) || (t > 12)) {
                            return 0
                        }
                        v += t.length
                    } else {
                        if (f == "dd" || f == "d") {
                            s = _getInt(w, v, f.length, 2);
                            if (s == null || (s < 1) || (s > 31)) {
                                return 0
                            }
                            v += s.length
                        } else {
                            if (f == "hh" || f == "h") {
                                d = _getInt(w, v, f.length, 2);
                                if (d == null || (d < 1) || (d > 12)) {
                                    return 0
                                }
                                v += d.length
                            } else {
                                if (f == "HH" || f == "H") {
                                    d = _getInt(w, v, f.length, 2);
                                    if (d == null || (d < 0) || (d > 23)) {
                                        return 0
                                    }
                                    v += d.length
                                } else {
                                    if (f == "KK" || f == "K") {
                                        d = _getInt(w, v, f.length, 2);
                                        if (d == null || (d < 0) || (d > 11)) {
                                            return 0
                                        }
                                        v += d.length
                                    } else {
                                        if (f == "kk" || f == "k") {
                                            d = _getInt(w, v, f.length, 2);
                                            if (d == null || (d < 1) || (d > 24)) {
                                                return 0
                                            }
                                            v += d.length;
                                            d--
                                        } else {
                                            if (f == "mm" || f == "m") {
                                                q = _getInt(w, v, f.length, 2);
                                                if (q == null || (q < 0) || (q > 59)) {
                                                    return 0
                                                }
                                                v += q.length
                                            } else {
                                                if (f == "ss" || f == "s") {
                                                    n = _getInt(w, v, f.length, 2);
                                                    if (n == null || (n < 0) || (n > 59)) {
                                                        return 0
                                                    }
                                                    v += n.length
                                                } else {
                                                    if (f == "a") {
                                                        if (w.substring(v, v + 2).toLowerCase() == "am") {
                                                            k = "AM"
                                                        } else {
                                                            if (w.substring(v, v + 2).toLowerCase() == "pm") {
                                                                k = "PM"
                                                            } else {
                                                                return 0
                                                            }
                                                        }
                                                        v += 2
                                                    } else {
                                                        if (w.substring(v, v + f.length) != f) {
                                                            return 0
                                                        } else {
                                                            v += f.length
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    if (v != w.length) {
        return 0
    }
    if (t == 2) {
        if (((j % 4 == 0) && (j % 100 != 0)) || (j % 400 == 0)) {
            if (s > 29) {
                return 0
            }
        } else {
            if (s > 28) {
                return 0
            }
        }
    }
    if ((t == 4) || (t == 6) || (t == 9) || (t == 11)) {
        if (s > 30) {
            return 0
        }
    }
    if (d < 12 && k == "PM") {
        d = d - 0 + 12
    } else {
        if (d > 11 && k == "AM") {
            d -= 12
        }
    }
    var a = new Date(j, t - 1, s, d, q, n);
    return a.getTime()
}
function parseDate(h) {
    var f = (arguments.length == 2) ? arguments[1] : false;
    generalFormats = new Array("y-M-d", "MMM d, y", "MMM d,y", "y-MMM-d", "d-MMM-y", "MMM d");
    monthFirst = new Array("M/d/y", "M-d-y", "M.d.y", "MMM-d", "M/d", "M-d");
    dateFirst = new Array("d/M/y", "d-M-y", "d.M.y", "d-MMM", "d/M", "d-M");
    var b = new Array("generalFormats", f ? "dateFirst" : "monthFirst", f ? "monthFirst" : "dateFirst");
    var g = null;
    for (var e = 0; e < b.length; e++) {
        var a = window[b[e]];
        for (var c = 0; c < a.length; c++) {
            g = getDateFromFormat(h, a[c]);
            if (g != 0) {
                return new Date(g)
            }
        }
    }
    return null
};
var cm = cm || {};
cm.ClientSideTemplate = {
    getTemplate: function (b, a, c) {
        new Ajax.Request(b, {
            method: "get",
            onSuccess: a,
            onFailure: c
        })
    }
};
cm.DesertionReportLoader = {
    init: function () {
        cm.DESERTION_REPORT_PRESENTATION_MODEL = g_js_strings.modal_messages_viewdesertionreports;
        cm.DESERTION_REPORT_PRESENTATION_MODEL.troopsdeserted = g_js_strings.modal_messages_viewdisasterreports.troopsdeserted;
        cm.DESERTION_REPORT_PRESENTATION_MODEL.troops = g_js_strings.commonstr.troops;
        cm.DESERTION_REPORT_PRESENTATION_MODEL.backtoreports = g_js_strings.modal_messages_viewreports_view.backtoreports;
        cm.DESERTION_REPORT_RULES = {
            self: null,
            notEnoughFood: cm.DESERTION_REPORT_PRESENTATION_MODEL.cityunableprovideenoughfood,
            lostTroops: '<div class="detailTableBody"><div class="troopTitleRow"><div class="typeColumn">{PRESENTATION_MODEL.trooptypes}</div><div class="beforeColumn">{PRESENTATION_MODEL.beforedesertion}</div><div class="afterColumn">{PRESENTATION_MODEL.afterdesertion}</div><div class="lostColumn">{PRESENTATION_MODEL.troopslost}</div></div>{$}</div>',
            "lostTroops[*]": '<div class="troopRow"><div class="typeColumn"><img src="{$.image}" /> {$.name}</div><div class="beforeColumn">{$.before}</div><div class="afterColumn">{$.after}</div><div class="lostColumn">{$.lost}</div></div>'
        };
        cm.ClientSideTemplate.getTemplate("jsonT/desertionReport_24.html", function (a) {
            cm.DESERTION_REPORT_RULES.self = a.responseText
        }, function () {})
    }
};
Event.observe(document, "dom:loaded", cm.DesertionReportLoader.init);
cm.DesertionReportView = function (b) {
    if (!cm.DESERTION_REPORT_RULES.self) {
        throw "Desertion Report Template failed to load.";
        return
    }
    b.PRESENTATION_MODEL = cm.DESERTION_REPORT_PRESENTATION_MODEL;
    var a = document.createElement("div");
    a.innerHTML = jsonT(b, cm.DESERTION_REPORT_RULES);
    _backToReportButton = $(a).getElementsByClassName("button20")[0];
    this.getHTMLElement = function () {
        return a
    };
    this.getBackToReportButton = function () {
        return _backToReportButton
    };
    this.onClose = null;
    this.close = function () {
        if (typeof (this.onclose) == "function") {
            this.onclose(myself)
        }
    }
};
cm.DesertionReportController = function (b, a) {
    var d = this;
    var e = b;
    var g = a;
    var c = function (h) {
            loadPage_pagination("modal_msg_list_pagination", pageNavigatorModel.getCurrentPage(), "modal_messages_viewreports", pageNavigatorModel.getPageCount());
            location.replace("#mainbody")
        };
    var f = g.getBackToReportButton();
    f.observe("click", c, false)
};
var cm = cm || {};
cm.LevelUpRewardDialog = function (f) {
    cm.BaseDialog.call(this);
    var l = this;
    var c = this.getHtmlElement();
    var i;
    var e;
    var a;
    var j;
    var k = this.show;
    var g = function () {
            var n = a;
            a = false;
            if (n) {
                b()
            }
        };
    this.show = function () {
        a = true;
        Modal.onCloseCallback = g;
        Modal.showModal(201, 101, 400, 300, "", "");
        $("modalControlsClose" + Modal.modalid).hide();
        k()
    };
    var b = function () {
            Event.stopObserving(e, "click", m);
            Event.stopObserving(i, "click", d);
            var n = a;
            a = false;
            if (n) {
                Modal.hideModal()
            }
            l.close()
        };
    var d = function (o) {
            b();
            var n = new cm.DialogEvent(cm.DialogEvent.OK);
            n.setTarget(l);
            l.dispatchCustomEvent(n)
        };
    var m = function (n) {
            b()
        };
    var h = function () {
            var n = [];
            n.push('<div class="levelUpRewardDialog">');
            n.push('    <a class="closeButton">&nbsp;</a>');
            n.push('    <div class="titleBar">{text.levelUp}</div>');
            n.push('    <div class="congratulation">{text.congratulations}</div>');
            n.push('    <div class="avatarName">{avatar.name}</div>');
            n.push('    <div class="avatarPicture"><img src ="{avatar.pictureUrl}" alt="{avatar.name}" /></div>');
            n.push('    <div class="avatarTitle">{avatar.title}</div>');
            n.push('    <div class="rewards">');
            n.push('        <div class="rewardTitle">{text.yourReward}</div>');
            n.push('        <div class="reward gold">');
            n.push('            <img src="img/gold_qa.png" alt="gold" width="70" height="70" />');
            n.push('            <div class="body">');
            n.push("                <div>{text.gold}</div>");
            n.push('                <div class="amount">{reward.gold}</div>');
            n.push("            </div>");
            n.push("        </div>");
            n.push('        <div class="reward title">');
            n.push('            <img src="img/title_qa.png" alt="title" width="70" height="70" />');
            n.push('            <div class="body">');
            n.push("                <div>{avatar.title}</div>");
            n.push("            </div>");
            n.push("        </div>");
            n.push("    </div>");
            n.push('    <a class="celebrateButton" href="javascript:void(0)">{text.celebrate}</a>');
            n.push("</div>");
            c.innerHTML = cm.StringFormatter.applyTemplate(n.join("\n"), f);
            i = $(c).getElementsByClassName("celebrateButton")[0];
            Event.observe(i, "click", d);
            e = $(c).getElementsByClassName("closeButton")[0];
            Event.observe(e, "click", m)
        };
    h()
};
cm.OOP.inherits(cm.LevelUpRewardDialog, cm.BaseDialog);
cm.LevelUpRewardDialogController = function (b, c) {
    var a = function (g) {
            c.removeEventListener(cm.DialogEvent.CLOSE, a);
            seed.player.title = b.avatar.level;
            $("topnav_level").innerHTML = seed.player.title;
            if (cm.feedTracking.get("shareQuestComplete") !== false && !cm.TutorialManager.inTutorialMode()) {
                var f = cm.LevelUtil.getQuestId(b.avatar.level);
                shareQuestComplete(f)
            }
        };
    var d = function () {
            c.addEventListener(cm.DialogEvent.CLOSE, a)
        };
    d()
};
cm.WatchTowerReportDialog = function (d) {
    cm.BaseDialog.call(this);
    var l = this;
    var j = this.getHtmlElement();
    var k;
    var q;
    var n;
    var i;
    var f;
    var g;
    var c = this.show;
    var p = this.close;
    var m = function () {
            var s = g;
            g = false;
            if (s) {
                b()
            }
        };
    this.show = function () {
        g = true;
        Modal.onCloseCallback = m;
        Modal.showModal(201, 101, 400, 300, "", "");
        $("modalControlsClose" + Modal.modalid).hide();
        c()
    };
    var b = function () {
            var s = g;
            g = false;
            if (s) {
                Modal.hideModal()
            }
            l.close();
            q.unbind("click", e);
            n.attack.removeEventListener(cm.IncomingAttackEvent.ARRIVAL_TIME_CHANGED, o);
            n.attack.removeEventListener(cm.IncomingAttackEvent.STATUS_CHANGED, a)
        };
    var e = function (s) {
            b()
        };
    var r = function () {
            if (d.attack.getMarchStatus() == cm.MARCH_STATUS.MARCH_STATUS_ABORTING) {
                i.innerHTML = g_js_strings.ImpendingAttacks.recalled
            } else {
                var s = d.attack.getArrivalTime();
                if (s) {
                    var t = s - unixtime();
                    i.innerHTML = cm.TimeFormatter.format(t)
                } else {
                    i.innerHTML = "????"
                }
            }
        };
    var o = function () {
            r()
        };
    var a = function () {
            r()
        };
    this.getButtons = function () {
        return f
    };
    var h = function () {
            g = false;
            n = d;
            n.attack.addEventListener(cm.IncomingAttackEvent.ARRIVAL_TIME_CHANGED, o);
            n.attack.addEventListener(cm.IncomingAttackEvent.STATUS_CHANGED, a);
            var y = [];
            y.push('	<div class="incomingAttackDetailDialog">');
            y.push('		<a class="closeButton">&nbsp;</a>');
            y.push('		<div class="titleBar">{text.watchTowerReport}</div>');
            y.push('		<div class="arrowContainer">');
            y.push('			<div class="targetColumn">');
            y.push('				<span class="title">{text.target}:</span> {target}');
            y.push("			</div>");
            y.push('			<div class="marchTypeColumn">');
            y.push('				<span class="title">{text.marchType}:</span> {attack.getMarchName()}');
            y.push("			</div>");
            y.push("		</div>");
            y.push('		<div class="arrival">{text.estimatedArrival}: <span class="arrivalTime"></span></div>');
            y.push('		<div class="attackerContainer">');
            y.push('			<table class="attacker">');
            y.push("				<tr>");
            y.push('					<td class="leftColumn">');
            y.push('						<div class="simpleRow">');
            y.push('							<span class="title">{text.attacker}:</span> <span class="value">{attacker.name}</span>');
            y.push("						</div>");
            y.push('						<div class="simpleRow">');
            y.push('							<span class="title">{text.armySize}:</span> <span class="value">{troopBriefCount}</span>');
            y.push("						</div>");
            y.push('						<div class="simpleRow">');
            y.push('							<span class="title">{text.incomingTroops}:</span>');
            y.push("						</div>");
            y.push("						{troops}");
            y.push("					</td>");
            y.push('					<td class="rightColumn">');
            y.push('						<div class="simpleRow">');
            y.push('							<span class="title">{text.alliance}:</span> <span class="value">{alliance.name}</span>');
            y.push("						</div>");
            y.push('						<div class="simpleRow">');
            y.push('							<span class="title">{text.knightCombatLevel}:</span> <span class="value">{knight.combatLevel}</span>');
            y.push("						</div>");
            y.push('						<div class="simpleRow">');
            y.push('							<span class="title">{text.researchLevel}:</span>');
            y.push("						</div>");
            y.push("						{researches}");
            y.push("					</td>");
            y.push("				</tr>");
            y.push("			</table>");
            y.push("		</div>");
            y.push('		<div class="takeAction">');
            y.push('			<div class="takeActionText">{text.takeAction}</div>');
            y.push('			<div class="fight">');
            y.push('				<div class="actionTitle">Fight</div>');
            y.push('				<div class="buttonRow"><a class="inlineButton blue25" title="{text.trainTroopsTip}"><span>{text.trainTroops}</span></a></div>');
            y.push('				<div class="buttonRow"><a class="inlineButton blue25" title="{text.askForHelpTip}"><span>{text.askForHelp}</span></a></div>');
            y.push('				<div class="footer"></div>');
            y.push("			</div>");
            y.push('			<div class="defend">');
            y.push('				<div class="actionTitle">Defend</div>');
            y.push('				<div class="buttonRow"><a class="inlineButton blue25" title="{text.buildDefensesTip}"><span>{text.buildDefenses}</span></a></div>');
            y.push('				<div class="buttonRow"><a class="inlineButton blue25" title="{text.troopSettingsTip}"><span>{text.troopSettings}</span></a></div>');
            y.push('				<div class="footer"></div>');
            y.push("			</div>");
            y.push('			<div class="buffs">');
            y.push('				<div class="buffBody">');
            y.push('					<div class="actionTitle">Buffs</div>');
            y.push("					{items}");
            y.push("				</div>");
            y.push('				<div class="buffFooter"></div>');
            y.push("			</div>");
            y.push("		</div>");
            y.push('		<div class="footer"></div>');
            y.push("	</div>");
            var J = [];
            J.push('						<div class="troopContainer">');
            J.push('							<table class="troops">');
            J.push("								<thead>");
            J.push("									<tr>");
            J.push('										<td class="troopImage"></td>');
            J.push('										<td class="troopName">Troops</td>');
            J.push('										<td class="troopAmount">Amount</td>');
            J.push("									</tr>");
            J.push("								</thead>");
            J.push("								<tbody>");
            J.push("									{$}");
            J.push("								</tbody>");
            J.push("							</table>");
            J.push("						</div>");
            var z = [];
            z.push("									<tr>");
            z.push('										<td><img src="{$.imageUrl}" /></td>');
            z.push("										<td>{$.name}</td>");
            z.push("										<td>{$.amount}</td>");
            z.push("									</tr>");
            var t = [];
            t.push('						<table class="research">');
            t.push("							<thead>");
            t.push("								<tr>");
            t.push('									<td class="tech">Tech</td>');
            t.push('									<td class="level">Level</td>');
            t.push("								</tr>");
            t.push("							</thead>");
            t.push("							<tbody>");
            t.push("								{$}");
            t.push("							</tbody>");
            t.push("						</table>");
            var v = [];
            v.push("								<tr>");
            v.push("									<td>{$.name}</td>");
            v.push("									<td>{$.level}</td>");
            v.push("								</tr>");
            var B = "{$}";
            var u = [];
            u.push('					<div class="buffItem" id="buffItem{$.getId()}">');
            u.push('						<div class="leftColumn" title="{$.getDescription()}">');
            u.push('							<img src="{$.getImageUrl(30)}" class="icon" />');
            u.push('							<div class="amountRow">{$.getQuantity()}</div>');
            u.push("						</div>");
            u.push('						<div class="rightColumn">');
            u.push('							<div class="applyRow"><a class="inlineButton blue11 applyButton" name="{$.getId()}"><span>{text.apply}</span></a></div>');
            u.push('							<div class="buyRow"><span class="price">{$.getPrice()}</span><img src="{imagePath}img/gem.png" height="11" /><a class="buyButton" name="{$.getId()}">{text.buy}</a></div>');
            u.push("						</div>");
            u.push("					</div>");
            var w = {
                self: y.join(""),
                troops: J.join(""),
                "troops[*]": z.join(""),
                researches: t.join(""),
                "researches[*]": v.join(""),
                items: B,
                "items[*]": u.join("")
            };
            j.innerHTML = jsonT(n, w);
            i = jQuery(j).find(".arrivalTime")[0];
            r();
            q = jQuery(jQuery(j).find(".closeButton")[0]);
            q.bind("click", e);
            f = {};
            var C = jQuery(j).find(".fight")[0];
            var I = jQuery(C).find(".inlineButton");
            f.trainTroops = jQuery(I[0]);
            var x = cm.BuildingFinder.getFirstInCurrentCity(cm.BUILDING_TYPES.BARRACK);
            if (!x) {
                f.trainTroops.addClass("disabled")
            }
            var G = seed.allianceDiplomacies && parseInt(seed.allianceDiplomacies.allianceId) > 0;
            f.askForHelp = jQuery(I[1]);
            if (!G) {
                f.askForHelp.addClass("disabled")
            }
            var E = jQuery(j).find(".defend")[0];
            var F = jQuery(E).find(".inlineButton");
            f.buildDefenses = jQuery(F[0]);
            f.troopSettings = jQuery(F[1]);
            f.items = {};
            var D, H;
            for (D = 0; D < d.items.length; D++) {
                H = n.items[D];
                var A = H.getId().toString();
                var s = jQuery(j).find("#buffItem" + A)[0];
                f.items[A] = {};
                f.items[A].applyItem = jQuery(jQuery(s).find(".applyButton")[0]);
                if (H.getQuantity() < 1) {
                    f.items[A].applyItem.addClass("disabled")
                }
                f.items[A].buyItem = jQuery(jQuery(s).find(".buyButton")[0])
            }
        };
    h()
};
cm.OOP.inherits(cm.WatchTowerReportDialog, cm.BaseDialog);
cm.WatchTowerReportDialogController = function (d, k) {
    var f;
    var b;
    var n;
    var i;
    var c = function (t) {
            b.removeEventListener(cm.DialogEvent.CLOSE, c);
            f.trainTroops.unbind("click", m);
            f.troopSettings.unbind("click", a);
            f.buildDefenses.unbind("click", h);
            f.askForHelp.unbind("click", p);
            var s, u;
            for (u in f.items) {
                s = f.items[u];
                var r = s.applyItem;
                var q = s.buyItem;
                q.unbind("click", e);
                r.unbind("click", g)
            }
        };
    var m = function (r) {
            var q = cm.BuildingFinder.getFirstInCurrentCity(cm.BUILDING_TYPES.BARRACK);
            if (q) {
                buildslot(document.getElementById("slot_" + q.slot), r)
            }
        };
    var a = function (q) {
            buildslot(document.getElementById("slot_0"), q)
        };
    var h = function (q) {
            buildslot(document.getElementById("slot_1"), q)
        };
    var p = function (t) {
            var s = t.srcElement || t.currentTarget;
            s = s.tagName.toLowerCase() != "a" ? s.parentNode : s;
            if (jQuery(s).hasClass("disabled")) {
                return
            }
            Chat.changeTab(2);
            var v, r, u;
            var q = n.getTile();
            if (q.isCity) {
                v = new cm.utils.CoordinateLink(q.city.x, q.city.y);
                r = g_js_strings.ImpendingAttacks.askAllianceForHelpCity;
                u = {
                    cityName: q.city.name
                }
            } else {
                v = new cm.utils.CoordinateLink(q.wilderness.x, q.wilderness.y);
                r = g_js_strings.ImpendingAttacks.askAllianceForHelpWilderness;
                u = {
                    wilderness: q.wilderness.typeName
                }
            }
            v.setClassName("coordinateLink");
            u.coordinate = v.getHTML();
            document.getElementById("mod_comm_input").value = cm.StringFormatter.applyTemplate(r, u);
            Chat.sendChat();
            Modal.showAlert(g_js_strings.modal_messages_send.msgsent)
        };
    var o = function (s) {
            var q = s.getTarget();
            var t = q.getId();
            var r = q.getQuantity();
            if (r > 0) {
                jQuery("#buffItem" + t).find(".inlineButton").removeClass("disabled")
            }
            jQuery("#buffItem" + t).find(".amountRow").html(r);
            jQuery("#kochead_gems").html(seed.player.gems);
            mpmetrics.track("store_purchase", {
                item: q.name,
                cost: q.price,
                usr_gen: seed.player.g,
                usr_byr: seed.player.y,
                usr_ttl: titlenames[seed.player.title],
                distinct_id: tvuid
            })
        };
    var e = function (t) {
            var s = t.srcElement || t.currentTarget;
            var u = s.getAttribute("name");
            try {
                var r = i.itemLookup[u];
                if (r.getPrice() > seed.player.gems) {
                    modal_shop_buy_notenough()
                } else {
                    s.style.visibility = "hidden";
                    r.addEventListener(cm.ItemEvent.BOUGHT, o);
                    r.buyItem()
                }
            } catch (q) {} finally {
                s.style.visibility = "visible"
            }
        };
    var l = function (s) {
            var q = s.getTarget();
            var t = q.getId();
            var r = q.getQuantity();
            if (r == 0) {
                jQuery("#buffItem" + t).find(".inlineButton").addClass("disabled")
            }
            jQuery("#buffItem" + t).find(".amountRow").html(r);
            q.removeEventListener(cm.ItemEvent.APPLIED, l)
        };
    var g = function (t) {
            var s = t.srcElement || t.currentTarget;
            s = s.tagName.toLowerCase() != "a" ? s.parentNode : s;
            if (jQuery(s).hasClass("disabled")) {
                return
            }
            var u = s.getAttribute("name");
            s.style.visibility = "hidden";
            try {
                var r = i.itemLookup[u];
                r.addEventListener(cm.ItemEvent.APPLIED, l);
                r.applyItem()
            } catch (q) {} finally {
                s.style.visibility = "visible"
            }
        };
    var j = function () {
            i = d;
            n = i.attack;
            b = k;
            b.addEventListener(cm.DialogEvent.CLOSE, c);
            f = k.getButtons();
            f.trainTroops.bind("click", m);
            f.troopSettings.bind("click", a);
            f.buildDefenses.bind("click", h);
            f.askForHelp.bind("click", p);
            var s, t;
            for (t in f.items) {
                s = f.items[t];
                var r = s.applyItem;
                var q = s.buyItem;
                q.bind("click", e);
                r.bind("click", g)
            }
        };
    j()
};

function addReply(j, h) {
    var a = $("newpost");
    var f = $("topictitle").innerHTML;
    var g = $("replytopictitle");
    if (h) {
        var k = $("post_" + h);
        var d = $("replytopostid");
        d.value = h;
        var m = k.select(".postnum")[0].innerHTML;
        var c = k.select(".postername")[0].innerHTML;
        var b = m + " by " + c + " in " + f;
        g.innerHTML = b;
        var l = $("allposts").select(".post");
        for (var e = 0; e < l.length; e++) {
            if (l[e].id != ("post_" + h)) {
                l[e].hide()
            }
        }
    } else {
        g.innerHTML = f;
        $("allposts").hide()
    }
    a.show();
    $("topichead").hide()
}
function addReplyCancel() {
    var b = $("allposts").select(".post");
    for (var a = 0; a < b.length; a++) {
        b[a].show()
    }
    $("allposts").show();
    $("newpost").hide();
    $("topichead").show()
}
function addReplySubmit() {
    $("newpostform").submit()
}
function addReplyQuote(k, g) {
    var a = document.getElementById("newpost");
    var e = document.getElementById("topictitle").innerHTML;
    var f = document.getElementById("replytopictitle");
    if (g) {
        var l = $("post_" + g);
        var d = document.getElementById("replytopostid");
        d.value = g;
        var m = l.select(".postnum")[0].innerHTML;
        var c = l.select(".postername")[0].innerHTML;
        var j = l.select(".postbody")[0].innerHTML;
        var h = a.getElementsByTagName("textarea")[0];
        h.value = "<blockquote><p>" + c + " " + m + "</p>" + j + "</blockquote>";
        var b = m + " by " + c + " in " + e;
        f.innerHTML = b
    } else {
        f.innerHTML = e
    }
    a.style.display = "block"
}
function editPost(g) {
    var b = document.getElementById("editpost");
    var a = document.getElementById("editpostid");
    var e = document.getElementById("topictitle").innerHTML;
    a.value = g;
    var h = $("post_" + g);
    var k = h.select(".postnum")[0].innerHTML;
    var d = h.select(".postername")[0].innerHTML;
    var j = h.select(".postbody")[0].innerHTML;
    var c = k + " by " + d + " in " + e;
    edittopictitle.innerHTML = c;
    var f = b.getElementsByTagName("textarea")[0];
    f.value = j;
    b.style.display = "block"
}
function thumbs(assetid, thumbs, topicid) {
    var params = Object.clone(g_ajaxparams);
    params.action = "thumbs";
    params.assetid = assetid;
    params.thumbs = thumbs;
    new Ajax.Request("ajax/discussionAjaxLogin.php", {
        method: "post",
        parameters: params,
        onSuccess: function (transport) {
            var result = eval("(" + transport.responseText + ")");
            if (result.ok) {} else {
                Modal.showAlert(printLocalError((rslt.error_code || null), (rslt.msg || null), (rslt.feedback || null)))
            }
        },
        onFailure: function () {
            Modal.showAlert("no good")
        }
    })
}
function seeEdits(assetid) {
    var params = Object.clone(g_ajaxparams);
    params.action = "seeedits";
    params.assetid = assetid;
    new Ajax.Request("ajax/discussionAjaxPublic.php", {
        method: "post",
        parameters: params,
        onSuccess: function (transport) {
            var result = eval("(" + transport.responseText + ")");
            if (result.ok) {
                Modal.showAlert(result.data)
            } else {
                Modal.showAlert(printLocalError((rslt.error_code || null), (rslt.msg || null), (rslt.feedback || null)))
            }
        },
        onFailure: function () {
            Modal.showAlert("no good")
        }
    })
}
function showPost(assetid) {
    var params = Object.clone(g_ajaxparams);
    params.action = "showpost";
    params.assetid = assetid;
    new Ajax.Request("ajax/discussionAjaxPublic.php", {
        method: "post",
        parameters: params,
        onSuccess: function (transport) {
            var result = eval("(" + transport.responseText + ")");
            if (result.ok) {
                Modal.showAlert(result.data)
            }
        },
        onFailure: function () {
            Modal.showAlert("no good")
        }
    })
}
function showBuried(assetid) {
    var params = Object.clone(g_ajaxparams);
    params.action = "showburied";
    params.assetid = assetid;
    new Ajax.Request("ajax/discussionAjaxPublic.php", {
        method: "post",
        parameters: params,
        onSuccess: function (transport) {
            var result = eval("(" + transport.responseText + ")");
            if (result.ok) {
                $("post_" + assetid).select(".postcontrols")[0].show();
                $("post_" + assetid).select(".postbody")[0].innerHTML = result.data
            }
        },
        onFailure: function () {
            Modal.showAlert("no good")
        }
    })
}
function showFolderMove(b) {
    var a = document.getElementById("foldermove");
    a.style.display = "block"
}
function modAction(assetid, action, set, toggle) {
    var params = Object.clone(g_ajaxparams);
    params.action = action;
    params.assetid = assetid;
    params.set = set;
    new Ajax.Request("ajax/discussionAjaxLogin.php", {
        method: "post",
        parameters: params,
        onSuccess: function (transport) {
            var result = eval("(" + transport.responseText + ")");
            if (result.ok) {
                var span1 = document.getElementById(assetid + "_" + action).style.display = "none";
                var span2 = document.getElementById(assetid + "_" + toggle).style.display = "inline"
            }
        },
        onFailure: function () {}
    })
}
function pollVote(assetid, tgt) {
    var params = Object.clone(g_ajaxparams);
    params.action = "pollvote";
    params.assetid = assetid;
    var choices = document.getElementsByName("pollchoice");
    var numchoices = choices.length;
    for (i = 0; i < numchoices; i++) {
        if (choices[i].checked) {
            choice = choices[i].value
        }
    }
    params.pollchoice = choice;
    new Ajax.Request("ajax/discussionAjaxLogin.php", {
        method: "post",
        parameters: params,
        onSuccess: function (transport) {
            var result = eval("(" + transport.responseText + ")");
            if (result.ok) {}
        },
        onFailure: function () {}
    })
}
function showPhoto(f, a) {
    var c = document.getElementById("window");
    c.style.display = "block";
    var b = c.getElementsByTagName("div");
    for (i = 0; i < b.length; i++) {
        if (i > 0) {
            c.removeChild(b[i])
        }
    }
    var e = document.createElement("img");
    e.setAttribute("src", a);
    var d = document.createElement("div");
    d.appendChild(e);
    c.appendChild(d)
}
function hideAttachments(c) {
    c.parentNode.style.display = "none";
    var a = c.parentNode.parentNode.getElementsByTagName("a");
    var b = a.length - 1;
    a[b].style.display = "inline"
}
function showAttachments(a) {
    a.parentNode.getElementsByTagName("div")[0].style.display = "block";
    a.style.display = "none"
};

function addTopic(a) {
    $("disc_modu_body").hide();
    $("newtopic").show()
}
function addTopicCancel() {
    $("newtopic").hide();
    $("disc_modu_body").show()
}
function addTopicSubmit() {
    $("newtopicform").submit()
}
function addPoll(a) {
    $("newpoll").show();
    $("disc_modu_body").hide()
}
function addPollCancel(a) {
    $("newpoll").hide();
    $("disc_modu_body").show()
}
function addPollSubmit() {
    $("newpollform").submit()
}
function addMorePollOptions(d) {
    var a = document.getElementById("newpoll");
    var h = a.getElementsByTagName("tr");
    var i = h.length;
    var e = i - 4;
    if (e > pollchoicemax) {
        d.parentNode.style.display = "none";
        return false
    }
    var g = h[i - 2];
    var f = document.createElement("tr");
    var c = document.createElement("td");
    var b = document.createElement("td");
    c.innerHTML = "Poll Option " + e + ":";
    b.innerHTML = "<input class='tx' type='text' name='option_" + e + "'/>";
    f.appendChild(c);
    f.appendChild(b);
    if (e == 10) {
        d.parentNode.parentNode.style.display = "none"
    }
    document.getElementById("newpolltable").insertBefore(f, g)
}
function addFolder(folderid) {
    var params = Object.clone(g_ajaxparams);
    params.action = "addchild";
    params.assetid = folderid;
    var name = "New Folder";
    var description = "Description of Folder";
    new Ajax.Request("ajax/discussionAjaxLogin.php", {
        method: "post",
        parameters: params,
        onSuccess: function (transport) {
            var result = eval("(" + transport.responseText + ")");
            if (result.ok) {
                if (result.data) {
                    Modal.showAlert(result.data);
                    renameFolder(result.data, name, description)
                }
            } else {
                Modal.showAlert(printLocalError((rslt.error_code || null), (rslt.msg || null), (rslt.feedback || null)))
            }
        },
        onFailure: function () {}
    })
}
function renameFolder(folderid, name, description) {
    var params = Object.clone(g_ajaxparams);
    params.action = "renamefolder";
    params.assetid = folderid;
    var name = prompt("Name:", name);
    var description = prompt("Description:", description);
    params.name = name;
    params.description = description;
    new Ajax.Request("ajax/discussionAjaxLogin.php", {
        method: "post",
        parameters: params,
        onSuccess: function (transport) {
            var result = eval("(" + transport.responseText + ")");
            if (result.ok) {
                document.location.reload()
            }
        },
        onFailure: function () {}
    })
}
function modAction(assetid, action, set, toggle) {
    var params = Object.clone(g_ajaxparams);
    params.action = action;
    params.assetid = assetid;
    params.set = set;
    new Ajax.Request("ajax/discussionAjaxLogin.php", {
        method: "post",
        parameters: params,
        onSuccess: function (transport) {
            var result = eval("(" + transport.responseText + ")");
            if (result.ok) {
                var span1 = document.getElementById(assetid + "_" + action).style.display = "none";
                var span2 = document.getElementById(assetid + "_" + toggle).style.display = "inline"
            }
        },
        onFailure: function () {}
    })
};
var divMessageHeaders = document.getElementById("messageHeaders");
var divMessageBody = document.getElementById("messageBody");
var divEmailStatus = document.getElementById("emailStatus");
var objAjax;
var activateAutoRefresh = false;
var checkNewMailInterval = 120 * 1000000;
var msgCheckTimer;
var msgCheckTimerFlag = true;
turnOnMessageChecking();

function turnOnMessageChecking() {
    msgCheckTimer = setInterval("refreshBoxes()", checkNewMailInterval);
    msgCheckTimerFlag = true
}
function turnOffMessageChecking() {
    clearInterval(msgCheckTimer);
    msgCheckTimerFlag = false
}
function refreshBoxes() {
    if (activateAutoRefresh) {
        checkNewEmails()
    }
}
function getEmailContent(messageId) {
    var params = Object.clone(g_ajaxparams);
    params.messageId = messageId;
    params.requestType = "GET_MESSAGE_FOR_ID";
    document.getElementById("emailStatus").innerHTML = "Loading...";
    new Ajax.Request(g_ajaxpath + "ajax/getEmail.php" + g_ajaxsuffix, {
        method: "post",
        parameters: params,
        onSuccess: function (message) {
            document.getElementById("emailStatus").innerHTML = "";
            var rslt = eval("(" + message.responseText + ")");
            if (rslt.ok) {
                document.getElementById("messageBody").innerHTML = rslt.messageBody;
                document.getElementById("messageId_" + messageId).className = "messageRead"
            }
        },
        onFailure: function () {}
    })
}
function getEmailHeaders(boxType) {
    var params = Object.clone(g_ajaxparams);
    params.requestType = "GET_MESSAGE_HEADERS_FOR_USER_INBOX";
    params.boxType = boxType;
    params.pageNo = document.getElementById("hdnPageNo").value;
    document.getElementById("hdnBoxType").value = boxType;
    document.getElementById("emailStatus").innerHTML = "Loading...";
    document.getElementById("messageBody").innerHTML = "";
    objAjax = new Ajax.Request(g_ajaxpath + "ajax/getEmail.php" + g_ajaxsuffix, {
        method: "post",
        parameters: params,
        onSuccess: function (message) {
            var rslt = eval("(" + message.responseText + ")");
            if (rslt.ok) {
                document.getElementById("emailStatus").innerHTML = "";
                document.getElementById("messageHeaders").innerHTML = rslt.message;
                if (rslt.mostRecentMessageId) {
                    document.getElementById("hdnMostRecentMessageId").value = rslt.mostRecentMessageId
                }
                setPagination(rslt.pageNo, rslt.nextButton);
                activateAutoRefresh = true;
                if (!msgCheckTimerFlag) {
                    turnOnMessageChecking()
                }
            }
        },
        onFailure: function () {}
    })
}
function composeEmail() {
    turnOffMessageChecking();
    var a;
    a = "To: <input type='text' id='emailTo' length='50' /> <br/> ";
    a += "Subject: <input type='text' id='emailSubject' length='50'/><br/>";
    document.getElementById("messageHeaders").innerHTML = a;
    a = "<textarea id=\"txtComposeBody\" rows='3' cols='40'></textarea>";
    a += "<input type='button' value='Send' onclick='sendComposedMessage();'";
    document.getElementById("messageBody").innerHTML = a
}
function sendComposedMessage() {
    var params = Object.clone(g_ajaxparams);
    params.emailTo = document.getElementById("emailTo").value;
    params.subject = document.getElementById("emailSubject").value;
    params.message = document.getElementById("txtComposeBody").value;
    params.requestType = "COMPOSED_MAIL";
    new Ajax.Request(g_ajaxpath + "ajax/getEmail.php" + g_ajaxsuffix, {
        method: "post",
        parameters: params,
        onSuccess: function (message) {
            var rslt = eval("(" + message.responseText + ")")
        },
        onFailure: function () {
            Modal.showAlert(g_js_strings.modal_messages_send.oopscompose)
        }
    })
}
function checkNewEmails() {
    var params = Object.clone(g_ajaxparams);
    params.requestType = "CHECK_NEW_MESSAGES";
    params.recentMessageReceived = document.getElementById("hdnMostRecentMessageId").value;
    params.boxType = document.getElementById("hdnBoxType").value;
    document.getElementById("emailStatus").innerHTML = "Checking for new mails...";
    objAjax = new Ajax.Request(g_ajaxpath + "ajax/getEmail.php" + g_ajaxsuffix, {
        method: "post",
        parameters: params,
        onSuccess: function (message) {
            var rslt = eval("(" + message.responseText + ")");
            if (rslt.ok) {
                if (rslt.newMailsArrived) {
                    getEmailHeaders(document.getElementById("hdnBoxType").value)
                }
            }
        },
        onFailure: function () {}
    })
}
function takeActionOnMessages() {
    var messageIdsSelected = messageIdsFromSelectedCheckBox();
    if (messageIdsSelected.length == 0) {
        return false
    }
    var actionChosen = document.getElementById("selAction").value;
    var params = Object.clone(g_ajaxparams);
    params.requestType = "ACTION_ON_MESSAGES";
    params.selectedAction = actionChosen;
    params.boxType = document.getElementById("hdnBoxType").value;
    params.selectedMessageIds = (messageIdsSelected).toString();
    objAjax = new Ajax.Request(g_ajaxpath + "ajax/getEmail.php" + g_ajaxsuffix, {
        method: "post",
        parameters: params,
        onSuccess: function (message) {
            var rslt = eval("(" + message.responseText + ")");
            if (rslt.ok) {
                if (actionChosen == "markRead") {
                    changeStylesForActions(messageIdsSelected, "messageRead")
                } else {
                    if (actionChosen == "markUnread") {
                        changeStylesForActions(messageIdsSelected, "messageUnread")
                    } else {
                        if (actionChosen == "delete") {
                            changeStylesForActions(messageIdsSelected, "messageDeleted")
                        }
                    }
                }
                restoreDefaultSettings(messageIdsSelected)
            }
        },
        onFailure: function () {}
    })
}
function setPagination(a, b) {
    document.getElementById("hdnPageNo").value = a;
    document.getElementById("pagination").style.display = "block";
    if (a == 1) {
        document.getElementById("prevPage").style.display = "none"
    } else {
        document.getElementById("prevPage").style.display = "block"
    }
    if (b) {
        document.getElementById("nextPage").style.display = "block"
    } else {
        document.getElementById("nextPage").style.display = "none"
    }
}
function getNextPage() {
    document.getElementById("hdnPageNo").value = parseInt(document.getElementById("hdnPageNo").value) + 1;
    getEmailHeaders(document.getElementById("hdnBoxType").value)
}
function getPrevPage() {
    document.getElementById("hdnPageNo").value = parseInt(document.getElementById("hdnPageNo").value) - 1;
    getEmailHeaders(document.getElementById("hdnBoxType").value)
}
function messageIdsFromSelectedCheckBox() {
    var c = document.getElementsByTagName("input");
    var b = new Array();
    for (var a = 0; a < c.length; a++) {
        if (c[a].type == "checkbox" && ((c[a].id).substring(0, 14) == "chk_messageId_") && (c[a].checked)) {
            b.push((c[a].id).substring(14))
        }
    }
    return b
}
function changeStylesForActions(b, a) {
    for (i = 0; i < b.length; i++) {
        document.getElementById("messageId_" + b[i]).className = a
    }
}
function restoreDefaultSettings(c) {
    for (var a = 0; a < c.length; a++) {
        var b = "chk_messageId_" + c[a];
        if (document.getElementById(b).checked) {
            document.getElementById(b).checked = false
        }
    }
    document.getElementById("selAction").options[0].selected = true
};

function openEmbassy() {
    var c = new Array();
    c.push("<div class='tabsbar clearfix'>");
    c.push("<a class='tab selected' ><span>");
    c.push(g_js_strings.commonstr.alliance);
    c.push("</span></a>");
    c.push("</div>");
    c.push("<div class='embassyallibutton clearfix'>");
    c.push("<a class='button25' onclick='Modal.hideModalAll();modal_alliance();return false;'><span>" + g_js_strings.openEmbassy.viewall + "</span></a>");
    c.push("</div>");
    c.push("<div class='embassyalliancewrap'>");
    c.push("<div class='encampedttl'>" + g_js_strings.openEmbassy.encampall + "</div>");
    c.push("<div class='embassyencampedwrap'>");
    var a = false;
    var h = new Array();
    h.push("<table cellpadding='0' cellspacing='0'><thead><tr><td class='from'>" + g_js_strings.openEmbassy.sentfrom + "</td><td class='upkeep'>" + g_js_strings.commonstr.upkeep + "</td><td class='action'>" + g_js_strings.commonstr.actions + "</td></tr></thead><tbody>");
    var f = Object.keys(seed.queue_atkinc);
    for (var d = 0; d < f.length; d++) {
        var e = seed.queue_atkinc[f[d]];
        if (parseInt(e.toCityId) == currentcityid && parseInt(e.marchStatus) == 2 && parseInt(e.fromCityId) != parseInt(currentcityid)) {
            a = true;
            h.push("<tr><td class='from'>(");
            h.push(e.fromXCoord + "," + e.fromYCoord + ")");
            if (seed.players) {
                if (seed.players["u" + e.fromPlayerId]) {
                    h.push(" - " + seed.players["u" + e.fromPlayerId].n)
                }
            }
            h.push("</td><td class='upkeep'>");
            var g = 0;
            for (var b = 1; b < 13; b++) {
                g += parseInt(e["unit" + b + "Return"]) * parseInt(unitupkeeps[b])
            }
            h.push(addCommas(g));
            h.push(" " + resourceinfo.rec1.toLowerCase() + "</td><td class='action'>");
            h.push("<a onclick='kickout_allies(" + e.marchId + "," + currentcityid + "," + e.fromPlayerId + "," + e.fromCityId + "," + g + ");return false;' class='button20'><span>" + g_js_strings.openEmbassy.senthome + "</span></a>");
            h.push("&nbsp;");
            h.push("</td></tr>")
        }
    }
    h.push("</tbody></table>");
    if (a) {
        c.push(h.join(""))
    } else {
        c.push("<div>" + g_js_strings.openEmbassy.noallcamp + "</div>")
    }
    c.push("</div>");
    c.push("</div>");
    $("modal_build_content").innerHTML = c.join("")
}
function kickout_allies(mid, cid, fromUid, fromCid, upkeep) {
    var params = Object.clone(g_ajaxparams);
    params.mid = mid;
    params.cid = cid;
    params.fromUid = fromUid;
    params.fromCid = fromCid;
    new Ajax.Request(g_ajaxpath + "ajax/kickoutReinforcements.php" + g_ajaxsuffix, {
        method: "post",
        parameters: params,
        onSuccess: function (transport) {
            var rslt = eval("(" + transport.responseText + ")");
            if (rslt.ok) {
                Modal.showAlert(g_js_strings.kickout_allies.troopshome);
                seed.resources["city" + currentcityid].rec1[3] = parseInt(seed.resources["city" + currentcityid].rec1[3]) - upkeep;
                Modal.hideModalAll();
                if (parseInt(fromUid) == parseInt(tvuid)) {
                    var curmarch = seed.queue_atkp["city" + fromCid]["m" + mid];
                    var marchtime = Math.abs(parseInt(curmarch.destinationUnixTime) - parseInt(curmarch.eventUnixTime));
                    curmarch.returnUnixTime = unixtime() + marchtime;
                    curmarch.marchStatus = 8
                }
                delete seed.queue_atkinc["m" + mid]
            } else {
                Modal.showAlert(printLocalError((rslt.error_code || null), (rslt.msg || null), (rslt.feedback || null)))
            }
        },
        onFailure: function () {}
    })
};
var cm = cm || {};
var cm = function (b) {
        var d = b.error = b.error || {};
        var a = 0;
        var e = 5;

        function c() {
            if (a++ < e) {
                AjaxCall.gPostRequest("ajax/postError.php", {
                    window: this.window
                }, function () {}, function () {})
            }
        }
        return b
    }(cm);
cm.log = function () {
    return {
        err: function (a) {
            if (a.ok == false && a.msg) {
                Modal.showAlert(a.msg, "Ok")
            }
        },
        l: function (a) {
            if (window.console && typeof console.log == "function") {
                console.log(a)
            }
            return a
        },
        convertToHMS: function (g, e) {
            e = e == undefined ? true : false;
            var c = e ? " " : "";
            if (g <= 0) {
                return "now"
            }
            var a = parseInt(g / 3600);
            var b = parseInt((g - (a * 3600)) / 60);
            var f = parseInt((g - (a * 3600) - (b * 60)));
            return (a > 0 ? a + c + "h " : "") + (b > 0 ? b + c + "m " : "") + f + c + "s"
        }
    }
}();
cm.test = function () {
    return {
        all: function () {
            for (var a in cm) {
                if (cm.hasOwnProperty(a) && cm[a].test) {
                    cm[a].test()
                }
            }
        },
        go: function (b, c, f) {
            var e = c == f;
            var d = 50 - b.length;
            for (var a = 0; a < d; a++) {
                b += " "
            }
            cm.log.l(b + (e ? "PASS" : "FAIL"));
            if (!e) {
                cm.log.l("got " + c + " but expected " + f)
            }
        }
    }
}();
var cm = cm || {};
var cm = function (b) {
        var d = b.feedTracking = b.feedTracking || {};
        var c = {};
        var a = "";
        d.setTrue = function () {
            c[a] = true
        };
        d.setFalse = function (e) {
            a = e;
            c[e] = false
        };
        d.get = function (e) {
            return c[e]
        };
        d.button = function (e, f) {
            if (c[e] !== false) {
                return f
            } else {
                return "<a class='buttonDown25' onclick='Modal.hideModal(); return false;'><span>" + g_js_strings.commonstr.ok + "</span></a>"
            }
        };
        return b
    }(cm);
var cm = cm || {};
var cm = function (b) {
        var c = b.flash = b.flash || {};
        var a = 2;
        c.setFTFlag = function (d) {
            a = d
        };
        c.getFTFlag = function (d) {
            return a
        };
        c.log = function (d) {
            cm.log.l("Flash App says: " + d)
        };
        c.close = function () {
            Modal.hideModal()
        };
        c.getWindow = function () {
            return window
        };
        c.getVars = function () {
            return {
                g_ajaxparams: g_ajaxparams,
                g_js_strings: g_js_strings,
                servicePath: g_servcallback_url + "amfphp/gateway.php",
                g_ajaxpath_base: g_servcallback_url
            }
        };
        c.getBaseDir = function () {
            return stimgUrl + "flash/"
        };
        c.incrementItem = function (d) {
            cm.mww.incrementItem(d)
        };
        c.postToProfile = function (d, e) {
            pid = "10001";
            if (!d) {
                d = "item"
            }
            if (!e) {
                e = 202
            }
            c.hideFlash();
            cm.mww.mmb_share(d, e, cm.flash.showFlash)
        };
        c.modal_getgems = function () {
            modal_getgems()
        };
        c.gameWon = function (e, d) {
            cm.flash.incrementItem(d);
            e = parseInt(e);
            gems = parseInt(seed.player.gems);
            if (isNaN(e) || isNaN(gems)) {
                return
            }
            if (1062 == parseInt(d)) {
                e -= 100
            }
            gems -= e;
            if (gems < 0) {
                gems = 0
            }
            seed.player.gems = gems;
            jQuery("#kochead_gems").html(gems)
        };
        c.hideFlash = function () {
            if ($$(".modal_mww")[0]) {
                $$(".modal_mww")[0].style.top = "2000px"
            }
        };
        c.showFlash = function () {
            var d = window.jQuery ? jQuery(".kocNavButtonContainer").offset().top - 13 : 225;
            cm.log.l("top=" + d);
            if ($$(".modal_mww")[0] && !$$("#modal_getgemsdiv")[0]) {
                $$(".modal_mww")[0].style.top = d + "px"
            }
        };
        return b
    }(cm);
var cm = function (o) {
        var n = o.flash_init = o.flash_init || {};
        var h = (navigator.appVersion.indexOf("MSIE") != -1) ? true : false;
        var i = (navigator.appVersion.toLowerCase().indexOf("win") != -1) ? true : false;
        var f = (navigator.userAgent.indexOf("Opera") != -1) ? true : false;

        function g() {
            var p;
            var q;
            var r;
            try {
                q = new ActiveXObject("ShockwaveFlash.ShockwaveFlash.7");
                p = q.GetVariable("$version")
            } catch (r) {}
            if (!p) {
                try {
                    q = new ActiveXObject("ShockwaveFlash.ShockwaveFlash.6");
                    p = "WIN 6,0,21,0";
                    q.AllowScriptAccess = "always";
                    p = q.GetVariable("$version")
                } catch (r) {}
            }
            if (!p) {
                try {
                    q = new ActiveXObject("ShockwaveFlash.ShockwaveFlash.3");
                    p = q.GetVariable("$version")
                } catch (r) {}
            }
            if (!p) {
                try {
                    q = new ActiveXObject("ShockwaveFlash.ShockwaveFlash.3");
                    p = "WIN 3,0,18,0"
                } catch (r) {}
            }
            if (!p) {
                try {
                    q = new ActiveXObject("ShockwaveFlash.ShockwaveFlash");
                    p = "WIN 2,0,0,11"
                } catch (r) {
                    p = -1
                }
            }
            return p
        }
        function m() {
            var v = -1;
            if (navigator.plugins != null && navigator.plugins.length > 0) {
                if (navigator.plugins["Shockwave Flash 2.0"] || navigator.plugins["Shockwave Flash"]) {
                    var u = navigator.plugins["Shockwave Flash 2.0"] ? " 2.0" : "";
                    var p = navigator.plugins["Shockwave Flash" + u].description;
                    var t = p.split(" ");
                    var r = t[2].split(".");
                    var w = r[0];
                    var q = r[1];
                    var s = t[3];
                    if (s == "") {
                        s = t[4]
                    }
                    if (s[0] == "d") {
                        s = s.substring(1)
                    } else {
                        if (s[0] == "r") {
                            s = s.substring(1);
                            if (s.indexOf("d") > 0) {
                                s = s.substring(0, s.indexOf("d"))
                            }
                        }
                    }
                    var v = w + "." + q + "." + s
                }
            } else {
                if (navigator.userAgent.toLowerCase().indexOf("webtv/2.6") != -1) {
                    v = 4
                } else {
                    if (navigator.userAgent.toLowerCase().indexOf("webtv/2.5") != -1) {
                        v = 3
                    } else {
                        if (navigator.userAgent.toLowerCase().indexOf("webtv") != -1) {
                            v = 2
                        } else {
                            if (h && i && !f) {
                                v = g()
                            }
                        }
                    }
                }
            }
            return v
        }
        function c(u, s, r) {
            versionStr = m();
            if (versionStr == -1) {
                return false
            } else {
                if (versionStr != 0) {
                    if (h && i && !f) {
                        tempArray = versionStr.split(" ");
                        tempString = tempArray[1];
                        versionArray = tempString.split(",")
                    } else {
                        versionArray = versionStr.split(".")
                    }
                    var t = versionArray[0];
                    var p = versionArray[1];
                    var q = versionArray[2];
                    if (t > parseFloat(u)) {
                        return true
                    } else {
                        if (t == parseFloat(u)) {
                            if (p > parseFloat(s)) {
                                return true
                            } else {
                                if (p == parseFloat(s)) {
                                    if (q >= parseFloat(r)) {
                                        return true
                                    }
                                }
                            }
                        }
                    }
                    return false
                }
            }
        }
        function d(q, p) {
            if (q.indexOf("?") != -1) {
                return q.replace(/\?/, p + "?")
            } else {
                return q + p
            }
        }
        function k(p) {
            if (p.indexOf("swf") > -1) {
                return cm.flash.getBaseDir() + p
            } else {
                return p
            }
        }
        function j(t, s, p) {
            var r = "";
            if (h && i && !f) {
                r += "<object ";
                for (var q in t) {
                    r += q + '="' + t[q] + '" '
                }
                r += ">";
                for (var q in s) {
                    r += '<param name="' + q + '" value="' + k(s[q]) + '" /> '
                }
                r += "</object>"
            } else {
                r += "<embed ";
                for (var q in p) {
                    r += q + '="' + p[q] + '" '
                }
                r += "> </embed>"
            }
            cm.log.l("printed: " + r);
            b(r);
            cm.flash.showFlash()
        }
        function b(p) {
            document.getElementById("modal_mmb").innerHTML = p
        }
        function e() {
            var p = a(arguments, ".swf", "movie", "clsid:d27cdb6e-ae6d-11cf-96b8-444553540000", "application/x-shockwave-flash");
            p.embedAttrs.src = cm.flash.getBaseDir() + p.embedAttrs.src;
            j(p.objAttrs, p.params, p.embedAttrs)
        }
        function l() {
            var p = a(arguments, ".dcr", "src", "clsid:166B1BCA-3F9C-11CF-8075-444553540000", null);
            p.embedAttrs.src = cm.flash.getBaseDir() + p.embedAttrs.src;
            j(p.objAttrs, p.params, p.embedAttrs)
        }
        function a(q, t, v, s, w) {
            var p = new Object();
            p.embedAttrs = new Object();
            p.params = new Object();
            p.objAttrs = new Object();
            for (var r = 0; r < q.length; r = r + 2) {
                var u = q[r].toLowerCase();
                switch (u) {
                case "classid":
                    break;
                case "pluginspage":
                    p.embedAttrs[q[r]] = q[r + 1];
                    break;
                case "src":
                case "movie":
                    q[r + 1] = d(q[r + 1], t);
                    p.embedAttrs.src = q[r + 1];
                    p.params[v] = q[r + 1];
                    break;
                case "onafterupdate":
                case "onbeforeupdate":
                case "onblur":
                case "oncellchange":
                case "onclick":
                case "ondblclick":
                case "ondrag":
                case "ondragend":
                case "ondragenter":
                case "ondragleave":
                case "ondragover":
                case "ondrop":
                case "onfinish":
                case "onfocus":
                case "onhelp":
                case "onmousedown":
                case "onmouseup":
                case "onmouseover":
                case "onmousemove":
                case "onmouseout":
                case "onkeypress":
                case "onkeydown":
                case "onkeyup":
                case "onload":
                case "onlosecapture":
                case "onpropertychange":
                case "onreadystatechange":
                case "onrowsdelete":
                case "onrowenter":
                case "onrowexit":
                case "onrowsinserted":
                case "onstart":
                case "onscroll":
                case "onbeforeeditfocus":
                case "onactivate":
                case "onbeforedeactivate":
                case "ondeactivate":
                case "type":
                case "codebase":
                case "id":
                    p.objAttrs[q[r]] = q[r + 1];
                    break;
                case "width":
                case "height":
                case "align":
                case "vspace":
                case "hspace":
                case "class":
                case "title":
                case "accesskey":
                case "name":
                case "tabindex":
                    p.embedAttrs[q[r]] = p.objAttrs[q[r]] = q[r + 1];
                    break;
                default:
                    p.embedAttrs[q[r]] = p.params[q[r]] = q[r + 1]
                }
            }
            p.objAttrs.classid = s;
            if (w) {
                p.embedAttrs.type = w
            }
            return p
        }
        n.exe = function () {
            var q = c(1, 1, 1);
            cm.log.l("flash installed=" + q);
            if (q == false) {
                var s = '<div class="flashError">			    <div class="headerSection">			        <a class="closeButton" onclick="Modal.hideModal();return false;">&nbsp;</a>			    </div>			    <div class="bodySection">			        <div class="errorText">Merlin&#39;s Wondrous Wheel needs Flash to run!</div>			        <a class="fakeButton" href="http://www.adobe.com/go/getflashplayer" target="_blank">&nbsp;</a>			    </div>			    </div>			    ';
                b(s)
            } else {
                var p = [];
                for (var r in g_ajaxparams) {
                    p.push(r + "=" + g_ajaxparams[r])
                }
                p.push("callPath=" + g_servcallback_url + "amfphp/gateway.php");
                p.push("absPath=" + cm.flash.getBaseDir());
                e("codebase", "http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=10,0,0,0", "width", "743", "height", "563", "src", cm.flash.getBaseDir() + "mww", "quality", "high", "pluginspage", "http://www.adobe.com/go/getflashplayer", "align", "middle", "play", "true", "loop", "true", "scale", "showall", "wmode", "transparent", "devicefont", "false", "id", "WheelMiniGame", "bgcolor", "#000000", "name", "WheelMiniGame", "menu", "true", "allowFullScreen", "false", "allowScriptAccess", "always", "movie", "mww", "flashvars", p.join("&"), "salign", "")
            }
        };
        return o
    }(cm);

function CM_Modal_hideModalAll() {
    Modal.hideModalAll()
}
function CM_MWW_gameLoaded() {
    var a = document.getElementsByName("WheelMiniGame");
    if (a.length) {
        a[0].start()
    }
}
function CM_MMW_getSettings() {
    var a = document.getElementsByName("WheelMiniGame");
    if (a.length) {
        a = a[0]
    } else {
        cm.log.l("MMW is not found.");
        return
    }
    a.modal_setSkins({
        Wheelshadow: "_plh_wheelShadow",
        Winscreen: "_plh_winScreen",
        Wheel: "_plh_wheel",
        Playbtn_state1: "_plh_playBtn",
        Title_field: "tf_title",
        Btn_field1: "tf_playBtn_state1",
        Btn_field2: "tf_playBtn_state2",
        Btn_field3: "tf_playBtn_state3",
        VectorMask: "_plh_mask",
        Closebutton: "closeBtn",
        PointerPlaceholder: "_plh_pointer",
        Win_txt: "tf_ItemWin",
        WinItemLabel: "tf_itemName",
        WinDescription: "tf_itemDescription",
        Win_item: "_plh_icon",
        GemLabel: "tf_gemCount",
        edge_offset: 17,
        spoke_total: 12,
        clockwise: 0
    });
    a.modal_setLocalization({
        winTitleTxt_localized: g_js_strings.modal_mmb.youwon,
        spinTxt_localized: g_js_strings.modal_mmb.spin,
        gemsTxt_localized: g_js_strings.commonstr.gems,
        buyGems_localized: g_js_strings.modal_mmb.buymoregems
    });
    a.modal_setIcons({
        "1018": "Class_1018",
        "1048": "Class_1048",
        "1062": "Class_1062",
        "1300": "Class_1300",
        "1321": "Class_1321",
        "1410": "Class_1410",
        "142": "Class_142",
        "211": "Class_211",
        "261": "Class_261",
        "271": "Class_271",
        "55": "Class_55",
        "931": "Class_931"
    })
};
var cm = cm || {};
cm.guardianArmorModel = function (i) {
    var v = null;
    var m = null;
    var r = 0;
    var b = [];
    var y = {};
    var g = {};
    var h = {};
    var k = {
        equip: "eqp",
        unequip: "ueqp",
        drop: "del"
    };

    function l() {
        p();
        if (!seed.inventory) {
            seed.inventory = []
        }
        m = seed.inventory;
        var z = t();
        if (seed.inventory_slots) {
            r = seed.inventory_slots - z
        } else {
            seed.inventory_slots = z
        }
    }
    function p() {
        if (!cm.guardianModalModel.gObj().armor) {
            cm.guardianModalModel.gObj().armor = {}
        }
        v = cm.guardianModalModel.gObj().armor;
        seed.inventory_slots = t() + r;
        q()
    }
    function t() {
        var A = 0;
        for (var z = 0; z < seed.guardian.length; z++) {
            if (seed.guardian[z].level > 0) {
                A++
            }
        }
        return A + 4
    }
    function x(B, A, D, C) {
        if (A == k.equip) {
            var z = cm.guardianConst.items[B]["type"];
            if (v[z]) {
                d(v[z]);
                j(v[z])
            }
            w(B);
            c(B)
        } else {
            if (A == k.unequip) {
                j(B);
                d(B)
            } else {
                if (A == k.drop && D) {
                    if (D == cm.guardianConst.itemHolder.inventory) {
                        w(B)
                    } else {
                        if (D == cm.guardianConst.itemHolder.equipment) {
                            j(B)
                        }
                    }
                }
            }
        }
        q();
        a();
        C({
            ok: true
        })
    }
    function c(A) {
        var z = cm.guardianConst.items[A]["type"];
        v[z] = A
    }
    function j(A) {
        var z = cm.guardianConst.items[A]["type"];
        if (v[z]) {
            delete v[z]
        }
    }
    function d(E) {
        var B = Object.keys(cm.guardianConst.armorAttr);
        var C = B.indexOf(cm.guardianConst.items[E]["type"]);
        for (var A = 0; A < m.length; A++) {
            var z = cm.guardianConst.items[m[A]]["type"];
            var D = B.indexOf(z);
            if (C == D) {
                if (parseInt(m[A]) >= parseInt(E)) {
                    m.splice(A, 0, E);
                    return
                }
            } else {
                if (C < D) {
                    m.splice(A, 0, E);
                    return
                }
            }
        }
        m.push(E)
    }
    function w(z) {
        if (m.indexOf(z) != -1) {
            m.splice(m.indexOf(z), 1)
        }
    }
    function s(B) {
        var z = B.split(" ")[2].toLowerCase();
        var A = B.split(" ")[0].replace("+", "").replace("%", "");
        b = [z, parseInt(A)]
    }
    function q() {
        if (Object.keys(v).length == 4) {
            for (var A = 0; A < cm.guardianConst.bonusSet.length; A++) {
                var C = cm.guardianConst.bonusSet[A]["ids"];
                for (var z = 0; z < C.length; z++) {
                    var B = cm.guardianConst.items[C[z]]["type"];
                    if (v[B] != C[z]) {
                        break
                    }
                    if (z == C.length - 1) {
                        h.data = cm.guardianConst.bonusSet[A]["bonus"];
                        h.text = u(A);
                        return
                    }
                }
            }
        }
        h.data = [];
        h.text = g_js_strings.guardian.setBonus.notavailable
    }
    function u(A) {
        var z = cm.guardianConst.bonusSet[A]["name"].replace(" ", "_");
        return g_js_strings.guardian.setBonus[z]
    }
    function a() {
        for (var A in cm.guardianConst.armorAttr) {
            var z = cm.guardianConst.armorAttr[A];
            if (v[A]) {
                y[z] = cm.guardianConst.items[v[A]]["bonus"];
                g[z] = cm.guardianConst.items[v[A]]["bonus"]
            } else {
                y[z] = 0;
                g[z] = 0
            }
            if (z == b[0]) {
                y[z] += b[1]
            }
            if (z == h.data[0]) {
                y[z] += h.data[1]
            }
        }
    }
    function f(A, B) {
        var z = false;
        if (m.indexOf(A) == -1) {
            B(o(g_js_strings.guardian_err.missItemFrInvt))
        } else {
            if (cm.guardianModalModel.upgrading()) {
                B(o(g_js_strings.guardian_err.upgrading))
            } else {
                if (m.length > seed.inventory_slots && v[cm.guardianConst.items[A]["type"]]) {
                    B(o(g_js_strings.guardian_err.invtFullWhenEquip))
                } else {
                    z = true
                }
            }
        }
        return z
    }
    function e(A, B) {
        var z = false;
        if (!v[cm.guardianConst.items[A]["type"]]) {
            B(o(g_js_strings.guardian_err.missItemFrEquip))
        } else {
            if (cm.guardianModalModel.upgrading()) {
                B(o(g_js_strings.guardian_err.upgrading))
            } else {
                if (m.length >= seed.inventory_slots) {
                    B(o(g_js_strings.guardian_err.invtFullWhenUnequip))
                } else {
                    z = true
                }
            }
        }
        return z
    }
    function n(A, C, B) {
        var z = false;
        if (C == cm.guardianConst.itemHolder.inventory) {
            if (m.indexOf(A) == -1) {
                B(o(g_js_strings.guardian_err.missItemFrInvt))
            } else {
                z = true
            }
        } else {
            if (C == cm.guardianConst.itemHolder.equipment) {
                if (!v[cm.guardianConst.items[A]["type"]]) {
                    B(o(g_js_strings.guardian_err.missItemFrEquip))
                } else {
                    if (cm.guardianModalModel.upgrading()) {
                        B(o(g_js_strings.guardian_err.upgrading))
                    } else {
                        z = true
                    }
                }
            }
        }
        return z
    }
    function o(z) {
        return {
            ok: false,
            msg: z
        }
    }
    return {
        init: l,
        refresh: p,
        addSlots: function (z) {
            r += (z) ? parseInt(z) : 1
        },
        addInvtItems: function (z) {
            for (var A = 0; A < z.length; A++) {
                d(z[A])
            }
        },
        setBoosts: function (z) {
            if (z.cl3) {
                s(z.cl3);
                a()
            }
        },
        getEquips: function () {
            return v
        },
        getInvItems: function () {
            return m
        },
        getTotalBoosts: function () {
            return y
        },
        getEquipBoosts: function () {
            return g
        },
        getBonus: function () {
            return h
        },
        getInvSlots: function () {
            return seed.inventory_slots
        },
        equipItem: function (z, A) {
            if (f(z, A)) {
                x(z, k.equip, null, A)
            }
        },
        unEquipItem: function (z, A) {
            if (e(z, A)) {
                x(z, k.unequip, null, A)
            }
        },
        dropItem: function (z, B, A) {
            if (n(z, B, A)) {
                x(z, k.drop, B, A)
            }
        }
    }
}(jQuery);
var cm = cm || {};
cm.guardianConst = {
    types: ["wood", "ore"],
    bdgTypes: {
        wood: 50,
        ore: 51
    },
    items: {
        "2100": {
            type: "helm",
            name: "Simple Helm of Sustenance",
            bonus: 1
        },
        "2120": {
            type: "guantlets",
            name: "Simple Gloves of Sustenance",
            bonus: 1
        },
        "2140": {
            type: "chest",
            name: "Simple Mail of Sustenance",
            bonus: 1
        },
        "2160": {
            type: "greaves",
            name: "Simple Boots of Sustenance",
            bonus: 1
        },
        "2202": {
            type: "helm",
            name: "Durable Helm of Offense",
            bonus: 1
        },
        "2222": {
            type: "guantlets",
            name: "Durable Gloves of Offense",
            bonus: 3
        },
        "2242": {
            type: "chest",
            name: "Durable Mail of Offense",
            bonus: 2
        },
        "2262": {
            type: "greaves",
            name: "Durable Boots of Offense",
            bonus: 2
        }
    },
    armorAttr: {
        helm: "hp",
        guantlets: "atk",
        chest: "def",
        greaves: "spd",
        resource: "res"
    },
    bonusSet: [{
        name: "simple sustenance",
        ids: ["2100", "2120", "2140", "2160"],
        bonus: ["res", 2]
    }, {
        name: "durable offense",
        ids: ["2202", "2222", "2242", "2262"],
        bonus: ["atk", 5]
    }],
    itemHolder: {
        inventory: "inv",
        equipment: "eqp"
    },
    switchMode: {
        choose: "c",
        transform: "t"
    },
    transformItem: {
        id: "2001"
    }
};
cm.guardianController = function (g) {
    function e(m) {
        if (m.ok !== false || m.building == false) {
            seed.queue_con["city" + currentcityid] = [];
            cm.guardianModalModel.open({
                onOpen: function () {
                    Modal.showAlert(g_js_strings.guardian.cancel);
                    cm.guardianModalModel.setUpgrade(false);
                    cm.guardianCity.rerender(true)
                }
            })
        }
    }
    var d = function () {};
    var h = "";
    var l;

    function j(m) {
        g(".garbage").hide();
        d(h, cm.guardianModalView.renderItems)
    }
    function b(q) {
        var p = q.target.id;
        h = g("#" + p).attr("inventory_id");
        var m = p.indexOf("eq_") > -1;
        var n = m ? ".equipment" : ".inventory";
        var o = m ? ".inventory" : ".equipment";
        d = m ? cm.guardianArmorModel.unEquipItem : cm.guardianArmorModel.equipItem;
        l = m ? cm.guardianConst.itemHolder.equipment : cm.guardianConst.itemHolder.inventory;
        g(n).css("zIndex", 303000);
        g(o).css("zIndex", 302000);
        g(".garbage").show().droppable({
            drop: c
        })
    }
    function c(m) {
        cm.guardianArmorModel.dropItem(h, l, cm.guardianModalView.renderItems);
        g(".garbage").hide()
    }
    function f() {
        cm.ModalManager.close();
        cm.guardianModalView.rerender()
    }
    function k() {
        cm.ModalManager.alert({
            exe: function m() {
                cm.guardianModalModel.release(f)
            },
            text: g_js_strings.guardian.release,
            button_text: g_js_strings.guardian.release_text
        })
    }
    function i() {
        cm.guardianModalModel.upgrade()
    }
    function a() {
        cm.guardianTransformView.render(true)
    }
    return {
        cancel: function () {
            AjaxCall.gPostRequest("ajax/_dispatch.php", {
                ctrl: "Guardian",
                action: "cancelConstruction",
                cityId: currentcityid,
                tvuid: tvuid
            }, e)
        },
        bind: function () {
            g(".guardianModal .cancelGuardian").unbind("click").bind("click", cm.guardianModalView.proposeCancel);
            g(".guardianModal .upr").unbind("click").bind("click", i)
        },
        bind_transform: function () {
            g(".guardianModal .non_desat .release").unbind("click").bind("click", k);
            g(".guardianModal .non_desat .transform").unbind("click").bind("click", cm.guardianTransformView.render)
        },
        equipment: function () {
            g(".guardianModal .inventory .item img, .guardianModal .equipment img").draggable({
                stop: j,
                start: b,
                zIndex: 800000
            })
        },
        askForHelpClicked: function (o) {
            var n = parseInt(cm.guardianModalModel.getDynamics().time);
            if (g(o).is(":checked")) {
                var m = Math.max(600, parseInt(n * 0.1));
                n = (n - m) < 0 ? 0 : (n - m)
            }
            cm.guardianModalModel.updateUprTime(n)
        }
    }
}(jQuery);
cm.guardianItem = function (f) {
    var e = "";
    var d = false;

    function h() {
        if (parseInt(seed.items.i2000) <= 0) {
            cm.log.l("You have 0 of those items.")
        }
        e = f(".guardian_item input").val();
        if (e.length <= 0) {
            cm.ModalManager.close();
            Modal.showAlert(g_js_strings.guardian.nameEmpty)
        } else {
            if (e.indexOf(" ") > -1) {
                cm.ModalManager.close();
                Modal.showAlert(g_js_strings.guardian.nospace)
            } else {
                AjaxCall.gPostRequest("ajax/_dispatch.php", {
                    ctrl: "Guardian",
                    action: "rename",
                    name: e,
                    cityId: currentcityid,
                    tvuid: tvuid
                }, c)
            }
        }
    }
    function g(i) {
        if (i.indexOf("Please create a name") == 0) {
            return g_js_strings.guardian.create
        } else {
            return i
        }
    }
    function c(i) {
        if (!i.ok) {
            cm.ModalManager.close();
            Modal.showAlert(g(i.msg));
            return false
        }
        if (parseInt(seed.items.i2000) > 0) {
            seed.items.i2000 -= 1
        }
        ksoItems[2000].subtract();
        cm.ModalManager.close();
        cm.guardianModalModel.setTitle(e);
        Modal.hideModal();
        if (d) {
            cm.InventoryView.openInventory()
        }
    }
    function b() {
        return "<div class='title'></div><div class='description'></div><input type='text' id='name' maxlength='15' /><div class='name_item'></div><div class='count'></div><div class='use'></div>"
    }
    function a() {
        var i = g_js_strings.guardian_item;
        for (var j in i) {
            f(".guardian_item ." + j).html(i[j])
        }
        f(".count").html(seed.items.i2000);
        f(".guardian_item .use").unbind("click").bind("click", function () {
            h()
        })
    }
    return {
        render: function (i) {
            if (!seed.items.i2000 || parseInt(seed.items.i2000) <= 0) {
                Modal.showAlert(g_js_strings.guardian.donthave);
                return false
            }
            d = i === true;
            if (parseInt(cm.guardianModalModel.getLevel()) == 0) {
                Modal.showAlert(g_js_strings.guardian.changeName);
                return false
            }
            cm.ModalManager.add({
                body: b(),
                closeNow: true,
                show: a,
                "class": "guardian_item",
                curtain: true,
                width: 360,
                height: 250,
                left: 225,
                top: 155
            })
        }
    }
}(jQuery);
cm.gtype_map = {
    wood: "01",
    ore: "02"
};
cm.lev_map = {
    "0": "build_here",
    "1": "lvl1-3_normal",
    "2": "lvl1-3_normal",
    "3": "lvl1-3_normal",
    "4": "lvl4-5_normal",
    "5": "lvl4-5_normal",
    "6": "lvl6-9_normal",
    "7": "lvl6-9_normal",
    "8": "lvl6-9_normal",
    "9": "lvl6-9_normal",
    "10": "lvl10_normal",
    "11": "lvl10_normal",
    "12": "lvl10_normal"
};
cm.status_map = {
    "0": "",
    normal: "normal",
    damaged: "damaged"
};
cm.guardianCity = function (d) {
    function e() {
        if (!buildingcost.bdg50) {
            buildingcost.bdg50 = ["Guardian", 200, 3000, 2500, 100, 0, 0, 900,
            {
                b19: [0, -2]
            }, [], "The guardian can be built from level 1 to 10."]
        }
        if (d(".bldg_guardian_0").length == 0) {
            b()
        }
    }
    function b(j) {
        var i = cm.gtype_map[cm.guardianModalModel.getType()];
        var h = cm.status_map[status] == "" ? "" : "_";
        var g = parseInt(cm.guardianModalModel.gObj().level) + (j ? 1 : 0);
        var f = stimgUrl + "img/guardian/guardian" + (i || "02") + "_" + (cm.guardianModalModel.upgrading() ? "build_cleaned.gif" : cm.lev_map[g] + ".png");
        cm.log.l("cm.guardianModalModel.getType()=" + cm.guardianModalModel.getType());
        d(".bldg_guardian_0").remove();
        d("#citymap").append("<div class='guardianHover bldg_guardian_0' onmouseout='removeTooltip();'  onmouseover=\"showClearingTooltip(this,event,'slot_500');\"><img src='" + f + "'/></div>");
        d(".guardianHover").hover(a, c).unbind("click").bind("click", cm.guardianModalModel.open)
    }
    function a() {
        var f = d(this).find("img");
        var g = f.attr("src");
        f.attr("src", g.replace("guardian/", "guardian/hover_states_png8/"))
    }
    function c() {
        var f = d(this).find("img");
        var g = f.attr("src");
        f.attr("src", g.replace("guardian/hover_states_png8/", "guardian/"))
    }
    return {
        init: function () {
            e()
        },
        rerender: function (f, g) {
            if (f === true || cm.guardianModalModel.isGuardian(parseInt(f[0][0]))) {
                d(".bldg_guardian_0").remove();
                b(g)
            }
        }
    }
}(jQuery);
cm.guardianModalModel = function (e) {
    var m = {
        basic: false,
        time: false
    };
    var l = {
        barTitle: "loading...",
        name: "None",
        cl0: "",
        ul0: "",
        description: "Loading...",
        cl2: "loading...",
        ul2: "loading...",
        cl3: "loading...",
        ul3: "loading...",
        time: 123434,
        upgrade: "false",
        required: {
            food: 0,
            wood: 0,
            stone: 0,
            ore: 0
        },
        youOwn: {
            food: 0,
            wood: 0,
            stone: 0,
            ore: 0
        }
    };
    var p = {
        upgrade: g_js_strings.commonstr.upgrade,
        cl1: g_js_strings.guardian.cl1,
        ul1: g_js_strings.guardian.ul1,
        askForHelp: g_js_strings.guardian.askForHelp,
        main: g_js_strings.guardian.main
    };

    function h(q) {
        return parseInt(Math.random() * q)
    }
    function f(q) {
        q.cl0 = h(12);
        q.ul0 = parseInt(q.cl0) + 1;
        cm.guardianModalModel.gObj().level = q.cl0;
        cm.guardianModalModel.gObj().status = h(10) > 5 ? "0" : "1"
    }
    function c(r) {
        var q = cm.guardianModalModel.upgrading();
        return (q ? g_js_strings.guardian.upgradeStr : g_js_strings.guardian.timeStr) + ": <span class='timeChange'>" + timestr(parseInt(r)) + "</span>" + (q ? "<div class='cancelGuardian'>Cancel</div>" : "")
    }
    function j() {
        l.youOwn.food -= l.required.food;
        l.youOwn.wood -= l.required.wood;
        l.youOwn.stone -= l.required.stone;
        l.youOwn.ore -= l.required.ore
    }
    function b(q) {
        cm.util.clearDouble("guardian");
        cm.log.err(q);
        var r = parseInt(cm.guardianModalModel.gObj().level);
        if (r == 9) {
            seed.items.i401 -= 1
        }
        ksoItems[401].subtract();
        if (q.time) {
            cm.guardianModalModel.setUpgrade(true);
            if (q.guardian) {
                l = q.guardian
            }
            j();
            a(q.time, q.buildingId);
            if (e(".cmModalContainer .askFriends").is(":checked")) {
                build_gethelp(q.buildingId)
            }
            cm.ModalManager.close();
            cm.guardianCity.rerender(true)
        }
    }
    function a(u, q) {
        var r = cm.guardianModalModel.gObj().level;
        var s = cm.guardianModalModel.getType();
        var t = cm.guardianConst.bdgTypes[s.toLowerCase()];
        seed.queue_con["city" + currentcityid].push([t, parseInt(r) + 1, parseInt(q), unixtime(), unixtime() + parseInt(u), 0, u, 500]);
        queue_changetab_building()
    }
    var d = 0;

    function o() {
        if (unixtime() % 10 == 0 && d < 30) {
            return true
        }
    }
    function i(q) {
        k = true;
        AjaxCall.gPostRequest("ajax/_dispatch.php", {
            ctrl: "Guardian",
            action: "build",
            cityId: currentcityid,
            tvuid: tvuid,
            type: n || cm.guardianModalModel.getType(),
            permission: q === true ? 1 : 0
        }, b)
    }
    var k = false;
    var g = 100;
    var n = false;
    return {
        whatsBuilding: function () {
            var s = seed.queue_con;
            if (s) {
                var r = s["city" + currentcityid];
                if (r) {
                    var q = s["city" + currentcityid][0];
                    if (q) {
                        return parseInt(q)
                    }
                }
            }
        },
        isGuardian: function (q) {
            return q == 50 || q == 51
        },
        update: function (q) {
            if (cm.guardianModalModel.gObj().upgrading) {
                k = true
            }
            g = q;
            var r = cm.guardianModalModel.whatsBuilding();
            if (e(".guardianModal .timeChange").length == 0 && (r == undefined || cm.guardianModalModel.isGuardian(r))) {
                e(".guardianModal .time").html(c(q))
            }
            if (cm.guardianModalModel.isGuardian(r)) {
                e(".guardianModal .timeChange").html(timestr(q))
            }
        },
        updateUprTime: function (q) {
            g = q;
            e(".guardianModal .timeChange").html(timestr(q))
        },
        gObj: function () {
            return seed.guardian.filter(function (q) {
                return currentcityid == q.cityId
            })[0]
        },
        setTitle: function (q) {
            l.barTitle = q + "  Level " + cm.guardianModalModel.gObj().level;
            l.name = q
        },
        getDynamics: function () {
            return l
        },
        getData: function () {
            var q = e.extend({}, p, l);
            if (m.time) {
                l.time = 10000
            }
            q.time = cm.guardianModalModel.update(l.time);
            q.barTitle = fUp(q.type || "") + " Guardian Level " + q.cl0;
            if (m.basic) {
                f(q)
            }
            return q
        },
        setChoose: function (q) {
            n = q
        },
        getChoose: function () {
            return n
        },
        open: function (q) {
            cm.util.clearDouble("guardian");
            AjaxCall.gPostRequest("ajax/_dispatch.php", {
                ctrl: "Guardian",
                action: "buildModal",
                cityId: currentcityid,
                tvuid: tvuid,
                new_level: cm.guardianModalModel.getLevel(),
                type: n
            }, function (r) {
                if (!cm.WorldSettings.isOn("GUARDIAN_ORE")) {
                    cm.guardianModalModel.setType(r.guardian.type)
                }
                if (r.ok == false) {
                    cm.log.l("backend returned ok: false, talk to brad. ");
                    if (r.msg) {
                        Modal.showAlert(r.msg)
                    }
                    return false
                }
                if (r.guardian && parseInt(r.guardian.cl0) > parseInt(l.cl0)) {
                    k = false
                }
                if (r.guardian) {
                    l = r.guardian
                }
                cm.guardianModalModel.setLevel(l.cl0);
                cm.guardianModalModel.setUpgrade(l.upgrade == true);
                if (cm.guardianModalModel.getLevel() == 0) {
                    cm.guardianModalModel.setType(cm.guardianConst.types[0])
                }
                cm.guardianModalView.open();
                if (q && q.onOpen) {
                    q.onOpen()
                }
            })
        },
        getType: function () {
            var q = cm.guardianModalModel.gObj().type;
            if (!cm.WorldSettings.isOn("GUARDIAN_ORE") && !q) {
                cm.log.l("GUARDIAN_ORE=" + cm.WorldSettings.isOn("GUARDIAN_ORE") + "    g_type=" + q + "   defaulting to wood, to avoid fatal error.");
                return "wood"
            }
            if (!q) {
                cm.log.l("Current guardian type is missing.");
                return false
            } else {
                if (cm.guardianConst.types.indexOf(q) == -1) {
                    cm.log.l("Current guardian type " + q + " is not supported.");
                    return false
                }
            }
            return q
        },
        setType: function (q) {
            cm.guardianModalModel.gObj().type = q
        },
        getLevel: function () {
            return parseInt(cm.guardianModalModel.gObj().level)
        },
        setLevel: function (q) {
            if (!seed.buildings["city" + currentcityid]["pos" + 500]) {
                seed.buildings["city" + currentcityid]["pos" + 500] = []
            }
            seed.buildings["city" + currentcityid]["pos" + 500][1] = q;
            cm.guardianModalModel.gObj().level = q;
            cm.log.l("newLevel=" + q)
        },
        increaseLevel: function () {
            cm.guardianModalModel.setLevel(parseInt(cm.guardianModalModel.gObj().level) + 1)
        },
        release: function (q) {
            AjaxCall.gPostRequest("ajax/_dispatch.php", {
                ctrl: "Guardian",
                action: "release",
                cityId: currentcityid,
                tvuid: tvuid
            }, function (r) {
                if (r.ok) {
                    cm.guardianModalModel.setLevel(0)
                }
                q(r)
            })
        },
        setUpgrade: function (q) {
            cm.guardianModalModel.gObj().upgrading = q
        },
        upgrade: function () {
            if (cm.util.preventDoubleClick("guardian", 1)) {
                return false
            }
            cm.log.l("clicked upgrade...");
            if (cm.guardianModalModel.getLevel() == 9) {
                cm.ModalManager.alert({
                    text: g_js_strings.guardian.are_you_sure,
                    exe: function () {
                        i(true)
                    }
                })
            } else {
                i()
            }
        },
        upgrading: function () {
            return cm.guardianModalModel.gObj().upgrading == true
        }
    }
}(jQuery);
cm.guardianModalView = function (i) {
    var n = false;
    var j = "";

    function k() {
        var p = (cm.guardianModalModel.getLevel() == 0 || cm.guardianModalModel.upgrading() ? "desat" : "non_desat");
        var r = n ? ("<div class='inventory'></div><div class='equipmentItems'></div><div class='equipment'></div><div class='equipment_labels'></div><div class='bonus_estr'></div><div class='garbage'></div>") : "";
        var q = j ? ("<div class='tl_bracket " + p + "'><div class='release but'>Release</div><div class='transform but'>Transform</div></div>") : "";
        q = "";
        return "<div class='barTitle'></div><div class='name' title='" + g_js_strings.guardian.tooltipName + "' style='" + (n ? "" : "height: 28px;") + "'></div><div class='total_stats'></div><div class='figure'></div><div class='rightTopContainer'><div class='description'></div><div class='time_table left'><div class='time'></div><div class='notenough'>" + g_js_strings.modal_build.reqnotmet + "</div></div><div class='time_table right'><div class='checkHolder'></div><div class='rightBottom'></div><div class='story_button'></div></div></div><div class='rightPanel'><div class='upgradeRequirements' >Upgrade Requirements</div><div class='upgradeBenefits' >Upgrade Benefits</div><div class='requiredSection'><div class='top'><span>" + g_js_strings.commonstr.resource + "</span><span>" + g_js_strings.commonstr.required + "</span><span>" + g_js_strings.commonstr.youown + "</span></div><div class='wild'><span>" + g_js_strings.commonstr.wilderness + "</span><span class='req'>0</span><span class='you'>0</span></div><div class='food'><span>" + g_js_strings.commonstr.food + "</span><span class='req'>loading...</span><span class='you'>loading...</span></div><div class='wood'><span>" + g_js_strings.commonstr.wood + "</span><span class='req'>loading...</span><span class='you'>loading...</span></div><div class='stone'><span>" + g_js_strings.commonstr.stone + "</span><span class='req'>loading...</span><span class='you'>loading...</span></div><div class='ore'><span>" + g_js_strings.commonstr.ore + "</span><span class='req'>loading...</span><span class='you'>loading...</span></div><div class='item'><span>" + g_js_strings.guardian.divineinsp + "</span><span class='req'>1</span><span class='you'>loading...</span></div></div><div class='currentLevelOuter lTile'><div class='cl0 bigNum'></div><div class='cl1 levDes'></div><div class='cl2'></div><div class='cl3'></div></div><div class='upgradeLevelOuter lTile'><div class='ul0 bigNum'></div><div class='ul1 levDes'></div><div class='ul2'></div><div class='ul3'></div></div><div class='arrow'></div><div class='upgrade'></div><div class='bottom_boot'></div></div>" + r + q + "<div class='bottom'></div>"
    }
    function b() {
        j = cm.WorldSettings.isOn("GUARDIAN_ORE");
        cm.ModalManager.add({
            body: k(),
            closeNow: true,
            close: function () {
                cm.guardianCity.rerender(true)
            },
            show: m,
            lower: true,
            "class": "guardianModal",
            curtain: true,
            width: 750,
            height: n ? 900 : 550,
            left: 5,
            top: 5
        })
    }
    function e(p) {
        return p == "wild" ? "Lv. " : ""
    }
    function a(p) {
        var s = false;
        if (p.required.item) {
            p.required.item = 1;
            p.youOwn.item = seed.items.i401 || 0
        }
        for (var q in p.required) {
            i(".guardianModal .requiredSection ." + q + " .req").html(e(q) + addCommas(p.required[q]));
            i(".guardianModal .requiredSection ." + q + " .you").html(e(q) + addCommas(p.youOwn[q]));
            if (parseInt(p.youOwn[q]) < parseInt(p.required[q])) {
                i(".guardianModal .requiredSection ." + q + " .req").addClass("unmet");
                s = true
            }
        }
        if (cm.guardianModalModel.upgrading()) {
            s = false
        }
        if (p.youOwn.wild) {
            i(".requiredSection .wild .you").html(e("wild") + p.youOwn.wild)
        }
        var r = parseInt(cm.guardianModalModel.gObj().level);
        i(".guardianModal .upgrade")[s ? "hide" : "show"]();
        i(".guardianModal .notenough")[s && r < 10 ? "show" : "hide"]();
        i(".guardianModal .rightBottom")[s ? "addClass" : "removeClass"]("notclickable");
        i(".guardianModal .item")[r == 9 ? "show" : "hide"]();
        i(".time, .checkHolder")[s ? "hide" : "show"]();
        if (r == 9) {
            i(".rightPanel").addClass("lv9")
        }
    }
    var o = [0, 1, 1, 1, 2, 2, 3, 3, 3, 3, 4, 5];

    function m() {
        var s = cm.guardianModalModel.getData();
        for (var y in s) {
            i(".guardianModal ." + y).html(s[y])
        }
        var x = cm.guardianModalModel.getType();
        i(".guardianModal .description").html(g_js_strings[x + "_guardian"].description);
        var t = cm.guardianModalModel.whatsBuilding();
        a(s);
        var u = [0, -330, -655, -965, -1280, -1650];
        var z = o[parseInt(s.cl0)];
        i(".guardianModal .figure").css("background", "url(" + stimgUrl + "img/guardian_" + x + ".png) " + u[z] + "px 0px");
        if (cm.guardianModalModel.upgrading()) {
            i(".guardianModal .rightBottom").html("Speed Up").addClass("spd").removeClass("upr");
            i(".checkHolder").html("").hide();
            var r = i(".guardianModal .story_button");
            var p = i(".guardianModal .rightBottom.spd");
            var w = seed.queue_con["city" + currentcityid][0][2];
            var A = getBuildHelpEligible(w, currentcityid);
            if (!A) {
                r.html(g_js_strings.modal_messages_viewreports_view.askforhelp).unbind("click").bind("click", function () {
                    build_gethelp(w)
                }).show();
                p.css("margin-top", "9px")
            } else {
                r.html("").hide();
                p.css("margin-top", "22px")
            }
        } else {
            var v = cm.guardianModalModel.getLevel() == 0 ? g_js_strings.commonstr.build : g_js_strings.commonstr.upgrade;
            i(".guardianModal .rightBottom").html(v).removeClass("spd").addClass("upr");
            i(".checkHolder").html("<input type='checkbox' class='askFriends' onclick='cm.guardianController.askForHelpClicked(this)'/><div class='askForHelp'>" + g_js_strings.modal_build.sharemessagebuildorresearch + "</div>").show();
            i(".guardianModal .story_button").html("").hide()
        }
        h(s);
        if (!cm.guardianModalModel.isGuardian(t) && t != undefined) {
            i(".rightBottom").addClass("notclickable");
            i(".time").html(g_js_strings.modal_build.buildoneattime).addClass("unable")
        }
        var q = cm.guardianModalModel.gObj().level;
        if (i(".guardianModal .notclickable").length == 0 && parseInt(q) != 10) {
            cm.guardianController.bind()
        }
        i(".name").unbind("click").bind("click", cm.guardianItem.render);
        i(".guardianModal .spd").unbind("click").bind("click", function () {
            var B = seed.queue_con["city" + currentcityid][0][2];
            modal_speedup("bdg", B, undefined, "Guardian")
        });
        if (parseInt(q) == 10) {
            i(".guardianModal .rightBottom").removeClass("notclickable").removeClass("upr").removeClass("spd");
            i(".time_table, .upgradeRequirements").remove()
        }
        if (n) {
            cm.guardianModalView.renderItems()
        }
        if (j) {
            cm.guardianController.bind_transform()
        }
    }
    function h(p) {
        if (parseInt(p.cl0) == 10) {
            i(".rightBottom").html("").addClass("level10");
            i(".currentLevelOuter").addClass("currentLevelOuterLvl10");
            i(".time, .checkHolder, .arrow, .requiredSection, .upgradeLevelOuter").remove();
            i(".currentLevelOuter").appendTo(".rightTopContainer");
            i(".rightPanel").remove();
            i(".guardianModal").css("height", 413)
        }
    }
    function g(q, r, p) {
        return "<img id='loc_" + r + "' inventory_id='" + p + "' src='" + stimgUrl + "img/items/70/" + q + ".jpg' />"
    }
    function d() {
        var r = cm.guardianArmorModel.getInvItems();
        var s = "";
        var q = 24 > parseInt(r.length) ? 24 : parseInt(r.length);
        for (var p = 0; p < q; p++) {
            s += "<div class='item'>" + (r[p] ? g(r[p], "inv_" + p, r[p]) : "") + "</div>"
        }
        i(".guardianModal .inventory").html("<div class='sign'>" + g_js_strings.guardian.inventory + "</div>" + s)
    }
    function l() {
        var r = cm.guardianArmorModel.getEquips();
        var q = "";
        for (var p in r) {
            q += g(r[p], "eq_" + p, r[p])
        }
        i(".equipment").html(q)
    }
    function c(p) {
        return "<div class='outerResource'>" + g_js_strings.guardian.getResources + "<br><div class='requiredSection guareq' ><div class='top'><span>" + g_js_strings.commonstr.resource + "</span><span>" + g_js_strings.commonstr.get + "</span></div><div class='food'><span>" + g_js_strings.commonstr.food + "</span><span class='you'>" + p.food + "</span></div><div class='wood'><span>" + g_js_strings.commonstr.wood + "</span><span class='you'>" + p.wood + "</span></div><div class='stone'><span>" + g_js_strings.commonstr.stone + "</span><span class='you'>" + p.stone + "</span></div><div class='ore'><span>" + g_js_strings.commonstr.ore + "</span><span class='you'>" + p.ore + "</span></div></div></div>"
    }
    function f() {
        var s = cm.guardianArmorModel.getTotalBoosts();
        var q = cm.guardianArmorModel.getEquipBoosts();
        var u = cm.guardianArmorModel.getBonus();
        var r = 0;
        i(".total_stats").html("<div class='b0 stat_width'></div><div class='b1 stat_width'></div><div class='b2 stat_width'></div><div class='b3 stat_width'></div>");
        i(".equipment_labels").html("<div class='b0'></div><div class='b1'></div><div class='b2'></div><div class='b3'></div>");
        for (var p in s) {
            i(".total_stats .b" + r).html(s[p]);
            r++
        }
        r = 0;
        for (var t in q) {
            i(".equipment_labels .b" + r).html(q[t]);
            r++
        }
        i(".guardianModal .bonus_estr").html(u.text)
    }
    return {
        proposeCancel: function () {
            Modal.okay({
                okay: cm.guardianController.cancel,
                text: c(cm.guardianModalModel.getDynamics().required)
            })
        },
        open: function () {
            b()
        },
        rerender: function () {
            if (i(".guardianModal").length > 0) {
                b()
            }
        },
        renderItems: function (p) {
            if (p && p.msg) {
                cm.ModalManager.alert(p.msg)
            }
            l();
            d();
            f();
            cm.guardianController.equipment()
        }
    }
}(jQuery);
cm.guardianTransformController = function (a) {
    function b(d) {
        if (d == cm.guardianConst.types[0]) {
            common_postToProfile(300, Object.cloneFeed(template_data_300), Object.cloneFeed(actionlink_data_300), continuation_300, [])
        } else {
            if (d == cm.guardianConst.types[1]) {
                common_postToProfile(301, Object.cloneFeed(template_data_301), Object.cloneFeed(actionlink_data_301), continuation_301, [])
            }
        }
    }
    function c() {
        common_postToProfile(302, Object.cloneFeed(template_data_302), Object.cloneFeed(actionlink_data_302), continuation_302, [])
    }
    return {
        bind: function () {
            a(".left_triangle").unbind().bind("click", function () {
                var d = cm.guardianTransformModel.getPrev();
                cm.guardianTransformView.rerender(d)
            });
            a(".right_triangle").unbind().bind("click", function () {
                var d = cm.guardianTransformModel.getNext();
                cm.guardianTransformView.rerender(d)
            });
            a(".choose_button").unbind().bind("click", function () {
                var d = "" + cm.guardianTransformModel.getType();
                cm.guardianModalModel.setChoose(d);
                cm.guardianModalModel.setType(d);
                cm.ModalManager.close();
                cm.ModalManager.close();
                cm.guardianModalModel.open();
                b(d)
            });
            a(".transform_bottom_button").unbind().bind("click", function () {
                cm.guardianTransformModel.transform(function (e) {
                    if (e.msg) {
                        if (e.msg == g_js_strings.guardian_err.notEnoughGems) {
                            cm.ModalManager.alert({
                                text: g_js_strings.guardian_err.notEnoughGems,
                                button_text: g_js_strings.guardian_err.getMore,
                                exe: function () {
                                    cm.ModalManager.close();
                                    modal_getgems()
                                }
                            })
                        } else {
                            cm.ModalManager.alert({
                                text: e.msg
                            })
                        }
                    } else {
                        cm.ModalManager.close();
                        cm.ModalManager.close();
                        cm.guardianModalModel.open();
                        a("#kochead_gems").html(seed.player.gems);
                        c()
                    }
                })
            })
        }
    }
}(jQuery);
var cm = cm || {};
cm.guardianTransformModel = function (g) {
    var e = null;
    var h = null;
    var b = {};

    function d(l) {
        h = l
    }
    function f(o) {
        var p = o || h;
        var m = cm.guardianConst.types.length;
        var n = cm.guardianConst.types.indexOf(p) - 1;
        if (n == -1) {
            n = m - 1
        }
        var l = cm.guardianConst.types[n];
        if (e == cm.guardianConst.switchMode.transform) {
            if (l == cm.guardianModalModel.gObj().type) {
                n--;
                if (n == -1) {
                    n = m - 1
                }
                l = cm.guardianConst.types[n]
            }
        }
        d(l)
    }
    function i(o) {
        var p = o || h;
        var m = cm.guardianConst.types.length;
        var n = cm.guardianConst.types.indexOf(p) + 1;
        if (n == m) {
            n = 0
        }
        var l = cm.guardianConst.types[n];
        if (e == cm.guardianConst.switchMode.transform) {
            if (l == cm.guardianModalModel.gObj().type) {
                n++;
                if (n == m) {
                    n = 0
                }
                l = cm.guardianConst.types[n]
            }
        }
        d(l)
    }
    function k() {
        b = {
            btnText: g_js_strings.commonstr.choose,
            nav: true
        };
        var l = cm.guardianConst.types.length;
        if (l < 1) {
            b.nav = false
        }
        if (e == cm.guardianConst.switchMode.transform) {
            b.cost = g_js_strings.guardian.transformCost;
            b.itemId = cm.guardianConst.transformItem.id;
            var m = 0;
            if (seed.items["i" + b.itemId]) {
                m = seed.items["i" + b.itemId]
            }
            b.numOfItems = m;
            b.itemPrice = itemlist["i" + b.itemId].price;
            b.btnText = g_js_strings.commonstr.transform;
            if (m == 0) {
                b.btnText = g_js_strings.guardian.buy_transform
            }
            if (l < 3) {
                b.nav = false
            }
        }
        j()
    }
    function j() {
        b.type = h;
        b.name = g_js_strings.guardian[h]["name"];
        b.attr = g_js_strings.guardian[h]["attr"];
        b.res = [g_js_strings.guardian[h]["res0"], g_js_strings.guardian[h]["res1"]];
        b.desc = g_js_strings.guardian[h]["desc"];
        if (e == cm.guardianConst.switchMode.transform) {
            var l = cm.guardianModalModel.gObj().type;
            var m = [];
            m.push(g_js_strings.commonstr.transform);
            m.push(g_js_strings.guardian[l]["fullName"]);
            m.push(g_js_strings.commonstr.totx.toLowerCase());
            m.push(g_js_strings.guardian[h]["fullName"]);
            b.transform = m.join(" ") + "?"
        }
    }
    function c(l) {
        AjaxCall.gPostRequest("ajax/_dispatch.php", {
            ctrl: "Guardian",
            action: "transform",
            cityId: currentcityid,
            tvuid: tvuid,
            type: h
        }, function (m) {
            if (m.ok) {
                cm.guardianModalModel.setType(h);
                if (b.numOfItems == 0) {
                    seed.player.gems -= b.itemPrice
                } else {
                    if (b.numOfItems > 0) {
                        seed.items["i" + b.itemId] -= 1;
                        ksoItems[b.itemId].subtract();
                        b.numOfItems -= 1
                    }
                }
            }
            l(m)
        })
    }
    function a(l) {
        return {
            ok: false,
            msg: l
        }
    }
    return {
        init: function (l) {
            e = l;
            if (e == cm.guardianConst.switchMode.choose) {
                h = cm.guardianConst.types[0]
            } else {
                if (e == cm.guardianConst.switchMode.transform) {
                    var n = cm.guardianModalModel.getType();
                    i(n)
                }
            }
            k()
        },
        getData: function () {
            return b
        },
        getPrev: function () {
            f();
            j();
            return b
        },
        getNext: function () {
            i();
            j();
            return b
        },
        getType: function () {
            return h
        },
        transform: function (l) {
            if (b.itemPrice > parseInt(seed.player.gems)) {
                l(a(g_js_strings.guardian_err.notEnoughGems))
            } else {
                c(l)
            }
        }
    }
}(jQuery);
cm.guardianTransformView = function (b) {
    var a = null;
    return {
        render: function (c) {
            a = c;
            cm.guardianTransformModel.init(a === true ? cm.guardianConst.switchMode.choose : cm.guardianConst.switchMode.transform);
            cm.guardianTransformView.rerender(undefined)
        },
        rerender: function (h) {
            var g = a === true ? false : true;
            var d = (h && h.res ? h : cm.guardianTransformModel.getData());
            var f = parseInt(d.numOfItems) > 0 ? true : false;
            var c = "";
            if (d.itemPrice) {
                c = "<div class='transform_price'><div class='pcost'>" + d.itemPrice + "</div><div class='little_gem'></div></div><div class='transform_to'>" + d.transform + "</div><div class='transform_cost'>" + d.cost + '</div><div class="icon_own"><img src="' + stimgUrl + "img/items/30/" + d.itemId + '.jpg" class="icon">     <div class="own "><span id="item_stock">' + d.numOfItems + "</span></div>   </div>"
            }
            console.dir(d);
            var e = "<div class='pic " + d.type + "'></div><div class='name'>" + d.name + "</div><div class='title'>" + g_js_strings.guardian[g ? "transform_a_guardian" : "choose_a_guardian"] + "</div><div class='left_box_top'>" + d.attr + "</div><div class='left_box_bottom'>" + d.res[0] + "<br><span>" + d.res[1] + "</span></div><div class='description'>" + d.desc + "</div>" + c + "<div class='" + (g ? "transform_bottom_button" : "choose_button") + "'>" + d.btnText + "</div>" + (d.nav === true ? "<div class='left_triangle'></div><div class='right_triangle'></div>" : "");
            cm.ModalManager.add({
                body: e,
                closeNow: b(".choose_modal").length > 0,
                show: cm.guardianTransformController.bind,
                "class": "choose_modal " + (g ? "transform_modal" : ""),
                curtain: true,
                width: 655,
                height: g ? 581 : 510,
                left: 55,
                top: 110
            })
        }
    }
}(jQuery);
if (!window.HelpDesk) {
    var HelpDesk = new Object()
}
HelpDesk.Properties = {};
HelpDesk.Methods = {
    show: function (b) {
        if (undefined == cm.features.NO_RIGHTNOW_CRM || "true" == cm.features.NO_RIGHTNOW_CRM) {
            var a = "?iframe=1&" + Object.toQueryString(g_ajaxparams);
            if (b) {
                b = Math.min(5, parseInt(b));
                a += "&selectedTab=" + b
            }
            var d = "<iframe src='helpDesk_src.php" + a + "' frameborder='0' width='740px' height='620px' scrolling='no' allowTransparency='true'></iframe>";
            var e = unescape($("helpdesk_show").innerHTML);
            var c = new Template(e).evaluate({
                create_ticket_iframe: d
            });
            Modal.showModal(740, 580, 90, 10, g_js_strings.commonstr.help, c);
            return
        }
        switch (b) {
        case 6:
            cm.CRMLink.open("reportChat");
            break;
        case 7:
            cm.CRMLink.open("reportMail");
            break;
        default:
            cm.CRMLink.open("help")
        }
    }
};
Object.extend(HelpDesk, HelpDesk.Methods);
Object.extend(HelpDesk, HelpDesk.Properties);

function modal_help_request(a) {
    var b = new Array();
    b.push("<div class='helprequestbox'>");
    b.push("<div class='helptext'>" + g_js_strings.modal_help_request.choosecat + "</div>");
    b.push("<div class='cat_box'>");
    b.push("<select id='helpCat'>");
    b.push("<option value='0'>" + g_js_strings.modal_help_request.dsetcatd + "</option>");
    b.push("<option value='1'>" + g_js_strings.modal_help_request.billissue + "</option>");
    b.push("<option value='2'>" + g_js_strings.modal_help_request.bugreport + "</option>");
    b.push("<option value='3'>" + g_js_strings.modal_help_request.gamequestion + "</option>");
    b.push("<option value='4'>" + g_js_strings.modal_help_request.featsugg + "</option>");
    b.push("<option value='5'>" + g_js_strings.modal_help_request.report + "</option>");
    b.push("</select>");
    b.push("</div>");
    b.push("<div id='emCatError' class='helperror' style='display:none;'>" + g_js_strings.modal_help_request.selcat + "</div>");
    b.push("<div class='helptext'>" + g_js_strings.modal_help_request.descprob + "</div>");
    b.push("<div class='problem_box'>");
    b.push("<textarea id='helpProblem'></textarea>");
    b.push("</div>");
    b.push("<div id='emProbError' class='helperror' style='display:none;'>" + g_js_strings.modal_help_request.mustdescprob + "</div>");
    b.push("<div class='helptext'>" + g_js_strings.modal_help_request.enterem + "</div>");
    b.push("<div class='email_box'><input id='helpEmail' value=''/></div>");
    b.push("<div id='emAddrError' class='helperror' style='display:none;'>" + g_js_strings.modal_help_request.mustenterem + "</div>");
    b.push("<div class='btns clearfix'>");
    b.push("<a class='button25' onclick='sendHelpRequest();return false;'><span>" + g_js_strings.commonstr.submit + "</span></a>");
    b.push("<a class='button25' onclick='Modal.hideModal();return false;'><span>" + g_js_strings.commonstr.cancel + "</span></a>");
    b.push("</div>");
    b.push("</div>");
    Modal.showModal(740, 400, 10, 10, g_js_strings.modaltitles.helprequest, b.join(""));
    if (a) {
        $("helpCat").value = a
    }
}
function sendHelpRequest() {
    var errFlag = false;
    var comment = $("helpProblem").value;
    var cat = $("helpCat").value;
    var emAddr = $("helpEmail").value;
    if (emAddr.blank() || !validateEmails(emAddr)) {
        $("emAddrError").show();
        errFlag = true
    } else {
        $("emAddrError").hide()
    }
    if (cat == 0) {
        $("emCatError").show();
        errFlag = true
    } else {
        $("emCatError").hide()
    }
    if (comment.blank()) {
        $("emProbError").show();
        errFlag = true
    } else {
        $("emProbError").hide()
    }
    if (!errFlag) {
        var params = Object.clone(g_ajaxparams);
        params.action = "REQUEST_FORM_CS";
        params.email = emAddr;
        params.type = cat;
        params.message = comment;
        new Ajax.Request(g_ajaxpath + "ajax/reportCs.php" + g_ajaxsuffix, {
            method: "post",
            parameters: params,
            onSuccess: function (transport) {
                var rslt = eval("(" + transport.responseText + ")");
                if (rslt.ok) {
                    Modal.hideModalAll();
                    var helpHtml = new Array();
                    helpHtml.push("<div class='helprequestconfirmbox'>");
                    helpHtml.push("<div>" + g_js_strings.sendHelpRequest.thankyou + "</div>");
                    helpHtml.push("<div><a href='http://support.watercooler-inc.com' target='_blank'>http://support.watercooler-inc.com</a></div>");
                    helpHtml.push("<div class='btns clearfix'><a class='button25' onclick='Modal.hideModal();return false;'><span>" + g_js_strings.commonstr.ok + "</span></a></div>");
                    helpHtml.push("</div>");
                    Modal.showModal(400, 400, 180, 100, g_js_strings.modaltitles.helprequestsent, helpHtml.join(""))
                } else {
                    Modal.showAlert(printLocalError((rslt.error_code || null), (rslt.msg || null), (rslt.feedback || null)))
                }
            },
            onFailure: function () {}
        })
    }
};
var cm = cm || {};
cm.HUDIcon = function (m) {
    var l = this;
    var a;
    var e;
    var b;
    var o;
    var f;
    var h;
    var n;
    var d;
    var g;
    var k = function () {
            o = m.images["icon"];
            a = document.createElement("a");
            a.href = m.url;
            a.target = "_top";
            a.className = m.cssClass;
            Event.observe(a, "click", j);
            Event.observe(a, "mouseover", c);
            Event.observe(a, "mouseout", i);
            f = document.createElement("img");
            f.src = o;
            a.appendChild(f);
            if (m.images["border"]) {
                b = document.createElement("img");
                b.src = m.images["border"];
                b.className = "borderImage";
                a.appendChild(b)
            }
            h = document.createElement("img");
            h.src = m.images["over"];
            n = m.tooltip;
            d = ["mapContainerId"]
        };
    this.setParentElement = function (p) {
        $(p).appendChild(a)
    };
    var j = function (p) {
            if (m.clickCallback) {
                var q = m.clickCallback;
                if (typeof (q == "function")) {
                    q(p)
                }
            }
        };
    var c = function (p) {
            f.src = h.src;
            showTooltip(n, a, p, "maparea_city")
        };
    var i = function (p) {
            f.src = o;
            removeTooltip()
        };
    k()
};
cm.HUDDealOfTheDayIcon = function (k) {
    var a;
    var e;
    var j;
    var b = k.flash.id;
    var l;
    var d;
    var f;
    var i = function () {
            a = document.createElement("a");
            a.href = k.url;
            a.className = k.cssClass;
            Event.observe(a, "click", h);
            Event.observe(a, "mouseover", c);
            Event.observe(a, "mouseout", c);
            j = document.createElement("div");
            j.id = b;
            a.appendChild(j);
            l = k.tooltip;
            d = k.mapContainerId
        };
    this.setParentElement = function (m) {
        $(m).appendChild(a);
        swfobject.registerObject("tpDotD", "9.0.0", "expressInstall.swf");
        swfobject.embedSWF(k.flash.swfUrl, b, k.flash.width, k.flash.height, "9.0.0", "expressInstall.swf", k.flash.flashvars, k.flash.params)
    };
    var h = function (m) {
            if (k.clickCallback) {
                var n = k.clickCallback;
                if (typeof (n == "function")) {
                    n(m)
                }
            }
        };
    var c = function (m) {
            if (l && l != "") {
                showTooltip(l, a, m, d)
            }
        };
    var g = function (m) {
            removeTooltip()
        };
    i()
};
cm.HUDIconTimerController = function (a, c) {
    var h = a;
    var b;
    var f;
    var e = function () {
            f = 0;
            b = setInterval(d, c.interval * 1000)
        };
    var d = function () {
            var i = h[f];
            i.showBouncingArrow();
            setTimeout(g, 5000)
        };
    var g = function () {
            var i = h[f];
            i.hideBouncingArrow();
            f++;
            if (f >= h.length) {
                f = 0
            }
        };
    e()
};
cm.HUDIconTypes = {
    INVITE: 0,
    GIFT: 1,
    GIFT_OF_THE_DAY: 2,
    DEAL_OF_THE_DAY: 3,
    MERLINS_WHEEL: 4,
    NEXT_UNPURCHASED_PACKAGE: 5
};
cm.HUDIconFactory = {
    getIcon: function (a) {
        switch (a.type) {
        case cm.HUDIconTypes.DEAL_OF_THE_DAY:
            return new cm.HUDDealOfTheDayIcon(a);
            break;
        case cm.HUDIconTypes.INVITE:
            a.clickCallback = function () {
                invite_friends_popup()
            };
            return new cm.HUDIcon(a);
            break;
        case cm.HUDIconTypes.GIFT:
        case cm.HUDIconTypes.GIFT_OF_THE_DAY:
            return new cm.HUDIcon(a);
            break;
        case cm.HUDIconTypes.NEXT_UNPURCHASED_PACKAGE:
            a.clickCallback = function () {
                cm.ConversionTracker.track("payments", "MORE_GEMS_HUD", "");
                modal_getgems()
            };
            return new cm.HUDIcon(a);
            break;
        case cm.HUDIconTypes.MERLINS_WHEEL:
            a.clickCallback = function () {
                cm.mww.start(0)
            };
            return new cm.HUDIcon(a);
            break;
        default:
            return null
        }
    }
};
cm.ImpendingAttackReportRow = function (e, l) {
    cm.CustomEventDispatcher.call(this);
    var k = this;
    var a;
    var b;
    var c;
    var f;
    var g;
    var m;
    this.getLink = function () {
        return f
    };
    this.show = function (n) {
        if (n && n < g.childNodes.length) {
            g.insertBefore(a, g.childNodes[n])
        } else {
            g.appendChild(a)
        }
    };
    this.getKey = function () {
        return e.getKey()
    };
    var i = function () {
            var p = m.getMarchStatus();
            var o = m.getArrivalTime();
            var n = o ? cm.TimeFormatter.format(m.getArrivalTime() - unixtime()) : "????";
            n = p === cm.MARCH_STATUS.MARCH_STATUS_ABORTING ? "---" : n;
            b.innerHTML = n
        };
    var j = function (n) {
            var o = n === cm.MARCH_STATUS.MARCH_STATUS_ABORTING ? g_js_strings.ImpendingAttacks.recalled : g_js_strings.ImpendingAttacks.incoming;
            c.innerHTML = o
        };
    var d = function (n) {
            i()
        };
    this.remove = function () {
        try {
            g.removeChild(a);
            var n = new cm.ImpendingAttackReportRowEvent(cm.ImpendingAttackReportRowEvent.REMOVED);
            n.setTarget(k);
            k.dispatchCustomEvent(n)
        } catch (o) {} finally {
            m.removeEventListener(cm.IncomingAttackEvent.ARRIVAL_TIME_CHANGED, d)
        }
    };
    var h = function () {
            g = l;
            m = e;
            var w = m.getMarchType();
            var u = m.getMarchStatus();
            var x = w == cm.MARCH_TYPES.MARCH_TYPE_SCOUT ? "scout" : "attack";
            x = u == cm.MARCH_STATUS.MARCH_STATUS_ABORTING ? "recalled" : x;
            a = document.createElement("tr");
            a.className = x;
            var s = document.createElement("td");
            s.className = "marchTypeColumn";
            f = document.createElement("a");
            s.appendChild(f);
            var n = m.getAttacker();
            if (w) {
                var t = {
                    genderTitle: "",
                    name: "????"
                };
                if (n) {
                    var t = {
                        genderTitle: n.gender,
                        name: n.name
                    }
                }
                t.marchType = m.getMarchName();
                f.innerHTML = cm.StringFormatter.applyTemplate(g_js_strings.ImpendingAttacks.marchTypeFrom, t)
            } else {
                f.innerHTML = "????"
            }
            a.appendChild(s);
            var v = document.createElement("td");
            v.className = "targetColumn";
            var p, r, q;
            var o = m.getTile();
            if (o.isCity) {
                p = new cm.utils.CoordinateLink(o.city.x, o.city.y);
                r = g_js_strings.ImpendingAttacks.targetCity;
                q = {
                    cityName: o.city.name
                }
            } else {
                p = new cm.utils.CoordinateLink(o.wilderness.x, o.wilderness.y);
                r = g_js_strings.ImpendingAttacks.targetWilderness;
                q = {
                    wilderness: o.wilderness.typeName
                }
            }
            p.setClassName("coordinateLink");
            q.coordinate = p.getHTML();
            v.innerHTML = cm.StringFormatter.applyTemplate(r, q);
            a.appendChild(v);
            b = document.createElement("td");
            b.className = "timeRemainingColumn";
            a.appendChild(b);
            i();
            c = document.createElement("td");
            c.className = "statusColumn";
            a.appendChild(c);
            j(u);
            if (u != cm.MARCH_STATUS.MARCH_STATUS_ABORTING) {
                m.addEventListener(cm.IncomingAttackEvent.ARRIVAL_TIME_CHANGED, d)
            }
        };
    h()
};
cm.OOP.inherits(cm.ImpendingAttackReportRow, cm.CustomEventDispatcher);
cm.ImpendingAttackReportRowEvent = function (a) {
    cm.CustomEvent.call(this, a)
};
cm.OOP.inherits(cm.ImpendingAttackReportRowEvent, cm.CustomEvent);
cm.ImpendingAttackReportRowEvent.REMOVED = "removed";
cm.ImpendingAttackReportRowController = function (f, d) {
    var h;
    var b;
    var c;
    var g = this;
    var i = function (y) {
            var k = h.getTroops();
            var w = h.getTile();
            var m, E, l;
            if (w.isCity) {
                E = new cm.utils.CoordinateLink(w.city.x, w.city.y);
                l = g_js_strings.ImpendingAttacks.targetCity;
                m = {
                    cityName: w.city.name
                }
            } else {
                E = new cm.utils.CoordinateLink(w.wilderness.x, w.wilderness.y);
                l = g_js_strings.ImpendingAttacks.targetWilderness;
                m = {
                    wilderness: w.wilderness.typeName
                }
            }
            E.setClassName("coordinateLink");
            m.coordinate = E.getHTML();
            var D = cm.StringFormatter.applyTemplate(l, m);
            var v = 86400;
            var B = {};
            var o = 271;
            var u = Object.clone(itemlist["i" + o]);
            u.id = o;
            u.effect = {};
            u.effect.name = "defExpire";
            u.effect.duration = 1 * v;
            var t = new cm.CombatBoostItem(u);
            B[o.toString()] = t;
            var s = 272;
            var r = Object.clone(itemlist["i" + s]);
            r.id = s;
            r.effect = {};
            r.effect.name = "defExpire";
            r.effect.duration = 7 * v;
            var z = new cm.CombatBoostItem(r);
            B[s.toString()] = z;
            var q = [t, z];
            var n = {};
            n.combatLevel = h.getKnight() && h.getKnight().combatLevel ? h.getKnight().combatLevel : "????";
            var p = h.getResearches().length > 0 ? h.getResearches() : [{
                id: "????",
                name: "????",
                level: "????"
            }];
            var k = {};
            k.briefCount = h.getTroops().briefCount ? h.getTroops().briefCount : "????";
            k.collection = h.getTroops().collection.length > 0 ? h.getTroops().collection : [{
                id: "????",
                name: "????",
                imageUrl: "img/transparent.gif",
                amount: "????"
            }];
            var C = h.getAttacker() ? h.getAttacker() : {
                name: "????",
                gender: "????"
            };
            var j = {
                attack: h,
                text: {
                    watchTowerReport: g_js_strings.ImpendingAttacks.watchTowerReport,
                    target: g_js_strings.commonstr.target,
                    marchType: g_js_strings.modal_attack.marchtype,
                    estimatedArrival: g_js_strings.attack_generateincoming.estimatedarrival,
                    attacker: g_js_strings.commonstr.attacker,
                    armySize: g_js_strings.attack_viewimpending_view.armysize,
                    incomingTroops: g_js_strings.attack_viewimpending_view.incomingtroops,
                    alliance: g_js_strings.commonstr.alliance,
                    knightCombatLevel: g_js_strings.attack_viewimpending_view.knightcomlvl,
                    researchLevel: g_js_strings.attack_viewimpending_view.techlevels,
                    troops: g_js_strings.commonstr.troops,
                    amount: g_js_strings.commonstr.amount,
                    tech: g_js_strings.commonstr.tech,
                    level: g_js_strings.commonstr.level,
                    takeAction: g_js_strings.ImpendingAttacks.takeAction,
                    buffs: g_js_strings.ImpendingAttacks.buffs,
                    defend: g_js_strings.commonstr.defend,
                    fight: g_js_strings.ImpendingAttacks.fight,
                    apply: g_js_strings.commonstr.apply,
                    buy: g_js_strings.commonstr.buy,
                    buildDefenses: g_js_strings.modal_openWalls.builddefenses,
                    buildDefensesTip: g_js_strings.ImpendingAttacks.buildDefensesTip,
                    troopSettings: g_js_strings.ImpendingAttacks.troopSettings,
                    troopSettingsTip: g_js_strings.ImpendingAttacks.troopSettingsTip,
                    trainTroops: g_js_strings.modal_openBarracks.trainttl,
                    trainTroopsTip: g_js_strings.ImpendingAttacks.trainTroopsTip,
                    askForHelp: g_js_strings.modal_quests.askhelp,
                    askForHelpTip: g_js_strings.ImpendingAttacks.askForHelpTip
                },
                items: q,
                itemLookup: B,
                troops: k.collection,
                troopBriefCount: k.briefCount,
                knight: n,
                researches: p,
                alliance: h.getAlliance(),
                attacker: C,
                target: D,
                imagePath: stimgUrl
            };
            var x = new cm.WatchTowerReportDialog(j);
            var A = new cm.WatchTowerReportDialogController(j, x);
            x.show()
        };
    var a = function (j) {
            c.unbind("click", i);
            b.removeEventListener(cm.ImpendingAttackReportRowEvent.REMOVED, a)
        };
    var e = function () {
            h = f;
            b = d;
            c = jQuery(b.getLink());
            c.bind("click", i);
            b.addEventListener(cm.ImpendingAttackReportRowEvent.REMOVED, a)
        };
    e()
};
cm.ImpendingAttackReport = function (i) {
    var b;
    var k;
    var n;
    var h;
    var e;
    var g;
    var j;
    var d;
    this.getHtmlElement = function () {
        return b
    };
    this.show = function () {
        k.appendChild(b)
    };
    this.getHtmlElement = function () {
        return b
    };
    var q = function () {
            d.appendChild(g)
        };
    var o = function () {
            try {
                d.removeChild(g)
            } catch (r) {}
        };
    var p = function (u, r) {
            o();
            var t = new cm.ImpendingAttackReportRow(u, d);
            var s = cm.ImpendingAttackReportRowController(u, t);
            n.add(t);
            t.show(r)
        };
    var l = function (s) {
            var r = n.getElementByKey(s.getKey());
            n.remove(r);
            r.remove()
        };
    var f = function (t) {
            var s = t.getTarget();
            if (s.getMarchStatus() == cm.MARCH_STATUS.MARCH_STATUS_ABORTING) {
                p(s)
            } else {
                var r = h.getElementPosition(s);
                p(s, r)
            }
        };
    var c = function (r) {
            var s = r.getTarget();
            l(s);
            if (n.getCount() <= 0) {
                q()
            }
        };
    var a = function (r) {
            r.addEventListener(cm.CollectionEvent.ELEMENT_ADDED, f);
            r.addEventListener(cm.CollectionEvent.ELEMENT_REMOVED, c);
            var t = r.getCount();
            var s, u;
            for (s = 0; s < t; s++) {
                u = r.getElementAtPosition(s);
                p(u)
            }
        };
    this.remove = function () {
        var s, u;
        var r = n.getCount();
        for (s = 0; s < r; s++) {
            u = n.getElementAtPosition(s);
            u.remove()
        }
        try {
            k.removeChild(b)
        } catch (t) {}
        h.addEventListener(cm.CollectionEvent.ELEMENT_ADDED, f);
        h.addEventListener(cm.CollectionEvent.ELEMENT_REMOVED, c);
        e.addEventListener(cm.CollectionEvent.ELEMENT_ADDED, f);
        e.addEventListener(cm.CollectionEvent.ELEMENT_REMOVED, c)
    };
    var m = function () {
            n = new cm.BaseCollection();
            k = i.parentElement;
            b = document.createElement("table");
            b.className = "impendingAttacks";
            j = document.createElement("thead");
            b.appendChild(j);
            d = document.createElement("tbody");
            b.appendChild(d);
            var u = document.createElement("tr");
            j.appendChild(u);
            var t = document.createElement("th");
            t.className = "marchTypeColumn";
            t.innerHTML = i.text.marchType;
            u.appendChild(t);
            var r = document.createElement("th");
            r.className = "targetColumn";
            r.innerHTML = i.text.target;
            u.appendChild(r);
            var w = document.createElement("th");
            w.className = "timeRemainingColumn";
            w.innerHTML = i.text.timeRemaining;
            u.appendChild(w);
            var v = document.createElement("th");
            v.className = "statusColumn";
            v.innerHTML = i.text.status;
            u.appendChild(v);
            g = document.createElement("tr");
            var s = document.createElement("td");
            s.innerHTML = g_js_strings.ImpendingAttacks.noIncomingAttacks;
            s.setAttribute("colspan", "4");
            g.appendChild(s);
            q();
            h = i.attacks;
            a(h);
            e = i.recalledAttacks;
            a(e)
        };
    m()
};
var cm = cm || {};
cm.IncomingAttackController = function (c) {
    var g = this;
    var f;
    var i = function (m) {
            var n = m.getTarget();
            if (n instanceof cm.IncomingAttack) {
                var l = n.getMarchStatus();
                switch (l) {
                case cm.MARCH_STATUS.MARCH_STATUS_INACTIVE:
                    c.remove(n);
                    break;
                case cm.MARCH_STATUS.MARCH_STATUS_ABORTING:
                    c.remove(n);
                    var k = new cm.IncomingAttackRecalledDialog(n);
                    var j = new cm.IncomingAttackDialogController(n, k);
                    cm.NotificationDialogManager.popup(k);
                    cm.IncomingAttackManager.recall(n);
                    break
                }
            }
        };
    var b = function (k) {
            k.addEventListener(cm.IncomingAttackEvent.STATUS_CHANGED, i);
            var j = new cm.IncomingAttackNotificationDialog(k);
            var l = new cm.IncomingAttackDialogController(k, j);
            cm.NotificationDialogManager.popup(j)
        };
    var a = function (k) {
            if (f) {
                f.remove()
            }
            f = new cm.IncomingAttackTopNavNotification(k, $("impendingAttackContainer"));
            var j = new cm.IncomingAttackTopNavNotificationController(k, f);
            f.show()
        };
    var e = function (l) {
            var m = l.getTarget();
            m.removeEventListener(cm.IncomingAttackEvent.STATUS_CHANGED, i);
            var k = "m" + m.getId();
            if (seed.queue_atkinc[k]) {
                delete seed.queue_atkinc[k];
                if (Object.keys(seed.queue_atkinc).length === 0) {
                    seed.queue_atkinc = []
                }
            }
            if (c.getCount() > 0) {
                var j = c.getElementAtPosition(0);
                a(j)
            }
        };
    var h = function (k) {
            var j = k.getTarget();
            b(j);
            if (c.getElementAtPosition(0).getId() == j.getId()) {
                a(j)
            }
        };
    var d = function () {
            c.addEventListener(cm.CollectionEvent.ELEMENT_ADDED, h);
            c.addEventListener(cm.CollectionEvent.ELEMENT_REMOVED, e)
        };
    d()
};
cm.IncomingAttackRecalledController = function (b) {
    var c = this;
    var a = function (f) {
            var g = f.getTarget();
            b.remove(g)
        };
    var d = function (g) {
            var f = g.getTarget();
            f.addEventListener(cm.IncomingAttackEvent.RECALL_DISSMISSED, a)
        };
    var e = function () {
            b.addEventListener(cm.CollectionEvent.ELEMENT_ADDED, d)
        };
    e()
};
cm.BootLoader.add(function () {
    var f, a;
    if (!(seed.queue_atkinc instanceof Array) && typeof (seed.queue_atkinc) == "object") {
        for (f in seed.queue_atkinc) {
            a = seed.queue_atkinc[f];
            a.mid = f.substr(1);
            var d = a.marchType;
            var c = a.score !== undefined;
            var g = a.marchStatus !== cm.MARCH_STATUS.MARCH_STATUS_INACTIVE && a.marchStatus !== cm.MARCH_STATUS.MARCH_STATUS_ABORTING;
            if (c && g) {
                var b = parseInt(a.arrivalTime);
                if (isNaN(b) || b > unixtime()) {
                    var e = new cm.IncomingAttack(a);
                    cm.IncomingAttackManager.add(e)
                }
            }
        }
    }
});
cm.IncomingAttack = function (h) {
    cm.CustomEventDispatcher.call(this);
    var t = this;
    var c;
    var b;
    var l;
    var A;
    var y;
    var m;
    var o;
    var v;
    var p;
    var i;
    var e;
    var s;
    var x;
    var d;
    var u;
    var g;
    var B;
    var f;
    var k;
    var z;
    var r;
    var n;
    var a;
    var w;
    var q;
    var j = function () {
            if (h && h.mid) {
                c = h.mid;
                b = h.marchStatus || cm.MARCH_STATUS.MARCH_STATUS_OUTBOUND;
                l = h.aid;
                A = h.arrivalTime;
                x = A - unixtime();
                y = h.cnt;
                m = h.departureTime;
                o = h.marchType;
                v = h.pid;
                p = h.players;
                i = h.score;
                e = h.toCityId;
                s = h.toTileId;
                u = h.kLv;
                g = h.knt;
                B = h.unts;
                f = h.tech;
                z = null;
                if (u) {
                    z = {};
                    z.level = u
                }
                if (g && g.cbt) {
                    z = z || {};
                    z.combatLevel = g.cbt
                }
                var K = [];
                var H, J;
                for (H in B) {
                    J = cm.TroopFactory.getUnit(H);
                    J.amount = i > 6 ? B[H] : "????";
                    K.push(J)
                }
                r = {
                    briefCount: h.cnt,
                    collection: K
                };
                k = [];
                var D, E;
                for (D in f) {
                    E = cm.ResearchFactory.getResearch(D);
                    E.level = f[D];
                    k.push(E)
                }
                n = {
                    id: l,
                    name: g_js_strings.commonstr.none
                };
                if (l && seed.allianceNames && seed.allianceNames["a" + l]) {
                    n.name = seed.allianceNames["a" + l]
                }
                a = null;
                var I = v;
                var G = seed.players;
                var C = I ? (G["u" + I] || p["u" + I]) : null;
                if (I && C) {
                    a = {};
                    a.name = C.n;
                    var F = C.s;
                    a.gender = F == "F" ? g_js_strings.commonstr.lady : g_js_strings.commonstr.lord
                }
                q = cm.UserTileInfoFactory.getTileInfo(e, s)
            } else {
                throw "Invalid Argument Error"
            }
        };
    this.setMarchStatus = function (C) {
        if (b != C) {
            b = C;
            var D = new cm.IncomingAttackEvent(cm.IncomingAttackEvent.STATUS_CHANGED);
            D.setTarget(t);
            t.dispatchCustomEvent(D)
        }
    };
    this.getMarchStatus = function () {
        return b
    };
    this.getId = function () {
        return c
    };
    this.recall = function () {
        if (b === cm.MARCH_STATUS.MARCH_STATUS_ABORTING) {
            c += "_recalled_" + unixtime();
            d = cm.IncomingAttack.RECALL_DISMISS_TIME
        }
    };
    this.getKey = function () {
        return c.toString() || "undefined"
    };
    this.getAllianceId = function () {
        return l
    };
    this.getArrivalTime = function () {
        return A
    };
    this.update = function () {
        if (b === cm.MARCH_STATUS.MARCH_STATUS_INACTIVE) {
            return
        }
        var C;
        if (d !== undefined) {
            d--;
            if (d <= 0) {
                d = undefined;
                C = new cm.IncomingAttackEvent(cm.IncomingAttackEvent.RECALL_DISSMISSED);
                C.setTarget(t);
                t.dispatchCustomEvent(C)
            }
        }
        if (typeof (A) !== "string" && typeof (A) !== "number") {
            return
        }
        var D = A - unixtime();
        if (D <= 0) {
            this.setMarchStatus(cm.MARCH_STATUS.MARCH_STATUS_INACTIVE)
        } else {
            if (x != D) {
                x = D;
                C = new cm.IncomingAttackEvent(cm.IncomingAttackEvent.ARRIVAL_TIME_CHANGED);
                C.setTarget(t);
                t.dispatchCustomEvent(C)
            }
        }
    };
    this.getCount = function () {
        return y
    };
    this.getDepartureTime = function () {
        return m
    };
    this.getMarchType = function () {
        return o
    };
    this.getPlayerId = function () {
        return v
    };
    this.getAttacker = function () {
        return a
    };
    this.setPlayers = function (C) {
        p = C
    };
    this.getScore = function () {
        return i
    };
    this.getDestinationCityId = function () {
        return e
    };
    this.getDestinationTileId = function () {
        return s
    };
    this.getKnight = function () {
        return z
    };
    this.getTroops = function () {
        return r
    };
    this.getResearches = function () {
        return k
    };
    this.getAlliance = function () {
        return n
    };
    this.getMarchName = function () {
        if (o) {
            return o == cm.MARCH_TYPES.MARCH_TYPE_SCOUT ? g_js_strings.commonstr.scout : g_js_strings.commonstr.attack
        } else {
            return "????"
        }
    };
    this.getTile = function () {
        return q
    };
    j()
};
cm.OOP.inherits(cm.IncomingAttack, cm.CustomEventDispatcher);
cm.IncomingAttack.RECALL_DISMISS_TIME = 300;
cm.IncomingAttackEvent = function (a) {
    cm.CustomEvent.call(this, a)
};
cm.OOP.inherits(cm.IncomingAttackEvent, cm.CustomEvent);
cm.IncomingAttackEvent.STATUS_CHANGED = "statusChanged";
cm.IncomingAttackEvent.ARRIVAL_TIME_CHANGED = "arrivalTimeChanged";
cm.IncomingAttackEvent.RECALL_DISSMISSED = "recallDismissed";
cm.IncomingAttackCompare = function (d, b) {
    var c = d.getArrivalTime() ? d.getArrivalTime() : Number.MAX_VALUE;
    var a = b.getArrivalTime() ? b.getArrivalTime() : Number.MAX_VALUE;
    return d.getArrivalTime() - b.getArrivalTime()
};
var cm = cm || {};
cm.IncomingAttackManager = new function () {
    var c;
    var a;
    var f = {};
    var e = {};
    var b;
    var d;
    this.add = function (i) {
        c.add(i, cm.IncomingAttackCompare);
        var g = i.getDestinationCityId().toString();
        var h;
        if (!f[g]) {
            h = new cm.BaseCollection();
            f[g] = h;
            e[g] = new cm.CityIncomingAttackController(h)
        }
        h = f[g];
        h.add(i, cm.IncomingAttackCompare)
    };
    this.remove = function (i) {
        c.remove(i);
        var g = i.getDestinationCityId().toString();
        if (f[g]) {
            var h = f[g];
            h.remove(i)
        }
    };
    this.getAttacksByCity = function (g) {
        return f[g.toString()]
    };
    this.getAllAttacks = function () {
        return c
    };
    this.getRecalledAttacks = function () {
        return b
    };
    this.recall = function (g) {
        if (!g || g.getMarchStatus() !== cm.MARCH_STATUS.MARCH_STATUS_ABORTING) {
            return
        }
        g.recall();
        b.add(g)
    };
    this.init = function () {
        c = new cm.BaseCollection();
        a = new cm.IncomingAttackController(c);
        b = new cm.BaseCollection();
        d = new cm.IncomingAttackRecalledController(b)
    }
}();
var cm = cm || {};
cm.IncomingAttackNotificationDialog = function (h) {
    cm.BaseDialog.call(this);
    var l = this;
    var c = this.getHtmlElement();
    var m = h;
    var i;
    var g;
    var f;
    var e;
    this.getLink = function () {
        return i
    };
    var a;
    var n = function () {
            var o = m.getArrivalTime();
            if (o) {
                g.innerHTML = cm.TimeFormatter.format(m.getArrivalTime() - unixtime())
            } else {
                g.innerHTML = ""
            }
        };
    var d = function (p) {
            var o = m.getMarchStatus();
            if (o == cm.MARCH_STATUS.MARCH_STATUS_INACTIVE || o == cm.MARCH_STATUS.MARCH_STATUS_ABORTING) {
                a()
            }
        };
    var b = function (o) {
            n()
        };
    var k = function (o) {
            a()
        };
    a = function () {
        Event.stopObserving(f, "click", k);
        m.removeEventListener(cm.IncomingAttackEvent.STATUS_CHANGED, d);
        m.removeEventListener(cm.IncomingAttackEvent.ARRIVAL_TIME_CHANGED, b);
        l.close()
    };
    var j = function () {
            m.addEventListener(cm.IncomingAttackEvent.STATUS_CHANGED, d);
            m.addEventListener(cm.IncomingAttackEvent.ARRIVAL_TIME_CHANGED, b);
            c.className = "announcementContainer incomingAttack";
            var r = document.createElement("div");
            r.className = "notificationDialog watchTower";
            c.appendChild(r);
            var s = document.createElement("div");
            s.className = "titleBar";
            r.appendChild(s);
            f = document.createElement("a");
            f.className = "closeButton";
            Event.observe(f, "click", k);
            s.appendChild(f);
            e = document.createElement("div");
            e.className = "count";
            s.appendChild(e);
            var q = document.createElement("div");
            q.className = "dialogTitle";
            q.innerHTML = g_js_strings.attack_generateincoming.impendingattack;
            s.appendChild(q);
            var t = document.createElement("div");
            t.className = "dialogBody";
            r.appendChild(t);
            i = document.createElement("a");
            i.href = "javascript:void(0)";
            var p = document.createTextNode(g_js_strings.attack_generateincoming.estimatedarrival + ": ");
            var o = m.getArrivalTime();
            if (!o) {
                p = document.createTextNode(g_js_strings.ImpendingAttacks.clickHere)
            }
            g = document.createElement("span");
            i.appendChild(p);
            i.appendChild(g);
            t.appendChild(i);
            n()
        };
    j()
};
cm.OOP.inherits(cm.IncomingAttackNotificationDialog, cm.BaseDialog);
cm.IncomingAttackDialogController = function (d, e) {
    var h;
    var b;
    var c;
    var a = function (l) {
            var i = cm.UserTileInfoFactory.getTileInfo(b.getDestinationCityId(), b.getDestinationTileId());
            var k = document.getElementById("citysel_" + (i.city.number + 1));
            citysel_click(k);
            var j = cm.WatchTowerList.getCityWatchTower(currentcityid);
            if (j) {
                modal_build(j.getSlot())
            }
        };
    var g = function (i) {
            h.removeEventListener(cm.DialogEvent.CLOSE, g);
            c.unbind("click", a)
        };
    var f = function () {
            b = d;
            h = e;
            h.addEventListener(cm.DialogEvent.CLOSE, g);
            c = jQuery(h.getLink());
            c.bind("click", a)
        };
    f()
};
cm.IncomingAttackTopNavNotification = function (i, k) {
    cm.CustomEventDispatcher.call(this);
    var j = this;
    var c;
    var g;
    var e;
    var f;
    var l;
    var b;
    var m = function () {
            var n = unixtime();
            if (!b) {
                b = unixtime()
            } else {
                if (n - b > 60) {
                    b = n;
                    g.src = g.src
                }
            }
        };
    var a = function (n) {
            m()
        };
    var d = function () {
            var n = l.getMarchStatus();
            if (n == cm.MARCH_STATUS.MARCH_STATUS_INACTIVE || n == cm.MARCH_STATUS.MARCH_STATUS_ABORTING) {
                j.remove()
            }
        };
    this.show = function () {
        e.appendChild(c)
    };
    this.remove = function () {
        try {
            e.removeChild(c);
            var n = new cm.IncomingAttackTopNavNotificationEvent(cm.IncomingAttackTopNavNotificationEvent.REMOVED);
            n.setTarget(j);
            j.dispatchCustomEvent(n);
            l.removeEventListener(cm.IncomingAttackEvent.STATUS_CHANGED, d);
            l.removeEventListener(cm.IncomingAttackEvent.ARRIVAL_TIME_CHANGED, a)
        } catch (o) {}
    };
    this.getHtmlElement = function () {
        return c
    };
    var h = function () {
            e = k;
            l = i;
            c = document.createElement("a");
            g = document.createElement("img");
            g.src = stimgUrl + "img/nav/attack_arrow.gif";
            c.appendChild(g);
            var o = document.createElement("div");
            o.className = "textContainer";
            c.appendChild(o);
            var n = document.createElement("span");
            n.className = "impendingAttackText";
            n.innerHTML = g_js_strings.ImpendingAttacks.impengingAttackGoToCity;
            o.appendChild(n);
            m();
            l.addEventListener(cm.IncomingAttackEvent.STATUS_CHANGED, d);
            l.addEventListener(cm.IncomingAttackEvent.ARRIVAL_TIME_CHANGED, a)
        };
    h()
};
cm.OOP.inherits(cm.IncomingAttackTopNavNotification, cm.CustomEventDispatcher);
cm.IncomingAttackTopNavNotificationEvent = function (a) {
    cm.CustomEvent.call(this, a)
};
cm.OOP.inherits(cm.IncomingAttackTopNavNotificationEvent, cm.CustomEvent);
cm.IncomingAttackTopNavNotificationEvent.REMOVED = "removed";
cm.IncomingAttackTopNavNotificationController = function (g, e) {
    var h = this;
    var i;
    var c;
    var d;
    var b = function (m) {
            var j = cm.UserTileInfoFactory.getTileInfo(i.getDestinationCityId(), i.getDestinationTileId());
            var l = document.getElementById("citysel_" + (j.city.number + 1));
            citysel_click(l);
            var k = cm.WatchTowerList.getCityWatchTower(currentcityid);
            if (k) {
                modal_build(k.getSlot())
            }
        };
    var a = function (j) {
            d.unbind("click", _onNotificationClicked);
            c.removeEventListener(cm.IncomingAttackTopNavNotificationEvent.REMOVED, _onNotificationRemoved)
        };
    var f = function () {
            c = e;
            i = g;
            d = jQuery(c.getHtmlElement());
            d.bind("click", b);
            c.addEventListener(cm.IncomingAttackTopNavNotificationEvent.REMOVED, a)
        };
    f()
};
var cm = cm || {};
cm.IncomingAttackRecalledDialog = function (e) {
    cm.BaseDialog.call(this);
    var i = this;
    var b = this.getHtmlElement();
    var j = e;
    var f;
    var d;
    var c;
    this.getLink = function () {
        return f
    };
    var a = function () {
            e.removeEventListener(cm.IncomingAttackEvent.RECALL_DISSMISSED, k);
            i.close()
        };
    var k = function (l) {
            a()
        };
    var h = function (l) {
            a()
        };
    var g = function () {
            b.className = "announcementContainer";
            var t = document.createElement("div");
            t.className = "notificationDialog watchTower recalled";
            b.appendChild(t);
            var r = document.createElement("div");
            r.className = "titleBar";
            t.appendChild(r);
            var n = document.createElement("a");
            n.className = "closeButton";
            r.appendChild(n);
            c = document.createElement("div");
            c.className = "count";
            r.appendChild(c);
            var l = document.createElement("div");
            l.className = "dialogTitle";
            l.innerHTML = g_js_strings.incomingattack.attackrecalled;
            r.appendChild(l);
            var q = document.createElement("div");
            q.className = "dialogBody";
            t.appendChild(q);
            var p = e.getPlayerId();
            var s = g_js_strings.incomingattack.unknown;
            if (p) {
                var m = j.getAttacker();
                s = m.name
            }
            f = document.createElement("a");
            f.href = "javascript:void(0)";
            var o = g_js_strings.incomingattack.attackfromattackerrecalled.replace("%1$s", s);
            f.innerHTML = cm.StringFormatter.ellipsis(o, 34);
            f.setAttribute("title", o);
            q.appendChild(f);
            e.addEventListener(cm.IncomingAttackEvent.RECALL_DISSMISSED, k);
            Event.observe(n, "click", h)
        };
    g()
};
cm.OOP.inherits(cm.IncomingAttackRecalledDialog, cm.BaseDialog);
var cm = cm || {};
cm.intelligentOrdering = function () {
    var d = [],
        a = [],
        e = [];
    e[1] = 60;
    e[2] = 900;
    e[3] = 3600;
    e[4] = 3600 * 2.5;
    e[5] = 3600 * 8;
    e[6] = 3600 * 15;
    e[7] = 3600 * 24;
    e[8] = 3600 * 60;
    e[10] = 3600 * 96;
    var g = e.clone().reverse();

    function b(k) {
        var j = e.length;
        for (var i = 1; i < j; i++) {
            if (e[i] >= k) {
                return "i" + i
            }
        }
        return "i" + (j - 1)
    }
    function h(k, m, j, l) {
        var i = l ? e : g;
        return i.reduce(function (p, o, n) {
            var r = l ? "i" + n : "i" + (e.length - 1 - n);
            var q = parseInt(o) > m;
            if (c(d, r) && k != r && !c(p, r) && ((j && q) || (!j && !q))) {
                return p.concat(r)
            } else {
                return p
            }
        }, [])
    }
    function c(j, k) {
        for (var i in j) {
            if (j.hasOwnProperty(i)) {
                if (i == k) {
                    return true
                }
            }
        }
        return false
    }
    function f(j) {
        for (var i in j) {
            if (parseInt(j[i]) == 0) {
                delete j[i]
            }
        }
        return j
    }
    return {
        getReduceTime: function (j) {
            return e[j]
        },
        get: function (k, i) {
            d = f(k);
            var j = b(i);
            return [j].concat(h(j, i, true, true), h(j, i, false, false))
        },
        test: function () {
            var i = [];
            i[0] = {
                i1: 23,
                i3: 178,
                i6: 2000,
                i9: 100
            };
            i[1] = {
                i3: 23,
                i4: 178,
                i8: 2000
            };
            i[2] = {
                i1: 23,
                i2: 178,
                i3: 2000,
                i4: 178,
                i5: 2000,
                i6: 178,
                i7: 2000,
                i8: 2000,
                i9: 200,
                i10: 2000
            };
            i[3] = {
                i2: 384,
                i4: 178,
                i7: 2000,
                i10: 203
            };
            i[4] = {
                i3: 253
            };
            i[5] = {
                i3: 423
            };
            cm.test.go("cm.intelligentOrdering", this.get(i[0], 1000).join(","), "i3,i6,i1");
            cm.test.go("cm.intelligentOrdering", this.get(i[0], 30).join(","), "i1,i3,i6");
            cm.test.go("cm.intelligentOrdering", this.get(i[0], 7200).join(","), "i4,i6,i3,i1");
            cm.test.go("cm.intelligentOrdering", this.get(i[1], 7280).join(","), "i4,i8,i3");
            cm.test.go("cm.intelligentOrdering", this.get(i[1], 5557280).join(","), "i10,i8,i4,i3");
            cm.test.go("cm.intelligentOrdering", this.get(i[2], 8540000).join(","), "i10,i8,i7,i6,i5,i4,i3,i2,i1");
            cm.test.go("cm.intelligentOrdering", this.get(i[2], 34).join(","), "i1,i2,i3,i4,i5,i6,i7,i8,i10");
            cm.test.go("cm.intelligentOrdering", this.get(i[2], 888).join(","), "i2,i3,i4,i5,i6,i7,i8,i10,i1");
            cm.test.go("cm.intelligentOrdering", this.get(i[3], 32888).join(","), "i6,i7,i10,i4,i2");
            cm.test.go("cm.intelligentOrdering", this.get(i[4], 1000).join(","), "i3");
            cm.test.go("cm.intelligentOrdering", this.get(i[5], 1000).join(","), "i3")
        }
    }
}();
cm.speedUpModalTimer = function (d) {
    var c, b = [],
        a;
    return {
        update: function (f, g, e) {
            if (f == c) {
                d(".speedUpModalTimeLeft").html(timestr(e))
            }
            b[f] = e;
            if (g == "1s" || e <= 1) {
                cm.speedUpModalTimer.endSpeedUpModal(f)
            }
        },
        endSpeedUpModal: function (e) {
            if ((e == c) && d("#modal_speedup").length > 0) {
                Modal.hideModal()
            }
            if (e == "bdg" && cm.guardianModalModel.upgrading()) {
                cm.ModalManager.close();
                cm.guardianModalModel.setUpgrade(false);
                cm.guardianModalModel.increaseLevel();
                cm.guardianCity.rerender(true)
            }
        },
        open: function (e) {
            c = e
        },
        removeType: function (e) {
            this.endSpeedUpModal(e);
            delete b[e]
        },
        getTimeLeft: function (e) {
            if (undefined === b[e]) {
                return 0
            }
            return b[e]
        },
        getCurrentModalTimeLeft: function () {
            return this.getTimeLeft(c)
        },
        redisplayModal: function (e) {
            if ((e && d("#modal_speedup").length > 0) || !e) {
                modal_speedup(a.type, a.typeid, a.slotid, a.subjectCurrentlyBuilding)
            }
        },
        saveLastSpeedUpModal: function (e) {
            a = e
        },
        goToSpeedups: function () {
            cm.ShopView.openShop(2)
        }
    }
}(jQuery);
cm = cm || {};
cm.InventoryView = function (D) {
    var U = [],
        S = [],
        Q = [],
        P = [],
        O = [],
        N = [],
        M, n, I = 9;
    var i = "<div id='inventoryModalContainer'><div id='inventoryModalHeader'><a class='button20' onclick='Modal.hideModalAll(); cm.ShopView.openShop();'><span>" + g_js_strings.modal_myitems.getmoreitems + "</span></a><div id='gemsContainer'><span class='label'> " + g_js_strings.commonstr.gems + " </span> <span id='inventoryGemQuantity' class='gemsQuantity'> </span><img src='img/gem.png' /><a class='buttonGreen20' onclick='cm.ConversionTracker.track(\"payments\", \"MORE_GEMS_MY_ITEMS\", \"\");modal_getgems();return false;'><span> + " + g_js_strings.modaltitles.getmoregems + " </span></a></div></div><div id='inventoryModalBody'><div id='inventoryTabs'><ul><li id='inventoryTab1' class='selected'><a onclick='cm.InventoryView.openTab(1);'> " + g_js_strings.commonstr.general + " </a></li><li id='inventoryTab2'><a onclick='cm.InventoryView.openTab(2);'> " + g_js_strings.commonstr.speedup + " </a></li><li id='inventoryTab3'><a onclick='cm.InventoryView.openTab(3);'> " + g_js_strings.commonstr.combat + " </a></li><li id='inventoryTab4'><a onclick='cm.InventoryView.openTab(4);'> " + g_js_strings.commonstr.resources + " </a></li><li id='inventoryTab5'><a onclick='cm.InventoryView.openTab(5);'> " + g_js_strings.commonstr.chest + " </a></li><li id='inventoryTab6'><a onclick='cm.InventoryView.openTab(6);'> " + g_js_strings.commonstr.court + " </a></li></ul></div><div id='inventoryMessage'></div><div id='inventoryBanner'></div><div id='inventoryItemsContainer'><a id='inventoryPrevPageButton' onclick='cm.InventoryView.goPrevPage();'></a><a id='inventoryNextPageButton' onclick='cm.InventoryView.goNextPage();'></a><ul id='inventoryItemsContainerList'></ul></div></div></div>";
    var R = D.template(null, "<li><div id='item${id}' class='item' name='${description}' onmouseover='cm.InventoryView.showItemTooltip(this, event);' onmouseout='removeTooltip();'><div class='name'>${name}</div><div class='info'><img src='img/items/70/${id}.jpg' /><a class='button20' onclick='cm.ItemController.use(${id});'><span id='item${id}ButtonText'>" + g_js_strings.commonstr.use + "</span></a><div class='ownedContainer'><span class='label'>" + g_js_strings.commonstr.owned + ":</span><span id='item${id}Count'>${count}</span></div></div></div></li>");
    var e = D.template(null, "<li><div id='item${id}' class='item' name='${description}' onmouseover='cm.InventoryView.showItemTooltip(this, event); 'onmouseoout='removeTooltip();'><div class='name'>${name}</div><div class='info'><img src='img/items/70/${id}.jpg' /><a class='button20' onclick='cm.ItemController.use(${id});'><span id='item${id}ButtonText'>" + g_js_strings.commonstr.equip + "</span></a><div class='ownedContainer'><span class='label'>" + g_js_strings.commonstr.owned + ":</span><span id='item${id}Count'>${count}</span></div></div></div></li>");
    var A = D.template(null, "<li><div id='item${id}' class='item' name='${description}' onmouseover='cm.InventoryView.showItemTooltip(this, event);' onmouseover='removeTooltip();'><div class='name'>${name}</div><div class='info'><img src='img/items/70/${id}.jpg' /><a class='button20' onclick='cm.ItemController.use(${id});'><span id='item${id}ButtonText'>" + g_js_strings.commonstr.unequip + "</span></a><div class='ownedContainer'><span class='label'>" + g_js_strings.commonstr.owned + ":</span><span id='item${id}Count'>${count}</span></div></div></div></li>");
    var g = D.template(null, "<li><div id='item${id}' class='item' name='${description}' onmouseover='cm.InventoryView.showItemTooltip(this, event);' onmouseout='removeTooltip();'><div class='name'>${name}</div><div class='info'><img src='img/items/70/${id}.jpg' /><div class='ownedContainer'><span class='label'>" + g_js_strings.commonstr.owned + ":</span><span id='item${id}Count'>${count}</span></div></div></div></li>");
    var T = "<div id='itemsInChestContainer'><div class='title'> " + g_js_strings.modal_chest_itemusage.itemsgained + " </div><ul id='itemsInChestContainerList'></ul><a class='button20' onclick='Modal.hideModal();'><span> " + g_js_strings.commonstr.ok + " </span></a></div>";
    var x = D.template(null, "<li><img src='img/items/70/${id}.jpg' /><span class='name'>${name}</span><span class='count'>${count}</span></li>");
    var V = "<div id='portalOfRefugeContainer'> <div id='provinceContainer'> <div id='currentProvinceContainer'> <span class='label'>" + g_js_strings.modal_myitems_use_teleportprovince.yourcurrentprov + "</span> - <span id='currentProvinceName' class='name'></span> </div> <div id='newProvinceContainer'> <span class='label'>" + g_js_strings.modal_myitems_use_teleportprovince.newprov + "</span> <select id='provinceNamesList'> </select> </div><div id='teleportError' style='display: none;'></div></div><div class='buttonContainer'><a class='button20' onclick='cm.ItemController.usePortalOfRefuge(911);'><span>" + g_js_strings.commonstr.submit + "</span></a><a onclick='Modal.hideModal();'>" + g_js_strings.commonstr.cancel + "</a></div></div>";
    var aa = D.template(null, "<option value='${value}'>${name}</option>");
    var E = "<div id='portalOfOrderContainer'><div id='coordinatesContainer'><div id='currentCoordinatesContainer'><span class='label'>" + g_js_strings.modal_myitems_use_teleport.currentcoor + " - </span>X: <span id='xCoordinate'></span> Y: <span id='yCoordinate'></span></div><div id='newCoordinatesContainer'><span class='label'>" + g_js_strings.modal_myitems_use_escape.newcoor + "</span><div id='newCoordinatesInputsContainer'>X: <input type='text' id='newXCoordinate' maxLength='3' />Y: <input type='text' id='newYCoordinate' maxLength='3' /></div></div><div id='teleportError' style='display: none;'></div></div><div class='buttonContainer'><a class='button20' onclick='cm.ItemController.usePortalOfOrder(912);'><span>" + g_js_strings.commonstr.submit + "</span></a><a onclick='Modal.hideModal();'>" + g_js_strings.commonstr.cancel + "</a></div></div>";
    var o = "<div id='portalConfirmContainer'> <div id='portalConfirmInfoContainer'> <div id='portalItemNameContainer'></div> <div id='teleportCoordinateContainer'></div> </div> <div class='buttonContainer'><a id='portalConfirmOKButton' class='button20'><span>" + g_js_strings.commonstr.ok + "</span></a></div></div>";
    var J = "<div id='merlinsCloakContainer'><div id='merlinsCloakNameContainer'><div id='currentNameContainer'><span class='label'>" + g_js_strings.modal_get_cloak_name.yourcurrentname + "</span><span id='merlinsCloakCurrentName'></span></div><div id='newNameContainer'><span id='newNamePrefix' class='label'>" + g_js_strings.modal_get_cloak_name.newname + "</span><input type='text' id='merlinsCloakNewName' /></div><div id='merlinsCloakError'></div></div><div class='buttonContainer'><a class='button20' onclick='cm.ItemController.useMerlinsCloak(922);'><span>" + g_js_strings.commonstr.submit + "</span></a><a onclick='Modal.hideModal();'>" + g_js_strings.commonstr.cancel + "</a></div></div>";
    var X = "<div id='merlinsEscapeContainer'><div id='nameContainer'><div id='currentNameContainer'><span class='label'>" + g_js_strings.modal_get_cloak_name.yourcurrentname + "</span>: <span id='merlinsCloakCurrentName'></span></div><div id='newNameContainer'><span id='newNamePrefix' class='label'>" + g_js_strings.modal_get_cloak_name.newname + "</span><input type='text' id='merlinsEscapeNewName' /></div></div><div id='coordinatesContainer'><div id='currentCoordinatesContainer'><span class='label'>" + g_js_strings.modal_myitems_use_teleport.currentcoor + " - </span>X: <span id='xCoordinate'></span> Y: <span id='yCoordinate'></span></div><div id='newCoordinatesContainer'><span class='label'>" + g_js_strings.modal_myitems_use_escape.newcoor + "</span><div id='newCoordinatesInputsContainer'>X: <input type='text' id='newXCoordinate' maxLength='3' />Y: <input type='text' id='newYCoordinate' maxLength='3' /></div></div></div><div id='escapeError'></div><div class='buttonContainer'><a class='button20' onclick='cm.ItemController.useMerlinsEscape(924);'><span>" + g_js_strings.commonstr.submit + "</span></a><a onclick='Modal.hideModal();'>" + g_js_strings.commonstr.cancel + "</a></div></div>";
    var w = "<div id='merlinsEscapeConfirmContainer'><div id='confirmContainer'><p id='itemUsedContainer'></p><p id='nameChangedContainer'></p><p id='teleportedToContainer'></p></div><a id='merlinsEscapeConfirmButton' class='button20' onclick=''><span>" + g_js_strings.commonstr.ok + "</span></a></div>";
    var z = "<div id='potionOfMistContainer'><div id='potionOfMistMessage'>" + g_js_strings.modal_myitems_confirm_potion_mist.mistwarning + "</div><div class='buttonContainer'><a class='button20' onclick='cm.ItemController.usePotionOfMist(10021);'><span>" + g_js_strings.modal_myitems_confirm_potion_mist.usemists + "</span></a><a class='button20' onclick='Modal.hideModal();'><span>" + g_js_strings.commonstr.cancel + "</span></a></div></div>";
    var W = "<div id='renamingCelebrationContainer'><div id='nameContainer'><div id='currentCityContainer'><span class='label'>" + g_js_strings.modal_rename_celebration.currentcity + ": </span><span id='currentCityName'></span></div><div id='newCityContainer'><span class='label'>" + g_js_strings.modal_rename_celebration.newcityname + "</span><input type='text' id='newCityName' /></div><div id='cityNameError'></div></div><div class='buttonContainer'><a class='button20' onclick='cm.ItemController.useRenamingCelebration(923);'><span>" + g_js_strings.commonstr.submit + "</span></a><a onclick='Modal.hideModal();'>" + g_js_strings.commonstr.cancel + "</a></div></div>";
    var Z = "<div id='renamingCelebrationConfirmContainer'><div class='confirmContainer'><p id='confirmMessage'></p><div><span class='label'>" + g_js_strings.modal_rename_celebration.newcityname + ": </span><span id='newCityName'></span></div></div><a id='renamingCelebrationConfirmOKButton' class='button20' onclick=''><span>" + g_js_strings.commonstr.ok + "</span></a></div>";
    var v = "<div id='vacationModeContainer'><div id='vacationModeWarningContainer'><span id='vacationModeWarning'></span><p id='vacationModeMessage'></p></div><div class='buttonContainer'> <a class='button20' onclick='cm.ItemController.useVacationMode(902);'><span>" + g_js_strings.modal_myitems_confirm_potion_mist.usevacation + "</span></a><a class='button20' onclick='Modal.hideModal()'><span>" + g_js_strings.commonstr.cancel + "</span></a></div></div>";
    var y = "<div id='vacationModeContainer'><div id='vacationModeWarningContainer'><span id='vacationModeWarning'></span><p id='vacationModeMessage'></p></div><div class='buttonContainer'> <a class='button20' onclick='cm.ItemController.useVacationMode(903);'><span>" + g_js_strings.modal_myitems_confirm_potion_mist.usevacation + "</span></a><a class='button20' onclick='Modal.hideModal()'><span>" + g_js_strings.commonstr.cancel + "</span></a></div></div>";
    var r = function (ah) {
            ah = ah || 1;
            n = 1;
            var af = g_js_strings.changeview_court_content.myitems;
            var ag;
            if (cm.WorldSettings.hasKeyValuePair("MIGRATION1", "true")) {
                ag = g_js_strings.modal_shop_buy_banner.banner_exclusiveitemsonkabam;
                var ae;
                if (seed.platform.type == "facebook") {
                    ae = "<div class='msg'><a href='" + seed.platform.url + "' target='_top'>" + ag + "</a></div>"
                } else {
                    ae = "<div class='msg'>" + ag + "</div>"
                }
                var ad = "new"
            } else {
                ag = "";
                var ae;
                ae = "<div class='msg'>" + ag + "</div>";
                var ad = ""
            }
            Modal.showModal(740, 400, 10, 10, af, i);
            if (cm.WorldSettings.hasKeyValuePair("MIGRATION1", "true")) {
                D("#inventoryBanner").addClass("fancy_banner")
            }
            D("#inventoryGemQuantity").text(seed.player.gems);
            D("#inventoryBanner").html(ae);
            D("#inventoryBanner").addClass(ad);
            a();
            k(ah)
        };
    var a = function () {
            var ad;
            U = [];
            S = [];
            Q = [];
            P = [];
            O = [];
            N = [];
            D.each(ksoItems, function (ae, af) {
                if (![1062, 598].include(af.id)) {
                    if (af && af.count > 0) {
                        switch (af.category) {
                        case 1:
                            U.push(af);
                            break;
                        case 2:
                            S.push(af);
                            break;
                        case 3:
                            Q.push(af);
                            break;
                        case 4:
                            P.push(af);
                            break;
                        case 5:
                            O.push(af);
                            break;
                        case 6:
                            N.push(af);
                            break;
                        default:
                            U.push(af);
                            break
                        }
                    }
                }
            })
        };
    var k = function (ad) {
            n = 1;
            D("div#inventoryMessage").hide();
            D("li#inventoryTab" + M).removeClass("selected");
            M = Number(ad);
            D("li#inventoryTab" + M).addClass("selected");
            a();
            b()
        };
    var b = function () {
            var ad, ae, ai;
            switch (M) {
            case 1:
                ad = U;
                break;
            case 2:
                ad = S;
                break;
            case 3:
                ad = Q;
                break;
            case 4:
                ad = P;
                break;
            case 5:
                ad = O;
                break;
            case 6:
                ad = N;
                break;
            default:
                ad = U;
                break
            }
            u(ad.length);
            H(ad.length);
            if (n < 0) {
                n = 1
            }
            ae = (n - 1) * I;
            ai = n * I;
            ad = ad.slice(ae, ai);
            D("#inventoryItemsContainerList").empty();
            if (ad.length > 0) {
                D.each(ad, function (aj, ak) {
                    if (ak.usable) {
                        D.tmpl(R, ak).appendTo("#inventoryItemsContainerList")
                    } else {
                        if (ak.equippable) {
                            if (ak.isEquipped) {
                                D.tmpl(A, ak).appendTo("#inventoryItemsContainerList")
                            } else {
                                D.tmpl(e, ak).appendTo("#inventoryItemsContainerList")
                            }
                        } else {
                            D.tmpl(g, ak).appendTo("#inventoryItemsContainerList")
                        }
                    }
                })
            } else {
                var ah = "",
                    af = "";
                switch (M) {
                case 1:
                    ah = g_js_strings.modal_myitems.ownnogeneral;
                    af = "Modal.hideModal(); modal_shop(1); return false;";
                    break;
                case 2:
                    ah = g_js_strings.modal_myitems.ownnospeedup;
                    af = "Modal.hideModal(); modal_shop(2); return false;";
                    break;
                case 3:
                    ah = g_js_strings.modal_myitems.ownnoattack;
                    af = "Modal.hideModal(); modal_shop(3); return false;";
                    break;
                case 4:
                    ah = g_js_strings.modal_myitems.ownnoprod;
                    af = "Modal.hideModal(); modal_shop(4); return false;";
                    break;
                case 5:
                    ah = g_js_strings.modal_myitems.ownnochest;
                    af = "Modal.hideModal(); modal_shop(5); return false;";
                    break;
                case 6:
                    ah = g_js_strings.modal_myitems.ownnocourt;
                    af = "Modal.hideModal(); modal_shop(6); return false;";
                    break;
                default:
                    ah = g_js_strings.modal_myitems.ownnogeneral;
                    af = "Modal.hideModal(); modal_shop(1); return false;";
                    break
                }
                var ag = "<li><div id='emptyInventory'><p>" + ah + "</p><div class='buttonCotainer'><a class='button20' onclick='" + af + "'><span>" + g_js_strings.commonstr.buymore + "</span></a></div></div></li>";
                D(ag).appendTo("#inventoryItemsContainerList")
            }
        };
    var H = function (ah) {
            var af = Math.ceil(ah / I),
                ae = [],
                ag = [];
            if (af != 1) {
                for (var ad = 1; ad <= af; ++ad) {
                    ag.push("<li class='page'>");
                    if (ad == n) {
                        ag.push("<span class='current'>" + ad + "</span>")
                    } else {
                        ag.push("<span onclick='cm.InventoryView.goToPage(" + ad + ");'>" + ad + "</span>")
                    }
                    ag.push("</li>")
                }
                if (D("#inventoryPaginationList").length != 0) {
                    D("#inventoryPaginationList").empty();
                    D("#inventoryPaginationList").append(ag.join(""))
                } else {
                    ae.push("<ul id='inventoryPaginationList'>");
                    ae.push(ag.join(""));
                    ae.push("</ul>");
                    D("#inventoryBanner").append(ae.join(""))
                }
            } else {
                D("#inventoryPaginationList").remove()
            }
        };
    var u = function (af) {
            var ae = Math.ceil(af / I),
                ad = D("a#inventoryPrevPageButton"),
                ag = D("a#inventoryNextPageButton").hide();
            if (ae > 1) {
                if (n > 1) {
                    if ((n < ae) && (n > 1)) {
                        ad.show();
                        ag.show()
                    } else {
                        if (n == ae) {
                            ad.show();
                            ag.hide()
                        } else {
                            ad.hide();
                            ag.show()
                        }
                    }
                } else {
                    ad.hide();
                    ag.show()
                }
            } else {
                ad.hide();
                ag.hide()
            }
        };
    var h = function () {
            ++n;
            b();
            a();
            b()
        };
    var ac = function () {
            --n;
            a();
            b()
        };
    var m = function (ad) {
            n = ad;
            a();
            b()
        };
    var l = function (ae, ad) {
            showTooltip(ae.getAttribute("name"), ae, ad, "inventoryItemsContainer")
        };
    var C = function (ag) {
            seed.items["i" + ag] = Number(seed.items["i" + ag]) - 1;
            ksoItems[ag].subtract();
            var ae = seed.items["i" + ag],
                af = ksoItems[ag].count;
            if (ae === 0 && af === 0) {
                D("#item" + ag).remove()
            } else {
                D("#item" + ag + "Count").text(seed.items["i" + ag].toString());
                D("#item" + ag + "Count").text(ksoItems[ag].count.toString())
            }
            if (D(".item").length === 0) {
                ac()
            } else {
                a();
                b()
            }
            var ad = g_js_strings.modal_myitems_use.uused.replace("%1$s", itemlist["i" + ag].name);
            D("#inventoryMessage").text(ad);
            D("#inventoryMessage").show()
        };
    var L = function (ad) {
            if (ksoItems[ad].isEquipped) {
                D("span#item" + ad + "ButtonText").text(g_js_strings.commonstr.unequip)
            } else {
                D("span#item" + ad + "ButtonText").text(g_js_strings.commonstr.equip)
            }
        };
    var K = function (ad, ae) {
            var af = itemlist["i" + ae].name || ksoItems[ae].name;
            Modal.showModal(500, 500, 10, 10, af, T);
            f(ad)
        };
    var f = function (ad) {
            D.tmpl(x, ad).appendTo("#itemsInChestContainerList")
        };
    var Y = function (ag) {
            var ae, ad = [];
            var af = itemlist["i" + ag].name || ksoItems[ag];
            Modal.showModal(500, 500, 10, 10, af, V);
            D.each(provincenames, function (ah, ai) {
                ae = {};
                ae.value = ah.split("p")[1];
                ae.name = ai;
                ad.push(ae)
            });
            D.tmpl(aa, ad).appendTo("#provinceNamesList");
            D("span#currentProvinceName").text(provincenames["p" + currentcityinfo[4]])
        };
    var p = function (ag, ad, ah) {
            var ae = g_js_strings.modal_myitems_use_teleportprovince_do.aused.replace("%1$s", itemlist["i" + ag].name),
                af = g_js_strings.modal_myitems_use_teleportprovince_do.teleportto + ": " + ad + "," + ah;
            title = itemlist["i" + ag].name || ksoItems[ag];
            Modal.showModal(500, 500, 10, 10, title, o);
            D("#portalItemNameContainer").text(ae);
            D("#teleportCoordinateContainer").text(af);
            if (ag == 912 || ag == 911) {
                D("#portalConfirmOKButton").attr("onclick", "");
                D("#portalConfirmOKButton").click(function () {
                    top.location = appUrl
                })
            }
        };
    var G = function (ag) {
            var af = itemlist["i" + ag].name || ksoItems[ag],
                ad = currentcityinfo[2],
                ae = currentcityinfo[3];
            Modal.showModal(500, 500, 10, 10, af, E);
            D("#xCoordinate").text(ad);
            D("#yCoordinate").text(ae)
        };
    var j = function () {
            var ae = g_js_strings.modaltitles.renamecelebration,
                af;
            Modal.showModal(500, 500, 10, 10, ae, W);
            for (var ad = 0; ad < seed.cities.length; ad++) {
                if (Number(seed.cities[ad][0]) == Number(currentcityid)) {
                    af = seed.cities[ad][1];
                    break
                }
            }
            D("#currentCityName").text(af)
        };
    var c = function (ad, ae) {
            var af = g_js_strings.modal_rename_celebration.newcityname;
            Modal.showModal(500, 500, 10, 10, af, Z);
            D("#confirmMessage").text(ad);
            D("#newCityName").text(ae);
            D("#renamingCelebrationConfirmOKButton").click(function () {
                top.location = appUrl
            })
        };
    var d = function () {};
    var F = function () {
            var ad = g_js_strings.modaltitles.magiccloak;
            Modal.showModal(500, 500, 10, 10, ad, J);
            D("#newNamePrefix").text(seed.player.prefix);
            D("#merlinsCloakCurrentName").text(seed.player.prefix + " " + seed.player.name)
        };
    var ab = function (ag) {
            var af = itemlist["i" + 924].name,
                ad = currentcityinfo[2],
                ae = currentcityinfo[3];
            Modal.showModal(500, 500, 10, 10, af, X);
            D("#merlinsCloakCurrentName").text(seed.player.prefix + " " + seed.player.name);
            D("newNamePrefix").text(seed.player.prefix);
            D("xCoordinate").text(ad);
            D("yCoordinate").text(ae)
        };
    var q = function (ai, ae, aj) {
            var ah = itemlist["i" + ai].name || ksoItems[ai].name,
                ag, af, ad;
            ag = g_js_strings.modal_myitems_use_escape_do.aused.replace("%1$s", itemlist["i" + ai].name);
            af = g_js_strings.modal_myitems_use_escape_do.namechangedto + " " + seed.player.prefix + " " + seed.player.name;
            ad = g_js_strings.modal_myitems_use_escape_do.teleportto + " " + ae + "," + aj;
            Modal.showModal(500, 500, 10, 10, ah, w);
            D("#itemUsedContainer").text(ag);
            D("#nameChangedContainer").text(af);
            D("#teleportedToContainer").text(ad);
            D("#merlinsEscapeConfirmButton").click(function () {
                top.location = appUrl
            })
        };
    var B = function (ag) {
            var af = g_js_strings.modaltitles.notice,
                ad = (ag == 902) ? v : y,
                ae = (ag == 902) ? g_js_strings.vacationMode.modal_myitems_confirm_vacation3_msg : g_js_strings.vacationMode.modal_myitems_confirm_vacation7_msg;
            Modal.showModal(400, 400, 150, 150, af, ad);
            D("#vacationModeWarning").text(g_js_strings.modal_myitems_warning);
            D("#vacationModeMessage").text(ae)
        };
    var t = function () {
            var ad = g_js_strings.modaltitles.notice;
            Modal.showModal(400, 400, 150, 150, ad, z)
        };
    var s = function () {};
    s();
    return {
        showItemTooltip: l,
        openInventory: r,
        openTab: k,
        goNextPage: h,
        goPrevPage: ac,
        goToPage: m,
        removeItemFromInventory: C,
        openItemsInChestModal: K,
        toggleCourtItem: L,
        openPortalOfRefugeModal: Y,
        openPortalOfOrderModal: G,
        openPortalConfirmModal: p,
        openMerlinsCloakModal: F,
        openMerlinsEscapeModal: ab,
        openMerlinsEscapeConfirmModal: q,
        openRenamingCelebrationModal: j,
        openRenamingCelebrationConfirmModal: c,
        openRenamingRitualModal: d,
        openVacationModeModal: B,
        openPotionOfMistModal: t,
        removeItemFromInventory: C
    }
}(jQuery);
var cm = cm || {};
cm.InviteTypes = {
    INVITE_TYPE_GENERAL: 1,
    INVITE_TYPE_FAST_BUILDER: 2,
    INVITE_TYPE_GIFTING: 3,
    INVITE_TYPE_TELLFRIENDS: 10,
    INVITE_TYPE_GIFT: 5,
    INVITE_TYPE_APPOINTKNIGHT: 6,
    INVITE_TYPE_NEWSLETTER: 8,
    INVITE_TYPE_DAILY_GIFT: 9,
    INVITE_TYPE_SUGGEST_INVITE: 13,
    INVITE_TYPE_CASTLE_LV_2: 14,
    INVITE_TYPE_VIRALUEP_0: 15,
    INVITE_TYPE_VIRALUEP_1: 16,
    INVITE_TYPE_WELCOME: 17,
    INVITE_TYPE_TUTORIAL: 18,
    INVITE_TYPE_SKIP: 19
};
var cm = function (b, d) {
        var e = b.invite = b.invite || {};
        var c = false;
        var a;
        d(document).ready(function () {
            d(".invite_friends").live("click", e.open);
            a = g_popInviteType ? g_popInviteType : cm.InviteTypes.INVITE_TYPE_GENERAL
        });
        e.open = function () {
            d("#invitePopup").show();
            c = true
        };
        e.close = function () {
            d("#invitePopup").hide();
            c = false
        };
        e.load = function (g, f) {
            if (a !== g || f) {
                a = g;
                cm.IframeUtil.post("invitePopup", g_baseInviteIframeURL + "&type=" + g)
            }
        };
        e.isShowing = function () {
            return c
        };
        return b
    }(cm, jQuery);
cm.BootLoader.add(function () {
    cm.invite.load(g_popInviteType ? g_popInviteType : cm.InviteTypes.INVITE_TYPE_GENERAL, true)
});
cm = cm || {};
cm.ItemController = function ($) {
    var init_ = function () {};
    var use = function (itemId) {
            itemId = Number(itemId);
            if ([101, 102, 111, 112, 121, 122, 131, 132, 141, 142].include(itemId)) {
                useProductionBoost(itemId)
            } else {
                if ([261, 262, 271, 272, 276, 277, 278, 279, 280, 281, 282, 283].include(itemId)) {
                    useCombatBoost(itemId)
                } else {
                    if ((itemId >= 273 && itemId <= 275) || itemId == 284) {
                        useTroopUpkeepBoost(itemId)
                    } else {
                        if ([501, 502, 503, 504, 505, 531].include(itemId)) {
                            useMultiItemChest(itemId)
                        } else {
                            if ([511, 512, 513, 514].include(itemId)) {
                                useKnightInABox(itemId)
                            } else {
                                if ([521, 522, 523, 524].include(itemId) || (itemId >= 1300 && itemId <= 1415)) {
                                    useUnitsItem(itemId)
                                } else {
                                    if (itemId > 700 && itemId < 900) {
                                        useCourtItem(itemId)
                                    } else {
                                        if (itemId > 1000 && itemId < 1050) {
                                            useResourceItem(itemId)
                                        } else {
                                            if (itemId == 10028) {
                                                useMysteryChest(10028)
                                            } else {
                                                if (itemId == 10029) {
                                                    cm.chestItemUsage.open(10029)
                                                } else {
                                                    if ((itemId >= 10000 && itemId <= 10020) || (itemId >= 10022 && itemId <= 10027) || (itemId == 10030) || (itemId == 10031) || itemId == 942) {
                                                        useItemChest(itemId)
                                                    } else {
                                                        switch (itemId) {
                                                        case 351:
                                                            useFertileWinds(itemId);
                                                            break;
                                                        case 355:
                                                            useMassHypnosis(itemId);
                                                            break;
                                                        case 599:
                                                            cm.mww.modal_mmb();
                                                            break;
                                                        case 901:
                                                            useDoveOfPeace(itemId);
                                                            break;
                                                        case 902:
                                                            cm.InventoryView.openVacationModeModal(itemId);
                                                            break;
                                                        case 903:
                                                            cm.InventoryView.openVacationModeModal(itemId);
                                                            break;
                                                        case 911:
                                                            cm.InventoryView.openPortalOfRefugeModal(itemId);
                                                            break;
                                                        case 912:
                                                            cm.InventoryView.openPortalOfOrderModal(itemId);
                                                            break;
                                                        case 922:
                                                            cm.InventoryView.openMerlinsCloakModal(itemId);
                                                            break;
                                                        case 923:
                                                            cm.InventoryView.openRenamingCelebrationModal(itemId);
                                                            break;
                                                        case 924:
                                                            cm.InventoryView.openMerlinsEscapeModal(itemId);
                                                            break;
                                                        case 2000:
                                                            cm.item.use(2000);
                                                            break;
                                                        case 10021:
                                                            cm.InventoryView.openPotionOfMistModal(itemId);
                                                            break
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        };
    var useProductionBoost = function (iid) {
            var params = Object.clone(g_ajaxparams);
            params.iid = iid;
            params.cid = currentcityid;
            new Ajax.Request(g_ajaxpath + "ajax/boostProduction.php" + g_ajaxsuffix, {
                method: "post",
                parameters: params,
                onSuccess: function (transport) {
                    var rslt = eval("(" + transport.responseText + ")");
                    if (rslt.ok) {
                        if (rslt.updateSeed) {
                            update_seed(rslt.updateSeed)
                        }
                        if (seed.playerEffects.length == 0) {
                            seed.playerEffects = new Object
                        }
                        var ut = unixtime();
                        var bst = 86400;
                        if (iid == 101 || iid == 102) {
                            if (!(parseInt(seed.playerEffects.r0BstExp) > ut)) {
                                seed.playerEffects.r0BstExp = ut
                            }
                            if (iid == 102) {
                                bst = 604800
                            }
                            seed.playerEffects.r0BstExp = parseInt(seed.playerEffects.r0BstExp) + bst
                        }
                        if (iid == 111 || iid == 112) {
                            if (!(parseInt(seed.playerEffects.r1BstExp) > ut)) {
                                seed.playerEffects.r1BstExp = ut
                            }
                            if (iid == 112) {
                                bst = 604800
                            }
                            seed.playerEffects.r1BstExp = parseInt(seed.playerEffects.r1BstExp) + bst
                        }
                        if (iid == 121 || iid == 122) {
                            if (!(parseInt(seed.playerEffects.r2BstExp) > ut)) {
                                seed.playerEffects.r2BstExp = ut
                            }
                            if (iid == 122) {
                                bst = 604800
                            }
                            seed.playerEffects.r2BstExp = parseInt(seed.playerEffects.r2BstExp) + bst
                        }
                        if (iid == 131 || iid == 132) {
                            if (!(parseInt(seed.playerEffects.r3BstExp) > ut)) {
                                seed.playerEffects.r3BstExp = ut
                            }
                            if (iid == 132) {
                                bst = 604800
                            }
                            seed.playerEffects.r3BstExp = parseInt(seed.playerEffects.r3BstExp) + bst
                        }
                        if (iid == 141 || iid == 142) {
                            if (!(parseInt(seed.playerEffects.r4BstExp) > ut)) {
                                seed.playerEffects.r4BstExp = ut
                            }
                            if (iid == 142) {
                                bst = 604800
                            }
                            seed.playerEffects.r4BstExp = parseInt(seed.playerEffects.r4BstExp) + bst
                        }
                        cm.InventoryView.removeItemFromInventory(iid);
                        update_boosts()
                    }
                },
                onFailure: function () {}
            })
        };
    var useCombatBoost = function (iid) {
            var params = Object.clone(g_ajaxparams);
            params.iid = iid;
            params.cid = currentcityid;
            new Ajax.Request(g_ajaxpath + "ajax/boostCombat.php" + g_ajaxsuffix, {
                method: "post",
                parameters: params,
                onSuccess: function (transport) {
                    var rslt = eval("(" + transport.responseText + ")");
                    if (rslt.ok) {
                        if (rslt.updateSeed) {
                            update_seed(rslt.updateSeed)
                        }
                        if (seed.playerEffects.length == 0) {
                            seed.playerEffects = new Object
                        }
                        var ut = unixtime();
                        var bst = 86400;
                        var hours4 = 60 * 60 * 4;
                        if (iid == 261 || iid == 262) {
                            if (!(parseInt(seed.playerEffects.atkExpire) > ut)) {
                                seed.playerEffects.atkExpire = ut
                            }
                            if (iid == 262) {
                                bst = 604800
                            }
                            seed.playerEffects.atkExpire = parseInt(seed.playerEffects.atkExpire) + bst
                        } else {
                            if (iid == 271 || iid == 272) {
                                if (!(parseInt(seed.playerEffects.defExpire) > ut)) {
                                    seed.playerEffects.defExpire = ut
                                }
                                if (iid == 272) {
                                    bst = 604800
                                }
                                seed.playerEffects.defExpire = parseInt(seed.playerEffects.defExpire) + bst
                            } else {
                                if (iid == 280) {
                                    if (!(parseInt(seed.playerEffects.atk2Expire) > ut)) {
                                        seed.playerEffects.atk2Expire = ut
                                    }
                                    seed.playerEffects.atk2Expire = parseInt(seed.playerEffects.atk2Expire) + hours4;
                                    if (seed.playerEffects.atkExpire && parseInt(seed.playerEffects.atkExpire) > ut) {
                                        seed.playerEffects.atkExpire = parseInt(seed.playerEffects.atkExpire) + hours4
                                    }
                                }
                            }
                        }
                        if (iid == 281) {
                            if (!(parseInt(seed.playerEffects.def2Expire) > ut)) {
                                seed.playerEffects.def2Expire = ut
                            }
                            seed.playerEffects.def2Expire = parseInt(seed.playerEffects.def2Expire) + hours4;
                            if (seed.playerEffects.defExpire && parseInt(seed.playerEffects.defExpire) > ut) {
                                seed.playerEffects.defExpire = parseInt(seed.playerEffects.defExpire) + hours4
                            }
                        } else {
                            if (iid >= 276 && iid <= 278) {
                                bst = 3600 * Math.pow(2, (iid - 276));
                                if (!(parseInt(seed.playerEffects.loadExpire) > ut)) {
                                    seed.playerEffects.loadExpire = ut
                                }
                                seed.playerEffects.loadExpire = parseInt(seed.playerEffects.loadExpire) + bst
                            } else {
                                if (iid == 279) {
                                    bst = 3600;
                                    if (!(parseInt(seed.playerEffects.returnExpire) > ut)) {
                                        seed.playerEffects.returnExpire = ut
                                    }
                                    seed.playerEffects.returnExpire = parseInt(seed.playerEffects.returnExpire) + bst
                                } else {
                                    if (iid == 282 || iid == 283) {
                                        var expireTime;
                                        bst = (iid == 282) ? 86400 : 604800;
                                        if (seed.playerEffects.lifeExpire) {
                                            expireTime = Number(seed.playerEffects.lifeExpire);
                                            if (expireTime < unixtime()) {
                                                seed.playerEffects.lifeExpire = unixtime() + bst
                                            } else {
                                                seed.playerEffects.lifeExpire = expireTime + bst
                                            }
                                        } else {
                                            seed.playerEffects.lifeExpire = unixtime() + bst
                                        }
                                    }
                                }
                            }
                        }
                        cm.InventoryView.removeItemFromInventory(iid);
                        update_boosts()
                    }
                },
                onFailure: function () {}
            })
        };
    var useTroopUpkeepBoost = function (itemId) {
            var boostTime, params = Object.clone(g_ajaxparams);
            params.iid = itemId;
            new Ajax.Request(g_ajaxpath + "ajax/reduceTroopUpkeep.php" + g_ajaxsuffix, {
                method: "post",
                parameters: params,
                onSuccess: function (transport) {
                    var rslt = eval("(" + transport.responseText + ")");
                    if (rslt.ok) {
                        if (rslt.updateSeed) {
                            update_seed(rslt.updateSeed)
                        }
                        if (seed.playerEffects.length == 0) {
                            seed.playerEffects = new Object
                        }
                        if (itemId == 273) {
                            boostTime = 28800
                        } else {
                            if (itemId == 274) {
                                boostTime = 86400
                            } else {
                                if (itemId == 275) {
                                    boostTime = 259200
                                } else {
                                    if (itemId == 284) {
                                        boostTime = 604800
                                    }
                                }
                            }
                        }
                        if (!(Number(seed.playerEffects.troopUpkeepReductExp) > unixtime())) {
                            seed.playerEffects.troopUpkeepReductExp = unixtime()
                        }
                        if (seed.playerEffects.troopUpkeepReductExp) {
                            seed.playerEffects.troopUpkeepReductExp = Number(seed.playerEffects.troopUpkeepReductExp) + boostTime
                        } else {
                            seed.playerEffects.troopUpkeepReductExp = unixtime() + boostTime
                        }
                        cm.InventoryView.removeItemFromInventory(itemId);
                        update_boosts()
                    }
                },
                onFailure: function () {}
            })
        };
    var useMultiItemChest = function (iid) {
            var params = Object.clone(g_ajaxparams);
            params.itemId = iid;
            params.cid = currentcityid;
            new Ajax.Request(g_ajaxpath + "ajax/medals.php" + g_ajaxsuffix, {
                method: "post",
                parameters: params,
                onSuccess: function (transport) {
                    var rslt = eval("(" + transport.responseText + ")");
                    if (rslt.ok) {
                        cm.InventoryView.removeItemFromInventory(iid);
                        addItemsToInventory(rslt.medals, iid)
                    }
                }
            })
        };
    var useKnightInABox = function (itemId) {
            modal_get_knight(itemId)
        };
    var useUnitsItem = function (iid) {
            var params = Object.clone(g_ajaxparams);
            params.cid = currentcityid;
            params.iid = iid;
            new Ajax.Request(g_ajaxpath + "ajax/volunteee.php" + g_ajaxsuffix, {
                method: "post",
                parameters: params,
                onSuccess: function (transport) {
                    var rslt = eval("(" + transport.responseText + ")");
                    if (rslt.ok) {
                        if (rslt.updateSeed) {
                            update_seed(rslt.updateSeed)
                        }
                        var allUnitsGained = new Hash(rslt.unitsGained),
                            unitId, unitAmount;
                        allUnitsGained.each(function (pair) {
                            unitId = pair.key.substring(4);
                            unitAmount = pair.value;
                            seed.units["city" + currentcityid]["unt" + unitId] = Number(seed.units["city" + currentcityid]["unt" + unitId]) + unitAmount
                        });
                        cm.InventoryView.removeItemFromInventory(iid);
                        modal_volunteer_gain(rslt.unitsGained, iid)
                    }
                },
                onFailure: function () {}
            })
        };
    var useResourceItem = function (iid) {
            var params = Object.clone(g_ajaxparams);
            params.iid = iid;
            params.cid = currentcityid;
            new Ajax.Request(g_ajaxpath + "ajax/resourceCrate.php" + g_ajaxsuffix, {
                method: "post",
                parameters: params,
                onSuccess: function (transport) {
                    var rslt = eval("(" + transport.responseText + ")");
                    if (rslt.ok) {
                        if (rslt.updateSeed) {
                            update_seed(rslt.updateSeed)
                        }
                        if (Number(rslt.rtype) == 0) {
                            update_gold()
                        } else {}
                        cm.InventoryView.removeItemFromInventory(iid)
                    }
                },
                onFailure: function () {}
            })
        };
    var useItemChest = function (iid) {
            var items = {},
                item, params = Object.clone(g_ajaxparams);
            params.iid = iid;
            new Ajax.Request(g_ajaxpath + "ajax/itemChest.php" + g_ajaxsuffix, {
                method: "post",
                parameters: params,
                onSuccess: function (transport) {
                    var rslt = eval("(" + transport.responseText + ")");
                    if (rslt.ok) {
                        cm.InventoryView.removeItemFromInventory(iid);
                        var key;
                        $.each(rslt.items, function (key, value) {
                            key = key.split("i")[1];
                            items[key] = value
                        });
                        addItemsToInventory(items, iid)
                    }
                }
            })
        };
    var useMysteryChest = function (itemId) {
            var items = {},
                params = Object.clone(g_ajaxparams);
            params.chestId = itemId;
            params.cid = currentcityid;
            new Ajax.Request(g_ajaxpath + "ajax/useMysteryChest.php" + g_ajaxsuffix, {
                method: "post",
                parameters: params,
                onSuccess: function (transport) {
                    var rslt = eval("(" + transport.responseText + ")");
                    if (rslt.ok) {
                        cm.InventoryView.removeItemFromInventory(itemId);
                        addItemsToInventory(rslt.items, itemId)
                    }
                },
                onFailure: function () {}
            })
        };
    var addItemsToInventory = function (itemsReceived, itemId) {
            var originalItemId = itemId,
                item, itemId, itemQuantity, itemName, rewrittenItem, rewrittenItemObjects = [];
            $.each(itemsReceived, function (itemKey) {
                itemId = Number(itemKey);
                item = ksoItems[itemId];
                itemQuantity = Number(itemsReceived[itemKey]);
                itemName = item.name;
                rewrittenItem = {};
                rewrittenItem.id = itemId;
                rewrittenItem.name = itemName;
                rewrittenItem.count = itemQuantity;
                rewrittenItemObjects.push(rewrittenItem);
                seed.items["i" + itemId] = Number(seed.items["i" + itemId]) + itemQuantity;
                item.add(itemQuantity)
            });
            cm.InventoryView.openItemsInChestModal(rewrittenItemObjects, originalItemId)
        };
    var useCourtItem = function (itemId) {
            var isEquippedFlag = (ksoItems[itemId].isEquipped) ? 2 : 1;
            var params = Object.clone(g_ajaxparams);
            params.item = itemId;
            params.setflag = isEquippedFlag;
            new Ajax.Request(g_ajaxpath + "ajax/courtSelectItem.php" + g_ajaxsuffix, {
                method: "post",
                parameters: params,
                onSuccess: function (transport) {
                    var rslt = eval("(" + transport.responseText + ")");
                    if (rslt.ok) {
                        if (ksoItems[itemId].isEquipped) {
                            ksoItems[itemId].isEquipped = false;
                            $.each(seed.courtItems, function (index, courtItem) {
                                if (Number(courtItem) == itemId) {
                                    seed.courtItems.splice(index, index + 1)
                                }
                            })
                        } else {
                            ksoItems[itemId].isEquipped = true;
                            seed.courtItems.push(itemId.toString())
                        }
                        cm.InventoryView.toggleCourtItem(itemId);
                        if ($("#courtView")) {
                            changeview_court_content()
                        }
                        update_bdg()
                    }
                },
                onFailure: function () {}
            })
        };
    var useTroopHealthBoost = function () {};
    var useFertileWinds = function (itemId) {
            var params = Object.clone(g_ajaxparams);
            params.cid = currentcityid;
            new Ajax.Request(g_ajaxpath + "ajax/fertilizePeople.php" + g_ajaxsuffix, {
                method: "post",
                parameters: params,
                onSuccess: function (transport) {
                    var rslt = eval("(" + transport.responseText + ")");
                    if (rslt.ok) {
                        if (rslt.updateSeed) {
                            update_seed(rslt.updateSeed)
                        }
                        cm.InventoryView.removeItemFromInventory(itemId)
                    }
                },
                onFailure: function () {}
            })
        };
    var useMassHypnosis = function (iid) {
            var params = Object.clone(g_ajaxparams);
            params.cid = currentcityid;
            new Ajax.Request(g_ajaxpath + "ajax/hypnotize.php" + g_ajaxsuffix, {
                method: "post",
                parameters: params,
                onSuccess: function (transport) {
                    var rslt = eval("(" + transport.responseText + ")");
                    if (rslt.ok) {
                        if (rslt.updateSeed) {
                            update_seed(rslt.updateSeed)
                        }
                        cm.InventoryView.removeItemFromInventory(iid)
                    }
                },
                onFailure: function () {}
            })
        };
    var useDoveOfPeace = function (iid) {
            var params = Object.clone(g_ajaxparams);
            new Ajax.Request(g_ajaxpath + "ajax/doveOut.php" + g_ajaxsuffix, {
                method: "post",
                parameters: params,
                onSuccess: function (transport) {
                    var rslt = eval("(" + transport.responseText + ")");
                    if (rslt.ok) {
                        if (rslt.updateSeed) {
                            update_seed(rslt.updateSeed)
                        }
                        var boostTime = 43200;
                        seed.player.truceExpireUnixTime = unixtime() + boostTime;
                        seed.player.warStatus = 3;
                        cm.InventoryView.removeItemFromInventory(iid);
                        update_boosts()
                    } else {
                        Modal.showAlert(printLocalError((rslt.error_code || null), (rslt.msg || null), (rslt.feedback || null)))
                    }
                },
                onFailure: function () {}
            })
        };
    var usePortalOfRefuge = function (iid) {
            var params = Object.clone(g_ajaxparams);
            params.iid = iid;
            params.cid = currentcityid;
            params.pid = parseInt($("#provinceNamesList").val());
            new Ajax.Request(g_ajaxpath + "ajax/relocate.php" + g_ajaxsuffix, {
                method: "post",
                parameters: params,
                onSuccess: function (transport) {
                    var rslt = eval("(" + transport.responseText + ")");
                    if (rslt.ok) {
                        var newXCoordinate = rslt.x,
                            newYCoordinate = rslt.y;
                        Modal.hideModal();
                        currentcityinfo[2] = newXCoordinate;
                        currentcityinfo[3] = newYCoordinate;
                        for (var i = 0; i < seed.cities.length; i++) {
                            if (Number(seed.cities[i][0]) == Number(currentcityid)) {
                                seed.cities[i][2] = newXCoordinate;
                                seed.cities[i][3] = newYCoordinate;
                                break
                            }
                        }
                        $("#mapXCoor").val(newXCoordinate);
                        $("#mapYCoor").val(newYCoordinate);
                        reCenterMapWithCoor();
                        cm.InventoryView.removeItemFromInventory(iid);
                        cm.InventoryView.openPortalConfirmModal(iid, newXCoordinate, newYCoordinate)
                    } else {
                        if (rslt.msg) {
                            $("#teleportError").text(rslt.msg);
                            $("#teleportError").show()
                        }
                    }
                },
                onFailure: function () {}
            })
        };
    var usePortalOfOrder = function (iid) {
            var params = Object.clone(g_ajaxparams);
            params.iid = iid;
            params.cid = currentcityid;
            params.xcoord = Number($("#newXCoordinate").val());
            params.ycoord = Number($("#newYCoordinate").val());
            new Ajax.Request(g_ajaxpath + "ajax/relocate.php" + g_ajaxsuffix, {
                method: "post",
                parameters: params,
                onSuccess: function (transport) {
                    var rslt = eval("(" + transport.responseText + ")");
                    if (rslt.ok) {
                        var newXCoordinate = rslt.x,
                            newYCoordinate = rslt.y;
                        Modal.hideModal();
                        currentcityinfo[2] = newXCoordinate;
                        currentcityinfo[3] = newYCoordinate;
                        for (var i = 0; i < seed.cities.length; i++) {
                            if (Number(seed.cities[i][0]) == Number(currentcityid)) {
                                seed.cities[i][2] = newXCoordinate;
                                seed.cities[i][3] = newYCoordinate;
                                break
                            }
                        }
                        $("#mapXCoor").val(newXCoordinate);
                        $("#mapYCoor").val(newYCoordinate);
                        reCenterMapWithCoor();
                        cm.InventoryView.removeItemFromInventory(iid);
                        cm.InventoryView.openPortalConfirmModal(iid, newXCoordinate, newYCoordinate)
                    } else {
                        if (rslt.msg) {
                            $("#teleportError").text(rslt.msg);
                            $("#teleportError").show()
                        }
                    }
                },
                onFailure: function () {
                    if (rslt.msg) {
                        $("#teleportError").text(rslt.msg);
                        $("#teleportError").show()
                    }
                }
            })
        };
    var useMerlinsCloak = function (itemId) {
            var newNameValue = $("#merlinsCloakNewName").val(),
                hudNameDom = $("#topnavDisplayName"),
                errorDom = $("#merlinsCloakError");
            if (!newNameValue || newNameValue.length < 3 || newNameValue.length > 15) {
                errorDom.text(g_js_strings.setNewDisplayName.entername);
                errorDom.show();
                return false
            }
            var params = Object.clone(g_ajaxparams);
            params.displayname = newNameValue;
            params.cid = currentcityid;
            params.iid = itemId;
            new Ajax.Request(g_ajaxpath + "ajax/changename.php" + g_ajaxsuffix, {
                method: "post",
                parameters: params,
                onSuccess: function (transport) {
                    var rslt = eval("(" + transport.responseText + ")");
                    if (rslt.ok) {
                        Modal.hideModal();
                        seed.player.name = newNameValue;
                        hudNameDom.text(seed.player.prefix + " " + newNameValue);
                        cm.InventoryView.removeItemFromInventory(itemId)
                    } else {
                        if (rslt.msg) {
                            errorDom.text(rslt.msg);
                            errorDom.show()
                        }
                    }
                },
                onFailure: function () {
                    if (rslt.msg) {
                        errorDom.text(rslt.msg);
                        errorDom.show()
                    }
                }
            })
        };
    var useRenamingCelebration = function (itemId) {
            var newName = $("#newCityName").val();
            if (!newName || newName.length < 3 || newName.length > 15) {
                $("#cityNameError").text(g_js_strings.modal_rename_celebration.entername);
                $("#cityNameError").show();
                return false
            }
            var params = Object.clone(g_ajaxparams);
            params.cityname = newName;
            params.cid = currentcityid;
            params.iid = itemId;
            new Ajax.Request(g_ajaxpath + "ajax/changeCityName.php" + g_ajaxsuffix, {
                method: "post",
                parameters: params,
                onSuccess: function (transport) {
                    var rslt = eval("(" + transport.responseText + ")");
                    if (rslt.ok) {
                        Modal.hideModal();
                        $("#mod_cityinfo_cityname").text(newName);
                        for (var i = 0; i < seed.cities.length; i++) {
                            if (Number(seed.cities[i][0]) == Number(currentcityid)) {
                                seed.cities[i][1] = newName;
                                break
                            }
                        }
                        cm.InventoryView.removeItemFromInventory(itemId);
                        var message = g_js_strings.modal_myitems_use_teleportprovince_do.aused.replace("%1$s", itemlist["i" + itemId].name);
                        cm.InventoryView.openRenamingCelebrationConfirmModal(message, newName)
                    } else {
                        if (rslt.msg) {
                            $("#cityNameError").text(rslt.msg);
                            $("#cityNameError").show()
                        }
                    }
                },
                onFailure: function () {}
            })
        };
    var useMerlinsEscape = function (itemId) {
            var newNameValue = $("#merlinsEscapeNewName").val(),
                xCoordinate = Number($("#newXCoordinate").val()),
                yCoordinate = Number($("#newYCoordinate").val());
            if (!newNameValue || newNameValue < 3 || newNameValue.length > 15) {
                $("#merlinsEscapeNewName").val(g_js_strings.setNewDisplayName.entername);
                $("#merlinsEscapeNewName").show();
                return false
            }
            var params = Object.clone(g_ajaxparams);
            params.iid = itemId;
            params.cid = currentcityid;
            params.displayname = newNameValue;
            params.xcoord = xCoordinate;
            params.ycoord = yCoordinate;
            new Ajax.Request(g_ajaxpath + "ajax/relocateAndChangename.php" + g_ajaxsuffix, {
                method: "post",
                parameters: params,
                onSuccess: function (transport) {
                    var rslt = eval("(" + transport.responseText + ")");
                    if (rslt.ok) {
                        Modal.hideModal();
                        currentcityinfo[2] = xCoordinate;
                        currentcityinfo[3] = yCoordinate;
                        for (var i = 0; i < seed.cities.length; i++) {
                            if (Number(seed.cities[i][0]) == Number(currentcityid)) {
                                seed.cities[i][2] = xCoordinate;
                                seed.cities[i][3] = yCoordinate;
                                break
                            }
                        }
                        $("mapXCoor").val(xCoordinate);
                        $("mapYCoor").val(yCoordinate);
                        reCenterMapWithCoor();
                        seed.player.name = newNameValue;
                        $("topnavDisplayName").text(seed.player.prefix + " " + newNameValue);
                        cm.InventoryView.removeItemFromInventory(itemId);
                        cm.InventoryView.openMerlinsEscapeConfirmModal(itemId, xCoordinate, yCoordinate)
                    } else {
                        if (rslt.msg) {
                            $("#escapeError").text(rslt.msg);
                            $("#escapeError").show()
                        }
                    }
                },
                onFailure: function () {}
            })
        };
    var useRenamingRitual = function (itemId) {};
    var usePotionOfMist = function (itemId) {
            var params = Object.clone(g_ajaxparams);
            new Ajax.Request(g_ajaxpath + "ajax/fogUser.php" + g_ajaxsuffix, {
                method: "post",
                parameters: params,
                onSuccess: function (transport) {
                    var rslt = eval("(" + transport.responseText + ")");
                    if (rslt.ok) {
                        if (rslt.updateSeed) {
                            update_seed(rslt.updateSeed)
                        }
                        Modal.hideModal();
                        var boostTime = 604800,
                            message;
                        if (seed.playerEffects.length == 0) {
                            seed.playerEffects = new Object
                        }
                        if (!(parseInt(seed.playerEffects.fogExpire) > unixtime())) {
                            seed.playerEffects.fogExpire = unixtime()
                        }
                        seed.playerEffects.fogExpire = Number(seed.playerEffects.fogExpire) + boostTime;
                        cm.InventoryView.removeItemFromInventory(itemId);
                        update_boosts();
                        g_mapObject.getMoreSlots()
                    } else {
                        Modal.showAlert(printLocalError((rslt.error_code || null), (rslt.msg || null), (rslt.feedback || null)))
                    }
                },
                onFailure: function () {}
            })
        };
    var useVacationMode = function (itemId) {
            new Ajax.Request(g_ajaxpath + "ajax/vacationMode.php?iid=" + itemId, {
                method: "post",
                parameters: Object.clone(g_ajaxparams),
                onSuccess: function (transport) {
                    var rslt = eval("(" + transport.responseText + ")");
                    if (rslt.ok) {
                        var vacationExpire = Math.floor(rslt.updateSeed.playerEffects.vacationExpire),
                            troopUpkeepExpire = Math.floor(rslt.updateSeed.playerEffects.troopUpkeepReductExp),
                            fogExpire = Math.floor(rslt.updateSeed.playerEffects.fogExpire),
                            truceExpire = Math.floor(rslt.updateSeed.player.truceExpireUnixTime);
                        seed.playerEffects.troopUpkeepReductExp = troopUpkeepExpire;
                        seed.playerEffects.fogExpire = fogExpire;
                        seed.playerEffects.vacationExpire = vacationExpire;
                        seed.player.truceExpireUnixTime = truceExpire;
                        update_boosts();
                        Modal.hideModal();
                        cm.InventoryView.removeItemFromInventory(itemId)
                    } else {
                        if (rslt.msg) {
                            Modal.showAlert(rslt.msg)
                        }
                    }
                },
                onFailure: function () {}
            })
        };
    init_();
    return {
        use: use,
        usePortalOfRefuge: usePortalOfRefuge,
        usePortalOfOrder: usePortalOfOrder,
        useMerlinsCloak: useMerlinsCloak,
        useMerlinsEscape: useMerlinsEscape,
        useRenamingCelebration: useRenamingCelebration,
        useRenamingRitual: useRenamingRitual,
        usePotionOfMist: usePotionOfMist,
        useVacationMode: useVacationMode
    }
}(jQuery);
var cm = cm || {};
cm.item = function (f) {
    var c;
    var m;
    var d;
    var b = [];

    function g() {
        var n = {
            use: a,
            confirmSpec: {
                execute: function () {
                    new Ajax.Request(g_ajaxpath + "ajax/vacationMode.php?iid=" + c, {
                        method: "post",
                        parameters: Object.clone(g_ajaxparams),
                        onSuccess: l
                    })
                },
                warning: function (o) {
                    return o == 902 ? g_js_strings.modal_myitems_confirm_vacation3 : g_js_strings.modal_myitems_confirm_vacation7
                },
                useButton: g_js_strings.modal_myitems_confirm_potion_mist.usevacation
            },
            stop_action: i
        };
        b[2000] = {
            use: function () {
                cm.guardianItem.render(true)
            }
        }
    }
    g();

    function a() {
        Modal.multiButton({
            buttons: [{
                txt: m.confirmSpec.useButton,
                exe: j
            }, {
                txt: g_js_strings.commonstr.cancel,
                exe: function () {
                    Modal.hideModal()
                }
            }],
            body: m.confirmSpec.warning(c)
        })
    }
    function i(n) {
        if (!seed.playerEffects.vacationExpire || (unixtime() > seed.playerEffects.vacationExpire)) {
            return false
        } else {
            e(seed.playerEffects.vacationExpire);
            Modal.multiButton({
                buttons: [{
                    txt: g_js_strings.modal_myitems_confirm_vacation_continue_button,
                    exe: function () {
                        seed.playerEffects.vacationExpire = unixtime() - 1;
                        seed.player.truceExpireUnixTime = unixtime() - 1;
                        seed.playerEffects.troopUpkeepReductExp = unixtime() - 1;
                        seed.playerEffects.fogExpire = unixtime() - 1;
                        update_boosts();
                        if (n) {
                            n()
                        }
                    }
                }, {
                    txt: g_js_strings.commonstr.cancel,
                    exe: function () {
                        Modal.hideModal()
                    }
                }],
                body: g_js_strings.modal_attack_vacation
            });
            return true
        }
    }
    function j() {
        Modal.hideModal();
        m.confirmSpec.execute()
    }
    function l(n) {
        seed.items["i" + c] = parseInt(seed.items["i" + c]) - 1;
        ksoItems[c].subtract();
        f("#modal_itemowned_" + c).html(seed.items["i" + c]);
        if (seed.items["i" + c] <= 0) {
            f("#modal_item_" + c).remove();
            modal_fix_paginate(5, 12)
        }
        k(n);
        f("#modal_shop_message").html(itemlist["i" + c].name + " used!");
        f("#modal_shop_message").show()
    }
    function e(o) {
        var n = (o - unixtime())
    }
    function k(n) {
        if (n.responseText) {
            var p = jQuery.parseJSON(n.responseText).updateSeed;
            var o = p.playerEffects.vacationExpire;
            if (o) {
                d = parseInt(c) == 902 ? 3 * 24 * 3600 : 7 * 24 * 3600;
                h(p);
                e(o)
            } else {
                cm.log.l("parsedSeed.playerEffects.vacationExpire Is NOT set.  Brad: Please set me from the backend of the ajax call.")
            }
        } else {
            cm.log.l("finishItemUsage: rslt does not have responseText.")
        }
    }
    function h(n) {
        seed.playerEffects.troopUpkeepReductExp = parseInt(n.playerEffects.troopUpkeepReductExp);
        seed.playerEffects.fogExpire = parseInt(n.playerEffects.fogExpire);
        seed.player.truceExpireUnixTime = parseInt(n.player.truceExpireUnixTime);
        update_boosts()
    }
    return {
        use: function (n) {
            c = "" + n;
            m = b[c];
            m.use()
        },
        markup: function (n) {
            return "<div class='useitem clearfix'><a onclick=\"cm.item.use('" + n + "');return false;\" class='button20'><span>" + g_js_strings.commonstr.use + "</span></a></div>"
        },
        get: function (n) {
            return b[n]
        },
        fire: function (n, o) {
            for (var p in b) {
                m = b[p];
                if (m[n] && m[n](o)) {
                    return true
                }
            }
            return false
        }
    }
}(jQuery);
cm.BaseItem = function (d) {
    cm.CustomEventDispatcher.call(this);
    var f = this;
    var e;
    var c;
    var a;
    var h;
    var b;
    this.getId = function () {
        return e
    };
    this.getDescription = function () {
        return a
    };
    this.getQuantity = function () {
        var i = parseInt(seed.items["i" + e]);
        return !isNaN(i) && i > 0 ? i : 0
    };
    this.setQuantity = function (i) {
        seed.items["i" + e] = !isNaN(i) && i > 0 ? i : 0
    };
    this.getPrice = function () {
        return b
    };
    this.getImageUrl = function (i) {
        return stimgUrl + "img/items/" + i + "/" + e + ".jpg"
    };
    this.buy = function () {};
    this.applyItem = function () {};
    var g = function () {
            if (d) {
                e = d.id;
                c = d.name;
                a = d.description;
                b = d.price
            }
        };
    g()
};
cm.OOP.inherits(cm.BaseItem, cm.CustomEventDispatcher);
cm.CombatBoostItem = function (a) {
    cm.BaseItem.call(this, a);
    var d = this;
    var f;
    var c = function (m) {
            var l = m.getTarget();
            l.removeEventListener(cm.ItemServiceEvent.APPLY_SUCCESS, c);
            var i = m.getResponse();
            var q = jQuery.parseJSON(i.responseText);
            if (q.ok) {
                var n = d.getId();
                if (seed.playerEffects.length == 0) {
                    seed.playerEffects = {}
                }
                var g = unixtime();
                var o = f.name;
                var j = f.duration;
                var p = parseInt(seed.playerEffects[o]);
                if (p < g) {
                    p = g
                }
                seed.playerEffects[o] = p + j;
                var h = d.getQuantity();
                d.setQuantity(h - 1);
                if (q.updateSeed) {
                    update_seed(q.updateSeed)
                }
                update_boosts();
                var k = new cm.ItemEvent(cm.ItemEvent.APPLIED);
                k.setTarget(d);
                d.dispatchCustomEvent(k)
            }
        };
    var b = function (l) {
            var h = l.getTarget();
            var i = l.getResponse();
            h.removeEventListener(cm.ItemServiceEvent.BUY_SUCCESS, b);
            var g = jQuery.parseJSON(i.responseText);
            if (!g.ok) {
                Modal.showAlert(printLocalError((g.error_code || null), (g.msg || null), (g.feedback || null)));
                return
            }
            seed.player.gems -= d.getPrice();
            var k = d.getQuantity();
            d.setQuantity(k + 1);
            var j = new cm.ItemEvent(cm.ItemEvent.BOUGHT);
            j.setTarget(d);
            d.dispatchCustomEvent(j)
        };
    this.applyItem = function () {
        var g = new cm.CombatBoostItemService(d);
        g.addEventListener(cm.ItemServiceEvent.APPLY_SUCCESS, c);
        g.applyItem(d)
    };
    this.buyItem = function () {
        var g = new cm.CombatBoostItemService(d);
        g.addEventListener(cm.ItemServiceEvent.BUY_SUCCESS, b);
        g.buyItem(d)
    };
    var e = function () {
            f = {};
            f.name = a.effect.name;
            f.duration = a.effect.duration
        };
    e()
};
cm.OOP.inherits(cm.CombatBoostItem, cm.BaseItem);
cm.ItemEvent = function (a) {
    cm.CustomEvent.call(this, a)
};
cm.OOP.inherits(cm.ItemEvent, cm.CustomEvent);
cm.ItemEvent.BOUGHT = "bought";
cm.ItemEvent.APPLIED = "applied";
cm = cm || {};
cm.ItemModel = jQueryClass.extend({
    init: function (b, a) {
        this.id = Number(b);
        this.name = itemlist["i" + this.id].name;
        this.description = itemlist["i" + this.id].description;
        this.category = Number(a.category);
        this.subCategory = Number(a.subCategory);
        this.count = 0;
        this.isNew = false;
        this.isOnSale = false;
        this.defaultPrice = Number(a.price);
        this.featuredInfo = undefined;
        this.price = this.defaultPrice;
        this.isFeatured = false;
        this.usable = this.canUse(this.id);
        this.equippable = this.canEquip(this.id);
        this.collectable = this.canCollect(this.id);
        this.isEquipped = false
    },
    setFeatured: function () {
        if (this.featuredInfo !== undefined) {
            var a = Number(this.featuredInfo[0]),
                b = Number(this.featuredInfo[1]),
                c = Number(this.featuredInfo[2]);
            if (a > 0 && unixtime() < a) {
                this.isNew = true
            } else {
                this.isNew = false
            }
            if (b > 0 && b < unixtime() && c > 0 && c > unixtime()) {
                this.salePrice = Math.floor(Number(this.featuredInfo[3]));
                this.isOnSale = true
            } else {
                this.salePrice = undefined;
                this.isOnSale = false
            }
            this.price = this.salePrice && this.salePrice > 0 ? this.salePrice : this.defaultPrice;
            this.isFeatured = this.isNew || this.isOnSale
        }
    },
    canUse: function (a) {
        a = Number(a);
        var b = [101, 102, 111, 112, 121, 122, 131, 132, 141, 142, 261, 262, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 351, 355, 501, 502, 503, 504, 505, 511, 512, 513, 514, 521, 522, 523, 524, 531, 599, 901, 902, 903, 911, 912, 922, 923, 924, 942, 2000];
        if ((a >= 1000 && a <= 1050) || (a >= 1300 && a <= 1415) || (a >= 10000 && a <= 10031)) {
            return true
        } else {
            if (b.include(a)) {
                return true
            } else {
                return false
            }
        }
    },
    canEquip: function (a) {
        if (a >= 711 && a <= 895) {
            return true
        } else {
            return false
        }
    },
    canCollect: function (a) {
        if (a > 1100 && a < 1210) {
            return true
        } else {
            return false
        }
    },
    add: function (a) {
        a = Number(a) || 1;
        this.count = this.count + a;
        return this.count
    },
    subtract: function (a) {
        a = Number(a) || 1;
        this.count = this.count - a;
        if (this.count < 0) {
            this.count = 0
        }
        return this.count
    },
    use: function () {}
});

function modal_myitems(c) {
    var a = new Array();
    a.push("<div class='modal_shop_container'>");
    a.push("<div id='modal_shop_body' name='1'>");
    a.push("<div class='modal_shop_hd'>");
    a.push("<div id='geminfo' class='geminfo'>");
    a.push("<div class='mygems'>" + g_js_strings.commonstr.gems + ":<span id='modal_shop_gems'>");
    a.push(seed.player.gems);
    a.push("</span><img src='");
    a.push(stimgUrl);
    a.push("img/gem.png'/></div>");
    a.push("<div class='getgems clearfix'><a onclick='cm.ConversionTracker.track(\"payments\", \"MORE_GEMS_MY_ITEMS\", \"\");modal_getgems();return false;' class='buttonGreen20'><span>+&nbsp;&nbsp;" + g_js_strings.modaltitles.getmoregems + "</span></a></div>");
    a.push("</div>");
    a.push("<div class='gotoshop'><a  class='button20' onclick='modal_myitems_getmoreitems();return false;'><span>" + g_js_strings.modal_myitems.getmoreitems + "</span></a></div>");
    a.push("</div>");
    var j = new Array();
    var n = new Array();
    var f = new Array();
    var b = new Array();
    var g = new Array();
    var m = new Array();
    var e = Object.keys(seed.items);
    var l = Object.isArray(seed.items);
    for (var d = 0; d < e.length; d++) {
        var h = e[d].split("i")[1];
        if (h == 10025 || h == 1062) {
            continue
        }
        if (!itemlist["i" + h]) {
            cm.log.l("Item " + h + " is not defined.  Items are defined in the data_en.js by a backend process, ask Brad.")
        }
        if (itemlist["i" + h] && parseInt(seed.items[e[d]]) > 0) {
            var p = renderItemBox(h);
            var k = parseInt(itemlist[e[d]].category);
            var o = new Array();
            h = parseInt(h);
            if (h == 599 || h == 10018 || h == 10019) {
                o.push(p.join(""))
            }
            if (k == 1) {
                if (o.length > 0) {
                    b = o.concat(b)
                } else {
                    b.push(p.join(""))
                }
            } else {
                if (k == 2) {
                    if (o.length > 0) {
                        j = o.concat(j)
                    } else {
                        j.push(p.join(""))
                    }
                } else {
                    if (k == 3) {
                        if (o.length > 0) {
                            m = o.concat(m)
                        } else {
                            m.push(p.join(""))
                        }
                    } else {
                        if (k == 4) {
                            if (o.length > 0) {
                                n = o.concat(n)
                            } else {
                                n.push(p.join(""))
                            }
                        } else {
                            if (k == 5) {
                                if (o.length > 0) {
                                    f = o.concat(f)
                                } else {
                                    f.push(p.join(""))
                                }
                            } else {
                                if (k == 6) {
                                    if (o.length > 0) {
                                        g = o.concat(g)
                                    } else {
                                        g.push(p.join(""))
                                    }
                                } else {
                                    if (o.length > 0) {
                                        b = o.concat(b)
                                    } else {
                                        b.push(p.join(""))
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    a.push("<div class='modal_shop_body'>");
    a.push("<div class='tabsbar clearfix' id='modal_shop_tabs'>");
    a.push("<a  id='modal_shop_tab1' onclick='modal_shop_changetab(1);return false;' class='tab selected'><span>" + g_js_strings.commonstr.general + "</span></a>");
    a.push("<a  id='modal_shop_tab2' onclick='modal_shop_changetab(2);return false;' class='tab'><span>" + g_js_strings.commonstr.speedup + "</span></a>");
    a.push("<a  id='modal_shop_tab3' onclick='modal_shop_changetab(3);return false;' class='tab'><span>" + g_js_strings.commonstr.combat + "</span></a>");
    a.push("<a  id='modal_shop_tab4' onclick='modal_shop_changetab(4);return false;' class='tab'><span>" + g_js_strings.commonstr.resources + "</span></a>");
    a.push("<a  id='modal_shop_tab5' onclick='modal_shop_changetab(5);return false;' class='tab'><span>" + g_js_strings.commonstr.chest + "</span></a>");
    a.push("<a  id='modal_shop_tab6' onclick='modal_shop_changetab(6);return false;' class='tab'><span>" + g_js_strings.commonstr.court + "</span></a>");
    a.push("</div>");
    a.push("<div id='modal_shop_message' style='display:none;'></div>");
    a.push("<div id='modal_shop_paginate' style='display:none;'><div class='comingSoon'> 7th city is HERE! </div><span class='page'>" + g_js_strings.commonstr.page + ":</span> <span id='modal_shop_page_list'></span></div>");
    a.push("<div class='itemlistboxwrap'>");
    a.push("<a id='modal_shop_page_prev' onclick='modal_shop_prevpage();return false;'></a>");
    a.push("<a id='modal_shop_page_next' onclick='modal_shop_nextpage();return false;'></a>");
    a.push("<div class='itemlistbox'>");
    a.push("<div class='itemlist clearfix' id='modal_shop_items_1'>");
    if (b.length > 0) {
        a.push(b.join(""))
    } else {
        a.push("<div class='noitem'><div>" + g_js_strings.modal_myitems.ownnogeneral + "</div><div class='clearfix btn'><a class='button20' onclick='Modal.hideModal();modal_shop(2); return false;');return false;'><span>" + g_js_strings.commonstr.buymore + "</span></a></div></div>")
    }
    a.push("</div>");
    a.push("<div class='itemlist clearfix' id='modal_shop_items_2' style='display:none;'>");
    if (j.length > 0) {
        a.push(j.join(""))
    } else {
        a.push("<div class='noitem'><div>" + g_js_strings.modal_myitems.ownnospeedup + "</div><div class='clearfix btn'><a  class='button20' onclick='Modal.hideModal();modal_shop(3);return false;'><span>" + g_js_strings.commonstr.buymore + "</span></a></div></div>")
    }
    a.push("</div>");
    a.push("<div class='itemlist clearfix' id='modal_shop_items_3' style='display:none;'>");
    if (m.length > 0) {
        a.push(m.join(""))
    } else {
        a.push("<div class='noitem'><div>" + g_js_strings.modal_myitems.ownnoattack + "</div><div class='clearfix btn'><a  class='button20' onclick='Modal.hideModal();modal_shop(4);return false;'><span>" + g_js_strings.commonstr.buymore + "</span></a></div></div>")
    }
    a.push("</div>");
    a.push("<div class='itemlist clearfix' id='modal_shop_items_4' style='display:none;'>");
    if (n.length > 0) {
        a.push(n.join(""))
    } else {
        a.push("<div class='noitem'><div>" + g_js_strings.modal_myitems.ownnoprod + "</div><div class='clearfix btn'><a  class='button20' onclick='Modal.hideModal();modal_shop(5);return false;'><span>" + g_js_strings.commonstr.buymore + "</span></a></div></div>")
    }
    a.push("</div>");
    a.push("<div class='itemlist clearfix' id='modal_shop_items_5' style='display:none;'>");
    if (f.length > 0) {
        a.push(f.join(""))
    } else {
        a.push("<div class='noitem'><div>" + g_js_strings.modal_myitems.ownnochest + "</div><div class='clearfix btn'><a  class='button20' onclick='Modal.hideModal();modal_shop(6);return false;'><span>" + g_js_strings.commonstr.buymore + "</span></a></div></div>")
    }
    a.push("</div>");
    a.push("<div class='itemlist clearfix' id='modal_shop_items_6' style='display:none;'>");
    if (g.length > 0) {
        a.push(g.join(""))
    } else {
        a.push("<div class='noitem'><div>" + g_js_strings.modal_myitems.ownnocourt + "</div><div class='clearfix btn'><a  class='button20' onclick='Modal.hideModal();modal_shop(7);return false;'><span>" + g_js_strings.commonstr.buymore + "</span></a></div></div>")
    }
    a.push("</div>");
    a.push("</div>");
    a.push("</div>");
    a.push("</div>");
    a.push("</div></div>");
    if (g_env == "prod") {
        a.push('<div style="display:inline;"><img height="1" width="1" style="border-style:none;" alt="" src="http://www.googleadservices.com/pagead/conversion/1059019849/?label=Mk6lCIvz5gEQybj9-AM&amp;guid=ON&amp;script=0"/></div>')
    }
    Modal.show({
        winWidth: 740,
        winHeight: 400,
        winLeft: 10,
        winTop: 10,
        winTitle: g_js_strings.commonstr.inventory,
        winContent: a.join(""),
        callback: modal_myitems_init,
        shutdown: function () {
            cm.speedUpModalTimer.redisplayModal(true)
        }
    });
    if (c) {
        modal_shop_changetab(c)
    }
    if (parseInt(seed.tutorial.t1) == 10) {
        seed.tutorial.t1 = 11;
        modal_shop_changetab(5);
        tutorialCheck(11)
    }
}
function renderItemBox(b) {
    var a = new Array();
    a.push('<div class="item" class="modal_item_' + b + '" id="modal_item_');
    a.push(b);
    a.push('" onmouseover="modal_shop_tooltip(this,event);return false;" onmouseout="removeTooltip();return false;" name="');
    a.push(itemlist["i" + b].description);
    a.push('">');
    a.push("<div class='itemname'>");
    a.push(itemlist["i" + b].name);
    a.push("</div>");
    a.push("<div class='clearfix iteminfo'>");
    a.push("<img src='");
    a.push(stimgUrl);
    a.push("img/items/70/");
    a.push(b);
    a.push(".jpg?5c10831'/>");
    a.push(modal_myitems_use_link(b));
    a.push("<div class='myitemowned'>" + g_js_strings.commonstr.owned + ": <span class='modal_itemowned_" + b + "' id='modal_itemowned_");
    a.push(b);
    a.push("'>");
    a.push(seed.items["i" + b]);
    a.push("</span></div>");
    a.push("</div>");
    a.push("</div>");
    return a
}
function modal_myitems_init() {
    modal_shop_pageinit(1)
}
function modal_myitems_use_link(b) {
    var a = new Array();
    var c = parseInt(b);
    if (c == 10029) {
        a.push("<div class='useitem clearfix'><a  onclick='cm.chestItemUsage.open(");
        a.push(c);
        a.push(");return false;' class='button20'><span>" + g_js_strings.commonstr.use + "</span></a></div>")
    } else {
        if (cm.item.get(c)) {
            a.push(cm.item.markup(c))
        } else {
            if (itemlist["i" + c].subCategory == 100) {
                a.push("<div class='useitem clearfix'><a  onclick='modal_myitems_use_mystery_chest(");
                a.push(c);
                a.push(");return false;' class='button20'><span>" + g_js_strings.commonstr.use + "</span></a></div>")
            } else {
                if (c == 101 || c == 102 || c == 111 || c == 112 || c == 121 || c == 122 || c == 131 || c == 132 || c == 141 || c == 142) {
                    a.push("<div class='useitem clearfix'><a  onclick='modal_boost_production_use(" + c + ");return false;' class='button20'><span>" + g_js_strings.commonstr.use + "</span></a></div>")
                } else {
                    if (c == 261 || c == 262 || c == 271 || c == 272 || (c >= 276 && c <= 279) || c == 280 || c == 281) {
                        a.push("<div class='useitem clearfix'><a  onclick='modal_boost_combat_use(" + c + ");return false;' class='button20'><span>" + g_js_strings.commonstr.use + "</span></a></div>")
                    } else {
                        if (c == 273 || c == 274 || c == 275) {
                            a.push("<div class='useitem clearfix'><a  onclick='modal_reduce_troop_upkeep_use(" + c + ");return false;' class='button20'><span>" + g_js_strings.commonstr.use + "</span></a></div>")
                        } else {
                            if (c == 351) {
                                a.push("<div class='useitem clearfix'><a  onclick='modal_fertilize();return false;' class='button20'><span>" + g_js_strings.commonstr.use + "</span></a></div>")
                            } else {
                                if (c == 355) {
                                    a.push("<div class='useitem clearfix'><a  onclick='modal_hypnotize();return false;' class='button20'><span>" + g_js_strings.commonstr.use + "</span></a></div>")
                                } else {
                                    if (c == 511 || c == 512 || c == 513 || c == 514) {
                                        a.push("<div class='useitem clearfix'><a  onclick='modal_get_knight(" + b + ");return false;' class='button20'><span>" + g_js_strings.commonstr.use + "</span></a></div>")
                                    } else {
                                        if (c > 520 && c < 525) {
                                            a.push("<div class='useitem clearfix'><a  onclick='modal_volunteer(" + b + ");return false;' class='button20'><span>" + g_js_strings.commonstr.use + "</span></a></div>")
                                        } else {
                                            if (c == 599) {
                                                a.push("<div class='useitem clearfix'><a  onclick='cm.mww.start(2);return false;' class='button20'><span>" + g_js_strings.commonstr.use + "</span></a></div>")
                                            } else {
                                                if (c == 922) {
                                                    a.push("<div class='useitem clearfix'><a  onclick='modal_get_cloak_name();return false;' class='button20'><span>" + g_js_strings.commonstr.use + "</span></a></div>")
                                                } else {
                                                    if (c == 923) {
                                                        a.push("<div class='useitem clearfix'><a  onclick='modal_rename_celebration();return false;' class='button20'><span>" + g_js_strings.commonstr.use + "</span></a></div>")
                                                    } else {
                                                        if (c == 924) {
                                                            a.push("<div class='useitem clearfix'><a  onclick='modal_myitems_use_escape(");
                                                            a.push(c);
                                                            a.push(");return false;' class='button20'><span>" + g_js_strings.commonstr.use + "</span></a></div>")
                                                        } else {
                                                            if (c == 942) {
                                                                a.push("<div class='useitem clearfix'><a  onclick='unpackFountainPack();return false;' class='button20'><span>" + g_js_strings.commonstr.use + "</span></a></div>")
                                                            } else {
                                                                if (c > 1000 && c < 1050) {
                                                                    a.push("<div class='useitem clearfix'><a  onclick='modal_myitems_use(");
                                                                    a.push(c);
                                                                    a.push(");return false;' class='button20'><span>" + g_js_strings.commonstr.use + "</span></a></div>")
                                                                } else {
                                                                    if (c >= 1300 && c <= 1419) {
                                                                        a.push("<div class='useitem clearfix'><a onclick='modal_volunteer(");
                                                                        a.push(c);
                                                                        a.push(");return false;' class='button20'><span>" + g_js_strings.commonstr.use + "</span></a></div>")
                                                                    } else {
                                                                        if ((c > 500 && c <= 505) || c == 531) {
                                                                            a.push("<div class='useitem clearfix'><a  onclick='modal_myitems_use_chest(");
                                                                            a.push(c);
                                                                            a.push(");return false;' class='button20'><span>" + g_js_strings.commonstr.use + "</span></a></div>")
                                                                        } else {
                                                                            if (c == 901) {
                                                                                a.push("<div class='useitem clearfix'><a  onclick='modal_myitems_use_peace_dove(");
                                                                                a.push(c);
                                                                                a.push(");return false;' class='button20'><span>" + g_js_strings.commonstr.use + "</span></a></div>")
                                                                            } else {
                                                                                if (c == 911) {
                                                                                    a.push("<div class='useitem clearfix'><a  onclick='modal_myitems_use_teleportprovince(");
                                                                                    a.push(c);
                                                                                    a.push(");return false;' class='button20'><span>" + g_js_strings.commonstr.use + "</span></a></div>")
                                                                                } else {
                                                                                    if (c == 912) {
                                                                                        a.push("<div class='useitem clearfix'><a  onclick='modal_myitems_use_teleport(");
                                                                                        a.push(c);
                                                                                        a.push(");return false;' class='button20'><span>" + g_js_strings.commonstr.use + "</span></a></div>")
                                                                                    } else {
                                                                                        if (c == 10021) {
                                                                                            a.push("<div class='useitem clearfix'><a onclick='modal_myitems_confirm_potion_mist(");
                                                                                            a.push(c);
                                                                                            a.push(");return false;' class='button20'><span>" + g_js_strings.commonstr.use + "</span></a></div>")
                                                                                        } else {
                                                                                            if (c >= 10000 && c < 20000) {
                                                                                                a.push("<div class='useitem clearfix'><a  onclick='modal_chest_itemusage(");
                                                                                                a.push(c);
                                                                                                a.push(");return false;' class='button20'><span>" + g_js_strings.commonstr.use + "</span></a></div>")
                                                                                            } else {
                                                                                                if (c > 700 && c < 900) {
                                                                                                    a.push("<div class='useitem clearfix'><a  onclick='modal_myitems_use_court(");
                                                                                                    a.push(c);
                                                                                                    if (seed.courtItems.indexOf(b) >= 0) {
                                                                                                        a.push(");return false;' class='button20'><span class='equiptext " + g_ajaxparams.lang + "'>" + g_js_strings.commonstr.unequip + "</span></a></div>")
                                                                                                    } else {
                                                                                                        a.push(");return false;' class='button20'><span class='equiptext'>" + g_js_strings.commonstr.equip + "</span></a></div>")
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    return a.join("")
}
function modal_myitems_use_peace_dove(itemid) {
    var params = Object.clone(g_ajaxparams);
    new Ajax.Request(g_ajaxpath + "ajax/doveOut.php" + g_ajaxsuffix, {
        method: "post",
        parameters: params,
        onSuccess: function (transport) {
            var rslt = eval("(" + transport.responseText + ")");
            if (rslt.ok) {
                var ut = unixtime();
                var bst = 43200;
                if (!(parseInt(seed.player.truceExpireUnixTime) > ut)) {
                    seed.player.truceExpireUnixTime = ut
                }
                seed.player.truceExpireUnixTime = parseInt(seed.player.truceExpireUnixTime) + bst;
                seed.player.warStatus = 3;
                seed.items["i" + itemid] = parseInt(seed.items["i" + itemid]) - 1;
                $("modal_itemowned_" + itemid).innerHTML = seed.items["i" + itemid];
                if (seed.items["i" + itemid] == 0) {
                    $("modal_shop_items_3").removeChild($("modal_item_" + itemid));
                    modal_fix_paginate(1)
                }
                if (rslt.updateSeed) {
                    update_seed(rslt.updateSeed)
                }
                update_boosts();
                $("modal_shop_message").innerHTML = itemlist["i" + itemid].name + " used!";
                $("modal_shop_message").show()
            } else {
                Modal.showAlert(printLocalError((rslt.error_code || null), (rslt.msg || null), (rslt.feedback || null)))
            }
        },
        onFailure: function () {}
    })
}
function modal_myitems_confirm_potion_mist(b) {
    var c = new Array();
    var a = new Array();
    c.push("<div class='mistwarn'>");
    c.push(g_js_strings.modal_myitems_confirm_potion_mist.mistwarning);
    c.push("</div>");
    a.push("<a class='button20' onclick='Modal.hideModal();modal_myitems_use_potion_mist(" + b + ");return false;'><span>");
    a.push(g_js_strings.modal_myitems_confirm_potion_mist.usemists);
    a.push("</span></a>");
    a.push("<a class='button20' onclick='Modal.hideModal();return false;'><span>");
    a.push(g_js_strings.commonstr.cancel);
    a.push("</span></a>");
    Modal.showAlert(c.join(""), a.join(""))
}
function modal_myitems_use_potion_mist(itemid) {
    var iid = itemid;
    var params = Object.clone(g_ajaxparams);
    new Ajax.Request(g_ajaxpath + "ajax/fogUser.php" + g_ajaxsuffix, {
        method: "post",
        parameters: params,
        onSuccess: function (transport) {
            var rslt = eval("(" + transport.responseText + ")");
            if (rslt.ok) {
                if (seed.playerEffects.length == 0) {
                    seed.playerEffects = new Object
                }
                var ut = unixtime();
                var bst = 604800;
                if (!(parseInt(seed.playerEffects.fogExpire) > ut)) {
                    seed.playerEffects.fogExpire = ut
                }
                seed.playerEffects.fogExpire = parseInt(seed.playerEffects.fogExpire) + bst;
                seed.items["i" + iid] = parseInt(seed.items["i" + iid]) - 1;
                $("modal_itemowned_" + iid).innerHTML = seed.items["i" + iid];
                if (seed.items["i" + iid] == 0) {
                    $("modal_shop_items_1").removeChild($("modal_item_" + iid));
                    modal_fix_paginate(1)
                }
                if (rslt.updateSeed) {
                    update_seed(rslt.updateSeed)
                }
                update_boosts();
                $("modal_shop_message").innerHTML = g_js_strings.modal_myitems_use_teleportprovince_do.aused.replace("%1$s", itemlist["i" + iid].name);
                $("modal_shop_message").show();
                g_mapObject.getMoreSlots()
            } else {
                Modal.showAlert(printLocalError((rslt.error_code || null), (rslt.msg || null), (rslt.feedback || null)))
            }
        },
        onFailure: function () {}
    })
}
function modal_myitems_use_court(itemid) {
    var pflag = ($("modal_item_" + itemid).select(".equiptext")[0].innerHTML == g_js_strings.commonstr.equip) ? 1 : 2;
    var params = Object.clone(g_ajaxparams);
    params.item = itemid;
    params.setflag = pflag;
    new Ajax.Request(g_ajaxpath + "ajax/courtSelectItem.php" + g_ajaxsuffix, {
        method: "post",
        parameters: params,
        onSuccess: function (transport) {
            var rslt = eval("(" + transport.responseText + ")");
            if (rslt.ok) {
                if (pflag == 1) {
                    var newItemInfo = itemlist["i" + itemid];
                    if (newItemInfo.subCategory != 0) {
                        seed.courtItems.slice(0)._each(function (i) {
                            if (parseInt(i) == 0) {
                                return
                            }
                            if (itemlist["i" + i].subCategory == newItemInfo.subCategory) {
                                $("modal_item_" + i).select(".equiptext")[0].innerHTML = g_js_strings.commonstr.equip;
                                seed.courtItems.splice(seed.courtItems.indexOf(i), 1)
                            }
                        })
                    }
                    seed.courtItems.push(itemid.toString());
                    $("modal_item_" + itemid).select(".equiptext")[0].innerHTML = g_js_strings.commonstr.unequip;
                    if ($("courtView")) {
                        changeview_court_content()
                    }
                } else {
                    var itemIdx = seed.courtItems.indexOf(itemid.toString());
                    seed.courtItems.splice(itemIdx, 1);
                    $("modal_item_" + itemid).select(".equiptext")[0].innerHTML = g_js_strings.commonstr.equip;
                    if ($("courtView")) {
                        changeview_court_content()
                    }
                }
                update_bdg()
            }
        },
        onFailure: function () {}
    })
}
function modal_myitems_use_teleportprovince(e) {
    var a = Math.floor(Math.random() * 25);
    var b = new Array();
    b.push("<div class='cloakmessagewrap'>");
    b.push("<div class='cloakmessage'>");
    b.push("<div class='desc'>" + g_js_strings.modal_myitems_use_teleportprovince.yourcurrentprov + " - <span>" + provincenames["p" + currentcityinfo[4]] + "</span></div>");
    b.push("<div class='desc'>" + g_js_strings.modal_myitems_use_teleportprovince.newprov + ":</div>");
    b.push("<div class='newname'><select id='teleportProvinceSel'>");
    var d = Object.keys(provincenames);
    for (var c = 0; c < d.length; c++) {
        var f = (c == a) ? "selected" : "";
        b.push("<option " + f + " value='");
        b.push(d[c].split("p")[1]);
        b.push("'>");
        b.push(provincenames[d[c]]);
        b.push("</option>")
    }
    b.push("</select></div>");
    b.push("<div id='teleportError' style='display:none;'></div>");
    b.push("</div>");
    b.push("<div class='btnlink clearfix'>");
    b.push("<a class='button25'  onclick='modal_myitems_use_teleportprovince_do(");
    b.push(e);
    b.push(");return false;'><span>" + g_js_strings.commonstr.submit + "</span></a>");
    b.push("<a class='link'  onclick='Modal.hideModal();return false;'>" + g_js_strings.commonstr.cancel + "</a>");
    b.push("</div>");
    b.push("</div>");
    if (parseInt(e) == 911) {
        Modal.showModal(500, 500, 10, 10, itemlist["i" + e].name, b.join(""))
    }
}
function modal_myitems_use_teleportprovince_do(iid) {
    var params = Object.clone(g_ajaxparams);
    params.iid = iid;
    params.cid = currentcityid;
    params.pid = parseInt($("teleportProvinceSel").value);
    new Ajax.Request(g_ajaxpath + "ajax/relocate.php" + g_ajaxsuffix, {
        method: "post",
        parameters: params,
        onSuccess: function (transport) {
            var rslt = eval("(" + transport.responseText + ")");
            if (rslt.ok) {
                Modal.hideModal();
                seed.items["i" + iid] = parseInt(seed.items["i" + iid]) - 1;
                if (seed.items["i" + iid] == 0) {
                    $("modal_shop_items_1").removeChild($("modal_item_" + iid));
                    modal_fix_paginate(1)
                } else {
                    $("modal_itemowned_" + iid).innerHTML = seed.items["i" + iid]
                }
                currentcityinfo[2] = rslt.x;
                currentcityinfo[3] = rslt.y;
                for (var i = 0; i < seed.cities.length; i++) {
                    if (parseInt(seed.cities[i][0]) == parseInt(currentcityid)) {
                        seed.cities[i][2] = rslt.x;
                        seed.cities[i][3] = rslt.y;
                        break
                    }
                }
                $("mapXCoor").value = rslt.x;
                $("mapYCoor").value = rslt.y;
                reCenterMapWithCoor();
                var msghtml = new Array();
                msghtml.push("<div class='cloakmessagewrap'>");
                msghtml.push("<div class='cloakmessage'>");
                msghtml.push("<div class='desc' style='padding:10px 0 20px 0;'>" + g_js_strings.modal_myitems_use_teleportprovince_do.aused.replace("%1$s", itemlist["i" + iid].name) + "</div>");
                msghtml.push("<div class='desc'>" + g_js_strings.modal_myitems_use_teleportprovince_do.teleportto + " <b>" + rslt.x + "," + rslt.y + "</b></div>");
                msghtml.push("</div>");
                msghtml.push("<div class='btnlink clearfix' style='display:block;margin-left:210px;'>");
                msghtml.push("<a class='button25'  onclick='top.location=\"" + appUrl + "\";return false;'><span>" + g_js_strings.commonstr.ok + "</span></a>");
                msghtml.push("</div></div>");
                Modal.showModal(500, 500, 10, 10, itemlist["i" + iid].name, msghtml.join(""))
            } else {
                if (rslt.msg) {
                    $("teleportError").innerHTML = rslt.msg;
                    $("teleportError").show()
                }
            }
        },
        onFailure: function () {}
    })
}
function modal_myitems_use_teleport(b) {
    var a = new Array();
    a.push("<div class='cloakmessagewrap'>");
    a.push("<div class='cloakmessage'>");
    a.push("<div class='desc'>" + g_js_strings.modal_myitems_use_teleport.currentcoor + " - <span>X:" + currentcityinfo[2] + " Y:" + currentcityinfo[3] + "</span></div>");
    a.push("<div class='desc'>New Coordinates:</div>");
    a.push("<div class='newname newcoords'>X: <input id='teleportXCoord' value='' maxlength='3'/> Y: <input id='teleportYCoord' value='' maxlength='3'/></div>");
    a.push("<div id='teleportError' style='display:none;'></div>");
    a.push("</div>");
    a.push("<div class='btnlink clearfix'>");
    a.push("<a class='button25'  onclick='modal_myitems_use_teleport_do(");
    a.push(b);
    a.push(");return false;'><span>" + g_js_strings.commonstr.submit + "</span></a>");
    a.push("<a class='link'  onclick='Modal.hideModal();return false;'>" + g_js_strings.commonstr.cancel + "</a>");
    a.push("</div>");
    a.push("</div>");
    if (parseInt(b) == 912) {
        Modal.showModal(500, 500, 10, 10, itemlist["i" + b].name, a.join(""))
    }
}
function modal_myitems_use_teleport_do(iid) {
    var params = Object.clone(g_ajaxparams);
    params.iid = iid;
    params.cid = currentcityid;
    params.xcoord = parseInt($("teleportXCoord").value);
    params.ycoord = parseInt($("teleportYCoord").value);
    new Ajax.Request(g_ajaxpath + "ajax/relocate.php" + g_ajaxsuffix, {
        method: "post",
        parameters: params,
        onSuccess: function (transport) {
            var rslt = eval("(" + transport.responseText + ")");
            if (rslt.ok) {
                Modal.hideModal();
                seed.items["i" + iid] = parseInt(seed.items["i" + iid]) - 1;
                if (seed.items["i" + iid] == 0) {
                    $("modal_shop_items_1").removeChild($("modal_item_" + iid));
                    modal_fix_paginate(1)
                } else {
                    $("modal_itemowned_" + iid).innerHTML = seed.items["i" + iid]
                }
                currentcityinfo[2] = params.xcoord;
                currentcityinfo[3] = params.ycoord;
                for (var i = 0; i < seed.cities.length; i++) {
                    if (parseInt(seed.cities[i][0]) == parseInt(currentcityid)) {
                        seed.cities[i][2] = params.xcoord;
                        seed.cities[i][3] = params.ycoord;
                        break
                    }
                }
                $("mapXCoor").value = params.xcoord;
                $("mapYCoor").value = params.ycoord;
                reCenterMapWithCoor();
                var msghtml = new Array();
                msghtml.push("<div class='cloakmessagewrap'>");
                msghtml.push("<div class='cloakmessage'>");
                msghtml.push("<div class='desc' style='padding:10px 0 20px 0;'>" + g_js_strings.modal_myitems_use_teleportprovince_do.aused.replace("%1$s", itemlist["i" + iid].name) + "</div>");
                msghtml.push("<div class='desc'>Teleported to <b>" + params.xcoord + "," + params.ycoord + "</b></div>");
                msghtml.push("</div>");
                msghtml.push("<div class='btnlink clearfix' style='display:block;margin-left:210px;'>");
                msghtml.push("<a class='button25'  onclick='top.location=\"" + appUrl + "\";return false;'><span>" + g_js_strings.commonstr.ok + "</span></a>");
                msghtml.push("</div></div>");
                Modal.showModal(500, 500, 10, 10, itemlist["i" + iid].name, msghtml.join(""))
            } else {
                if (rslt.msg) {
                    $("teleportError").innerHTML = rslt.msg;
                    $("teleportError").show()
                }
            }
        },
        onFailure: function () {}
    })
}
function modal_myitems_use_escape(b) {
    var a = new Array();
    a.push("<div class='escapemessagewrap'>");
    a.push("<div class='escapemessage'>");
    a.push("<div class='renamemessage'>");
    a.push("<div class='desc'>" + g_js_strings.modal_myitems_use_escape.yourcurrentname + ": <span>" + seed.player.prefix + " " + seed.player.name + "</span></div>");
    a.push("<div class='desc'>" + g_js_strings.modal_myitems_use_escape.newname + ":</div>");
    a.push("<div class='newname'>" + seed.player.prefix + " <input id='newEscapeName' value=''/></div>");
    a.push("</div>");
    a.push("<div class='portalmessage'>");
    a.push("<div class='desc'>" + g_js_strings.modal_myitems_use_escape.currentcoor + " - <span>X:" + currentcityinfo[2] + " Y:" + currentcityinfo[3] + "</span></div>");
    a.push("<div class='desc'>" + g_js_strings.modal_myitems_use_escape.newcoor + "</div>");
    a.push("<div class='newname newcoords'>X: <input id='escapeXCoord' value='' maxlength='3'/> Y: <input id='escapeYCoord' value='' maxlength='3'/></div>");
    a.push("</div>");
    a.push("<div id='escapeError' style='display:none;'></div>");
    a.push("</div>");
    a.push("<div class='btnlink clearfix'>");
    a.push("<a class='button25'  onclick='modal_myitems_use_escape_do(");
    a.push(b);
    a.push(");return false;'><span>" + g_js_strings.commonstr.submit + "</span></a>");
    a.push("<a class='link'  onclick='Modal.hideModal();return false;'>" + g_js_strings.commonstr.cancel + "</a>");
    a.push("</div>");
    a.push("</div>");
    if (parseInt(b) == 924) {
        Modal.showModal(500, 500, 10, 10, itemlist["i" + b].name, a.join(""))
    }
}
function modal_myitems_use_escape_do(iid) {
    var newName = $("newEscapeName").value;
    if (!newName || newName.length < 3 || newName.length > 15) {
        $("newEscapeName").innerHTML = g_js_strings.setNewDisplayName.entername;
        $("newEscapeName").show();
        return false
    }
    var params = Object.clone(g_ajaxparams);
    params.iid = iid;
    params.cid = currentcityid;
    params.displayname = newName;
    params.xcoord = parseInt($("escapeXCoord").value);
    params.ycoord = parseInt($("escapeYCoord").value);
    new Ajax.Request(g_ajaxpath + "ajax/relocateAndChangename.php" + g_ajaxsuffix, {
        method: "post",
        parameters: params,
        onSuccess: function (transport) {
            var rslt = eval("(" + transport.responseText + ")");
            if (rslt.ok) {
                Modal.hideModal();
                seed.items["i" + iid] = parseInt(seed.items["i" + iid]) - 1;
                if (seed.items["i" + iid] == 0) {
                    $("modal_shop_items_1").removeChild($("modal_item_" + iid));
                    modal_fix_paginate(1)
                } else {
                    $("modal_itemowned_" + iid).innerHTML = seed.items["i" + iid]
                }
                currentcityinfo[2] = params.xcoord;
                currentcityinfo[3] = params.ycoord;
                for (var i = 0; i < seed.cities.length; i++) {
                    if (parseInt(seed.cities[i][0]) == parseInt(currentcityid)) {
                        seed.cities[i][2] = params.xcoord;
                        seed.cities[i][3] = params.ycoord;
                        break
                    }
                }
                $("mapXCoor").value = params.xcoord;
                $("mapYCoor").value = params.ycoord;
                reCenterMapWithCoor();
                seed.player.name = newName;
                $("topnavDisplayName").innerHTML = seed.player.prefix + " " + newName;
                var msghtml = new Array();
                msghtml.push("<div class='cloakmessagewrap'>");
                msghtml.push("<div class='cloakmessage'>");
                msghtml.push("<div class='desc' style='padding:10px 0 10px 0;'>" + g_js_strings.modal_myitems_use_escape_do.aused.replace("%1$s", itemlist["i" + iid].name) + "</div>");
                msghtml.push("<div class='desc'>" + g_js_strings.modal_myitems_use_escape_do.namechangedto + " <b>" + seed.player.prefix + " " + params.displayname + "</b></div>");
                msghtml.push("<div class='desc'>" + g_js_strings.modal_myitems_use_escape_do.teleportto + " <b>" + params.xcoord + "," + params.ycoord + "</b></div>");
                msghtml.push("</div>");
                msghtml.push("<div class='btnlink clearfix' style='display:block;margin-left:210px;'>");
                msghtml.push("<a class='button25'  onclick='top.location=\"" + appUrl + "\";return false;'><span>" + g_js_strings.commonstr.ok + "</span></a>");
                msghtml.push("</div></div>");
                Modal.showModal(500, 500, 10, 10, itemlist["i" + iid].name, msghtml.join(""))
            } else {
                if (rslt.msg) {
                    $("escapeError").innerHTML = rslt.msg;
                    $("escapeError").show()
                }
            }
        },
        onFailure: function () {}
    })
}
function unpackFountainPack() {
    var iid = 942;
    var singleiid = 941;
    var params = Object.clone(g_ajaxparams);
    params.iid = iid;
    new Ajax.Request(g_ajaxpath + "ajax/itemChest.php" + g_ajaxsuffix, {
        method: "post",
        parameters: params,
        onSuccess: function (transport) {
            var rslt = eval("(" + transport.responseText + ")");
            if (rslt.ok) {
                seed.items["i" + iid] = (parseInt(seed.items["i" + iid]) - 1).toString();
                seed.items["i" + singleiid] = (seed.items["i" + singleiid]) ? (parseInt(seed.items["i" + singleiid]) + 5).toString() : "5";
                if (seed.items["i" + iid] == 0) {
                    $("modal_shop_items_5").removeChild($("modal_item_" + iid));
                    modal_fix_paginate(5)
                } else {
                    $("modal_itemowned_" + iid).innerHTML = seed.items["i" + iid]
                }
            } else {
                if (rslt.msg) {
                    $("cloakNameError").innerHTML = rslt.msg;
                    $("cloakNameError").show()
                }
            }
        },
        onFailure: function () {}
    })
}
function modal_rename_celebration() {
    var b = new Array();
    var a = "No Name";
    b.push("<div class='celebrationwrap'>");
    b.push("<div class='celebrationmessage'>");
    for (var c = 0; c < seed.cities.length; c++) {
        if (parseInt(seed.cities[c][0]) == parseInt(currentcityid)) {
            a = seed.cities[c][1];
            break
        }
    }
    b.push("<div class='desc'>" + g_js_strings.modal_rename_celebration.currentcity + ": <span>" + a + "</span></div>");
    b.push("<div class='desc'>" + g_js_strings.modal_rename_celebration.newcityname + ":</div>");
    b.push("<div class='newname'><input id='newCityName' value=''/></div>");
    b.push("<div id='cityNameError' style='display:none;'></div>");
    b.push("</div>");
    b.push("<div class='btnlink clearfix'>");
    b.push("<a class='button25'  onclick='setNewCityName();return false;'><span>" + g_js_strings.commonstr.submit + "</span></a>");
    b.push("<a class='link'  onclick='Modal.hideModal();return false;'>" + g_js_strings.commonstr.cancel + "</a>");
    b.push("</div>");
    b.push("</div>");
    Modal.showModal(500, 500, 10, 10, g_js_strings.modaltitles.renamecelebration, b.join(""))
}
function setNewCityName() {
    var newName = $("newCityName").value;
    if (!newName || newName.length < 3 || newName.length > 15) {
        $("cityNameError").innerHTML = g_js_strings.modal_rename_celebration.entername;
        $("cityNameError").show();
        return false
    }
    var iid = 923;
    var params = Object.clone(g_ajaxparams);
    params.cityname = newName;
    params.cid = currentcityid;
    params.iid = iid;
    new Ajax.Request(g_ajaxpath + "ajax/changeCityName.php" + g_ajaxsuffix, {
        method: "post",
        parameters: params,
        onSuccess: function (transport) {
            var rslt = eval("(" + transport.responseText + ")");
            if (rslt.ok) {
                seed.items["i" + iid] = parseInt(seed.items["i" + iid]) - 1;
                $("modal_itemowned_" + iid).innerHTML = seed.items["i" + iid];
                if (seed.items["i" + iid] == 0) {
                    $("modal_shop_items_1").removeChild($("modal_item_" + iid))
                }
                for (var i = 0; i < seed.cities.length; i++) {
                    if (parseInt(seed.cities[i][0]) == parseInt(currentcityid)) {
                        seed.cities[i][1] = newName;
                        break
                    }
                }
                $("mod_cityinfo_cityname").innerHTML = newName;
                var msghtml = new Array();
                msghtml.push("<div class='cloakmessagewrap'>");
                msghtml.push("<div class='cloakmessage'>");
                msghtml.push("<div class='desc' style='padding:10px 0 20px 0;'>" + g_js_strings.modal_myitems_use_teleportprovince_do.aused.replace("%1$s", itemlist["i" + iid].name) + "</div>");
                msghtml.push("<div class='desc'>" + g_js_strings.modal_rename_celebration.newcityname + ": " + params.cityname + "</div>");
                msghtml.push("</div>");
                msghtml.push("<div class='btnlink clearfix' style='display:block;margin-left:210px;'>");
                msghtml.push("<a class='button25' onclick='top.location=\"" + appUrl + "\";return false;'><span>" + g_js_strings.commonstr.ok + "</span></a>");
                msghtml.push("</div></div>");
                Modal.hideModal();
                Modal.showModal(500, 500, 10, 10, itemlist["i" + iid].name, msghtml.join(""))
            } else {
                if (rslt.msg) {
                    $("cityNameError").innerHTML = rslt.msg;
                    $("cityNameError").show()
                }
            }
        },
        onFailure: function () {}
    })
}
function modal_get_cloak_name() {
    var a = new Array();
    a.push("<div class='cloakmessagewrap'>");
    a.push("<div class='cloakmessage'>");
    a.push("<div class='desc'>" + g_js_strings.modal_get_cloak_name.yourcurrentname + ": <span>" + seed.player.prefix + " " + seed.player.name + "</span></div>");
    a.push("<div class='desc'>" + g_js_strings.modal_get_cloak_name.newname + ":</div>");
    a.push("<div class='newname'>" + seed.player.prefix + " <input id='newCloakName' value=''/></div>");
    a.push("<div id='cloakNameError' style='display:none;'></div>");
    a.push("</div>");
    a.push("<div class='btnlink clearfix'>");
    a.push("<a class='button25'  onclick='setNewDisplayName();return false;'><span>" + g_js_strings.commonstr.submit + "</span></a>");
    a.push("<a class='link'  onclick='Modal.hideModal();return false;'>" + g_js_strings.commonstr.cancel + "</a>");
    a.push("</div>");
    a.push("</div>");
    Modal.showModal(500, 500, 10, 10, g_js_strings.modaltitles.magiccloak, a.join(""))
}
function setNewDisplayName() {
    var newName = $("newCloakName").value;
    if (!newName || newName.length < 3 || newName.length > 15) {
        $("cloakNameError").innerHTML = g_js_strings.setNewDisplayName.entername;
        $("cloakNameError").show();
        return false
    }
    var iid = 922;
    var params = Object.clone(g_ajaxparams);
    params.displayname = newName;
    params.cid = currentcityid;
    params.iid = iid;
    new Ajax.Request(g_ajaxpath + "ajax/changename.php" + g_ajaxsuffix, {
        method: "post",
        parameters: params,
        onSuccess: function (transport) {
            var rslt = eval("(" + transport.responseText + ")");
            if (rslt.ok) {
                seed.items["i" + iid] = (parseInt(seed.items["i" + iid]) - 1).toString();
                seed.player.name = newName;
                $("topnavDisplayName").innerHTML = seed.player.prefix + " " + newName;
                Modal.hideModalAll();
                modal_myitems()
            } else {
                if (rslt.msg) {
                    $("cloakNameError").innerHTML = rslt.msg;
                    $("cloakNameError").show()
                }
            }
        },
        onFailure: function () {}
    })
}
function modal_get_knight(b) {
    var a = new Array();
    a.push("<div class='appointknightwrap'>");
    a.push("<center><div class='name'><b>" + g_js_strings.modal_knight_info.knightname + "</b></div>");
    a.push("<div class='knightname'><div><input id='knightname' value='' maxlength='15' /></div></div>");
    a.push("<div class='errorbox'><div id='nameError' style='display:none' font-color='red'>" + g_js_strings.modal_knight_info.entername + "</div></div>");
    a.push("<br/><div class='btnlink clearfix' ><a  class='button25' onclick='use_knight(" + b + ");return false;'><span>" + g_js_strings.modal_appoint.appointknight + "</span></a></div></center>");
    a.push("</div></center>");
    a.push("</div>");
    Modal.showModal(500, 500, 10, 10, g_js_strings.modaltitles.appointknight, a.join(""))
}
function use_knight(kid) {
    var kname = $("knightname").value;
    if (kname.length < 3) {
        $("nameError").show();
        return false
    } else {
        var params = Object.clone(g_ajaxparams);
        params.ktype = kid;
        params.cid = currentcityid;
        params.kname = kname;
        new Ajax.Request(g_ajaxpath + "ajax/hireSpecialKnight.php" + g_ajaxsuffix, {
            method: "post",
            parameters: params,
            onSuccess: function (transport) {
                var rslt = eval("(" + transport.responseText + ")");
                if (rslt.ok) {
                    Modal.hideModal();
                    var msghtml = new Array();
                    msghtml.push("<div class='appointknightwrap'>");
                    msghtml.push("<div class='appointbox clearfix'>");
                    msghtml.push("<div class='leftpic'>");
                    msghtml.push("<div class='pic'><img src='" + stimgUrl + "img/items/70/" + kid + ".jpg'></div>");
                    msghtml.push("<div class='leftstat'>" + g_js_strings.commonstr.level + ":<span>" + rslt.klv + "</span></div>");
                    msghtml.push("</div>");
                    msghtml.push("<div class='rightinfo'>");
                    msghtml.push("<div class='title' id='topAppointLine'>" + g_js_strings.modal_knight_info.knightname + "</div>");
                    msghtml.push("<div class='name'>" + kname + "</div>");
                    msghtml.push("<div class='title' id='bottomAppointLine'></div>");
                    msghtml.push("<div class='reqbox'>");
                    msghtml.push("<div class='title'>" + g_js_strings.commonstr.requirement + "</div>");
                    msghtml.push("<div class='rightstat'>" + g_js_strings.commonstr.salary + ": <span>" + (20 * parseInt(rslt.klv)) + " " + g_js_strings.commonstr.goldperhour + "</span></div>");
                    msghtml.push("</div>");
                    msghtml.push("</div>");
                    msghtml.push("</div>");
                    msghtml.push("<div class='exp'><span>" + g_js_strings.modal_knight_info.knightskills + "</span> </div>");
                    msghtml.push("<div class='knightstatsbox clearfix'>");
                    msghtml.push("<div class='stat'>");
                    msghtml.push("<div class='title'>" + g_js_strings.commonstr.resourcefulness + "</div>");
                    msghtml.push("  <div class='number'>" + rslt.randomnums[0] + "</div>");
                    msghtml.push("  </div>");
                    msghtml.push("  <div class='stat'>");
                    msghtml.push("  <div class='title'>" + g_js_strings.commonstr.politics + "</div>");
                    msghtml.push("    <div class='number'>" + rslt.randomnums[1] + "</div>");
                    msghtml.push("  </div>");
                    msghtml.push("<div class='stat'>");
                    msghtml.push("  <div class='title'>" + g_js_strings.commonstr.combat + "</div>");
                    msghtml.push("  <div class='number'>" + rslt.randomnums[2] + "</div>");
                    msghtml.push("</div>");
                    msghtml.push("  <div class='stat'>");
                    msghtml.push("    <div class='title'>" + g_js_strings.commonstr.intelligence + "</div>");
                    msghtml.push("  <div class='number'>" + rslt.randomnums[3] + "</div>");
                    msghtml.push("  </div>");
                    msghtml.push("</div>");
                    msghtml.push("<center><div class='btnlink clearfix' ><a  class='button25' onclick='Modal.hideModal();return false;'><span>" + g_js_strings.commonstr.ok + "</span></a></div></center>");
                    msghtml.push("</div>");
                    var newKnightObj = Object.clone(knighttemplate[1]);
                    newKnightObj.baseResourcefullness = rslt.baseskills.toString();
                    newKnightObj.basePolitics = rslt.baseskills.toString();
                    newKnightObj.baseCombat = rslt.baseskills.toString();
                    newKnightObj.baseIntelligence = rslt.baseskills.toString();
                    newKnightObj.resourcefulness = rslt.randomnums[0].toString();
                    newKnightObj.politics = rslt.randomnums[1].toString();
                    newKnightObj.combat = rslt.randomnums[2].toString();
                    newKnightObj.intelligence = rslt.randomnums[3].toString();
                    newKnightObj.cityId = currentcityid.toString();
                    newKnightObj.knightFbuid = "0";
                    newKnightObj.knightId = rslt.knightId.toString();
                    newKnightObj.knightLevel = rslt.klv.toString();
                    newKnightObj.experience = rslt.kexp.toString();
                    newKnightObj.skillPointsApplied = rslt.klv.toString();
                    newKnightObj.knightLordUserid = tvuid.toString();
                    newKnightObj.knightName = kname;
                    newKnightObj.pic_square = stimgUrl + "img/items/70/" + kid + ".jpg";
                    if (Object.isArray(seed.knights)) {
                        seed.knights = new Object
                    }
                    if (!seed.knights["city" + currentcityid]) {
                        seed.knights["city" + currentcityid] = new Object
                    }
                    seed.knights["city" + currentcityid]["knt" + rslt.knightId] = newKnightObj;
                    update_knights();
                    cm.InventoryView.removeItemFromInventory(kid);
                    Modal.showModal(500, 500, 10, 10, g_js_strings.modaltitles.appointknight, msghtml.join(""))
                } else {
                    Modal.showAlert(printLocalError((rslt.error_code || null), (rslt.msg || null), (rslt.feedback || null)))
                }
            },
            onFailure: function () {}
        })
    }
}
function modal_volunteer(iid) {
    var params = Object.clone(g_ajaxparams);
    params.cid = currentcityid;
    params.iid = iid;
    new Ajax.Request(g_ajaxpath + "ajax/volunteee.php" + g_ajaxsuffix, {
        method: "post",
        parameters: params,
        onSuccess: function (transport) {
            var rslt = eval("(" + transport.responseText + ")");
            if (rslt.ok) {
                if (rslt.updateSeed) {
                    update_seed(rslt.updateSeed)
                }
                var units = new Hash(rslt.unitsGained);
                units.each(function (pair) {
                    var unitkey = pair.key.substring(4);
                    seed.units["city" + currentcityid]["unt" + unitkey] = parseInt(seed.units["city" + currentcityid]["unt" + unitkey]) + pair.value
                });
                seed.items["i" + iid] = parseInt(seed.items["i" + iid]) - 1;
                if (seed.items["i" + iid] == 0) {
                    $("modal_shop_items_3").removeChild($("modal_item_" + iid))
                } else {
                    $("modal_itemowned_" + iid).innerHTML = seed.items["i" + iid]
                }
                modal_volunteer_gain(rslt.unitsGained, iid)
            }
        },
        onFailure: function () {}
    })
}
function modal_chest_itemusage(iid) {
    var params = Object.clone(g_ajaxparams);
    params.iid = iid;
    new Ajax.Request(g_ajaxpath + "ajax/itemChest.php" + g_ajaxsuffix, {
        method: "post",
        parameters: params,
        onSuccess: function (transport) {
            var rslt = eval("(" + transport.responseText + ")");
            if (rslt.ok) {
                seed.items["i" + iid] = parseInt(seed.items["i" + iid]) - 1;
                if (seed.items["i" + iid] == 0) {
                    if (parseInt(iid) == 10018) {
                        $("modal_shop_items_1").removeChild($("modal_item_" + iid))
                    } else {
                        $("modal_shop_items_5").removeChild($("modal_item_" + iid))
                    }
                } else {
                    $("modal_itemowned_" + iid).innerHTML = seed.items["i" + iid]
                }
                var msghtml = new Array();
                msghtml.push("<div class='volunteerpackagelist'>");
                msghtml.push("<div><b>" + g_js_strings.modal_chest_itemusage.itemsgained + "</b></div>");
                var items = Object.keys(rslt.items);
                msghtml.push("<table cellpadding='0' cellspacing='0'><tbody>");
                for (var i = 0; i < items.length; i++) {
                    var uid = items[i].split("i")[1];
                    msghtml.push("<tr><td><img src='");
                    msghtml.push(stimgUrl);
                    msghtml.push("img/items/70/");
                    msghtml.push(uid);
                    msghtml.push(".jpg?5c10831' style='width:30px;height:30px;'/></td><td class='unm'>");
                    msghtml.push(itemlist["i" + uid].name);
                    msghtml.push("</td><td class='gain'>x");
                    msghtml.push(rslt.items[items[i]]);
                    msghtml.push("</td></tr>");
                    seed.items["i" + uid] = (seed.items["i" + uid]) ? (parseInt(seed.items["i" + uid]) + parseInt(rslt.items[items[i]])) : parseInt(rslt.items[items[i]])
                }
                msghtml.push("</tbody></table>");
                if (parseInt(seed.tutorial.t1) == 11 && parseInt(iid) == 10020) {
                    msghtml.push("<div class='btnlink clearfix'><a  class='button25' onclick='closeConfirmFTE();return false;'><span>" + g_js_strings.commonstr.ok + "</span></a></div>");
                    tutorialAdvance(1, 12)
                } else {
                    msghtml.push("<div class='btnlink clearfix'><a  class='button25' onclick='Modal.hideModal();return false;'><span>" + g_js_strings.commonstr.ok + "</span></a></div>")
                }
                msghtml.push("</div>");
                Modal.hideModal();
                Modal.showModal(500, 500, 10, 10, itemlist["i" + iid].name, msghtml.join(""))
            } else {}
        },
        onFailure: function () {}
    })
}
function closeConfirmFTE() {
    changeview_map($("mod_views_map"));
    Modal.hideModalAll();
    seed.tutorial.t1 = 12;
    tutorialCheck(12)
}
function modal_volunteer_gain(f, e) {
    var b = new Array();
    b.push("<div class='volunteerpackagelist'>");
    b.push("<div><b>" + g_js_strings.modal_volunteer_gain.unitsgained + "</b></div>");
    var a = Object.keys(f);
    b.push("<table cellpadding='0' cellspacing='0'><tbody>");
    for (var d = 0; d < a.length; d++) {
        var c = a[d].split("unit")[1];
        b.push("<tr><td><img src='");
        b.push(stimgUrl);
        b.push("img/units/unit_");
        b.push(c);
        b.push("_30.jpg'/></td><td class='unm'>");
        b.push(unitcost["unt" + c][0]);
        b.push("</td><td class='gain'>");
        b.push(f[a[d]]);
        b.push("</td></tr>")
    }
    b.push("</tbody></table>");
    b.push("<div class='btnlink clearfix'><a  class='button25' onclick='Modal.hideModal();return false;'><span>" + g_js_strings.commonstr.ok + "</span></a></div>");
    b.push("</div>");
    Modal.showModal(500, 500, 10, 10, itemlist["i" + e].name, b.join(""))
}
function modal_fertilize() {
    var params = Object.clone(g_ajaxparams);
    params.cid = currentcityid;
    new Ajax.Request(g_ajaxpath + "ajax/fertilizePeople.php" + g_ajaxsuffix, {
        method: "post",
        parameters: params,
        onSuccess: function (transport) {
            var rslt = eval("(" + transport.responseText + ")");
            if (rslt.ok) {
                if (rslt.updateSeed) {
                    update_seed(rslt.updateSeed)
                }
                seed.items.i351 = (parseInt(seed.items.i351) - 1).toString();
                Modal.hideModal();
                modal_myitems()
            }
        },
        onFailure: function () {}
    })
}
function modal_hypnotize() {
    var params = Object.clone(g_ajaxparams);
    params.cid = currentcityid;
    new Ajax.Request(g_ajaxpath + "ajax/hypnotize.php" + g_ajaxsuffix, {
        method: "post",
        parameters: params,
        onSuccess: function (transport) {
            var rslt = eval("(" + transport.responseText + ")");
            if (rslt.ok) {
                if (rslt.updateSeed) {
                    update_seed(rslt.updateSeed)
                }
                seed.items.i355 = (parseInt(seed.items.i355) - 1).toString();
                Modal.hideModal();
                modal_myitems();
                $("modal_shop_message").innerHTML = itemlist.i355.name + " used!";
                $("modal_shop_message").show()
            }
        },
        onFailure: function () {}
    })
}
function modal_myitems_use_chest(iid) {
    var params = Object.clone(g_ajaxparams);
    params.requestType = "DRAW_ITEM";
    params.itemId = iid;
    params.cid = currentcityid;
    new Ajax.Request(g_ajaxpath + "ajax/medals.php" + g_ajaxsuffix, {
        method: "post",
        parameters: params,
        onSuccess: function (transport) {
            var rslt = eval("(" + transport.responseText + ")");
            if (rslt.ok) {
                var medals = new Hash(rslt.medals);
                medals.each(function (pair) {
                    if (seed.items["i" + pair.key]) {
                        seed.items["i" + pair.key] = (parseInt(seed.items["i" + pair.key]) + parseInt(pair.value)).toString()
                    } else {
                        seed.items["i" + pair.key] = pair.value.toString()
                    }
                });
                seed.items["i" + iid] = parseInt(seed.items["i" + iid]) - 1;
                if (seed.items["i" + iid] == 0) {
                    $("modal_shop_items_5").removeChild($("modal_item_" + iid))
                } else {
                    $("modal_itemowned_" + iid).innerHTML = seed.items["i" + iid]
                }
                modal_myitems_use_chest_gain(rslt.medals, iid);
                addGainedItemsToInventory(rslt.medals)
            }
        },
        onFailure: function () {}
    })
}
function addGainedItemsToInventory(b) {
    var a = Object.keys(b);
    a.each(function (f) {
        var k = f;
        var c = jQuery("#modal_itemowned_" + k);
        var h = parseInt(itemlist["i" + k].category);
        if (c.size() > 0) {
            c.html(seed.items["i" + k])
        } else {
            var l = jQuery("#modal_shop_items_" + h);
            var d = renderItemBox(k).join("");
            l.append(d);
            if (l.css("display") != "none") {
                var g = parseInt($("modal_shop_page_list").select(".pagenum").length);
                var j = l.find(".item").size();
                var i = parseInt(Math.ceil(j / 9));
                if (i > g) {
                    var e = parseInt($("modal_shop_page_list").select(".curpage")[0].innerHTML);
                    modal_shop_pagelist(e, i);
                    jQuery("#modal_shop_page_next").show()
                }
            }
        }
    });
    cm.itemCleanup.exe()
}
var cm = cm || {};
cm.itemCleanup = function (a) {
    return {
        exe: function () {
            for (var b = 1; b < 7; b++) {
                var c = a("#modal_shop_items_" + b + " .item").length;
                if (c > 0) {
                    a("#modal_shop_items_" + b + " .noitem").remove()
                }
            }
        }
    }
}(jQuery);

function modal_myitems_use_mystery_chest(iid) {
    var l_self = this;
    var l_oldOnclick = l_self.onclick;
    var params = Object.clone(g_ajaxparams);
    params.chestId = iid;
    params.cid = currentcityid;
    new Ajax.Request(g_ajaxpath + "ajax/useMysteryChest.php" + g_ajaxsuffix, {
        method: "post",
        parameters: params,
        onSuccess: function (transport) {
            var rslt = eval("(" + transport.responseText + ")");
            if (rslt.ok) {
                var medals = new Hash(rslt.items);
                medals.each(function (pair) {
                    if (seed.items["i" + pair.key]) {
                        seed.items["i" + pair.key] = (parseInt(seed.items["i" + pair.key]) + parseInt(pair.value)).toString()
                    } else {
                        seed.items["i" + pair.key] = pair.value.toString()
                    }
                });
                seed.items["i" + iid] = parseInt(seed.items["i" + iid]) - 1;
                var l_elem = null;
                if (seed.items["i" + iid] == 0) {
                    jQuery("#modal_item_" + iid).remove()
                } else {
                    l_elem = $("modal_itemowned_" + iid);
                    if (l_elem) {
                        l_elem.innerHTML = seed.items["i" + iid]
                    }
                }
                modal_myitems_use_chest_gain(rslt.items, iid);
                addGainedItemsToInventory(rslt.items)
            }
            l_self.onclick = l_oldOnclick
        },
        onFailure: function () {}
    })
}
function modal_myitems_use_chest_gain(b, e) {
    var a = new Array();
    a.push("<div class='volunteerpackagelist'>");
    var d = Object.keys(b);
    a.push("<table cellpadding='0' cellspacing='0'><tbody>");
    for (var c = 0; c < d.length; c++) {
        var f = d[c];
        a.push("<tr><td><img src='");
        a.push(stimgUrl);
        a.push("img/items/70/");
        a.push(f);
        a.push(".jpg?5c10831'/></td><td class='unm'>");
        a.push(itemlist["i" + f].name);
        a.push("</td><td class='gain'>");
        a.push(b[d[c]]);
        a.push("</td></tr>")
    }
    a.push("</tbody></table>");
    a.push("<div class='btnlink clearfix'><a  class='button25' onclick='Modal.hideModal();return false;'><span>" + g_js_strings.commonstr.ok + "</span></a></div>");
    a.push("</div>");
    Modal.showModal(500, 500, 10, 10, itemlist["i" + e].name, a.join(""))
}
function modal_reduce_troop_upkeep_use(iid) {
    var params = Object.clone(g_ajaxparams);
    params.iid = iid;
    new Ajax.Request(g_ajaxpath + "ajax/reduceTroopUpkeep.php" + g_ajaxsuffix, {
        method: "post",
        parameters: params,
        onSuccess: function (transport) {
            var rslt = eval("(" + transport.responseText + ")");
            if (rslt.ok) {
                if (seed.playerEffects.length == 0) {
                    seed.playerEffects = new Object
                }
                var ut = unixtime();
                var bst = 28800;
                if (iid == 274) {
                    bst = 86400
                } else {
                    if (iid == 275) {
                        bst = 259200
                    }
                }
                if (!(parseInt(seed.playerEffects.troopUpkeepReductExp) > ut)) {
                    seed.playerEffects.troopUpkeepReductExp = ut
                }
                seed.playerEffects.troopUpkeepReductExp = parseInt(seed.playerEffects.troopUpkeepReductExp) + bst;
                seed.items["i" + iid] = parseInt(seed.items["i" + iid]) - 1;
                $("modal_itemowned_" + iid).innerHTML = seed.items["i" + iid];
                if (seed.items["i" + iid] == 0) {
                    $("modal_shop_items_3").removeChild($("modal_item_" + iid));
                    modal_fix_paginate(1)
                }
                if (rslt.updateSeed) {
                    update_seed(rslt.updateSeed)
                }
                update_boosts();
                $("modal_shop_message").innerHTML = g_js_strings.modal_myitems_use_teleportprovince_do.aused.replace("%1$s", itemlist["i" + iid].name);
                $("modal_shop_message").show()
            }
        },
        onFailure: function () {}
    })
}
function modal_boost_combat_use(iid) {
    var params = Object.clone(g_ajaxparams);
    params.iid = iid;
    params.cid = currentcityid;
    new Ajax.Request(g_ajaxpath + "ajax/boostCombat.php" + g_ajaxsuffix, {
        method: "post",
        parameters: params,
        onSuccess: function (transport) {
            var rslt = eval("(" + transport.responseText + ")");
            if (rslt.ok) {
                if (seed.playerEffects.length == 0) {
                    seed.playerEffects = new Object
                }
                var ut = unixtime();
                var bst = 86400;
                var hours4 = 60 * 60 * 4;
                if (iid == 261 || iid == 262) {
                    if (!(parseInt(seed.playerEffects.atkExpire) > ut)) {
                        seed.playerEffects.atkExpire = ut
                    }
                    if (iid == 262) {
                        bst = 604800
                    }
                    seed.playerEffects.atkExpire = parseInt(seed.playerEffects.atkExpire) + bst
                } else {
                    if (iid == 271 || iid == 272) {
                        if (!(parseInt(seed.playerEffects.defExpire) > ut)) {
                            seed.playerEffects.defExpire = ut
                        }
                        if (iid == 272) {
                            bst = 604800
                        }
                        seed.playerEffects.defExpire = parseInt(seed.playerEffects.defExpire) + bst
                    } else {
                        if (iid == 280) {
                            if (!(parseInt(seed.playerEffects.atk2Expire) > ut)) {
                                seed.playerEffects.atk2Expire = ut
                            }
                            seed.playerEffects.atk2Expire = parseInt(seed.playerEffects.atk2Expire) + hours4;
                            if (seed.playerEffects.atkExpire && parseInt(seed.playerEffects.atkExpire) > ut) {
                                seed.playerEffects.atkExpire = parseInt(seed.playerEffects.atkExpire) + hours4
                            }
                        }
                    }
                }
                if (iid == 281) {
                    if (!(parseInt(seed.playerEffects.def2Expire) > ut)) {
                        seed.playerEffects.def2Expire = ut
                    }
                    seed.playerEffects.def2Expire = parseInt(seed.playerEffects.def2Expire) + hours4;
                    if (seed.playerEffects.defExpire && parseInt(seed.playerEffects.defExpire) > ut) {
                        seed.playerEffects.defExpire = parseInt(seed.playerEffects.defExpire) + hours4
                    }
                } else {
                    if (iid >= 276 && iid <= 278) {
                        bst = 3600 * Math.pow(2, (iid - 276));
                        if (!(parseInt(seed.playerEffects.loadExpire) > ut)) {
                            seed.playerEffects.loadExpire = ut
                        }
                        seed.playerEffects.loadExpire = parseInt(seed.playerEffects.loadExpire) + bst
                    } else {
                        if (iid == 279) {
                            bst = 3600;
                            if (!(parseInt(seed.playerEffects.returnExpire) > ut)) {
                                seed.playerEffects.returnExpire = ut
                            }
                            seed.playerEffects.returnExpire = parseInt(seed.playerEffects.returnExpire) + bst
                        }
                    }
                }
                seed.items["i" + iid] = parseInt(seed.items["i" + iid]) - 1;
                $("modal_itemowned_" + iid).innerHTML = seed.items["i" + iid];
                if (seed.items["i" + iid] == 0) {
                    $("modal_shop_items_3").removeChild($("modal_item_" + iid));
                    modal_fix_paginate(1)
                }
                if (rslt.updateSeed) {
                    update_seed(rslt.updateSeed)
                }
                update_boosts();
                $("modal_shop_message").innerHTML = g_js_strings.modal_myitems_use_teleportprovince_do.aused.replace("%1$s", itemlist["i" + iid].name);
                $("modal_shop_message").show()
            }
        },
        onFailure: function () {}
    })
}
function modal_boost_production_use(iid) {
    var params = Object.clone(g_ajaxparams);
    params.iid = iid;
    params.cid = currentcityid;
    new Ajax.Request(g_ajaxpath + "ajax/boostProduction.php" + g_ajaxsuffix, {
        method: "post",
        parameters: params,
        onSuccess: function (transport) {
            var rslt = eval("(" + transport.responseText + ")");
            if (rslt.ok) {
                if (seed.playerEffects.length == 0) {
                    seed.playerEffects = new Object
                }
                var ut = unixtime();
                var bst = 86400;
                if (iid == 101 || iid == 102) {
                    if (!(parseInt(seed.playerEffects.r0BstExp) > ut)) {
                        seed.playerEffects.r0BstExp = ut
                    }
                    if (iid == 102) {
                        bst = 604800
                    }
                    seed.playerEffects.r0BstExp = parseInt(seed.playerEffects.r0BstExp) + bst
                }
                if (iid == 111 || iid == 112) {
                    if (!(parseInt(seed.playerEffects.r1BstExp) > ut)) {
                        seed.playerEffects.r1BstExp = ut
                    }
                    if (iid == 112) {
                        bst = 604800
                    }
                    seed.playerEffects.r1BstExp = parseInt(seed.playerEffects.r1BstExp) + bst
                }
                if (iid == 121 || iid == 122) {
                    if (!(parseInt(seed.playerEffects.r2BstExp) > ut)) {
                        seed.playerEffects.r2BstExp = ut
                    }
                    if (iid == 122) {
                        bst = 604800
                    }
                    seed.playerEffects.r2BstExp = parseInt(seed.playerEffects.r2BstExp) + bst
                }
                if (iid == 131 || iid == 132) {
                    if (!(parseInt(seed.playerEffects.r3BstExp) > ut)) {
                        seed.playerEffects.r3BstExp = ut
                    }
                    if (iid == 132) {
                        bst = 604800
                    }
                    seed.playerEffects.r3BstExp = parseInt(seed.playerEffects.r3BstExp) + bst
                }
                if (iid == 141 || iid == 142) {
                    if (!(parseInt(seed.playerEffects.r4BstExp) > ut)) {
                        seed.playerEffects.r4BstExp = ut
                    }
                    if (iid == 142) {
                        bst = 604800
                    }
                    seed.playerEffects.r4BstExp = parseInt(seed.playerEffects.r4BstExp) + bst
                }
                seed.items["i" + iid] = parseInt(seed.items["i" + iid]) - 1;
                $("modal_itemowned_" + iid).innerHTML = seed.items["i" + iid];
                if (seed.items["i" + iid] == 0) {
                    $("modal_shop_items_4").removeChild($("modal_item_" + iid));
                    modal_fix_paginate(3)
                }
                if (rslt.updateSeed) {
                    update_seed(rslt.updateSeed)
                }
                update_boosts();
                $("modal_shop_message").innerHTML = g_js_strings.modal_myitems_use_teleportprovince_do.aused.replace("%1$s", itemlist["i" + iid].name);
                $("modal_shop_message").show()
            }
        },
        onFailure: function () {}
    })
}
function modal_myitems_use(iid) {
    if (parseInt(iid) > 1000 && parseInt(iid) < 1050) {
        var params = Object.clone(g_ajaxparams);
        params.iid = iid;
        params.cid = currentcityid;
        new Ajax.Request(g_ajaxpath + "ajax/resourceCrate.php" + g_ajaxsuffix, {
            method: "post",
            parameters: params,
            onSuccess: function (transport) {
                var rslt = eval("(" + transport.responseText + ")");
                if (rslt.ok) {
                    if (parseInt(rslt.rtype) == 0) {
                        seed.citystats["city" + currentcityid].gold[0] = parseInt(seed.citystats["city" + currentcityid].gold[0]) + parseInt(rslt.amt);
                        update_gold()
                    } else {
                        seed.resources["city" + currentcityid]["rec" + rslt.rtype][0] = parseInt(seed.resources["city" + currentcityid]["rec" + rslt.rtype][0]) + parseInt(rslt.amt) * 3600
                    }
                    seed.items["i" + iid] = parseInt(seed.items["i" + iid]) - 1;
                    $("modal_itemowned_" + iid).innerHTML = seed.items["i" + iid];
                    if (seed.items["i" + iid] == 0) {
                        $("modal_shop_items_4").removeChild($("modal_item_" + iid));
                        modal_fix_paginate(3)
                    }
                    $("modal_shop_message").innerHTML = g_js_strings.modal_myitems_use.aadded.replace("%1$s", itemlist["i" + iid].name);
                    $("modal_shop_message").show();
                    if (rslt.updateSeed) {
                        update_seed(rslt.updateSeed)
                    }
                }
            },
            onFailure: function () {}
        })
    }
}
function modal_myitems_getmoreitems() {
    var a = parseInt($("modal_shop_body").getAttribute("name")) + 1;
    Modal.hideModalAll();
    modal_shop(a)
}
function modal_shop(c) {
    var b = new Array();
    b.push("<div class='modal_shop_container'>");
    b.push("<div id='modal_shop_body'>");
    b.push("</div></div>");
    if (c) {
        var a = c
    } else {
        var a = 0
    }
    Modal.showModal(740, 400, 10, 10, g_js_strings.modaltitles.shop, b.join(""), modal_shop_load, a)
}
function modal_shop_load(tab) {
    var params = Object.clone(g_ajaxparams);
    new Ajax.Request(g_ajaxpath + "ajax/showShop.php" + g_ajaxsuffix, {
        method: "post",
        parameters: params,
        onSuccess: function (transport) {
            var rslt = eval("(" + transport.responseText + ")");
            if (rslt.ok) {
                if (rslt.data.gems) {
                    seed.player.gems = rslt.data.gems;
                    $("kochead_gems").innerHTML = rslt.data.gems
                }
                if (rslt.data.inventory) {
                    seed.player.items = rslt.data.inventory
                }
                var shophtml = new Array();
                var stab_featured = new Array();
                var stab_speed = new Array();
                var stab_prod = new Array();
                var stab_chest = new Array();
                var stab_gen = new Array();
                var stab_court = new Array();
                var stab_attack = new Array();
                var datakeys = rslt.data.shopOrder;
                var featuredOrder = rslt.data.featuredOrder;
                var featuredInfo = rslt.data.featureInfo;
                for (var i = 0; i < datakeys.length; i++) {
                    if (itemlist["i" + datakeys[i]]) {
                        var cat = parseInt(itemlist["i" + datakeys[i]].category);
                        var itemNew = false;
                        var itemSale = false;
                        var ut = unixtime();
                        if (featuredOrder) {
                            if (featuredOrder.indexOf(parseInt(datakeys[i])) != -1) {
                                var newExpire = parseInt(featuredInfo["i" + datakeys[i]][0]);
                                var saleStart = parseInt(featuredInfo["i" + datakeys[i]][1]);
                                var saleEnd = parseInt(featuredInfo["i" + datakeys[i]][2]);
                                var salePrice = parseInt(featuredInfo["i" + datakeys[i]][3]);
                                if (newExpire > 0 && (ut < newExpire)) {
                                    itemNew = true
                                } else {
                                    if (saleStart > 0 && saleStart < ut && saleEnd > 0 && saleEnd > ut) {
                                        itemSale = true
                                    }
                                }
                            }
                        }
                        var item = new Array();
                        item.push('<div class="item');
                        if (itemNew) {
                            item.push(" newitem")
                        } else {
                            if (itemSale) {
                                item.push(" saleitem")
                            }
                        }
                        item.push('" id="modal_item_');
                        item.push(datakeys[i]);
                        item.push('" onmouseover="modal_shop_tooltip(this,event);return false;" onmouseout="removeTooltip();return false;" name="');
                        item.push(itemlist["i" + datakeys[i]].description);
                        item.push('">');
                        item.push("<div class='itemname'>");
                        item.push(itemlist["i" + datakeys[i]].name);
                        item.push("</div>");
                        item.push("<div class='clearfix iteminfo'>");
                        item.push("<img src='");
                        item.push(stimgUrl);
                        item.push("img/items/70/");
                        item.push(datakeys[i]);
                        item.push(".jpg?5c10831'/>");
                        item.push("<div class='itemprice'>");
                        if (itemSale) {
                            item.push("<span class='saleprice'>" + salePrice + "</span>")
                        }
                        item.push("<span class='oldprice' id='modal_itemprice_");
                        item.push(datakeys[i]);
                        item.push("'>");
                        item.push(itemlist["i" + datakeys[i]].price);
                        item.push("</span><img src='");
                        item.push(stimgUrl);
                        item.push("img/gem.png'/></div>");
                        if (parseInt(datakeys[i]) == 10019) {
                            item.push("<div class='buyitem'><a onclick='modal_shop_buy_gift(")
                        } else {
                            item.push("<div class='buyitem'><a onclick='modal_shop_buy(")
                        }
                        item.push(datakeys[i]);
                        if (itemSale) {
                            item.push("," + salePrice)
                        }
                        item.push(");return false;' class='buttonGreen20'><span>" + g_js_strings.commonstr.buyitem + "</span></a></div>");
                        if (parseInt(datakeys[i]) != 10019) {
                            item.push("<div class='itemowned'>" + g_js_strings.commonstr.owned + ": <span class='modal_itemowned_" + datakeys[i] + "' id='modal_itemowned_");
                            item.push(datakeys[i]);
                            item.push("'>");
                            item.push(seed.items["i" + datakeys[i]] || "0");
                            item.push("</span></div>")
                        }
                        item.push("</div>");
                        item.push("</div>");
                        var itemhd = new Array();
                        if (parseInt(datakeys[i]) == 599 || parseInt(datakeys[i]) == 10018 || parseInt(datakeys[i]) == 10019) {
                            itemhd.push(item.join(""))
                        }
                        if (itemNew || itemSale) {
                            if (!(cat == 6 && seed.items["i" + datakeys[i]] && parseInt(seed.items["i" + datakeys[i]]) > 0)) {
                                if (itemhd.length > 0) {
                                    stab_featured = itemhd.concat(stab_featured)
                                } else {
                                    stab_featured.push(item.join(""))
                                }
                            }
                        }
                        if (cat == 1) {
                            if (itemhd.length > 0) {
                                stab_gen = itemhd.concat(stab_gen)
                            } else {
                                stab_gen.push(item.join(""))
                            }
                        } else {
                            if (cat == 2) {
                                if (itemhd.length > 0) {
                                    stab_speed = itemhd.concat(stab_speed)
                                } else {
                                    stab_speed.push(item.join(""))
                                }
                            } else {
                                if (cat == 3) {
                                    if (itemhd.length > 0) {
                                        stab_attack = itemhd.concat(stab_attack)
                                    } else {
                                        stab_attack.push(item.join(""))
                                    }
                                } else {
                                    if (cat == 4) {
                                        if (itemhd.length > 0) {
                                            stab_prod = itemhd.concat(stab_prod)
                                        } else {
                                            stab_prod.push(item.join(""))
                                        }
                                    } else {
                                        if (cat == 5) {
                                            if (itemhd.length > 0) {
                                                stab_chest = itemhd.concat(stab_chest)
                                            } else {
                                                stab_chest.push(item.join(""))
                                            }
                                        } else {
                                            if (cat == 6) {
                                                if (!seed.items["i" + datakeys[i]] || parseInt(seed.items["i" + datakeys[i]]) == 0) {
                                                    if (itemhd.length > 0) {
                                                        stab_court = itemhd.concat(stab_court)
                                                    } else {
                                                        stab_court.push(item.join(""))
                                                    }
                                                }
                                            } else {
                                                if (itemhd.length > 0) {
                                                    stab_gen = itemhd.concat(stab_gen)
                                                } else {
                                                    stab_gen.push(item.join(""))
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                var gi = new Array();
                gi.push("<div class='mygems'>" + g_js_strings.commonstr.gems + ":<span id='modal_shop_gems'>");
                gi.push(rslt.data.gems);
                gi.push("</span><img src='");
                gi.push(stimgUrl);
                gi.push("img/gem.png'/></div>");
                gi.push("<div class='getgems clearfix'><a onclick='cm.ConversionTracker.track(\"payments\", \"MORE_GEMS_SHOP\", \"\");modal_getgems();return false;' class='buttonGreen20'><span>+&nbsp;&nbsp;" + g_js_strings.modaltitles.getmoregems + "</span></a></div>");
                $("modal_shop_body").setAttribute("name", 1);
                shophtml.push("<div class='modal_shop_hd'>");
                shophtml.push("<div id='geminfo' class='geminfo'></div>");
                shophtml.push("<div class='gotoshop'><a  class='button20' onclick='Modal.hideModalAll();cm.InventoryView.openInventory();return false;'><span>" + g_js_strings.commonstr.inventory + "</span></a></div>");
                shophtml.push("</div>");
                shophtml.push("<div class='modal_shop_body'>");
                shophtml.push("<div class='tabsbar clearfix' id='modal_shop_tabs'>");
                shophtml.push("<a  id='modal_shop_tab1' onclick='modal_shop_changetab(1);return false;' class='tab featuredtab selected'><span>" + g_js_strings.commonstr.featured + "</span></a>");
                shophtml.push("<a  id='modal_shop_tab2' onclick='modal_shop_changetab(2);return false;' class='tab'><span>" + g_js_strings.commonstr.general + "</span></a>");
                shophtml.push("<a  id='modal_shop_tab3' onclick='modal_shop_changetab(3);return false;' class='tab'><span>" + g_js_strings.commonstr.speedup + "</span></a>");
                shophtml.push("<a  id='modal_shop_tab4' onclick='modal_shop_changetab(4);return false;' class='tab'><span>" + g_js_strings.commonstr.combat + "</span></a>");
                shophtml.push("<a  id='modal_shop_tab5' onclick='modal_shop_changetab(5);return false;' class='tab'><span>" + g_js_strings.commonstr.resources + "</span></a>");
                shophtml.push("<a  id='modal_shop_tab6' onclick='modal_shop_changetab(6);return false;' class='tab'><span>" + g_js_strings.commonstr.chest + "</span></a>");
                shophtml.push("<a  id='modal_shop_tab7' onclick='modal_shop_changetab(7);return false;' class='tab'><span>" + g_js_strings.commonstr.court + "</span></a>");
                shophtml.push("</div>");
                shophtml.push("<div id='modal_shop_message' style='display:none;'></div>");
                if (cm.WorldSettings.hasKeyValuePair("MIGRATION1", "true")) {
                    if (seed.platform.type == "kabam") {
                        shophtml.push("<div id='modal_shop_paginate' style='display:none;'><div class='comingSoonText'>Buy new and exclusive items at Kabam.com!</div>" + g_js_strings.commonstr.page + ":</span> <span id='modal_shop_page_list'></span></div>")
                    } else {
                        shophtml.push("<div id='modal_shop_paginate' style='display:none;'><div class='comingSoonText'><a style='text-decoration: underline;' href='" + seed.platform.url + "' target='_top'>Buy new and exclusive items at Kabam.com!</a></div>" + g_js_strings.commonstr.page + ":</span> <span id='modal_shop_page_list'></span></div>")
                    }
                } else {
                    shophtml.push("<div id='modal_shop_paginate' class='old' style='display:none;'><div class='comingSoonText'> " + g_js_strings.modal_shop_buy_banner.banner_7thcityhere + " </div>" + g_js_strings.commonstr.page + ":</span> <span id='modal_shop_page_list'></span></div>")
                }
                shophtml.push("<div class='itemlistboxwrap'>");
                shophtml.push("<a id='modal_shop_page_prev' onclick='modal_shop_prevpage();return false;'></a>");
                shophtml.push("<a id='modal_shop_page_next' onclick='modal_shop_nextpage();return false;'></a>");
                shophtml.push("<div class='itemlistbox'>");
                shophtml.push("<div class='itemlist clearfix' id='modal_shop_items_1'>");
                shophtml.push(stab_featured.join(""));
                shophtml.push("</div>");
                shophtml.push("<div class='itemlist clearfix' id='modal_shop_items_2' style='display:none;'>");
                shophtml.push(stab_gen.join(""));
                shophtml.push("</div>");
                shophtml.push("<div class='itemlist clearfix' id='modal_shop_items_3' style='display:none;'>");
                shophtml.push(stab_speed.join(""));
                shophtml.push("</div>");
                shophtml.push("<div class='itemlist clearfix' id='modal_shop_items_4' style='display:none;'>");
                shophtml.push(stab_attack.join(""));
                shophtml.push("</div>");
                shophtml.push("<div class='itemlist clearfix' id='modal_shop_items_5' style='display:none;'>");
                shophtml.push(stab_prod.join(""));
                shophtml.push("</div>");
                shophtml.push("<div class='itemlist clearfix' id='modal_shop_items_6' style='display:none;'>");
                shophtml.push(stab_chest.join(""));
                shophtml.push("</div>");
                shophtml.push("<div class='itemlist clearfix' id='modal_shop_items_7' style='display:none;'>");
                shophtml.push(stab_court.join(""));
                shophtml.push("</div>");
                shophtml.push("</div>");
                shophtml.push("</div>");
                shophtml.push("</div>");
                if (g_env == "prod") {
                    shophtml.push('<div style="display:inline;"><img height="1" width="1" style="border-style:none;" alt="" src="http://www.googleadservices.com/pagead/conversion/1059019849/?label=p1zQCKvv5gEQybj9-AM&amp;guid=ON&amp;script=0"/></div>')
                }
                $("modal_shop_body").innerHTML = shophtml.join("");
                $("geminfo").innerHTML = gi.join("");
                modal_shop_pageinit(1);
                if (tab > 0) {
                    modal_shop_changetab(tab)
                }
            } else {
                Modal.showAlert(printLocalError((rslt.error_code || null), (rslt.msg || null), (rslt.feedback || null)))
            }
        },
        onFailure: function () {}
    })
}
function getShopPixel() {
    if (g_env != "prod") {
        return ""
    }
    window.google_conversion_id = 1059019849;
    window.google_conversion_language = "en";
    window.google_conversion_format = "3";
    window.google_conversion_color = "666666";
    window.google_conversion_label = "p1zQCKvv5gEQybj9-AM";
    window.google_conversion_value = 0;
    var a = document.createElement("script");
    a.type = "text/javascript";
    a.src = "http://www.googleadservices.com/pagead/conversion.js?v=shop";
    document.getElementsByTagName("head")[0].appendChild(a)
}
function modal_shop_tooltip(b, a) {
    showTooltip(b.getAttribute("name"), b, a, "modal_shop_body")
}
function modal_shop_pageinit(b) {
    var c = $("modal_shop_items_" + b).select(".item").length;
    if (c > 9) {
        var a = parseInt(c / 9);
        if (a < (c / 9)) {
            a++
        }
        modal_shop_pagelist(1, a);
        $("modal_shop_page_prev").hide();
        $("modal_shop_page_next").show();
        $("modal_shop_paginate").show();
        $("modal_shop_items_" + b).style.top = "0px"
    } else {
        modal_shop_pagelist(1, 1);
        $("modal_shop_paginate").show();
        $("modal_shop_page_prev").hide();
        $("modal_shop_page_next").hide()
    }
}
function modal_shop_pagelist(d, c) {
    var b = new Array();
    for (var a = 1; a <= c; a++) {
        if (d == a) {
            b.push("<span class='curpage pagenum'>" + a + "</span>")
        } else {
            b.push("<a class='linkpage pagenum' onclick='modal_shop_gotopage(" + a + "," + c + ");return false;'>" + a + "</a>")
        }
        if (a != c) {
            b.push(" | ")
        }
    }
    $("modal_shop_page_list").innerHTML = b.join("")
}
function modal_shop_gotopage(e, d) {
    var b = $("modal_shop_body").getAttribute("name");
    var a = d;
    var c = e;
    $("modal_shop_items_" + b).style.top = (-360 * (c - 1)) + "px";
    if (c == 1) {
        $("modal_shop_page_prev").hide()
    } else {
        $("modal_shop_page_prev").show()
    }
    if (c == a) {
        $("modal_shop_page_next").hide()
    } else {
        $("modal_shop_page_next").show()
    }
    $("modal_shop_message").hide();
    modal_shop_pagelist(c, a)
}
function modal_shop_nextpage() {
    var b = $("modal_shop_body").getAttribute("name");
    var a = parseInt($("modal_shop_page_list").select(".pagenum").length);
    var c = parseInt($("modal_shop_page_list").select(".curpage")[0].innerHTML);
    c++;
    $("modal_shop_items_" + b).style.top = (-360 * (c - 1)) + "px";
    $("modal_shop_page_prev").show();
    if (c == a) {
        $("modal_shop_page_next").hide()
    }
    $("modal_shop_message").hide();
    modal_shop_pagelist(c, a)
}
function modal_shop_prevpage() {
    var b = $("modal_shop_body").getAttribute("name");
    var a = parseInt($("modal_shop_page_list").select(".pagenum").length);
    var c = parseInt($("modal_shop_page_list").select(".curpage")[0].innerHTML);
    c--;
    $("modal_shop_items_" + b).style.top = (-360 * (c - 1)) + "px";
    $("modal_shop_page_next").show();
    if (c == 1) {
        $("modal_shop_page_prev").hide()
    }
    $("modal_shop_message").hide();
    modal_shop_pagelist(c, a)
}
function modal_shop_changetab(b) {
    $("modal_shop_message").hide();
    var a = $("modal_shop_body").getAttribute("name");
    $("modal_shop_tabs").select(".selected")[0].removeClassName("selected");
    $("modal_shop_tab" + b).addClassName("selected");
    $("modal_shop_body").setAttribute("name", b);
    $("modal_shop_items_" + a).hide();
    $("modal_shop_items_" + b).show();
    modal_shop_pageinit(b)
}
function modal_shop_buy_gift(c) {
    var b = parseInt($("modal_itemprice_" + c).innerHTML);
    if (b > seed.player.gems) {
        modal_shop_buy_notenough()
    } else {
        var a = new Array();
        a.push("<div class='giftnameconfirm'>");
        a.push("<div class='desc'>");
        a.push(g_js_strings.modal_shop_buy_gift.entername);
        a.push("</div>");
        a.push("<div class='cost'>");
        a.push(g_js_strings.commonstr.cost + ": " + b + " " + g_js_strings.commonstr.gems);
        a.push("</div>");
        a.push("<div id='nameinputerror' style='display:none;'>");
        a.push(g_js_strings.modal_shop_buy_gift.nameerror);
        a.push("</div>");
        a.push("<div class='nameinput'>");
        a.push("<input value='' id='giftplayername'/>");
        a.push("</div>");
        a.push("<div class='btnrow clearfix'>");
        a.push("<a class='button20' onclick='modal_shop_buy_gift_player_check(" + c + ");return false;'><span>" + g_js_strings.commonstr.gift + "</span></a>");
        a.push("<a class='button20' onclick='Modal.hideModal();return false;'><span>" + g_js_strings.commonstr.cancel + "</span></a>");
        a.push("</div>");
        a.push("</div>");
        Modal.showModal(400, 400, 130, 10, g_js_strings.modaltitles.giftitem, a.join(""))
    }
}
function modal_shop_buy_gift_player_check(itemid) {
    var giftee = $("giftplayername").value;
    if (giftee.blank()) {
        $("nameinputerror").show();
        return false
    } else {
        var params = Object.clone(g_ajaxparams);
        params.name = giftee;
        new Ajax.Request(g_ajaxpath + "ajax/checkUser.php" + g_ajaxsuffix, {
            method: "post",
            parameters: params,
            onSuccess: function (message) {
                var rslt = eval("(" + message.responseText + ")");
                if (rslt.ok) {
                    $("nameinputerror").hide();
                    Modal.hideModal();
                    var gifthtml = new Array();
                    gifthtml.push("<div class='giftnameconfirm'>");
                    gifthtml.push("<div class='desc'>");
                    gifthtml.push(g_js_strings.modal_shop_buy_gift_player_check.confirmgift.replace("%1$s", giftee));
                    gifthtml.push("</div>");
                    gifthtml.push("<div class='btnrow clearfix'>");
                    gifthtml.push("<a class='button20' onclick='modal_shop_buy_gift_do(" + itemid + "," + rslt.data + ");return false;'><span>" + g_js_strings.commonstr.gift + "</span></a>");
                    gifthtml.push("<a class='button20' onclick='Modal.hideModal();return false;'><span>" + g_js_strings.commonstr.cancel + "</span></a>");
                    gifthtml.push("</div>");
                    gifthtml.push("</div>");
                    Modal.showModal(400, 400, 130, 10, g_js_strings.modaltitles.giftitem, gifthtml.join(""))
                } else {
                    $("nameinputerror").show()
                }
            },
            onFailure: function () {}
        })
    }
}
function modal_shop_buy_gift_do(itemid, pid) {
    var itemcost = parseInt($("modal_itemprice_" + itemid).innerHTML);
    var params = Object.clone(g_ajaxparams);
    params.rid = pid;
    params.iid = itemid;
    new Ajax.Request(g_ajaxpath + "ajax/sendPackage.php" + g_ajaxsuffix, {
        method: "post",
        parameters: params,
        onSuccess: function (message) {
            var rslt = eval("(" + message.responseText + ")");
            if (rslt.ok) {
                Modal.hideModal();
                seed.player.gems = seed.player.gems - itemcost;
                $("kochead_gems").innerHTML = seed.player.gems;
                $("modal_shop_gems").innerHTML = seed.player.gems;
                $("modal_shop_message").innerHTML = g_js_strings.modal_shop_buy.purchasealert.replace("%1$s", $("modal_item_" + itemid).select(".itemname")[0].innerHTML);
                $("modal_shop_message").show();
                cm.MixPanelTracker.track("store_purchase", {
                    item: itemlist["i" + itemid].name,
                    cost: itemcost,
                    usr_gen: seed.player.g,
                    usr_byr: seed.player.y,
                    usr_ttl: titlenames[seed.player.title],
                    distinct_id: tvuid
                })
            } else {
                $("nameinputerror").show()
            }
        },
        onFailure: function () {}
    })
}
function modal_shop_buy(itemid, saleprice, redisplaySpeedUpModal, e) {
    if (saleprice) {
        var itemcost = parseInt(saleprice)
    } else {
        var itemcost = parseInt($("modal_itemprice_" + itemid).innerHTML)
    }
    var iid = itemid;
    if (itemcost > seed.player.gems) {
        modal_shop_buy_notenough()
    } else {
        var selsub = $("modal_item_" + iid);
        if (selsub) {
            selsub.select(".buyitem")[0].hide()
        }
        var targetElement;
        if (e) {
            targetElement = e.srcElement || e.currentTarget;
            targetElement = targetElement.tagName.toLowerCase() === "a" ? targetElement : targetElement.parentNode;
            $(targetElement).setStyle({
                visibility: "hidden"
            })
        }
        var params = Object.clone(g_ajaxparams);
        params.iid = iid;
        if (saleprice) {
            params.sale = 1
        }
        var profiler = new cm.Profiler("ResponseTime", "buyItem.php");
        new Ajax.Request(g_ajaxpath + "ajax/buyItem.php" + g_ajaxsuffix, {
            method: "post",
            parameters: params,
            onSuccess: function (message) {
                profiler.stop();
                var rslt = eval("(" + message.responseText + ")");
                if (rslt.ok) {
                    var ownedboxes, quant, inShop;
                    inShop = $("modal_item_" + iid);
                    if ($("modal_item_" + iid)) {
                        $("modal_item_" + iid).select(".buyitem")[0].show();
                        ownedboxes = $("modal_shop_body").select(".modal_itemowned_" + iid);
                        quant = parseInt(ownedboxes[0].innerHTML)
                    }
                    seed.player.gems = seed.player.gems - itemcost;
                    var xi = seed.items["i" + iid];
                    if (isNaN(xi)) {
                        seed.items["i" + iid] = 0
                    }
                    seed.items["i" + iid] = parseInt(seed.items["i" + iid]) + 1;
                    ksoItems[iid].add();
                    if (inShop) {
                        for (var i = 0; i < ownedboxes.length; i++) {
                            ownedboxes[i].innerHTML = quant + 1
                        }
                    }
                    $("kochead_gems").innerHTML = seed.player.gems;
                    if (inShop) {
                        $("modal_shop_gems").innerHTML = seed.player.gems;
                        $("modal_shop_message").innerHTML = g_js_strings.modal_shop_buy.purchasealert.replace("%1$s", $("modal_item_" + iid).select(".itemname")[0].innerHTML);
                        $("modal_shop_message").show()
                    }
                    if (cm.BuyOnceItems.match(iid)) {
                        $("modal_item_" + iid).remove()
                    } else {
                        if (iid == 10018) {
                            $("modal_item_10018").remove();
                            common_postToProfile("20", Object.clone(template_data_20), Object.clone(actionlink_data_20), continuation_20, new Array())
                        }
                    }
                    if (iid == 2) {
                        if (seed.player.spentFiveGems && seed.player.spentFiveGems == 0) {
                            seed.player.spentFiveGems = 1
                        }
                    }
                    cm.MixPanelTracker.track("store_purchase", {
                        item: itemlist["i" + iid].name,
                        cost: itemcost,
                        usr_gen: seed.player.g,
                        usr_byr: seed.player.y,
                        usr_ttl: titlenames[seed.player.title],
                        distinct_id: tvuid
                    });
                    if (redisplaySpeedUpModal) {
                        cm.speedUpModalTimer.redisplayModal()
                    }
                    if (targetElement) {
                        $(targetElement).setStyle({
                            visibility: ""
                        })
                    }
                } else {
                    if (rslt.error_code && rslt.error_code == 701) {
                        var txt = g_js_strings.modal_shop_buy.nolongersale.replace("%1$s", rslt.feedback);
                        var btns = "<a class='button20' onclick='Modal.hideModal();modal_shop_buy(" + iid + ");return false;'>";
                        btns += "<span>";
                        btns += g_js_strings.commonstr.buy;
                        btns += "</span>";
                        btns += "</a>";
                        btns += "<a class='button20' onclick='$(\"modal_item_" + iid + '").select(".buyitem")[0].show();Modal.hideModal();return false;\'>';
                        btns += "<span>";
                        btns += g_js_strings.commonstr.cancel;
                        btns += "</span>";
                        btns += "</a>";
                        Modal.showAlert(txt, btns)
                    } else {
                        Modal.showAlert(printLocalError((rslt.error_code || null), (rslt.msg || null), (rslt.feedback || null)))
                    }
                }
            },
            onFailure: function () {
                profiler.stop()
            }
        })
    }
}
function modal_shop_buy_notenough() {
    var a = new Array();
    a.push("<div id='modal_shop_buy_notenough'><div class='infobx'><div class='tp'>" + g_js_strings.modal_shop_buy_notenough.notenoughgems + "</div><div>" + g_js_strings.modal_shop_buy_notenough.thatsokay + "</div><div class='clearfix btn'><a  class='button20' onclick='Modal.hideModal();modal_getgems();return false;'><span>" + g_js_strings.modal_shop_buy_notenough.getmoregems + "</span></a></div></div></div>");
    Modal.showModal(500, 400, 130, 10, g_js_strings.modaltitles.getmoregems, a.join(""))
}
function modal_fix_paginate(b) {
    var a = $("modal_shop_items_" + b).select(".item").length;
    if (a % 9 == 0 && a > 8) {
        Modal.hideModal();
        modal_myitems(b)
    }
}
cm.BuyOnceItems = new function () {
    this.match = function (a) {
        return a > 700 && a < 900 || a >= 1202 && a <= 1210
    }
};
(function (b) {
    var c = {};
    var a = "";
    c.get = function () {
        var d = [];
        b("script").each(function (e, g) {
            var f = g.src || g.href;
            if (f) {
                var h = f.lastIndexOf("/") + 1;
                a = f.substr(0, h);
                d[d.length] = f.substr(h)
            }
        });
        return d.sort()
    };
    c.load = function () {
        var d = {};
        return {
            redo: function () {
                c.load.go(d.url)
            },
            go: function (f) {
                d = {
                    url: f
                };
                var e = a + f;
                var g = false;
                if (e.indexOf(".css") > -1) {
                    g = true
                }
                var h = {
                    url: e + "?r=" + parseInt(Math.random() * 1000000),
                    success: function (i) {
                        if (g) {
                            b("body").append("<style>" + i + "</style>")
                        }
                        c.display.success()
                    }
                };
                if (!g) {
                    h.dataType = "script"
                }
                c.display.loading();
                b.ajax(h)
            }
        }
    }();
    c.display = function () {
        function d() {
            return "<select>" + c.get().reduce(function (f, e) {
                return f + (e ? ("<option value='" + e + "'>" + e + "</option>") : "")
            }, "") + "</select>"
        }
        return {
            init: function () {
                if (cm.util.live()) {
                    return false
                }
                var e = "paschwanden";
                if (window.location.href.indexOf(e) > -1) {
                    b("body").append("<div class='js_loader' style='font-size: 14px; background-color: #eeeeee;position: absolute; margin-top: 600px; padding: 15px; border: 1px solid black;z-index: 1000000; left: 0px; top: 0px;'>" + d() + "<input type='button' value='Redo' class='redo' /><div class='success' style='border: 1px solid green; background-color: #EEEEEE; padding: 5px;'></div></div>");
                    b(".js_loader").draggable();
                    c.control()
                }
            },
            loading: function () {
                b(".js_loader .success").html("loading...")
            },
            success: function () {
                b(".js_loader .success").html("success")
            }
        }
    }();
    c.control = function () {
        b(".js_loader select").bind("change", function () {
            var d = b(this).val();
            c.load.go(d)
        });
        b(".js_loader .redo").unbind("click").bind("click", c.load.redo)
    };
    b(document).ready(c.display.init)
})(jQuery);

function jsonT(self, rules) {
    var T = {
        output: false,
        init: function () {
            for (var rule in rules) {
                if (rule.substr(0, 4) != "self") {
                    rules["self." + rule] = rules[rule]
                }
            }
            return this
        },
        apply: function (expr) {
            var trf = function (s) {
                    return s.replace(/{([A-Za-z0-9_\$\.\[\]\'@\(\)]+)}/g, function ($0, $1) {
                        return T.processArg($1, expr)
                    })
                },
                x = expr.replace(/\[[0-9]+\]/g, "[*]"),
                res;
            if (x in rules) {
                if (typeof (rules[x]) == "string") {
                    res = trf(rules[x])
                } else {
                    if (typeof (rules[x]) == "function") {
                        res = trf(rules[x](eval(expr)).toString())
                    }
                }
            } else {
                res = T.eval(expr)
            }
            return res
        },
        processArg: function (arg, parentExpr) {
            var expand = function (a, e) {
                    return (e = a.replace(/^\$/, e)).substr(0, 4) != "self" ? ("self." + e) : e
                },
                res = "";
            T.output = true;
            if (arg.charAt(0) == "@") {
                res = eval(arg.replace(/@([A-za-z0-9_]+)\(([A-Za-z0-9_\$\.\[\]\']+)\)/, function ($0, $1, $2) {
                    return "rules['self." + $1 + "'](" + expand($2, parentExpr) + ")"
                }))
            } else {
                if (arg != "$") {
                    res = T.apply(expand(arg, parentExpr))
                } else {
                    res = T.eval(parentExpr)
                }
            }
            T.output = false;
            return res
        },
        eval: function (expr) {
            var v = eval(expr),
                res = "";
            if (typeof (v) != "undefined") {
                if (v instanceof Array) {
                    for (var i = 0; i < v.length; i++) {
                        if (typeof (v[i]) != "undefined") {
                            res += T.apply(expr + "[" + i + "]")
                        }
                    }
                } else {
                    if (typeof (v) == "object") {
                        for (var m in v) {
                            if (typeof (v[m]) != "undefined") {
                                res += T.apply(expr + "." + m)
                            }
                        }
                    } else {
                        if (T.output) {
                            res += v
                        }
                    }
                }
            }
            return res
        }
    };
    return T.init().apply("self")
};
cm = cm || {};
cm.KnightModel = jQueryClass.extend({
    init: function (a) {
        this.id = Number();
        this.fbuid = Number();
        this.name = "";
        this.level = Number();
        this.status = Number();
        this.pic = "";
        this.pointsApplied = Number();
        this.experience = Number();
        this.cityId = Number();
        this.lordsLevel = Number();
        this.basePolitics = Number();
        this.currentPolitics = Number();
        this.politicsExpireTimeStamp = "";
        this.politicsExpireUnixTime = Number();
        this.baseCombat = Number();
        this.currentCombat = Number();
        this.combatExpireTimeStamp = "";
        this.combatExpireUnixTime = Number();
        this.baseIntelligence = Number();
        this.currentIntelligence = Number();
        this.intelligenceExpireTimeStamp = "";
        this.intelligenceExpireUnixTime = Number();
        this.baseResource = Number();
        this.currentResource = Number();
        this.resourceExpireTimeStamp = "";
        this.resourceExpireUnixTime = Number();
        this.loyalty = Number()
    }
});

function openKnights() {
    var knights = new Hash(seed.knights["city" + currentcityid]);
    var msghtml = new Array();
    msghtml.push("<a name='appointKnightSection'></a><a name='chromeAnchor'></a><div class='tabsbar clearfix' id='knightModalTabs'>");
    msghtml.push("<a id='appointKnightsTab' class='tab selected' onclick='changeKnightModalTabs(0);return false;'><span>");
    msghtml.push(g_js_strings.openKnights.appknights);
    msghtml.push("</span></a>");
    msghtml.push("<a id='myKnightsTab' class='tab' onclick='changeKnightModalTabs(1);return false;'><span>");
    msghtml.push(g_js_strings.openKnights.myknights);
    msghtml.push("</span></a>");
    msghtml.push("</div>");
    msghtml.push("<div class='knighttablewrap' id='knightshall_0'>");
    msghtml.push("<div class='waiting'></div>");
    msghtml.push("</div>");
    msghtml.push("<div class='knighttablewrap' id='knightshall_1' style='display:none;'>");
    msghtml.push("<div class='knighttableheader clearfix'>");
    msghtml.push("<div class='knight'>" + g_js_strings.commonstr.knight + "</div>");
    msghtml.push("<div class='exper'>" + g_js_strings.commonstr.experience + "</div>");
    msghtml.push("<div class='knightcol'>" + g_js_strings.commonstr.pol + "</div>");
    msghtml.push("<div class='knightcol'>" + g_js_strings.commonstr.com + "</div>");
    msghtml.push("<div class='knightcol'>" + g_js_strings.commonstr.intabbr + "</div>");
    msghtml.push("<div class='knightcol'>" + g_js_strings.commonstr.res + "</div>");
    msghtml.push("<div class='loyalty'>" + g_js_strings.commonstr.loyalty + "</div>");
    msghtml.push("<div class='actions'>" + g_js_strings.commonstr.actions + "</div>");
    msghtml.push("</div>");
    msghtml.push("<div id='myKnightsTBody'>");
    msghtml.push("</div>");
    msghtml.push("</div>");
    $("modal_build_content").innerHTML = msghtml.join("");
    var params = Object.clone(g_ajaxparams);
    params.pid = currentcityinfo[4];
    new Ajax.Request(g_ajaxpath + "ajax/seekknight.php" + g_ajaxsuffix, {
        method: "post",
        parameters: params,
        onSuccess: function (transport) {
            var rslt = eval("(" + transport.responseText + ")");
            if (rslt.ok) {
                var members = rslt.data[0];
                var membersCnt = members.length;
                var nonmembers = rslt.data[1];
                var user = rslt.data[2];
                var entryTag = "";
                if (!user.entryTag) {
                    var entryTag = ""
                } else {
                    var entryTag = user.entryTag
                }
                var nonmembersCnt = nonmembers.length;
                msghtml = new Array();
                msghtml.push("<div class='friendtableheader clearfix'>");
                msghtml.push("<div class='friend'>" + g_js_strings.commonstr.friend + "</div>");
                msghtml.push("<div class='level'>" + g_js_strings.commonstr.level + "</div>");
                msghtml.push("<div class='friendcol'>" + g_js_strings.openKnights.resheading + "</div>");
                msghtml.push("<div class='friendcol'>" + g_js_strings.commonstr.politics + "</div>");
                msghtml.push("<div class='friendcol'>" + g_js_strings.commonstr.combat + "</div>");
                msghtml.push("<div class='friendcol'>" + g_js_strings.openKnights.intheading + "</div>");
                msghtml.push("<div class='friendcol'>" + g_js_strings.commonstr.loyalty + "</div>");
                msghtml.push("<div class='salary'>" + g_js_strings.commonstr.salary + "</div>");
                msghtml.push("</div>");
                msghtml.push("<div class='friendtablecontent'>");
                msghtml.push("<table class='knighttable' border='0' cellspacing='0' cellpadding='2'>");
                msghtml.push("<tbody>");
                var stripeFlag = true;
                if (members) {
                    for (var i = 0; i < membersCnt; i++) {
                        var stripe = (stripeFlag) ? "class='stripe'" : "";
                        msghtml.push("<tr id='f_" + members[i].uid + "'" + stripe + ">");
                        msghtml.push("<td class='friendpic'><img src='" + members[i].pic_square + "' /></td>");
                        msghtml.push("<td class='friendname'><span>" + members[i].name + "</span></td>");
                        msghtml.push("<td class='friendapp'><a  class='button14' onclick='quickAppointKnight(\"" + members[i].pic_square + '",' + members[i].uid + ',"' + members[i].name.replace("'", "&#39;") + "\",1);return false;'><span>" + g_js_strings.commonstr.appoint + "</span></a></td>");
                        msghtml.push("<td class='level'>1</td>");
                        msghtml.push("<td class='friendcol'>55</td>");
                        msghtml.push("<td class='friendcol'>55</td>");
                        msghtml.push("<td class='friendcol'>55</td>");
                        msghtml.push("<td class='friendcol'>55</td>");
                        msghtml.push("<td class='friendcol'>70</td>");
                        msghtml.push("<td class='salary'>20<br/>" + g_js_strings.openKnights.goldhourly + "</td>");
                        msghtml.push("</tr>");
                        stripeFlag = !stripeFlag
                    }
                }
                if (nonmembers) {
                    for (var i = 0; i < nonmembersCnt; i++) {
                        var stripe = (stripeFlag) ? "class='stripe'" : "";
                        msghtml.push("<tr id='f_" + nonmembers[i].uid + "'" + stripe + ">");
                        msghtml.push("<td class='friendpic'><img src='" + nonmembers[i].pic_square + "' /></td>");
                        msghtml.push("<td class='friendname'><span>" + nonmembers[i].name + "</span></td>");
                        msghtml.push("<td class='friendapp'><a  class='button14' onclick='quickAppointKnight(\"" + nonmembers[i].pic_square + '",' + nonmembers[i].uid + ',"' + nonmembers[i].name.replace("'", "&#39;") + "\",0);return false;'><span>" + g_js_strings.commonstr.appoint + "</span></a></td>");
                        msghtml.push("<td class='level'>1</td>");
                        msghtml.push("<td class='friendcol'>50</td>");
                        msghtml.push("<td class='friendcol'>50</td>");
                        msghtml.push("<td class='friendcol'>50</td>");
                        msghtml.push("<td class='friendcol'>50</td>");
                        msghtml.push("<td class='friendcol'>70</td>");
                        msghtml.push("<td class='salary'>20<br/>" + g_js_strings.openKnights.goldhourly + "</td>");
                        msghtml.push("</tr>");
                        stripeFlag = !stripeFlag
                    }
                }
                msghtml.push("</tbody>");
                msghtml.push("</table>");
                msghtml.push("</div>");
                $("knightshall_0").innerHTML = msghtml.join("")
            } else {
                if (!rslt.error_code || rlst.error_code != 1001) {
                    Modal.showAlert(printLocalError((rslt.error_code || null), (rslt.msg || null), (rslt.feedback || null)))
                }
            }
        },
        onFailure: function () {}
    })
}
function quickAppointKnight(d, c, b, a) {
    if (a) {
        modal_appoint(d, b, 1, c, "");
        appointKnight(c, b)
    } else {
        modal_appoint(d, b, 0, c, "");
        inviteKnight(c, b, "", true)
    }
}
function modal_appoint(d, c, g, b, e) {
    var f = 50;
    if (g == 1) {
        f = 55
    }
    var a = new Array();
    a.push("<div class='appointknightwrap'>");
    a.push("<div class='appointbox clearfix'>");
    a.push("<div class='leftpic'>");
    a.push("<div class='pic'><img src='" + d + "'></div>");
    a.push("<div class='leftstat'>" + g_js_strings.commonstr.level + ":<span>1</span></div>");
    a.push("<div class='leftstat'>" + g_js_strings.commonstr.loyalty + ":<span>70</span></div>");
    a.push("</div>");
    a.push("<div class='rightinfo'>");
    a.push("<div class='title' id='topAppointLine'>" + g_js_strings.modal_appoint.appointasknight + "</div>");
    a.push("<div class='name'>" + c + "</div>");
    a.push("<div class='title' id='bottomAppointLine'></div>");
    a.push("<div class='reqbox'>");
    a.push("<div class='title'>" + g_js_strings.commonstr.requirement + "</div>");
    a.push("<div class='rightstat'>" + g_js_strings.modal_appoint.appointfee + ": <span>1,000 " + g_js_strings.commonstr.gold + "</span></div>");
    a.push("<div class='rightstat'>" + g_js_strings.commonstr.salary + ": <span>20 " + g_js_strings.commonstr.goldperhour + "</span></div>");
    a.push("</div>");
    a.push("</div>");
    a.push("</div>");
    a.push("<div class='exp'>" + g_js_strings.modal_appoint.knightskillsdesc + "</div>");
    a.push("<div class='knightstatsbox clearfix'>");
    a.push("<div class='stat'>");
    a.push("<div class='title'>" + g_js_strings.commonstr.resourcefulness + "</div>");
    a.push("  <div class='number'>" + f + "</div>");
    a.push("  </div>");
    a.push("  <div class='stat'>");
    a.push("  <div class='title'>" + g_js_strings.commonstr.politics + "</div>");
    a.push("    <div class='number'>" + f + "</div>");
    a.push("  </div>");
    a.push("<div class='stat'>");
    a.push("  <div class='title'>" + g_js_strings.commonstr.combat + "</div>");
    a.push("  <div class='number'>" + f + "</div>");
    a.push("</div>");
    a.push("  <div class='stat'>");
    a.push("    <div class='title'>" + g_js_strings.commonstr.intelligence + "</div>");
    a.push("  <div class='number'>" + f + "</div>");
    a.push("  </div>");
    a.push("</div>");
    a.push("<div class='centerbutton clearfix' id='appointBtnWrap'>");
    a.push("  <a class='button25'   onclick='appointKnight(" + b + ',"' + c.replace("'", "&#39;") + "\");return false;'><span>" + g_js_strings.commonstr.share + " " + g_js_strings.commonstr.glory + "</span></a>");
    a.push("</div>");
    a.push("</div>");
    Modal.showModal(500, 500, 10, 10, g_js_strings.modaltitles.appointknight, a.join(""))
}
function postToKnightWall(c, a) {
    var b = new Array();
    var d = a.replace("'", "&#39;");
    b.push(["REPLACE_KnIgHtNaMe", d]);
    common_postToProfile("120", Object.cloneFeed(template_data_120), Object.cloneFeed(actionlink_data_120), continuation_120, b, c)
}
function updateKnightSeed(c, b, a) {
    var e = $("f_" + c);
    if (e.getElementsByTagName("td")[4].innerHTML == "50") {
        var d = Object.clone(knighttemplate[1])
    } else {
        var d = Object.clone(knighttemplate[0])
    }
    d.cityId = currentcityid.toString();
    d.knightFbuid = c.toString();
    d.knightId = a.toString();
    d.knightLordUserid = tvuid.toString();
    d.knightName = b.toString();
    d.pic_square = e.getElementsByTagName("td")[0].getElementsByTagName("img")[0].src.toString();
    $("f_" + c).remove();
    if (Object.isArray(seed.knights)) {
        seed.knights = new Object
    }
    if (!seed.knights["city" + currentcityid]) {
        seed.knights["city" + currentcityid] = new Object
    }
    seed.knights["city" + currentcityid]["knt" + a] = d;
    changeKnightModalTabs(1);
    update_knights()
}
function inviteKnight(uid, name, entryTag, postToWall) {
    citygold = parseInt(seed.citystats["city" + currentcityid].gold[0]);
    if (citygold >= 1000) {
        var params = Object.clone(g_ajaxparams);
        params.friendpfid = uid;
        params.cid = currentcityid;
        new Ajax.Request(g_ajaxpath + "ajax/hireknight.php" + g_ajaxsuffix, {
            method: "post",
            parameters: params,
            onSuccess: function (transport) {
                var rslt = eval("(" + transport.responseText + ")");
                if (rslt.ok) {
                    kid = rslt.knightId;
                    updateKnightSeed(uid, name, kid);
                    cm.feedTracking.setFalse("inviteKnight");
                    $("topAppointLine").remove();
                    $("bottomAppointLine").innerHTML = g_js_strings.appointKnight.knightsuccess;
                    $("appointBtnWrap").innerHTML = cm.feedTracking.button("popupAppointKnight", "<a class='button25'  onclick='postAppointKnight(" + uid + ',"' + name.replace("'", "&#39;") + '","' + rslt.knightId + "\",1);return false;'><span>" + g_js_strings.commonstr.share + " " + g_js_strings.commonstr.glory + "</span></a>");
                    if (postToWall) {
                        postToKnightWall(uid, name)
                    }
                } else {
                    Modal.showAlert(printLocalError((rslt.error_code || null), (rslt.msg || null), (rslt.feedback || null)))
                }
            },
            onFailure: function () {}
        })
    } else {
        Modal.showAlert(g_js_strings.inviteKnight.unabletopay)
    }
}
function appointKnight(uid, name) {
    var citygold = parseInt(seed.citystats["city" + currentcityid].gold[0]);
    if (citygold < 1000) {
        Modal.showAlert(g_js_strings.inviteKnight.unabletopay);
        return false
    }
    var params = Object.clone(g_ajaxparams);
    params.friendpfid = uid;
    params.cid = currentcityid;
    new Ajax.Request(g_ajaxpath + "ajax/hireknight.php" + g_ajaxsuffix, {
        method: "post",
        parameters: params,
        onSuccess: function (transport) {
            var rslt = eval("(" + transport.responseText + ")");
            if (rslt.ok) {
                kid = rslt.knightId;
                updateKnightSeed(uid, name, kid);
                $("appointBtnWrap").innerHTML = cm.feedTracking.button("popupAppointKnight", "<a class='button25'  onclick='postAppointKnight(" + uid + ',"' + name.replace("'", "&#39;") + '","' + rslt.knightId + "\",1);return false;'><span>" + g_js_strings.commonstr.share + " " + g_js_strings.commonstr.glory + "</span></a>");
                cm.feedTracking.setFalse("popupAppointKnight");
                $("appointBtnWrap").className = "okbutton";
                $("topAppointLine").remove();
                if ($("notplayerline")) {
                    $("notplayerline").remove()
                }
                $("bottomAppointLine").innerHTML = g_js_strings.appointKnight.knightsuccess
            } else {
                Modal.showAlert(printLocalError((rslt.error_code || null), (rslt.msg || null), (rslt.feedback || null)))
            }
        },
        onFailure: function () {}
    })
}
function postAppointKnight(e, b, a, d) {
    if (d == 1) {
        var c = new Array();
        var f = b.replace("'", "&#39;");
        c.push(["REPLACE_KnIgHtNaMe", f]);
        common_postToProfile("96", Object.cloneFeed(template_data_96), Object.cloneFeed(actionlink_data_96), continuation_96, c)
    }
    Modal.hideModal()
}
function timedUpdateXP() {
    var a = 1;
    var b = new Hash(seed.buildings["city" + currentcityid]);
    if (b) {
        b.each(function (f) {
            if (f.value[0] == 7) {
                a = parseInt(f.value[1])
            }
        })
    }
    var c = new Hash(seed.knights["city" + currentcityid]);
    if (c) {
        c.each(function (g) {
            var f = parseInt(g.value.experience) + a;
            seed.knights["city" + currentcityid][g.key].experience = f.toString()
        });
        var e = new Hash(seed.leaders["city" + currentcityid]);
        var d = a;
        if (e) {
            e.each(function (g) {
                if (parseInt(g.value) > 0) {
                    var f = parseInt(seed.knights["city" + currentcityid]["knt" + g.value].experience) + a;
                    seed.knights["city" + currentcityid]["knt" + g.value].experience = f
                }
            })
        }
    }
}
function showMyKnights() {
    var c = new Hash(seed.knights["city" + currentcityid]);
    var a = new Array();
    a.push("<div class='knighttablecontent'>");
    if (c) {
        var b = true;
        c.each(function (t) {
            var m = t.value;
            var q = m.knightId;
            var f = parseInt(Math.sqrt(parseInt(m.experience) / 75)) + 1;
            var k = (f) - parseInt(m.skillPointsApplied);
            var l = Math.pow((f), 2) * 75;
            var r = Math.pow((f - 1), 2) * 75;
            var o = l - parseInt(m.experience);
            var s = l - r;
            var j = (1 - (o / s)) * 100;
            j = j < 1 ? 1 : parseInt(j);
            var p = (parseInt(f) - 1) - parseInt(m.skillPointsApplied);
            var u = polBoost = resBoost = combatBoost = 0;
            var h = polClass = resClass = combatClass = "";
            var e = parseInt(unixtime());
            var v = parseInt(m.politics);
            var n = parseInt(m.combat);
            var i = parseInt(m.intelligence);
            var d = parseInt(m.resourcefulness);
            if (parseInt(m.combatBoostExpireUnixtime) - e > 0) {
                combatBoost = Math.floor((parseInt(m.combatBoostExpireUnixtime) - e) / 60 / 60 / 24);
                combatBoost = combatBoost == 0 ? 1 : combatBoost;
                n = parseInt(n * 1.25);
                combatClass = "enchanted"
            }
            if (parseInt(m.intelligenceBoostExpireUnixtime) - e > 0) {
                u = Math.floor((parseInt(m.intelligenceBoostExpireUnixtime) - e) / 60 / 60 / 24);
                u = u == 0 ? 1 : u;
                i = parseInt(i * 1.25);
                h = "enchanted"
            }
            if (parseInt(m.politicsBoostExpireUnixtime) - e > 0) {
                polBoost = Math.floor((parseInt(m.politicsBoostExpireUnixtime) - e) / 60 / 60 / 24);
                polBoost = polBoost == 0 ? 1 : polBoost;
                v = parseInt(v * 1.25);
                polClass = "enchanted"
            }
            if (parseInt(m.resourcefulnessBoostExpireUnixtime) - e > 0) {
                resBoost = Math.floor((parseInt(m.resourcefulnessBoostExpireUnixtime) - e) / 60 / 60 / 24);
                resBoost = resBoost == 0 ? 1 : resBoost;
                d = parseInt(d * 1.25);
                resClass = "enchanted"
            }
            var w = g_js_strings.commonstr.idle;
            if (seed.leaders["city" + currentcityid].combatKnightId == q) {
                w = g_js_strings.commonstr.marshal
            } else {
                if (seed.leaders["city" + currentcityid].intelligenceKnightId == q) {
                    w = g_js_strings.commonstr.alchemystic
                } else {
                    if (seed.leaders["city" + currentcityid].politicsKnightId == q) {
                        w = g_js_strings.commonstr.foreman
                    } else {
                        if (seed.leaders["city" + currentcityid].resourcefulnessKnightId == q) {
                            w = g_js_strings.commonstr.steward
                        } else {
                            if (parseInt(m.knightStatus) == 10) {
                                w = g_js_strings.commonstr.marching
                            }
                        }
                    }
                }
            }
            var g = 0;
            if (m.baseCombat == 55) {
                g = 1
            }
            a.push("<div class='knightrow clearfix" + ((b) ? " stripe" : "") + "'>");
            a.push("<div class='knightpic'><img src='" + (m.pic_square || "http://static.ak.facebook.com/pics/s_default.jpg") + "' /></div>");
            a.push("<div class='knightname'>");
            a.push("<div class='name'>" + m.knightName + "</div>");
            a.push("<div class='info'>" + g_js_strings.showMyKnights.unasspts + ":" + k + "</div>");
            a.push("<div class='info'>" + g_js_strings.assign_role_modal.currentrole + ":" + w + "</div>");
            if (g == 0 && parseInt(m.knightFbuid) != 0) {
                a.push("<div class='clearfix'>");
                a.push("<a class='button14' onclick='invite_friends_popup();return false;'><span>" + g_js_strings.commonstr.invite + "</span></a>");
                a.push("</div>")
            }
            a.push("</div>");
            a.push("<div class='exper'><div class='stat'>" + g_js_strings.commonstr.level + ": " + f + "</div>");
            a.push("<div class='stat'>" + g_js_strings.commonstr.xp + ": " + m.experience + "</div>");
            a.push("<div class='statbar'><div class='cnt' style='width:" + j + "px;'>&nbsp;</div><div class='cnttext'>" + g_js_strings.showMyKnights.xpnextlvl.replace("%1$s", o) + "</div></div>");
            a.push("<a  class='button14' onclick='xpBoost_modal(" + q + ");return false;'><span>" + g_js_strings.showMyKnights.increasexp + "</span></a>");
            a.push("</div>");
            a.push("<div class='knightcol " + polClass + "'>");
            a.push("<div class='stat'>" + v + "</div>");
            if (polBoost > 0) {
                a.push("<span>+25% " + g_js_strings.commonstr.fortx.toLowerCase() + " <" + polBoost + " " + g_js_strings.commonstr.days.toLowerCase() + "</span>")
            } else {
                a.push("<a class='button14'  onclick='boost_modal(1," + q + ");return false;'><span>" + g_js_strings.commonstr.boost + "</span></a>")
            }
            a.push("</div>");
            a.push("<div class='knightcol " + combatClass + "'>");
            a.push("<div class='stat'>" + n + "</div>");
            if (combatBoost > 0) {
                a.push("<span>+25% for <" + combatBoost + " days</span>")
            } else {
                a.push("<a class='button14'  onclick='boost_modal(2," + q + ");return false;'><span>" + g_js_strings.commonstr.boost + "</span></a>")
            }
            a.push("</div>");
            a.push("<div class='knightcol " + h + "'>");
            a.push("<div class='stat'>" + i + "</div>");
            if (u > 0) {
                a.push("<span>+25% " + g_js_strings.commonstr.fortx.toLowerCase() + " <" + u + " " + g_js_strings.commonstr.days.toLowerCase() + "</span>")
            } else {
                a.push("<a class='button14'  onclick='boost_modal(3," + q + ");return false;'><span>" + g_js_strings.commonstr.boost + "</span></a>")
            }
            a.push("</div>");
            a.push("<div class='knightcol " + resClass + "'>");
            a.push("<div class='stat'>" + d + "</div>");
            if (resBoost > 0) {
                a.push("<span>+25% " + g_js_strings.commonstr.fortx.toLowerCase() + " <" + resBoost + " " + g_js_strings.commonstr.days.toLowerCase() + "</span>")
            } else {
                a.push("<a class='button14'  onclick='boost_modal(4," + q + ");return false;'><span>" + g_js_strings.commonstr.boost + "</span></a>")
            }
            a.push("</div>");
            a.push("<div class='knightcol'>");
            a.push("<div class='stat'>" + m.loyalty + "</div>");
            a.push("<a class='button14'  onclick='loyalBoost_modal(" + q + ");return false;'><span>" + g_js_strings.commonstr.reward + "</span></a>");
            a.push("</div>");
            a.push("<div class='actions'>");
            if (m.knightStatus == 1) {
                a.push("<a class='button14'  onclick='assign_skill_modal(" + q + ");return false;'><span>" + g_js_strings.showMyKnights.assignskill + "</span></a>");
                a.push("<a class='button14'  onclick='assign_role_modal(" + q + ");return false;'><span>" + g_js_strings.showMyKnights.assignrole + "</span></a>");
                a.push("<a class='buttonDown14'  onclick='dismiss_modal(" + q + ");return false;'><span>" + g_js_strings.commonstr.dismiss + "</span></a>")
            }
            a.push("</div>");
            a.push("</div>");
            b = !b
        })
    }
    a.push("</div>");
    $("myKnightsTBody").innerHTML = a.join("")
}
function xpBoost_modal(g) {
    var d = new Array();
    var a = ["i361", "i362", "i363"];
    d.push("<div class='boostitemlist'>");
    for (var e = 0; e < a.length; e++) {
        var c = itemlist[a[e]].name;
        var f = itemlist[a[e]].description;
        var b = 0;
        if (seed.items[a[e]]) {
            b = seed.items[a[e]]
        }
        d.push("<div class='itemwrap clearfix'>");
        d.push("<div class='itempic'>");
        d.push("<img src='" + stimgUrl + "img/items/70/" + a[e].substring(1) + ".jpg'/>");
        d.push("</div>");
        d.push("<div class='iteminfo'>");
        d.push("<div class='name'>" + c + "</div>");
        if (b == 0) {
            d.push("<div class='btn'><a  class='button20' onclick='Modal.hideModalAll();cm.ShopView.openShop();return false;'><span>" + g_js_strings.commonstr.getmore + "</span></a></div>")
        } else {
            d.push("<div class='btn'><a  class='button20' onclick='increaseXPItem(\"" + a[e] + '",' + g + ");return false;'><span>" + g_js_strings.commonstr.apply + "</span></a></div>")
        }
        d.push("<div class='desc'>" + f + "</div>");
        d.push("<div class='own'>" + g_js_strings.commonstr.youown + ": " + b + ".  <a  onclick='Modal.hideModalAll();cm.ShopView.openShop(1);return false;'>" + g_js_strings.commonstr.getmore + "</a></div>");
        d.push("</div>");
        d.push("</div>")
    }
    d.push("</div>");
    Modal.showModal(500, 500, 10, 10, g_js_strings.modaltitles.selectitem, d.join(""))
}
function increaseXPItem(iid, kid) {
    var itemId = iid.substring(1);
    var params = Object.clone(g_ajaxparams);
    params.iid = iid.substring(1);
    params.cid = currentcityid;
    params.kid = kid;
    new Ajax.Request(g_ajaxpath + "ajax/experienceKnight.php" + g_ajaxsuffix, {
        method: "post",
        parameters: params,
        onSuccess: function (transport) {
            var rslt = eval("(" + transport.responseText + ")");
            if (rslt.ok) {
                Modal.hideModal();
                seed.items[iid] = parseInt(seed.items[iid]) - 1;
                ksoItems[itemId].subtract();
                seed.knights["city" + currentcityid]["knt" + kid].experience = rslt.experience;
                changeKnightModalTabs(1);
                cm.MixPanelTracker.track("item_use", {
                    item: itemlist["i" + params.iid].name,
                    usr_gen: seed.player.g,
                    usr_byr: seed.player.y,
                    usr_ttl: titlenames[seed.player.title],
                    distinct_id: tvuid
                });
                update_knights()
            } else {
                Modal.showAlert(printLocalError((rslt.error_code || null), (rslt.msg || null), (rslt.feedback || null)))
            }
        },
        onFailure: function () {}
    })
}
function loyalBoost_modal(j) {
    var a = seed.knights["city" + currentcityid]["knt" + j];
    var g = a.knightName;
    var i = parseInt(Math.sqrt(parseInt(a.experience) / 75)) + 1;
    var c = "http://static.ak.facebook.com/pics/s_default.jpg";
    if (a.pic_square) {
        c = a.pic_square
    }
    var f = (parseInt(a.skillPointsApplied) + 1) * 20;
    var d = a.loyalty;
    var e = a.experience;
    var b = (parseInt(a.skillPointsApplied) + 1) * 1000;
    var h = new Array();
    h.push("<div class='knightconfirmwrap'>");
    h.push("<div class='confirmbox clearfix'>");
    h.push("<div class='leftpic'>");
    h.push("<img src='" + c + "'>");
    h.push("</div>");
    h.push("<div class='rightinfo'>");
    h.push("<div class='name'>" + g + "</div>");
    h.push("<div class='infobox'>");
    h.push("<div class='rightstat'>" + g_js_strings.commonstr.salary + ":<span>" + f + " " + g_js_strings.commonstr.goldperhour.toLowerCase() + "</span></div>");
    h.push("<div class='rightstat'>" + g_js_strings.commonstr.loyalty + ":<span>" + d + "</span></div>");
    h.push("<div class='rightstat'>" + g_js_strings.commonstr.level + ":<span>" + i + "</span></div>");
    h.push("<div class='rightstat'>" + g_js_strings.loyalBoost_modal.skillpointsapplied + ":<span>" + parseInt(a.skillPointsApplied) + "</span></div>");
    h.push("</div>");
    h.push("</div>");
    h.push("</div>");
    h.push("<div class='rewardtypebox'>");
    h.push("<div class='rewardboxtitle'>" + g_js_strings.loyalBoost_modal.rewardknight + "</div>");
    h.push("<div class='ddrow'>" + g_js_strings.loyalBoost_modal.rewardwith + ": <select id='rewardType' onchange='toggleRewardExp(this);return false;'><option value='1'>" + g_js_strings.commonstr.crest + "</option><option value='2'>" + g_js_strings.commonstr.gold + "</option></select></div>");
    h.push("<div class='rewardexp' id='rewardExp' style='display:none;'>" + g_js_strings.loyalBoost_modal.rewardknightgolddesc.replace("%1$s", b) + "</div>");
    h.push("<div class='insfunds' id='insufficientFunds' style='display:none;'>" + g_js_strings.loyalBoost_modal.notenoughgold + "</div>");
    h.push("</div>");
    h.push("<div class='buttonlink clearfix' id='appointBtnWrap'>");
    h.push("<a class='button25'  onclick='rewardKnight(" + j + "," + b + ");return false;'><span>" + g_js_strings.commonstr.reward + "</span></a>");
    h.push("<a class='appointlink'  onclick='Modal.hideModal();return false;'>" + g_js_strings.commonstr.cancel + "</a>");
    h.push("</div>");
    h.push("</div>");
    Modal.showModal(500, 500, 10, 10, g_js_strings.modaltitles.rewardknight, h.join(""))
}
function toggleRewardExp(a) {
    if (a.value == 2) {
        $("rewardExp").show()
    } else {
        $("rewardExp").hide();
        $("insufficientFunds").hide()
    }
}
function applyItemCrest(iid, kid) {
    var knight = seed.knights["city" + currentcityid]["knt" + kid];
    var kloyal = knight.loyalty;
    var loyPts = 0;
    switch (parseInt(iid.substring(1))) {
    case 1101:
        loyPts = 5;
        break;
    case 1102:
        loyPts = 10;
        break;
    case 1103:
        loyPts = 15;
        break;
    case 1104:
        loyPts = 20;
        break;
    case 1105:
        loyPts = 25;
        break;
    case 1106:
        loyPts = 30;
        break;
    case 1107:
        loyPts = 40;
        break;
    case 1108:
        loyPts = 50;
        break;
    case 1109:
        loyPts = 60;
        break;
    default:
        loyPts = 5
    }
    if ((parseInt(kloyal) + parseInt(loyPts)) > 100) {
        Modal.showAlert(g_js_strings.errorcode.err_330);
        return false
    }
    var params = Object.clone(g_ajaxparams);
    params.rid = iid.substring(1);
    params.cid = currentcityid;
    params.kid = kid;
    new Ajax.Request(g_ajaxpath + "ajax/rewardKnight.php" + g_ajaxsuffix, {
        method: "post",
        parameters: params,
        onSuccess: function (transport) {
            var rslt = eval("(" + transport.responseText + ")");
            if (rslt.ok) {
                seed.knights["city" + currentcityid]["knt" + kid].loyalty = parseInt(seed.knights["city" + currentcityid]["knt" + kid].loyalty) + loyPts;
                Modal.hideModal();
                seed.items[iid] = parseInt(seed.items[iid]) - 1;
                ksoItems[Number((iid).split("i")[1])].subtract();
                reward_confirm_modal(kid, 0, loyPts, itemlist[iid].name);
                cm.MixPanelTracker.track("item_use", {
                    item: itemlist["i" + params.rid].name,
                    usr_gen: seed.player.g,
                    usr_byr: seed.player.y,
                    usr_ttl: titlenames[seed.player.title],
                    distinct_id: tvuid
                })
            } else {
                Modal.showAlert(printLocalError((rslt.error_code || null), (rslt.msg || null), (rslt.feedback || null)))
            }
        },
        onFailure: function () {}
    })
}
function rewardKnight(kid, gneed) {
    var knight = seed.knights["city" + currentcityid]["knt" + kid];
    var kloyal = knight.loyalty;
    if (kloyal == 100) {
        Modal.showAlert(g_js_strings.errorcode.err_330);
        return false
    }
    if ($("rewardType").value == 1) {
        trophy_modal(kid)
    } else {
        if (parseInt(seed.citystats["city" + currentcityid].gold[0]) < gneed) {
            $("insufficientFunds").show()
        } else {
            var params = Object.clone(g_ajaxparams);
            params.rid = 0;
            params.cid = currentcityid;
            params.kid = kid;
            new Ajax.Request(g_ajaxpath + "ajax/rewardKnight.php" + g_ajaxsuffix, {
                method: "post",
                parameters: params,
                onSuccess: function (transport) {
                    var rslt = eval("(" + transport.responseText + ")");
                    if (rslt.ok) {
                        Modal.hideModal();
                        seed.citystats["city" + currentcityid].gold[0] = parseInt(seed.citystats["city" + currentcityid].gold[0]) - gneed;
                        seed.knights["city" + currentcityid]["knt" + kid].loyalty = parseInt(seed.knights["city" + currentcityid]["knt" + kid].loyalty) + 5;
                        reward_confirm_modal(kid, gneed, 5, "")
                    } else {
                        Modal.showAlert(printLocalError((rslt.error_code || null), (rslt.msg || null), (rslt.feedback || null)))
                    }
                },
                onFailure: function () {}
            })
        }
    }
}
function reward_confirm_modal(n, k, j, g) {
    var a = seed.knights["city" + currentcityid]["knt" + n];
    var i = a.knightName;
    var m = parseInt(Math.sqrt(parseInt(a.experience) / 75)) + 1;
    var d = "http://static.ak.facebook.com/pics/s_default.jpg";
    if (a.pic_square) {
        d = a.pic_square
    }
    var h = (parseInt(a.skillPointsApplied) + 1) * 20;
    var e = a.loyalty;
    var f = a.experience;
    var c = (parseInt(a.skillPointsApplied) + 1) * 100;
    if (k > 0) {
        var b = g_js_strings.reward_confirm_modal.increasedbygold.replace("%1$s", k).replace("%2$s", j)
    } else {
        var b = g_js_strings.reward_confirm_modal.increasedbytrophy.replace("%1$s", g).replace("%2$s", j)
    }
    var l = new Array();
    l.push("<div class='knightconfirmwrap'>");
    l.push("<div class='confirmbox clearfix'>");
    l.push("<div class='leftpic'>");
    l.push("<img src='" + d + "'>");
    l.push("</div>");
    l.push("<div class='rightinfo'>");
    l.push("<div class='name'>" + i + "</div>");
    l.push("<div class='infobox'>");
    l.push("<div class='rightstat'>" + g_js_strings.commonstr.salary + ":<span>" + h + " " + g_js_strings.commonstr.goldperhour.toLowerCase() + "</span></div>");
    l.push("<div class='rightstat'>" + g_js_strings.commonstr.loyalty + ":<span>" + e + "</span></div>");
    l.push("<div class='rightstat'>" + g_js_strings.commonstr.level + ":<span>" + m + "</span></div>");
    l.push("</div>");
    l.push("</div>");
    l.push("</div>");
    l.push("<div class='rewardconfirm'>");
    l.push(b);
    l.push("</div>");
    l.push("<table width='1%' align='center'>");
    l.push("<tr>");
    l.push("<td nowrap='nowrap'>");
    l.push("<a  onclick='Modal.hideModal();changeKnightModalTabs(1);return false;' class='button25'><span>" + g_js_strings.commonstr.ok + "</span></a>");
    l.push("</td>");
    l.push("</tr>");
    l.push("</table>");
    l.push("</div>");
    Modal.showModal(500, 500, 10, 10, g_js_strings.modaltitles.knightrewarded, l.join(""))
}
function assign_role_modal(g) {
    var b = seed.knights["city" + currentcityid]["knt" + g];
    var m = b.knightName;
    var o = parseInt(Math.sqrt(parseInt(b.experience) / 75)) + 1;
    var e = "http://static.ak.facebook.com/pics/s_default.jpg";
    if (b.pic_square) {
        e = b.pic_square
    }
    var k = (parseInt(b.skillPointsApplied) + 1) * 20;
    var f = b.loyalty;
    var i = b.experience;
    var d = parseInt(unixtime());
    var a = seed.leaders["city" + currentcityid].intelligenceKnightId;
    var j = seed.leaders["city" + currentcityid].politicsKnightId;
    var l = seed.leaders["city" + currentcityid].combatKnightId;
    var c = seed.leaders["city" + currentcityid].resourcefulnessKnightId;
    var h = g_js_strings.commonstr.idle;
    switch (g.toString()) {
    case a:
        h = g_js_strings.commonstr.alchemystic;
        break;
    case j:
        h = g_js_strings.commonstr.foreman;
        break;
    case l:
        h = g_js_strings.commonstr.marshal;
        break;
    case c:
        h = g_js_strings.commonstr.steward;
        break;
    default:
        break
    }
    var d = parseInt(unixtime());
    var n = new Array();
    n.push("<div class='knightconfirmwrap'>");
    n.push("<div class='confirmbox clearfix'>");
    n.push("<div class='leftpic'>");
    n.push("<img src='" + e + "'>");
    n.push("</div>");
    n.push("<div class='rightinfo'>");
    n.push("<div class='name'>" + m + "</div>");
    n.push("<div class='infobox'>");
    n.push("<div class='rightstat'>" + g_js_strings.commonstr.salary + ":<span>" + k + " " + g_js_strings.commonstr.goldperhour.toLowerCase() + "</span></div>");
    n.push("<div class='rightstat'>" + g_js_strings.commonstr.loyalty + ":<span>" + f + "</span></div>");
    n.push("<div class='rightstat'>" + g_js_strings.commonstr.level + ":<span>" + o + "</span></div>");
    n.push("</div>");
    n.push("</div>");
    n.push("</div>");
    n.push("<div class='title'>");
    n.push(g_js_strings.commonstr.skills);
    n.push("</div>");
    n.push("<div class='knightassignstatsbox' id='knightAssignStatsBox'>");
    n.push("<div class='stat'>");
    n.push("<div class='title'>" + g_js_strings.commonstr.politics + "</div>");
    n.push("<div class='number clearfix'>");
    n.push("<div class='assignnumber'>" + b.politics + "</div>");
    if (parseInt(b.politicsBoostExpireUnixtime) - d > 0) {
        n.push("<div class='adjustednumber'><div>" + parseInt(parseInt(b.politics) * 1.25) + "</div><span>" + g_js_strings.commonstr.current + "</span></div>")
    }
    n.push("</div>");
    n.push("</div>");
    n.push("<div class='stat'>");
    n.push("<div class='title'>" + g_js_strings.commonstr.combat + "</div>");
    n.push("<div class='number clearfix'>");
    n.push("<div class='assignnumber'>" + b.combat + "</div>");
    if (parseInt(b.combatBoostExpireUnixtime) - d > 0) {
        n.push("<div class='adjustednumber'><div>" + parseInt(parseInt(b.combat) * 1.25) + "</div><span>" + g_js_strings.commonstr.current + "</span></div>")
    }
    n.push("</div>");
    n.push("</div>");
    n.push("<div class='stat'>");
    n.push("<div class='title'>" + g_js_strings.commonstr.intelligence + "</div>");
    n.push("<div class='number clearfix'>");
    n.push("<div class='assignnumber'>" + b.intelligence + "</div>");
    if (parseInt(b.intelligenceBoostExpireUnixtime) - d > 0) {
        n.push("<div class='adjustednumber'><div>" + parseInt(parseInt(b.intelligence) * 1.25) + "</div><span>" + g_js_strings.commonstr.current + "</span></div>")
    }
    n.push("</div>");
    n.push("</div>");
    n.push("<div class='stat'>");
    n.push("<div class='title'>" + g_js_strings.commonstr.resourcefulness + "</div>");
    n.push("<div class='number clearfix'>");
    n.push("<div class='assignnumber'>" + b.resourcefulness + "</div>");
    if (parseInt(b.resourcefulnessBoostExpireUnixtime) - d > 0) {
        n.push("<div class='adjustednumber'><div>" + parseInt(parseInt(b.resourcefulness) * 1.25) + "</div><span>" + g_js_strings.commonstr.current + "</span></div>")
    }
    n.push("</div>");
    n.push("</div>");
    n.push("</div>");
    n.push("<div class='title'>");
    n.push(g_js_strings.assign_role_modal.assignroles);
    n.push("</div>");
    n.push("<div class='subtitlerow clearfix'>");
    n.push("<div class='subtitle'>" + g_js_strings.assign_role_modal.currentrole + ": <span id='currentRole'>" + h + "</span></div>");
    n.push("</div>");
    n.push("<div class='knightrolebox clearfix'>");
    n.push("<div class='heading'>" + g_js_strings.commonstr.roles + "</div>");
    n.push("<div class='knightrole'>");
    n.push("<div class='foremanpic'></div>");
    n.push("<div class='knighttitle'>" + g_js_strings.commonstr.foreman + "</div>");
    n.push("<div class='knightdesc'>" + g_js_strings.assign_role_modal.foremandesc + "</div>");
    n.push("<div class='btn'>");
    if (j == 0) {
        n.push("<a class='button14' onclick='assignKnightRole(1," + g + ",12,this);return false;'><span>" + g_js_strings.commonstr.assign + "</span></a>")
    } else {
        if (j == g) {
            n.push("<a class='button14 unassignbtn' id='unassignButton_12' onclick='assignKnightRole(0," + g + ",12,this);return false;'><span>" + g_js_strings.commonstr.unassign + "</span></a>");
            n.push("<div class='current'>" + g_js_strings.assign_role_modal.currentrole + "</div>")
        } else {
            n.push("<a class='button14' onclick='assignKnightRole(1," + g + ",12,this);return false;'><span>" + g_js_strings.commonstr.replace + "</span></a>")
        }
    }
    n.push("</div>");
    n.push("</div>");
    n.push("<div class='knightrole'>");
    n.push("<div class='marshalpic'></div>");
    n.push("<div class='knighttitle'>" + g_js_strings.commonstr.marshal + "</div>");
    n.push("<div class='knightdesc'>" + g_js_strings.assign_role_modal.marshaldesc + "</div>");
    n.push("<div class='btn'>");
    if (l == 0) {
        n.push("<a class='button14' onclick='assignKnightRole(1," + g + ",13,this);return false;'><span>" + g_js_strings.commonstr.assign + "</span></a>")
    } else {
        if (l == g) {
            n.push("<a class='button14 unassignbtn' id='unassignButton_13' onclick='assignKnightRole(0," + g + ",13,this);return false;'><span>" + g_js_strings.commonstr.unassign + "</span></a>");
            n.push("<div class='current'>" + g_js_strings.assign_role_modal.currentrole + "</div>")
        } else {
            n.push("<a class='button14' onclick='assignKnightRole(1," + g + ",13,this);return false;'><span>" + g_js_strings.commonstr.replace + "</span></a>")
        }
    }
    n.push("</div>");
    n.push("</div>");
    n.push("<div class='knightrole'>");
    n.push("<div class='alchemysticpic'></div>");
    n.push("<div class='knighttitle'>" + g_js_strings.commonstr.alchemystic + "</div>");
    n.push("<div class='knightdesc'>" + g_js_strings.assign_role_modal.alchedesc + "</div>");
    n.push("<div class='btn'>");
    if (a == 0) {
        n.push("<a class='button14' onclick='assignKnightRole(1," + g + ",14,this);return false;'><span>" + g_js_strings.commonstr.assign + "</span></a>")
    } else {
        if (a == g) {
            n.push("<a class='button14 unassignbtn' id='unassignButton_14' onclick='assignKnightRole(0," + g + ",14,this);return false;'><span>" + g_js_strings.commonstr.unassign + "</span></a>");
            n.push("<div class='current'>" + g_js_strings.assign_role_modal.currentrole + "</div>")
        } else {
            n.push("<a class='button14' onclick='assignKnightRole(1," + g + ",14,this);return false;'><span>" + g_js_strings.commonstr.replace + "</span></a>")
        }
    }
    n.push("</div>");
    n.push("</div>");
    n.push("<div class='knightrole'>");
    n.push("<div class='stewardpic'></div>");
    n.push("<div class='knighttitle'>" + g_js_strings.commonstr.steward + "</div>");
    n.push("<div class='knightdesc'>" + g_js_strings.assign_role_modal.stewarddesc + "</div>");
    n.push("<div class='btn'>");
    if (c == 0) {
        n.push("<a class='button14' onclick='assignKnightRole(1," + g + ",11,this);return false;'><span>" + g_js_strings.commonstr.assign + "</span></a>")
    } else {
        if (c == g) {
            n.push("<a class='button14 unassignbtn' id='unassignButton_11' onclick='assignKnightRole(0," + g + ",11,this);return false;'><span>" + g_js_strings.commonstr.unassign + "</span></a>");
            n.push("<div class='current'>" + g_js_strings.assign_role_modal.currentrole + "</div>")
        } else {
            n.push("<a class='button14' onclick='assignKnightRole(1," + g + ",11,this);return false;'><span>" + g_js_strings.commonstr.replace + "</span></a>")
        }
    }
    n.push("</div>");
    n.push("</div>");
    n.push("</div>");
    n.push("</div>");
    Modal.showModal(500, 500, 10, 10, g_js_strings.modaltitles.assignrole, n.join(""))
}
function dismiss_modal(a) {
    var d = seed.knights["city" + currentcityid]["knt" + a].knightName;
    var c = seed.knights["city" + currentcityid]["knt" + a].pic_square;
    var b = new Array();
    b.push("<div class='dismissbox'>");
    b.push("<div class='itemwrap clearfix'>");
    b.push("<div class='itempic'>");
    b.push("<img src='" + (c || "http://static.ak.facebook.com/pics/s_default.jpg") + "' />");
    b.push("</div>");
    b.push("<div class='iteminfo'>");
    b.push(g_js_strings.dismiss_modal.dismissknightconfirm.replace("%1$s", d));
    b.push("</div>");
    b.push("</div>");
    b.push("<div class='buttonlink clearfix'>");
    b.push("<a class='button25'  onclick='dismissKnight(" + a + ");return false;'><span>" + g_js_strings.commonstr.dismiss + "</span></a>");
    b.push("<a class='appointlink'  onclick='Modal.hideModal();return false;'>" + g_js_strings.commonstr.cancel + "</a>");
    b.push("</div>");
    b.push("</div>");
    Modal.showModal(500, 500, 10, 10, g_js_strings.modaltitles.dismissknight, b.join(""))
}
function dismissKnight(kid) {
    var params = Object.clone(g_ajaxparams);
    params.cid = currentcityid;
    params.kid = kid;
    new Ajax.Request(g_ajaxpath + "ajax/fireKnight.php" + g_ajaxsuffix, {
        method: "post",
        parameters: params,
        onSuccess: function (transport) {
            var rslt = eval("(" + transport.responseText + ")");
            if (rslt.ok) {
                delete seed.knights["city" + currentcityid]["knt" + kid];
                Modal.hideModal();
                if (rslt.updateSeed) {
                    update_seed(rslt.updateSeed)
                }
                changeKnightModalTabs(1)
            } else {
                Modal.hideModal();
                Modal.showAlert(printLocalError((rslt.error_code || null), (rslt.msg || null), (rslt.feedback || null)))
            }
        },
        onFailure: function () {}
    })
}
function assignKnightRole(assignflag, kid, pos, tgt) {
    var params = Object.clone(g_ajaxparams);
    params.pos = pos;
    if (assignflag == 0) {
        params.kid = 0
    } else {
        params.kid = kid
    }
    params.cid = currentcityid;
    new Ajax.Request(g_ajaxpath + "ajax/assignknight.php" + g_ajaxsuffix, {
        method: "post",
        parameters: params,
        onSuccess: function (transport) {
            var rslt = eval("(" + transport.responseText + ")");
            if (rslt.ok) {
                if (assignflag == 0) {
                    tgt.parentNode.innerHTML = "<a class='button14' onclick='assignKnightRole(1," + kid + "," + pos + ",this);return false;'><span>" + g_js_strings.commonstr.assign + "</span></a>";
                    $("currentRole").innerHTML = "Idle";
                    switch (pos) {
                    case 11:
                        seed.leaders["city" + currentcityid].resourcefulnessKnightId = "0";
                        break;
                    case 12:
                        seed.leaders["city" + currentcityid].politicsKnightId = "0";
                        break;
                    case 13:
                        seed.leaders["city" + currentcityid].combatKnightId = "0";
                        break;
                    case 14:
                        seed.leaders["city" + currentcityid].intelligenceKnightId = "0";
                        break
                    }
                } else {
                    var rolebox = tgt.parentNode.parentNode.parentNode;
                    Element.extend(rolebox);
                    if (rolebox.select("a.unassignbtn")[0]) {
                        var uPos = rolebox.select("a.unassignbtn")[0].id.split("_")[1];
                        rolebox.select("a.unassignbtn")[0].parentNode.innerHTML = "<a class='button14' onclick='assignKnightRole(1," + kid + "," + uPos + ",this);return false;'><span>" + g_js_strings.commonstr.assign + "</span></a>"
                    }
                    tgt.parentNode.innerHTML = "<a class='button14 unassignbtn' id='unassignButton_" + pos + "' onclick='assignKnightRole(0," + kid + "," + pos + ",this);return false;'><span>" + g_js_strings.commonstr.unassign + "</span></a><div class='current'>" + g_js_strings.assign_role_modal.currentrole + "</div>";
                    var leaders = new Hash(seed.leaders["city" + currentcityid]);
                    leaders.each(function (pair) {
                        if (pair.value == kid.toString()) {
                            seed.leaders["city" + currentcityid][pair.key] = "0"
                        }
                    });
                    var cityName = currentcityinfo[1];
                    var rolename = "";
                    switch (pos) {
                    case 11:
                        $("currentRole").innerHTML = g_js_strings.commonstr.steward;
                        rolename = g_js_strings.commonstr.steward;
                        seed.leaders["city" + currentcityid].resourcefulnessKnightId = kid.toString();
                        break;
                    case 12:
                        $("currentRole").innerHTML = g_js_strings.commonstr.foreman;
                        rolename = g_js_strings.commonstr.foreman;
                        seed.leaders["city" + currentcityid].politicsKnightId = kid.toString();
                        break;
                    case 13:
                        $("currentRole").innerHTML = g_js_strings.commonstr.marshal;
                        rolename = g_js_strings.commonstr.marshal;
                        seed.leaders["city" + currentcityid].combatKnightId = kid.toString();
                        break;
                    case 14:
                        $("currentRole").innerHTML = g_js_strings.commonstr.alchemystic;
                        rolename = g_js_strings.commonstr.alchemystic;
                        seed.leaders["city" + currentcityid].intelligenceKnightId = kid.toString();
                        break;
                    default:
                    }
                    var rolestr = g_js_strings.assign_role_modal.roleconfirm.replace("%1$s", seed.knights["city" + currentcityid]["knt" + kid].knightName).replace("%2$s", cityName).replace("%3$s", rolename);
                    var msghtml = new Array();
                    msghtml.push("<div class='role_confirm_wrapper clearfix'>");
                    msghtml.push("<div class='role " + rolename.toLowerCase() + "'></div>");
                    msghtml.push("<div class='role_text'><span>" + rolestr + "</span></div>");
                    msghtml.push("</div>");
                    msghtml.push("<table width='45%' align='center' nowrap='nowrap'>");
                    msghtml.push("<tr><td nowrap='nowrap'>");
                    if (cm.feedTracking.get("assignKnightRole") !== false) {
                        msghtml.push("<a class='button25' style='margin-left: 15px;' onclick='role_confirm_postToProfile(" + kid + "," + pos + ");return false;'><span>" + g_js_strings.commonstr.share + " " + g_js_strings.commonstr.glory + "</span></a>");
                        cm.feedTracking.setFalse("assignKnightRole")
                    } else {
                        msghtml.push("<a style='margin-left: 15px;' class='buttonDown25' onclick='Modal.hideModal(); return false;'><span>" + g_js_strings.commonstr.ok + "</span></a>")
                    }
                    msghtml.push("</td></tr>");
                    msghtml.push("</table>");
                    Modal.showModal(400, 400, 65, 90, g_js_strings.modaltitles.knightroleassigned, msghtml.join(""))
                }
                if ($("knightshall_1") && $("knightshall_1").visible()) {
                    changeKnightModalTabs(1)
                }
            } else {
                Modal.showAlert(printLocalError((rslt.error_code || null), (rslt.msg || null), (rslt.feedback || null)))
            }
        },
        onFailure: function () {}
    })
}
function role_confirm_postToProfile(a, c) {
    Modal.hideModalAll();
    var b = new Array();
    b.push(["REPLACE_KnIgHtNaMe", seed.knights["city" + currentcityid]["knt" + a].knightName]);
    switch (c) {
    case 11:
        common_postToProfile("100", Object.cloneFeed(template_data_100), Object.cloneFeed(actionlink_data_100), continuation_100, b);
        break;
    case 12:
        common_postToProfile("98", Object.cloneFeed(template_data_98), Object.cloneFeed(actionlink_data_98), continuation_98, b);
        break;
    case 13:
        common_postToProfile("99", Object.cloneFeed(template_data_99), Object.cloneFeed(actionlink_data_99), continuation_99, b);
        break;
    case 14:
        common_postToProfile("101", Object.cloneFeed(template_data_101), Object.cloneFeed(actionlink_data_101), continuation_101, b);
        break;
    default:
    }
}
function assign_skill_modal(e) {
    var a = seed.knights["city" + currentcityid]["knt" + e];
    var k = a.knightName;
    var m = parseInt(Math.sqrt(parseInt(a.experience) / 75)) + 1;
    var c = "http://static.ak.facebook.com/pics/s_default.jpg";
    if (a.pic_square) {
        c = a.pic_square
    }
    var i = (parseInt(a.skillPointsApplied) + 1) * 20;
    var d = a.loyalty;
    var g = a.experience;
    var j = (m) - parseInt(a.skillPointsApplied);
    var h = "";
    if (j == 0) {
        h = "disaddbutton"
    }
    var b = parseInt(unixtime());
    var l = new Array();
    l.push("<div class='knightconfirmwrap' id='knightconfirmwrap'>");
    l.push("<div class='confirmbox clearfix'>");
    l.push("<div class='leftpic'>");
    l.push("<img src='" + c + "'>");
    l.push("</div>");
    l.push("<div class='rightinfo'>");
    l.push("<div class='name'>" + k + "</div>");
    l.push("<div class='infobox'>");
    l.push("<div class='rightstat'>" + g_js_strings.commonstr.salary + ":<span>" + i + " " + g_js_strings.commonstr.goldperhour.toLowerCase() + "</span></div>");
    l.push("<div class='rightstat'>" + g_js_strings.commonstr.loyalty + ":<span>" + d + "</span></div>");
    l.push("<div class='rightstat'>" + g_js_strings.commonstr.level + ":<span>" + m + "</span></div>");
    var f = g_js_strings.commonstr.idle;
    if (seed.leaders["city" + currentcityid].combatKnightId == e) {
        f = g_js_strings.commonstr.marshal
    } else {
        if (seed.leaders["city" + currentcityid].intelligenceKnightId == e) {
            f = g_js_strings.commonstr.alchemystic
        } else {
            if (seed.leaders["city" + currentcityid].politicsKnightId == e) {
                f = g_js_strings.commonstr.foreman
            } else {
                if (seed.leaders["city" + currentcityid].resourcefulnessKnightId == e) {
                    f = g_js_strings.commonstr.steward
                }
            }
        }
    }
    l.push("<div class='rightstat'>" + g_js_strings.commonstr.roles + ": <span>" + f + "</span></div>");
    l.push("</div>");
    l.push("</div>");
    l.push("</div>");
    l.push("<div class='title'>");
    l.push(g_js_strings.assign_skill_modal.assignedskills);
    l.push("</div>");
    l.push("<div class='subtitlerow clearfix'>");
    l.push("<div class='subtitle'>" + g_js_strings.assign_skill_modal.skillptsunassigned + ": <span id='skillPointsLeft'>" + j + "</span></div>");
    if (parseInt(a.skillPointsApplied) > 0) {
        l.push("<div class='btn'><a  class='button14' onclick='redistribute_modal(" + e + ",this);return false;'><span>" + g_js_strings.assign_skill_modal.redistributeskills + "</span></a></div>")
    }
    l.push("</div>");
    l.push("<div class='knightassignstatsbox' id='knightAssignStatsBox'>");
    l.push("<div class='stat'>");
    l.push("<div class='title'>" + g_js_strings.commonstr.politics + "</div>");
    l.push("<div class='number clearfix'>");
    l.push("<div class='assignnumber'>" + a.politics + "</div>");
    l.push("<a  class='addbutton " + h + "' onmouseout='removeTooltip();return false;' onmouseover='showTooltip(\"" + g_js_strings.assign_skill_modal.foremantooltip + "\",this,event,\"mainbody\");return false;' onclick='addSkillPoint(this);return false;'></a>");
    if (parseInt(a.politicsBoostExpireUnixtime) - b > 0) {
        l.push("<div class='adjustednumber'><div>" + parseInt(parseInt(a.politics) * 1.25) + "</div><span>" + g_js_strings.commonstr.current + "</span></div>")
    }
    l.push("</div>");
    l.push("</div>");
    l.push("<div class='stat'>");
    l.push("<div class='title'>" + g_js_strings.commonstr.combat + "</div>");
    l.push("<div class='number clearfix'>");
    l.push("<div class='assignnumber'>" + a.combat + "</div>");
    l.push("<a  class='addbutton " + h + "' onmouseout='removeTooltip();return false;' onmouseover='showTooltip(\"" + g_js_strings.assign_skill_modal.marshaltooltip + "\",this,event,\"mainbody\");return false;' onclick='addSkillPoint(this);return false;'></a>");
    if (parseInt(a.combatBoostExpireUnixtime) - b > 0) {
        l.push("<div class='adjustednumber'><div>" + parseInt(parseInt(a.combat) * 1.25) + "</div><span>" + g_js_strings.commonstr.current + "</span></div>")
    }
    l.push("</div>");
    l.push("</div>");
    l.push("<div class='stat'>");
    l.push("<div class='title'>" + g_js_strings.commonstr.intelligence + "</div>");
    l.push("<div class='number clearfix'>");
    l.push("<div class='assignnumber'>" + a.intelligence + "</div>");
    l.push("<a  class='addbutton " + h + "' onmouseout='removeTooltip();return false;' onmouseover='showTooltip(\"" + g_js_strings.assign_skill_modal.alchetooltip + "\",this,event,\"mainbody\");return false;' onclick='addSkillPoint(this);return false;'></a>");
    if (parseInt(a.intelligenceBoostExpireUnixtime) - b > 0) {
        l.push("<div class='adjustednumber'><div>" + parseInt(parseInt(a.intelligence) * 1.25) + "</div><span>" + g_js_strings.commonstr.current + "</span></div>")
    }
    l.push("</div>");
    l.push("</div>");
    l.push("<div class='stat'>");
    l.push("<div class='title'>" + g_js_strings.commonstr.resourcefulness + "</div>");
    l.push("<div class='number clearfix'>");
    l.push("<div class='assignnumber'>" + a.resourcefulness + "</div>");
    l.push("<a  class='addbutton " + h + "' onmouseout='removeTooltip();return false;' onmouseover='showTooltip(\"" + g_js_strings.assign_skill_modal.stewardtooltip + "\",this,event,\"mainbody\");return false;' onclick='addSkillPoint(this);return false;'></a>");
    if (parseInt(a.resourcefulnessBoostExpireUnixtime) - b > 0) {
        l.push("<div class='adjustednumber'><div>" + parseInt(parseInt(a.resourcefulness) * 1.25) + "</div><span>" + g_js_strings.commonstr.current + "</span></div>")
    }
    l.push("</div>");
    l.push("</div>");
    l.push("</div>");
    l.push("<div class='buttonlink clearfix' id='appointBtnWrap'>");
    l.push("<a class='button25'  onclick='save_skill(" + e + ");return false;'><span>" + g_js_strings.commonstr.save + "</span></a>");
    l.push("<a class='appointlink'  onclick='Modal.hideModal();return false;'>" + g_js_strings.commonstr.cancel + "</a>");
    l.push("</div>");
    l.push("</div>");
    Modal.showModal(500, 500, 115, 85, g_js_strings.modaltitles.assignskills, l.join(""))
}
function redistribute_modal(a, h) {
    var f = Math.ceil(parseInt(seed.knights["city" + currentcityid]["knt" + a].skillPointsApplied) / 10);
    var e = "i941";
    var d = new Array();
    d.push("<div class='boostitemlist'>");
    var c = itemlist[e].name;
    var g = itemlist[e].description;
    var b = 0;
    if (seed.items[e]) {
        b = parseInt(seed.items[e])
    }
    d.push("<div class='itemwrap fountain clearfix'>");
    d.push("<div class='itempic'>");
    d.push("<img src='" + stimgUrl + "img/items/70/" + e.substring(1) + ".jpg'/>");
    d.push("</div>");
    d.push("<div class='iteminfo'>");
    d.push("<div class='name'>" + c + "</div>");
    if (b < f) {
        d.push("<div class='btn'><a  class='button20' onclick='Modal.hideModalAll();cm.ShopView.openShop();return false;'><span>" + g_js_strings.commonstr.getmore + "</span></a></div>")
    } else {
        d.push("<div class='btn'><a  class='button20' onclick='applyFountain(\"" + e + '",' + a + "," + f + ");return false;'><span>" + g_js_strings.commonstr.apply + "</span></a></div>")
    }
    d.push("<div class='desc'>" + g + "</div>");
    d.push("<div class='own'>" + g_js_strings.commonstr.youneed + ": " + f + "</div>");
    d.push("<div class='own'>" + g_js_strings.commonstr.youown + ": " + b + ".  <a  onclick='Modal.hideModalAll();cm.ShopView.openShop();return false;'>" + g_js_strings.commonstr.getmore + "</a></div>");
    d.push("</div>");
    d.push("</div>");
    d.push("</div>");
    Modal.showModal(500, 500, 10, 10, g_js_strings.modaltitles.selectitem, d.join(""))
}
function applyFountain(item, kid, fountainsNeeded) {
    var itemId = Number((item).split("i")[1]),
        params = Object.clone(g_ajaxparams);
    params.cid = currentcityid;
    params.kid = kid;
    new Ajax.Request(g_ajaxpath + "ajax/resetKnight.php" + g_ajaxsuffix, {
        method: "post",
        parameters: params,
        onSuccess: function (transport) {
            var rslt = eval("(" + transport.responseText + ")");
            if (rslt.ok) {
                seed.items[item] = parseInt(seed.items[item]) - fountainsNeeded;
                ksoItems[itemId].subtract(fountainsNeeded);
                Modal.hideModal();
                var genericBaseNumber = seed.knights["city" + currentcityid]["knt" + kid].baseCombat;
                var assignmodal = $("knightAssignStatsBox");
                var stat = assignmodal.select("div.stat");
                var klevel = parseInt(Math.sqrt(parseInt(seed.knights["city" + currentcityid]["knt" + kid].experience) / 75)) + 1;
                var unassignedPts = klevel;
                for (var i = 0; i < stat.length; i++) {
                    stat[i].select("div.assignnumber")[0].innerHTML = genericBaseNumber;
                    if (stat[i].select("div.adjustednumber")[0]) {
                        stat[i].select("div.adjustednumber")[0].getElementsByTagName("div")[0].innerHTML = parseInt(genericBaseNumber * 1.25)
                    }
                    if (stat[i].select("a.disaddbutton")[0] && unassignedPts > 0) {
                        stat[i].select("a.disaddbutton")[0].removeClassName("disaddbutton")
                    }
                }
                $("skillPointsLeft").innerHTML = unassignedPts;
                seed.knights["city" + currentcityid]["knt" + kid].skillPointsApplied = 0;
                seed.knights["city" + currentcityid]["knt" + kid].combat = seed.knights["city" + currentcityid]["knt" + kid].intelligence = seed.knights["city" + currentcityid]["knt" + kid].resourcefulness = seed.knights["city" + currentcityid]["knt" + kid].politics = genericBaseNumber;
                Modal.hideModal();
                changeKnightModalTabs(1);
                cm.MixPanelTracker.track("item_use", {
                    item: itemlist.i941.name,
                    usr_gen: seed.player.g,
                    usr_byr: seed.player.y,
                    usr_ttl: titlenames[seed.player.title],
                    distinct_id: tvuid
                })
            } else {
                Modal.showAlert(printLocalError((rslt.error_code || null), (rslt.msg || null), (rslt.feedback || null)))
            }
        },
        onFailure: function () {}
    })
}
function save_skill(kid) {
    var skillnumbers = $("knightAssignStatsBox").select("div.assignnumber");
    var klevel = parseInt(Math.sqrt(parseInt(seed.knights["city" + currentcityid]["knt" + kid].experience) / 75)) + 1;
    var unassignedPts = (klevel) - parseInt(seed.knights["city" + currentcityid]["knt" + kid].skillPointsApplied);
    var upCnt = 0;
    upCnt = (parseInt(skillnumbers[0].innerHTML) - parseInt(seed.knights["city" + currentcityid]["knt" + kid].politics)) + (parseInt(skillnumbers[1].innerHTML) - parseInt(seed.knights["city" + currentcityid]["knt" + kid].combat)) + (parseInt(skillnumbers[2].innerHTML) - parseInt(seed.knights["city" + currentcityid]["knt" + kid].intelligence)) + (parseInt(skillnumbers[3].innerHTML) - parseInt(seed.knights["city" + currentcityid]["knt" + kid].resourcefulness));
    if (upCnt == 0) {
        Modal.hideModal();
        return false
    } else {
        if (upCnt > unassignedPts) {
            Modal.hideModal();
            return false
        }
    }
    var params = Object.clone(g_ajaxparams);
    params.cid = currentcityid;
    params.kid = kid;
    params.p = parseInt(skillnumbers[0].innerHTML);
    params.c = parseInt(skillnumbers[1].innerHTML);
    params.i = parseInt(skillnumbers[2].innerHTML);
    params.r = parseInt(skillnumbers[3].innerHTML);
    new Ajax.Request(g_ajaxpath + "ajax/skillupKnight.php" + g_ajaxsuffix, {
        method: "post",
        parameters: params,
        onSuccess: function (transport) {
            var rslt = eval("(" + transport.responseText + ")");
            if (rslt.ok) {
                seed.knights["city" + currentcityid]["knt" + kid].politics = skillnumbers[0].innerHTML;
                seed.knights["city" + currentcityid]["knt" + kid].combat = skillnumbers[1].innerHTML;
                seed.knights["city" + currentcityid]["knt" + kid].intelligence = skillnumbers[2].innerHTML;
                seed.knights["city" + currentcityid]["knt" + kid].resourcefulness = skillnumbers[3].innerHTML;
                seed.knights["city" + currentcityid]["knt" + kid].skillPointsApplied = (parseInt(seed.knights["city" + currentcityid]["knt" + kid].skillPointsApplied) + upCnt).toString();
                Modal.hideModal();
                changeKnightModalTabs(1)
            } else {
                Modal.hideModal();
                Modal.showAlert(printLocalError((rslt.error_code || null), (rslt.msg || null), (rslt.feedback || null)))
            }
        },
        onFailure: function () {}
    })
}
function addSkillPoint(g) {
    var f = parseInt($("skillPointsLeft").innerHTML);
    if (f <= 0) {
        return false
    }
    $("skillPointsLeft").innerHTML = f - 1;
    var e = g.parentNode;
    Element.extend(e);
    var d = parseInt(e.select("div.assignnumber")[0].innerHTML) + 1;
    e.select("div.assignnumber")[0].innerHTML = d;
    if (e.select("div.adjustednumber").length > 0) {
        e.select("div.adjustednumber")[0].getElementsByTagName("div")[0].innerHTML = parseInt(d * 1.25)
    }
    if ((f - 1) <= 0) {
        var a = g.parentNode.parentNode.parentNode;
        Element.extend(a);
        var c = a.select("div.stat");
        for (var b = 0; b < c.length; b++) {
            c[b].getElementsByTagName("a")[0].addClassName("disaddbutton")
        }
    }
}
function trophy_modal(g) {
    var c = new Array();
    var f = ["i1101", "i1102", "i1103", "i1104", "i1105", "i1106", "i1107", "i1108", "i1109"];
    c.push("<div class='boostitemlist boostitemlistlong'>");
    for (var d = 0; d < f.length; d++) {
        var b = itemlist[f[d]].name;
        var e = itemlist[f[d]].description;
        var a = 0;
        if (seed.items[f[d]]) {
            a = seed.items[f[d]]
        }
        c.push("<div class='itemwrap clearfix'>");
        c.push("<div class='itempic'>");
        c.push("<img src='" + stimgUrl + "img/items/70/" + f[d].substring(1) + ".jpg'/>");
        c.push("</div>");
        c.push("<div class='iteminfo'>");
        c.push("<div class='name'>" + b + "</div>");
        if (a == 0) {
            c.push("<div class='btn'><a  class='button20' onclick='Modal.hideModalAll();cm.ShopView.openShop();return false;'><span>" + g_js_strings.commonstr.getmore + "</span></a></div>")
        } else {
            c.push("<div class='btn'><a  class='button20' onclick='applyItemCrest(\"" + f[d] + '",' + g + ");return false;'><span>" + g_js_strings.commonstr.apply + "</span></a></div>")
        }
        c.push("<div class='desc'>" + e + "</div>");
        c.push("<div class='own'>" + g_js_strings.commonstr.youown + ": " + a + ".  <a  onclick='Modal.hideModalAll();cm.ShopView.openShop();return false;'>" + g_js_strings.commonstr.getmore + "</a></div>");
        c.push("</div>");
        c.push("</div>")
    }
    c.push("</div>");
    Modal.showModal(500, 500, 10, 10, g_js_strings.modaltitles.selectitem, c.join(""))
}
function boost_modal(d, g) {
    var e;
    switch (d) {
    case 1:
        e = "i211";
        break;
    case 2:
        e = "i221";
        break;
    case 3:
        e = "i231";
        break;
    case 4:
        e = "i241";
        break;
    default:
        return false
    }
    var c = new Array();
    c.push("<div class='boostitemlist'>");
    var b = itemlist[e].name;
    var f = itemlist[e].description;
    var a = 0;
    if (seed.items[e]) {
        a = seed.items[e]
    }
    c.push("<div class='itemwrap clearfix'>");
    c.push("<div class='itempic'>");
    c.push("<img src='" + stimgUrl + "img/items/70/" + e.substring(1) + ".jpg'/>");
    c.push("</div>");
    c.push("<div class='iteminfo'>");
    c.push("<div class='name'>" + b + "</div>");
    if (a == 0) {
        c.push("<div class='btn'><a class='button20' onclick='Modal.hideModalAll();cm.ShopView.openShop();return false;'><span>" + g_js_strings.commonstr.getmore + "</span></a></div>")
    } else {
        c.push("<div class='btn'><a class='button20' onclick='applyBoostItem(\"" + e + '",' + g + ");return false;'><span>" + g_js_strings.commonstr.apply + "</span></a></div>")
    }
    c.push("<div class='desc'>" + f + "</div>");
    c.push("<div class='own'>" + g_js_strings.commonstr.youown + ": " + a + ".  <a  onclick='Modal.hideModalAll();cm.ShopView.openShop();return false;'>" + g_js_strings.commonstr.getmore + "</a></div>");
    c.push("</div>");
    c.push("</div>");
    c.push("</div>");
    Modal.showModal(500, 500, 10, 10, g_js_strings.modaltitles.selectitem, c.join(""))
}
function applyBoostItem(item, kid) {
    var params = Object.clone(g_ajaxparams);
    params.iid = item.substring(1);
    params.cid = currentcityid;
    params.kid = kid;
    new Ajax.Request(g_ajaxpath + "ajax/boostKnight.php" + g_ajaxsuffix, {
        method: "post",
        parameters: params,
        onSuccess: function (transport) {
            var rslt = eval("(" + transport.responseText + ")");
            if (rslt.ok) {
                switch (item) {
                case "i211":
                    seed.knights["city" + currentcityid]["knt" + kid].politicsBoostExpireUnixtime = rslt.expiration.toString();
                    break;
                case "i221":
                    seed.knights["city" + currentcityid]["knt" + kid].combatBoostExpireUnixtime = rslt.expiration.toString();
                    break;
                case "i231":
                    seed.knights["city" + currentcityid]["knt" + kid].intelligenceBoostExpireUnixtime = rslt.expiration.toString();
                    break;
                case "i241":
                    seed.knights["city" + currentcityid]["knt" + kid].resourcefulnessBoostExpireUnixtime = rslt.expiration.toString();
                    break;
                default:
                    return false
                }
                Modal.hideModal();
                seed.items[item] = parseInt(seed.items[item]) - 1;
                ksoItems[item.substring(1)].subtract();
                changeKnightModalTabs(1);
                cm.MixPanelTracker.track("item_use", {
                    item: itemlist[item].name,
                    usr_gen: seed.player.g,
                    usr_byr: seed.player.y,
                    usr_ttl: titlenames[seed.player.title],
                    distinct_id: tvuid
                })
            } else {
                Modal.showAlert(printLocalError((rslt.error_code || null), (rslt.msg || null), (rslt.feedback || null)))
            }
        },
        onFailure: function () {}
    })
}
function changeKnightModalTabs(a) {
    var c = $("knightModalTabs").getElementsByTagName("a");
    for (var b = 0; b < c.length; b++) {
        c[b].className = "tab";
        Element.extend(c[b]);
        $("knightshall_" + b).hide()
    }
    $("knightshall_" + a).show();
    if (a == 1) {
        showMyKnights()
    } else {
        openKnights()
    }
    c[a].addClassName("selected");
    if (a == 0) {
        $("modal_build").className = "tab1"
    } else {
        $("modal_build").className = "tab2"
    }
}
function openKnightsHall() {
    var c = seed.buildings["city" + currentcityid],
        b, a;
    for (b in c) {
        if (c[b][0] == "7") {
            a = c[b][2];
            break
        }
    }
    modal_build(a)
}
function viewAppointKnight() {
    openKnights();
    document.location.hash = "chromeAnchor";
    document.location.hash = "appointKnightSection";
    window.scrollTo(0, 0)
};

function modal_fow_leaderboard(pgno, playerName) {
    var params = Object.clone(g_ajaxparams);
    params.perPage = 10;
    if (playerName) {
        params.displayName = playerName
    }
    if (pgno && pgno != 1) {
        params.page = pgno
    }
    new Ajax.Request(g_ajaxpath + "ajax/getUserLeaderboard.php" + g_ajaxsuffix, {
        method: "post",
        parameters: params,
        onSuccess: function (transport) {
            var rslt = eval("(" + transport.responseText + ")");
            if (rslt.ok) {
                Modal.hideModalAll();
                var tournyhtml = new Array();
                tournyhtml.push("<div class='modal_tourny_container leader_container'>");
                if (rslt.emptySet) {
                    tournyhtml.push("<div class='emptymessage'>");
                    tournyhtml.push(g_js_strings.modal_fow_leaderboard.emptyessage);
                    tournyhtml.push("</div>")
                } else {
                    var tpages = parseInt(rslt.totalPages);
                    var cpage = parseInt(rslt.page);
                    if (tpages > 1) {
                        tournyhtml.push("<div class='paginate'>");
                        tournyhtml.push("<span class='pageno'>" + g_js_strings.commonstr.page + ": " + cpage + " " + g_js_strings.commonstr.oftx + " " + tpages + "</span>");
                        if (cpage > 1) {
                            tournyhtml.push("<a onclick='modal_fow_leaderboard(1);return false;'>" + g_js_strings.commonstr.first + "</a>");
                            tournyhtml.push("<a onclick='modal_fow_leaderboard(" + (cpage - 1) + ");return false;'>" + g_js_strings.commonstr.prev + "</a>")
                        }
                        if (cpage < tpages) {
                            tournyhtml.push("<a onclick='modal_fow_leaderboard(" + (cpage + 1) + ");return false;'>" + g_js_strings.commonstr.next + "</a>")
                        }
                        tournyhtml.push("</div>")
                    } else {
                        tournyhtml.push("<div class='paginate'>&nbsp;");
                        tournyhtml.push("</div>")
                    }
                    tournyhtml.push("<div class='tournylistwrap'>");
                    if (parseInt(rslt.totalResults) > 0) {
                        tournyhtml.push("<table class='tourny_list_table' cellpadding='0' cellspacing='0' border='0'>");
                        tournyhtml.push("<thead>");
                        tournyhtml.push("<tr>");
                        tournyhtml.push("<td class='rankcol'>");
                        tournyhtml.push("<div>" + g_js_strings.commonstr.rank + "</div>");
                        tournyhtml.push("</td>");
                        tournyhtml.push("<td class='name'>");
                        tournyhtml.push("<div>" + g_js_strings.commonstr.nametx + "</div>");
                        tournyhtml.push("</td>");
                        tournyhtml.push("<td class='might'>");
                        tournyhtml.push("<div>" + g_js_strings.commonstr.might + "</div>");
                        tournyhtml.push("</td>");
                        tournyhtml.push("<td class='alliname'>");
                        tournyhtml.push("<div>" + g_js_strings.commonstr.alliance + "</div>");
                        tournyhtml.push("</td>");
                        tournyhtml.push("<td class='numcities'>");
                        tournyhtml.push("<div>" + g_js_strings.commonstr.cities + "</div>");
                        tournyhtml.push("</td>");
                        tournyhtml.push("<td class='viewbtn'>");
                        tournyhtml.push("<div>&nbsp;</div>");
                        tournyhtml.push("</td>");
                        tournyhtml.push("</tr>");
                        tournyhtml.push("</thead>");
                        tournyhtml.push("<tbody>");
                        for (var i = 0; i < rslt.results.length; i++) {
                            var row = rslt.results[i];
                            if (row.userId == 0) {
                                tournyhtml.push("<tr class='misty'>");
                                tournyhtml.push("<td colspan='6'>Under the Mists of Avalon</td>");
                                tournyhtml.push("</tr>")
                            } else {
                                if (parseInt(row.userId) == tvuid) {
                                    tournyhtml.push("<tr class='myrow'>")
                                } else {
                                    if (i % 2 == 1) {
                                        tournyhtml.push("<tr>")
                                    } else {
                                        tournyhtml.push("<tr class='stripe'>")
                                    }
                                }
                                tournyhtml.push("<td class='rankcol'>");
                                tournyhtml.push("<div>" + row.rank + "</div>");
                                tournyhtml.push("</td>");
                                tournyhtml.push("<td class='name'>");
                                tournyhtml.push("<div>" + ((row.playerSex == "M") ? g_js_strings.commonstr.lord : g_js_strings.commonstr.lady) + " " + row.displayName + "</div>");
                                tournyhtml.push("</td>");
                                tournyhtml.push("<td class='might'>");
                                tournyhtml.push("<div>" + row.might + "</div>");
                                tournyhtml.push("</td>");
                                tournyhtml.push("<td class='alliname'>");
                                tournyhtml.push("<div>" + ((row.allianceName && row.allianceId) ? "<a onclick='modal_list_alliance(1," + parseInt(row.allianceId) + ");return false;'>" + row.allianceName + "</a>" : "----") + "</div>");
                                tournyhtml.push("</td>");
                                tournyhtml.push("<td class='numcities'>");
                                tournyhtml.push("<div>" + row.numCities + "</div>");
                                tournyhtml.push("</td>");
                                tournyhtml.push("<td class='viewbtn'>");
                                tournyhtml.push("<div class='clearfix'><a onclick='modal_leaderboard_profile(" + parseInt(row.userId) + ");return false;' class='button20'><span>" + g_js_strings.commonstr.view + "</span></a></div>");
                                tournyhtml.push("</td>");
                                tournyhtml.push("</tr>")
                            }
                        }
                        tournyhtml.push("</tbody>");
                        tournyhtml.push("</table>")
                    } else {
                        tournyhtml.push("<div class='leadersearcherror'>");
                        tournyhtml.push(g_js_strings.modal_fow_leaderboard.nomatcherr);
                        tournyhtml.push("</div>")
                    }
                    tournyhtml.push("</div>");
                    tournyhtml.push("<div class='leadersearch clearfix'>");
                    tournyhtml.push("<div class='userbox'>");
                    tournyhtml.push("<div>" + g_js_strings.modal_fow_leaderboard.searchuser + ":</div>");
                    tournyhtml.push("<div class='clearfix'>");
                    tournyhtml.push("<input value='' id='userSearch'/>");
                    tournyhtml.push("<a class='button20' onclick='getUserSearch();return false;'><span>" + g_js_strings.modal_fow_leaderboard.finduser + "</span></a>");
                    tournyhtml.push("</div>");
                    tournyhtml.push("</div>");
                    tournyhtml.push("<div class='allibox'>");
                    tournyhtml.push("<div>" + g_js_strings.modal_fow_leaderboard.searchalli + ":</div>");
                    tournyhtml.push("<div class='clearfix'>");
                    tournyhtml.push("<input value='' id='allianceSearch'/>");
                    tournyhtml.push("<a class='button20' onclick='getAllianceSearch();return false;'><span>" + g_js_strings.modal_fow_leaderboard.findalli + "</span></a>");
                    tournyhtml.push("</div>");
                    tournyhtml.push("</div>");
                    tournyhtml.push("</div>");
                    tournyhtml.push("<div class='backlink'><a onclick='modal_fow_leaderboard();return false;'>" + g_js_strings.modal_fow_leaderboard.backtoleader + "</a></div>");
                    tournyhtml.push("<div id='searchErrorMsg' class='searcherror' style='display:none;'></div>");
                    tournyhtml.push("<div class='timestampmsg'>");
                    tournyhtml.push(g_js_strings.modal_fow_leaderboard.updatemsg);
                    tournyhtml.push("</div>")
                }
                tournyhtml.push("</div>");
                Modal.showModal(740, 740, 10, 10, g_js_strings.modaltitles.leaderboard, tournyhtml.join(""), "")
            } else {
                Modal.showAlert(printLocalError((rslt.error_code || null), (rslt.msg || null), (rslt.feedback || null)))
            }
        },
        onFailure: function () {}
    })
}
function getAllianceSearch() {
    var a = $("allianceSearch").value;
    if (!a.blank() && a.length >= 3) {
        modal_list_alliance(1, 0, a);
        $("searchErrorMsg").hide()
    } else {
        $("searchErrorMsg").innerHTML = g_js_strings.getAllianceSearch.searcherrmsg;
        $("searchErrorMsg").show()
    }
}
function modal_list_alliance(pgno, allianceId, allianceName) {
    var params = Object.clone(g_ajaxparams);
    params.perPage = 10;
    if (allianceName) {
        params.allianceName = allianceName
    }
    if (pgno && pgno != 1) {
        params.page = pgno
    }
    if (allianceId && allianceId != 0) {
        params.allianceId = allianceId
    }
    new Ajax.Request(g_ajaxpath + "ajax/getUserLeaderboard.php" + g_ajaxsuffix, {
        method: "post",
        parameters: params,
        onSuccess: function (transport) {
            var rslt = eval("(" + transport.responseText + ")");
            if (rslt.ok) {
                Modal.hideModalAll();
                var tournyhtml = new Array();
                tournyhtml.push("<div class='modal_tourny_container leader_container'>");
                var tpages = parseInt(rslt.totalPages);
                var cpage = parseInt(rslt.page);
                var allianceId = parseInt(rslt.allianceId);
                if (tpages > 1) {
                    tournyhtml.push("<div class='paginate'>");
                    tournyhtml.push("<span class='pageno'>" + g_js_strings.commonstr.page + ": " + cpage + " " + g_js_strings.commonstr.oftx + " " + tpages + "</span>");
                    if (cpage > 1) {
                        tournyhtml.push("<a onclick='modal_list_alliance(1);return false;'>" + g_js_strings.commonstr.first + "</a>");
                        tournyhtml.push("<a onclick='modal_list_alliance(" + (cpage - 1) + "," + allianceId + ");return false;'>" + g_js_strings.commonstr.prev + "</a>")
                    }
                    if (cpage < tpages) {
                        tournyhtml.push("<a onclick='modal_list_alliance(" + (cpage + 1) + "," + allianceId + ");return false;'>" + g_js_strings.commonstr.next + "</a>")
                    }
                    tournyhtml.push("</div>")
                } else {
                    tournyhtml.push("<div class='paginate'>&nbsp;");
                    tournyhtml.push("</div>")
                }
                tournyhtml.push("<div class='tournylistwrap'>");
                if (parseInt(rslt.totalResults) > 0) {
                    tournyhtml.push("<table class='tourny_list_table' cellpadding='0' cellspacing='0' border='0'>");
                    tournyhtml.push("<thead>");
                    tournyhtml.push("<tr>");
                    tournyhtml.push("<td class='pname'>");
                    tournyhtml.push("<div>" + g_js_strings.modal_list_alliance.playername + "</div>");
                    tournyhtml.push("</td>");
                    tournyhtml.push("<td class='prank'>");
                    tournyhtml.push("<div>" + g_js_strings.commonstr.rank + "</div>");
                    tournyhtml.push("</td>");
                    tournyhtml.push("<td class='might'>");
                    tournyhtml.push("<div>" + g_js_strings.commonstr.might + "</div>");
                    tournyhtml.push("</td>");
                    tournyhtml.push("<td class='location'>");
                    tournyhtml.push("<div>" + g_js_strings.commonstr.location + "</div>");
                    tournyhtml.push("</td>");
                    tournyhtml.push("<td class='orank'>");
                    tournyhtml.push("<div>" + g_js_strings.modal_list_alliance.offrank + "</div>");
                    tournyhtml.push("</td>");
                    tournyhtml.push("<td class='viewbtn'>");
                    tournyhtml.push("<div>&nbsp;</div>");
                    tournyhtml.push("</td>");
                    tournyhtml.push("</tr>");
                    tournyhtml.push("</thead>");
                    tournyhtml.push("<tbody>");
                    for (var i = 0; i < rslt.results.length; i++) {
                        var row = rslt.results[i];
                        if (i % 2 == 1) {
                            tournyhtml.push("<tr>")
                        } else {
                            tournyhtml.push("<tr class='stripe'>")
                        }
                        tournyhtml.push("<td class='pname'>");
                        tournyhtml.push("<div>" + ((row.playerSex == "M") ? g_js_strings.commonstr.lord : g_js_strings.commonstr.lady) + " " + row.displayName + "</div>");
                        tournyhtml.push("</td>");
                        tournyhtml.push("<td class='prank'>");
                        tournyhtml.push("<div>" + row.rank + "</div>");
                        tournyhtml.push("</td>");
                        tournyhtml.push("<td class='might'>");
                        tournyhtml.push("<div>" + row.might + "</div>");
                        tournyhtml.push("</td>");
                        tournyhtml.push("<td class='location'>");
                        for (var j = 0; j < row.cities.length; j++) {
                            tournyhtml.push("<div>");
                            var coordinateLink = new cm.utils.CoordinateLink(row.cities[j].xCoord, row.cities[j].yCoord);
                            coordinateLink.setClassName("coordinateLink");
                            tournyhtml.push(coordinateLink.getHTML());
                            tournyhtml.push("</div>")
                        }
                        tournyhtml.push("</td>");
                        tournyhtml.push("<td class='orank'>");
                        tournyhtml.push("<div>");
                        if (row.officerType == 1) {
                            tournyhtml.push(g_js_strings.commonstr.chancellor)
                        } else {
                            if (row.officerType == 2) {
                                tournyhtml.push(g_js_strings.commonstr.vicechancellor)
                            } else {
                                if (row.officerType == 3) {
                                    tournyhtml.push(g_js_strings.commonstr.officer)
                                } else {
                                    tournyhtml.push(g_js_strings.commonstr.member)
                                }
                            }
                        }
                        tournyhtml.push("</div>");
                        tournyhtml.push("</td>");
                        tournyhtml.push("<td class='viewbtn'>");
                        tournyhtml.push("<div class='clearfix'><a onclick='modal_leaderboard_profile(" + parseInt(row.userId) + ");return false;' class='button20'><span>" + g_js_strings.commonstr.view + "</span></a></div>");
                        tournyhtml.push("</td>");
                        tournyhtml.push("</tr>")
                    }
                    tournyhtml.push("</tbody>");
                    tournyhtml.push("</table>")
                } else {
                    tournyhtml.push("<div class='leadersearcherror'>");
                    tournyhtml.push(g_js_strings.modal_fow_leaderboard.nomatcherr);
                    tournyhtml.push("</div>")
                }
                tournyhtml.push("</div>");
                tournyhtml.push("<div class='leadersearch clearfix'>");
                tournyhtml.push("<div class='userbox'>");
                tournyhtml.push("<div>" + g_js_strings.modal_fow_leaderboard.searchuser + ":</div>");
                tournyhtml.push("<div class='clearfix'>");
                tournyhtml.push("<input value='' id='userSearch'/>");
                tournyhtml.push("<a class='button20' onclick='getUserSearch();return false;'><span>" + g_js_strings.modal_fow_leaderboard.finduser + "</span></a>");
                tournyhtml.push("</div>");
                tournyhtml.push("</div>");
                tournyhtml.push("<div class='allibox'>");
                tournyhtml.push("<div>" + g_js_strings.modal_fow_leaderboard.searchalli + ":</div>");
                tournyhtml.push("<div class='clearfix'>");
                tournyhtml.push("<input value='' id='allianceSearch'/>");
                tournyhtml.push("<a class='button20' onclick='getAllianceSearch();return false;'><span>" + g_js_strings.modal_fow_leaderboard.findalli + "</span></a>");
                tournyhtml.push("</div>");
                tournyhtml.push("</div>");
                tournyhtml.push("</div>");
                tournyhtml.push("<div class='backlink'><a onclick='modal_fow_leaderboard();return false;'>" + g_js_strings.modal_fow_leaderboard.backtoleader + "</a></div>");
                tournyhtml.push("<div id='searchErrorMsg' class='searcherror' style='display:none;'></div>");
                tournyhtml.push("<div class='timestampmsg'>");
                tournyhtml.push(g_js_strings.modal_fow_leaderboard.updatemsg);
                tournyhtml.push("</div>");
                tournyhtml.push("</div>");
                Modal.showModal(740, 740, 10, 10, rslt.allianceName, tournyhtml.join(""), "")
            }
        },
        onFailure: function () {}
    })
}
function getUserSearch() {
    var a = $("userSearch").value;
    if (!a.blank() && a.length >= 3) {
        modal_fow_leaderboard(1, a);
        $("searchErrorMsg").hide()
    } else {
        $("searchErrorMsg").innerHTML = g_js_strings.getUserSearch.searcherrmsg;
        $("searchErrorMsg").show()
    }
}
function modal_leaderboard_profile(uid) {
    var params = Object.clone(g_ajaxparams);
    params.userId = uid;
    new Ajax.Request(g_ajaxpath + "ajax/getUserLeaderboard.php" + g_ajaxsuffix, {
        method: "post",
        parameters: params,
        onSuccess: function (transport) {
            var rslt = eval("(" + transport.responseText + ")");
            if (rslt.ok) {
                var row = rslt.results[0];
                var pic = row.playerSex.toLowerCase() + row.avatarId;
                var lordy = ((row.playerSex == "M") ? g_js_strings.commonstr.lord : g_js_strings.commonstr.lady);
                var username = row.displayName;
                var might = row.might;
                var title = row.title;
                var alliance = row.allianceName;
                var status = "";
                var cities = row.cities;
                var userId = row.userId;
                switch (parseInt(row.warStatus)) {
                case 1:
                    status = g_js_strings.commonstr.normal;
                    break;
                case 2:
                    status = g_js_strings.MapObject.begprotect;
                    break;
                case 3:
                    status = g_js_strings.commonstr.truce;
                    break;
                case 4:
                    status = g_js_strings.commonstr.vacation;
                    break;
                default:
                    status = g_js_strings.commonstr.normal
                }
                var maptilehtml = new Array();
                maptilehtml.push("<div class='maptilewrap'>");
                maptilehtml.push("<div class='maptileuserwrap clearfix'>");
                maptilehtml.push("<div class='leftpic'><img src='" + stimgUrl + "img/avatars/100/" + pic + ".jpg'/></div>");
                maptilehtml.push("<div class='rightinfo'>");
                maptilehtml.push("<div class='name'>" + lordy + " " + username + "</div>");
                maptilehtml.push("<div>" + g_js_strings.commonstr.might + ": " + might + "</div>");
                maptilehtml.push("<div>" + g_js_strings.commonstr.title + ": " + titlenames[parseInt(title)] + "</div>");
                maptilehtml.push("<div>" + g_js_strings.commonstr.alliance + ": " + (alliance || "---") + "</div>");
                maptilehtml.push("<div>" + g_js_strings.commonstr.status + ": " + status + "</div>");
                maptilehtml.push("</div>");
                maptilehtml.push("</div>");
                for (var i = 0; i < cities.length; i++) {
                    var city = cities[i];
                    maptilehtml.push("<div class='maptileinfowrap'>");
                    maptilehtml.push("<div>" + g_js_strings.commonstr.city + ": <span>" + city.cityName + "</span></div>");
                    maptilehtml.push("<div>" + g_js_strings.commonstr.coordinates + ": ");
                    var coordinateLink = new cm.utils.CoordinateLink(city.xCoord, city.yCoord);
                    coordinateLink.setClassName("coordinateLink");
                    maptilehtml.push(coordinateLink.getHTML());
                    maptilehtml.push("</div>");
                    maptilehtml.push("<div>" + g_js_strings.commonstr.province + ": <span>" + provincenames["p" + city.tileProvinceId] + "</span></div>");
                    maptilehtml.push("</div>")
                }
                maptilehtml.push("<div class='citybtnrow clearfix'>");
                maptilehtml.push("<a  class='button20' onclick='Modal.hideModal();changeview_court(" + userId + ");return false;'><span>" + g_js_strings.modal_maptile.visitcourt + "</span></a>");
                maptilehtml.push("<a  class='button20' onclick='getMessageWindow(" + userId + ',"' + username + "\");return false;'><span>" + g_js_strings.commonstr.message + "</span></a>");
                maptilehtml.push("</div>");
                maptilehtml.push("</div>");
                Modal.showModal(500, 400, 120, 190, g_js_strings.modaltitles.profile, maptilehtml.join(""))
            }
        },
        onFailure: function () {}
    })
};
var currentcityid = null;
var currentcityinfo = null;
var g_timeoff = 0;
var citylist = null;
var ksoItems = {};
Array.prototype.sum = function () {
    for (var a = 0, b = 0; a < this.length; b += this[a++]) {}
    return b
};

function setcamelottime() {
    var b = new Date(unixtime() * 1000);
    var a = parseInt(b.getMinutes()) < 10 ? "0" + b.getMinutes() : b.getMinutes();
    $("kochead_time").innerHTML = b.getHours() + ":" + a
}
function unixtime(a) {
    return parseInt((new Date()).getTime() / 1000) + g_timeoff
}
function calibratetime(b) {
    var a = unixtime()
}
function timestr(e, d) {
    var f = "";
    if (e < 61) {
        if (d == 1) {
            f = e + g_js_strings.timestr.timesec
        } else {
            f = e + g_js_strings.timestr.times
        }
    } else {
        if (e < 3601) {
            var b = parseInt(e / 60);
            e = e - (60 * b);
            if (d == 1) {
                f = b + g_js_strings.timestr.timemin + " " + e + g_js_strings.timestr.timesec
            } else {
                f = b + g_js_strings.timestr.timem + " " + e + g_js_strings.timestr.times
            }
        } else {
            if (e < 86401) {
                var c = parseInt(e / 3600);
                var b = parseInt((e - (c * 3600)) / 60);
                if (d == 1) {
                    f = c + g_js_strings.timestr.timehr + " " + b + g_js_strings.timestr.timemin
                } else {
                    if (2 == d) {
                        f = [c, g_js_strings.timestr.timeh, " ", b, g_js_strings.timestr.timem, " ", e - c * 3600 - b * 60, g_js_strings.timestr.times].join("")
                    } else {
                        f = c + g_js_strings.timestr.timeh + " " + b + g_js_strings.timestr.timem
                    }
                }
            } else {
                var a = parseInt(e / 86400);
                var c = parseInt((e - (a * 86400)) / 3600);
                var b = parseInt((e - (c * 3600) - (a * 86400)) / 60);
                if (d == 1) {
                    f = a + g_js_strings.timestr.timeday + " " + c + g_js_strings.timestr.timehr + " " + b + g_js_strings.timestr.timemin
                } else {
                    if (2 == d) {
                        f = [a, g_js_strings.timestr.timed, c, g_js_strings.timestr.timeh, " ", b, g_js_strings.timestr.timem, " ", e - a * 86400 - c * 3600 - b * 60, g_js_strings.timestr.times].join("")
                    } else {
                        f = a + g_js_strings.timestr.timed + " " + c + g_js_strings.timestr.timeh + " " + b + g_js_strings.timestr.timem
                    }
                }
            }
        }
    }
    return f
}
function secondupdate() {
    update_resource();
    if (!$("getChatState") || ($("getChatState") && $("getChatState").innerHTML == "ON")) {
        Chat.getChat()
    }
    update_citylist();
    update_queue();
    attack_generatequeue();
    attack_generateincoming();
    if ($("marketmain_transactions_status")) {
        var l = $("marketmain_transactions_status").select(".time");
        var e = unixtime();
        for (var g = 0; g < l.length; g++) {
            var d = parseInt(l[g].getAttribute("name").split("_")[0]);
            var j = parseInt(l[g].getAttribute("name").split("_")[1]);
            if (d > e) {
                l[g].innerHTML = timestr(d - e)
            } else {
                if (seed.queue_mkt.city2[d] && seed.queue_mkt.city2[d][j]) {
                    seed.queue_mkt.city2[d][j].eventUnixTime = "1"
                }
                break;
                modal_marketplace_viewtransactions()
            }
        }
    }
    var f = cm.IncomingAttackManager.getAllAttacks();
    var c = f ? f.toArray() : [];
    var m = c.length;
    for (g = 0; g < m; g++) {
        c[g].update()
    }
    var h = cm.IncomingAttackManager.getRecalledAttacks();
    var b = h ? h.toArray() : [];
    var a = b.length;
    for (g = 0; g < a; g++) {
        b[g].update()
    }
}
function statusupdate() {
    if (!$("updateSeedState") || ($("updateSeedState") && $("updateSeedState").innerHTML == "ON")) {
        update_seed_ajax()
    }
    var a = quests_validquests();
    quest_allcompleted(a.valid);
    modal_quests_generate(a.valid, a.recommended, 0);
    setcamelottime();
    update_boosts()
}
function threeminupdate() {
    if ($("panel_friendlist").visible()) {
        directory_friends_onlinestatus()
    } else {
        if ($("directory_tabs_2").visible()) {
            getDirectoryTabAllianceMembers()
        }
    }
}
function fullupdate() {
    timedUpdateXP()
}
var g_checkedoutofdate = false;

function checkoutofdate(b) {
    if (!g_checkedoutofdate) {
        g_checkedoutofdate = true;
        if (Math.abs(g_reqtime - b) > 3600) {
            var a = confirm(g_js_strings.checkoutofdate.reloadconfirm);
            if (a) {
                top.location = appUrl
            }
        }
    }
}
function update_might() {
    $("topnav_might").innerHTML = seed.player.might;
    var a = parseInt(seed.tutorial.t1) >= 22;
    if (cm.WorldSettings.hasKeyValuePair("LevelUpPopupEnabled", "true") && a) {
        if (!cm.currentPlayer) {
            var c = {
                level: seed.player.title
            };
            cm.currentPlayer = new cm.Player(c);
            var b = new cm.PlayerController(cm.currentPlayer)
        }
        cm.currentPlayer.setMight(seed.player.might)
    }
}
function update_knights() {
    var a = new Array();
    var b = new Hash(seed.knights["city" + currentcityid]);
    a.push("<table class='knightlist' cellpadding='0' cellspacing='0'>");
    a.push("<thead>");
    a.push("<tr>");
    a.push("<td class='kpic'></td>");
    a.push("<td class='kname'>" + g_js_strings.commonstr.knight + "</td>");
    a.push("<td class='klevel'>" + g_js_strings.commonstr.level + "</td>");
    a.push("</tr>");
    a.push("</thead>");
    b.each(function (e) {
        var d = parseInt(Math.sqrt(parseInt(e.value.experience) / 75)) + 1;
        var c = "http://static.ak.facebook.com/pics/s_default.jpg";
        if (e.value.pic_square) {
            c = e.value.pic_square
        }
        a.push("<tr>");
        a.push("<td class='kpic'><img src='" + c + "'/></td>");
        a.push("<td class='kname'><span>" + e.value.knightName + "</span></td>");
        a.push("<td class='klevel'>" + d + "</td>");
        a.push("</tr>")
    });
    a.push("</table>");
    $("cityinfo_2").innerHTML = a.join("")
}
function update_pop() {
    var b = parseInt(seed.citystats["city" + currentcityid].pop[0]);
    $("stat_pop_num").innerHTML = addCommas(b);
    var a = b - parseInt(seed.citystats["city" + currentcityid]["pop"][3]);
    if (a < 0) {
        $("stat_pop_idle_num").className = "noidle"
    } else {
        $("stat_pop_idle_num").className = "hasidle"
    }
    $("stat_pop_idle_num").innerHTML = a;
    $("stat_happy_num").innerHTML = seed.citystats["city" + currentcityid].pop[2]
}
function update_gold() {
    $("stat_gold_bar_num").innerHTML = addCommas(seed.citystats["city" + currentcityid].gold[0]);
    $("stat_gold_num").innerHTML = addCommas(seed.citystats["city" + currentcityid].gold[0]);
    var b = 1;
    if (parseInt(seed.playerEffects.r0BstExp) > unixtime()) {
        b = 2
    }
    var c = parseInt(parseInt(seed.citystats["city" + currentcityid]["gold"][1] * seed.citystats["city" + currentcityid]["pop"][0]) * 0.01) * b;
    var a = parseInt(seed.citystats["city" + currentcityid]["gold"][2] * 10 * -1);
    $("stat_gold_grw").innerHTML = addCommas(c + a);
    $("stat_tax_rate").innerHTML = seed.citystats["city" + currentcityid].gold[1] + "%";
    return true
}
function update_resource() {
    var d = unixtime();
    var l = d - citylist["city" + currentcityid];
    citylist["city" + currentcityid] = d;
    var m = [0, 0, 0, 0, 0];
    if (!Object.isArray(seed.wilderness["city" + currentcityid])) {
        var o = Object.keys(seed.wilderness["city" + currentcityid]);
        for (var h = 0; h < o.length; h++) {
            var p = 0;
            switch (parseInt(seed.wilderness["city" + currentcityid][o[h]].tileType)) {
            case 10:
                p = 1;
                break;
            case 11:
                p = 1;
                break;
            case 20:
                p = 2;
                break;
            case 30:
                p = 3;
                break;
            case 40:
                p = 4;
                break
            }
            m[p] += parseInt(seed.wilderness["city" + currentcityid][o[h]].tileLevel)
        }
    }
    for (var h = 1; h < 5; h++) {
        var f = seed.resources["city" + currentcityid]["rec" + h];
        var b = 1;
        var e = parseInt(seed.citystats["city" + currentcityid]["pop"][0]);
        var a = parseInt(seed.citystats["city" + currentcityid]["pop"][3]);
        if (a > e) {
            b = e / a
        }
        var j = 0;
        var q = seed.knights["city" + currentcityid];
        if (q) {
            q = q["knt" + seed.leaders["city" + currentcityid].resourcefulnessKnightId];
            if (q) {
                j = parseInt(q.resourcefulness);
                var n = new Date;
                if (q.resourcefulnessBoostExpireUnixtime > parseInt(n.getTime() / 1000)) {
                    j *= 1.25
                }
            }
        }
        var c = 0;
        if (parseInt(seed.playerEffects["r" + h + "BstExp"]) > unixtime()) {
            c = 0.25
        }
        var g = (f[2] * (1 + seed.tech["tch" + h] / 10 + j / 100 + c + 0.05 * m[h]) * b + 100) - parseInt(f[3]);
        if (f[0] < f[1]) {
            f[0] += g * l;
            if (f[0] > f[1]) {
                f[0] = f[1]
            } else {
                if (f[0] < 0) {
                    f[0] = 0
                }
            }
        } else {
            if (g < 0) {
                f[0] += g * l
            }
        }
        $("stat_rec" + h + "_num").innerHTML = addCommas(parseInt(f[0] / 3600));
        $("stat_rec" + h + "_bar_num").innerHTML = addCommas(parseInt(f[0] / 3600));
        $("stat_rec" + h + "_grw").innerHTML = addCommas(parseInt(g))
    }
}
function train_unit(tid, num, iid) {
    var time = modal_barracks_traintime(tid, num);
    if (iid == 36) {
        time = parseInt(time * 0.7)
    } else {
        if (iid == 37) {
            time = parseInt(time * 0.5)
        } else {
            if (iid == 38) {
                time = parseInt(time * 0.3)
            }
        }
    }
    var params = Object.clone(g_ajaxparams);
    params.cid = currentcityid;
    params.type = tid;
    params.quant = num;
    params.items = iid;
    var profiler = new cm.Profiler("ResponseTime", "train.php");
    new Ajax.Request(g_ajaxpath + "ajax/train.php" + g_ajaxsuffix, {
        method: "post",
        parameters: params,
        onSuccess: function (transport) {
            profiler.stop();
            var rslt = eval("(" + transport.responseText + ")");
            if (rslt.ok) {
                for (var i = 1; i < 5; i++) {
                    seed.resources["city" + currentcityid]["rec" + i][0] = parseInt(seed.resources["city" + currentcityid]["rec" + i][0]) - parseInt(unitcost["unt" + tid][i]) * 3600 * parseInt(num)
                }
                seed.citystats["city" + currentcityid].gold[0] = parseInt(seed.citystats["city" + currentcityid].gold[0]) - parseInt(unitcost["unt" + tid][5]) * parseInt(num);
                seed.citystats["city" + currentcityid].pop[0] = parseInt(seed.citystats["city" + currentcityid].pop[0]) - parseInt(unitcost["unt" + tid][6]) * parseInt(num);
                seed.queue_unt["city" + currentcityid].push([tid, num, rslt.initTS, parseInt(rslt.initTS) + time, 0, time, null]);
                queue_changetab_train();
                changeBarracksModalTabs(1);
                seed.items["i" + iid] = Number(seed.items["i" + iid]) - 1;
                ksoItems[iid].subtract();
                if (rslt.updateSeed) {
                    update_seed(rslt.updateSeed)
                }
                UserEngagement.popViralModalUEP(1)
            } else {
                Modal.showAlert(printLocalError((rslt.error_code || null), (rslt.msg || null), (rslt.feedback || null)))
            }
        },
        onFailure: function () {
            profiler.stop()
        }
    })
}
function changecity(e) {
    currentcityid = e.value;
    var c = seed.citystats["city" + currentcityid].pop[0];
    var a = seed.citystats["city" + currentcityid].pop[1];
    var b = seed.citystats["city" + currentcityid].pop[2];
    var d = popgoldchg(c, a, seed.citystats["city" + currentcityid].gold[1], b);
    update_pop();
    update_gold();
    $("stat_happy_num").innerHTML = b + "%";
    update_bdg()
}
function upg_tch(tchtype, tchlvl, gethelp) {
    var mult = Math.pow(2, parseInt(tchlvl) - 1);
    var chk = checkreq("tch", tchtype, tchlvl)[3];
    var invalid = false;
    for (var i = 0; i < chk.length; i++) {
        if (chk[i] == 0) {
            invalid = true;
            break
        }
    }
    if (seed.queue_tch["city" + currentcityid].length > 0) {
        invalid = true
    }
    if (invalid) {
        Modal.showAlert(g_js_strings.upg_tch.unableres);
        return false
    } else {
        seed.resources["city" + currentcityid].rec1[0] -= parseInt(techcost["tch" + tchtype][1]) * mult * 3600;
        seed.resources["city" + currentcityid].rec2[0] -= parseInt(techcost["tch" + tchtype][2]) * mult * 3600;
        seed.resources["city" + currentcityid].rec3[0] -= parseInt(techcost["tch" + tchtype][3]) * mult * 3600;
        seed.resources["city" + currentcityid].rec4[0] -= parseInt(techcost["tch" + tchtype][4]) * mult * 3600;
        seed.citystats["city" + currentcityid].gold[0] -= parseInt(techcost["tch" + tchtype][5]) * mult;
        var kntlv = 0;
        var knt = seed.knights["city" + currentcityid];
        if (knt) {
            knt = knt["knt" + seed.leaders["city" + currentcityid].intelligenceKnightId];
            if (knt) {
                kntlv = parseInt(knt.intelligence);
                kntlv = ((parseInt(knt.intelligenceBoostExpireUnixtime) - unixtime()) > 0) ? (kntlv * 1.25) : kntlv
            }
        }
        var time = parseInt(techcost["tch" + tchtype][7] * mult * (1 / (1 + 0.005 * kntlv)));
        var params = Object.clone(g_ajaxparams);
        params.cid = currentcityid;
        params.lv = tchlvl;
        params.tid = tchtype;
        new Ajax.Request(g_ajaxpath + "ajax/research.php" + g_ajaxsuffix, {
            method: "post",
            parameters: params,
            onSuccess: function (transport) {
                var rslt = eval("(" + transport.responseText + ")");
                if (rslt.ok) {
                    seed.queue_tch["city" + currentcityid].push([tchtype, tchlvl, unixtime(), unixtime() + time, 0, time]);
                    var helpstr = "no";
                    if (gethelp == 1) {
                        helpstr = "yes";
                        tch_gethelp(tchtype)
                    }
                    queue_changetab_building();
                    Modal.hideModalAll();
                    if (rslt.updateSeed) {
                        update_seed(rslt.updateSeed)
                    }
                    UserEngagement.popViralModalUEP(1)
                } else {
                    Modal.showAlert(printLocalError((rslt.error_code || null), (rslt.msg || null), (rslt.feedback || null)))
                }
            },
            onFailure: function () {}
        })
    }
}
function tch_gethelp(b) {
    Modal.hideModalAll();
    var c = parseInt(seed.tech["tch" + b]) + 1;
    var a = new Array();
    a.push(["REPLACE_TeChNaMe", techcost["tch" + b][0]]);
    a.push(["REPLACE_LeVeLiD", c]);
    a.push(["REPLACE_AsSeTiD", b]);
    var d = function (e, f) {
            continuation_107(e, f);
            if (!e) {
                var g = cm.SpeedUpType.research;
                cm.ClientSideCookieManager.setCookie(g, false)
            }
        };
    common_postToProfile("107", Object.cloneFeed(template_data_107), Object.cloneFeed(actionlink_data_107), d, a)
}
var g_ajaxpath = "";
var g_ajaxsuffix = "";

function build(c, a, d, f) {
    if (parseInt(a) == 9 || (parseInt(c) === 1 && parseInt(a) == 10) || (parseInt(c) === 2 && parseInt(a) == 10) || (parseInt(c) === 3 && parseInt(a) == 10) || (parseInt(c) === 4 && parseInt(a) == 10) || (parseInt(c) === 8 && parseInt(a) == 10) || (parseInt(c) === 9 && parseInt(a) == 10) || (parseInt(c) === 19 && parseInt(a) == 10) || (parseInt(c) === 12 && parseInt(a) == 10) || (parseInt(c) === 11 && parseInt(a) == 10) || (parseInt(c) === 18 && parseInt(a) == 10)) {
        var e = new Array(),
            b = parseInt(a) + 1;
        e.push("<div id='modal_lv10'>");
        e.push("<div class='lv10 clearfix'>");
        e.push("<img src='");
        e.push(stimgUrl);
        e.push("img/items/70/401.jpg'/>");
        e.push("<div class='info'><div class='ttl'>" + g_js_strings.commonstr.youneed + ": ");
        e.push(itemlist.i401.name);
        e.push(" to get to Level " + b + ".</div><div class='own'>" + g_js_strings.commonstr.youown + ": ");
        if (seed.items.i401 > 0) {
            e.push(seed.items.i401)
        } else {
            e.push(0)
        }
        e.push("</div></div>");
        e.push("</div>");
        e.push("<div class='btns clearfix'>");
        if (seed.items.i401 > 0) {
            if (!f) {
                f = false
            }
            e.push("<a  class='button20' onclick='buildaction(" + c + "," + a + "," + d + "," + f + ",1);return false;'><span>" + g_js_strings.commonstr.apply + "</span></a>")
        } else {
            e.push("<a  class='button20' onclick='Modal.hideModalAll();cm.ShopView.openShop();return false;'><span>" + g_js_strings.commonstr.getmore + "</span></a>")
        }
        e.push("<a  class='cancel' onclick='Modal.hideModal();return false;'>" + g_js_strings.commonstr.cancel + "</a>");
        e.push("</div></div>");
        Modal.showModal(400, 400, 130, 130, "Level " + b, e.join(""))
    } else {
        if (parseInt(c) === 0 && parseInt(a) == 10) {
            var e = new Array();
            e.push("<div id='modal_lv10'>");
            e.push("<div class='lv10 clearfix'>");
            e.push("<img src='");
            e.push(stimgUrl);
            e.push("img/items/70/402.jpg'/>");
            e.push("<div class='info'><div class='ttl'>" + g_js_strings.commonstr.youneed + ": ");
            e.push(itemlist.i402.name);
            e.push(" to get to Level 11.</div><div class='own'>" + g_js_strings.commonstr.youown + ": ");
            if (seed.items.i402 > 0) {
                e.push(seed.items.i402)
            } else {
                e.push(0)
            }
            e.push("</div></div>");
            e.push("</div>");
            e.push("<div class='btns clearfix'>");
            if (seed.items.i402 > 0) {
                if (!f) {
                    f = false
                }
                e.push("<a  class='button20' onclick='buildaction(" + c + "," + a + "," + d + "," + f + ",1);return false;'><span>" + g_js_strings.commonstr.apply + "</span></a>")
            } else {
                e.push("<a  class='button20' onclick='Modal.hideModalAll();cm.ShopView.openShop();return false;'><span>" + g_js_strings.commonstr.getmore + "</span></a>")
            }
            e.push("<a  class='cancel' onclick='Modal.hideModal();return false;'>" + g_js_strings.commonstr.cancel + "</a>");
            e.push("</div></div>");
            Modal.showModal(400, 400, 130, 130, "Level 11", e.join(""))
        } else {
            buildaction(c, a, d, f)
        }
    }
}
function build_divine() {
    if (seed.items.i401 > 0) {
        seed.items.i401 = parseInt(seed.items.i401) - 1;
        ksoItems[401].subtract();
        return true
    } else {
        return false
    }
}
function buildaction(bdgid, curlvl, citpos, gethelp, divineFlag) {
    var mult = Math.pow(2, curlvl);
    var chk = checkreq("bdg", bdgid, curlvl)[3];
    var invalid = false;
    for (var i = 0; i < chk.length; i++) {
        if (chk[i] == 0) {
            invalid = true;
            break
        }
    }
    if (seed.queue_con["city" + currentcityid].length > 0) {
        invalid = true
    }
    if (invalid) {
        Modal.showAlert(g_js_strings.buildaction.cannotbuild);
        return false
    } else {
        var pollv = 0;
        var knt = seed.knights["city" + currentcityid];
        if (knt) {
            knt = knt["knt" + seed.leaders["city" + currentcityid].politicsKnightId];
            if (knt) {
                pollv = parseInt(knt.politics)
            }
        }
        var time = buildingcost["bdg" + bdgid][7] * mult;
        if (parseInt(bdgid) < 6 && parseInt(bdgid) > 0 && mult == 1) {
            time = 15
        }
        time = time / (1 + 0.005 * pollv + 0.1 * parseInt(seed.tech.tch16));
        if (time % 1 > 0) {
            time = parseInt(time)
        }
        modal_build_waiting_state();
        var params = Object.clone(g_ajaxparams);
        params.cid = currentcityid;
        params.bid = "";
        params.pos = citpos;
        params.lv = curlvl + 1;
        if (params.lv > 1) {
            params.bid = seed.buildings["city" + currentcityid]["pos" + citpos][3]
        }
        params.type = bdgid;
        var profiler = new cm.Profiler("ResponseTime", "construct.php");
        params.permission = jQuery("#modal_lv10").length > 0 ? 1 : 0;
        ajax.Request(g_ajaxpath + "ajax/construct.php" + g_ajaxsuffix, {
            method: "post",
            parameters: params,
            onSuccess: function (transport) {
                profiler.stop();
                var rslt = eval("(" + transport.responseText + ")");
                if (rslt.ok) {
                    modal_build_show_state();
                    seed.resources["city" + currentcityid].rec1[0] -= parseInt(buildingcost["bdg" + bdgid][1]) * mult * 3600;
                    seed.resources["city" + currentcityid].rec2[0] -= parseInt(buildingcost["bdg" + bdgid][2]) * mult * 3600;
                    seed.resources["city" + currentcityid].rec3[0] -= parseInt(buildingcost["bdg" + bdgid][3]) * mult * 3600;
                    seed.resources["city" + currentcityid].rec4[0] -= parseInt(buildingcost["bdg" + bdgid][4]) * mult * 3600;
                    seed.citystats["city" + currentcityid].gold[0] -= parseInt(buildingcost["bdg" + bdgid][5]) * mult;
                    seed.queue_con["city" + currentcityid].push([bdgid, curlvl + 1, parseInt(rslt.buildingId), unixtime(), unixtime() + time, 0, time, parseInt(citpos)]);
                    if (curlvl == 0) {
                        seed.buildings["city" + currentcityid]["pos" + citpos] = [bdgid, 0, citpos, rslt.buildingId]
                    }
                    var helpstr = "no";
                    if (divineFlag && parseInt(curlvl) === 10 && parseInt(bdgid) === 0 && seed.items.i402 > 0) {
                        seed.items.i402 = parseInt(seed.items.i402) - 1;
                        ksoItems[402].subtract()
                    } else {
                        if (divineFlag && seed.items.i401 > 0) {
                            seed.items.i401 = parseInt(seed.items.i401) - 1;
                            ksoItems[401].subtract()
                        }
                    }
                    Modal.hideModalAll();
                    update_bdg();
                    queue_changetab_building();
                    if (cm.TutorialManager.inTutorialMode()) {
                        cm.TutorialEventDispatcher.dispatchTutorialEvent("complete", "CLICK_BUILD_BUTTON_SAWMILL");
                        cm.TutorialEventDispatcher.dispatchTutorialEvent("complete", "CLICK_BUILD_BUTTON_COTTAGE")
                    } else {
                        if (params.pos == 0 && params.lv == 2) {
                            var castleLvl2 = false;
                            var citykeys = Object.keys(seed.buildings);
                            for (var i = 0; i < citykeys.length; i++) {
                                if (parseInt(seed.buildings[citykeys[i]].pos0[1]) >= 2) {
                                    castleLvl2 = true
                                }
                            }
                            if (!castleLvl2) {
                                pop_castle_two_modal()
                            }
                        }
                    }
                    if (rslt.updateSeed) {
                        update_seed(rslt.updateSeed)
                    }
                    if (gethelp) {
                        build_gethelp(rslt.buildingId);
                        helpstr = "yes"
                    }
                } else {
                    if (parseInt(seed.tutorial.t1) == 15) {
                        Modal.hideModalAll();
                        seed.tutorial.t1 = 18;
                        tutorialCheck(18);
                        return false
                    } else {
                        if (parseInt(seed.tutorial.t1) == 21) {
                            Modal.hideModalAll();
                            tutorialClear();
                            return false
                        }
                    }
                    modal_build_show_state();
                    Modal.showAlert(printLocalError((rslt.error_code || null), (rslt.msg || null), (rslt.feedback || null)))
                }
                UserEngagement.popViralModalUEP()
            },
            onFailure: function () {
                profiler.stop();
                if (parseInt(seed.tutorial.t1) == 15) {
                    Modal.hideModalAll();
                    seed.tutorial.t1 = 18;
                    tutorialCheck(18);
                    return false
                } else {
                    if (parseInt(seed.tutorial.t1) == 21) {
                        Modal.hideModalAll();
                        tutorialClear();
                        return false
                    }
                }
            }
        })
    }
}
function build_gethelp(f) {
    var a = qlist = seed.queue_con["city" + currentcityid];
    var e = 0;
    var d = 0;
    for (var c = 0; c < a.length; c++) {
        if (parseInt(a[c][2]) == parseInt(f)) {
            e = parseInt(a[c][0]);
            d = parseInt(a[c][1]);
            break
        }
    }
    var b = new Array();
    b.push(["REPLACE_LeVeLbUiLdInG", d]);
    b.push(["REPLACE_BuIlDiNgNaMe", buildingcost["bdg" + e][0]]);
    b.push(["REPLACE_LeVeLiD", d]);
    b.push(["REPLACE_AsSeTiD", f]);
    var g = function (h, i) {
            continuation_95(h, i);
            if (!h) {
                var j = d > 1 ? cm.SpeedUpType.upgrade : cm.SpeedUpType.build;
                cm.ClientSideCookieManager.setCookie(j, false)
            }
        };
    common_postToProfile("95", Object.cloneFeed(template_data_95), Object.cloneFeed(actionlink_data_95), g, b)
}
function deleteaction(bdgid, curlvl, citpos, gethelp) {
    var mult = 0;
    var pollv = 0;
    var time = 0;
    var knt = seed.knights["city" + currentcityid];
    if (knt) {
        knt = knt["knt" + seed.leaders["city" + currentcityid].politicsKnightId];
        if (knt) {
            pollv = parseInt(knt.politics)
        }
    }
    if (curlvl > 1) {
        mult = Math.pow(2, curlvl - 1);
        time = buildingcost["bdg" + bdgid][7] * mult
    }
    if (parseInt(bdgid) < 6 && parseInt(bdgid) > 0 && mult == 1) {
        time = 15
    }
    time = time / (1 + 0.005 * pollv + 0.1 * parseInt(seed.tech.tch16));
    if (time % 1 > 0) {
        time = parseInt(time)
    }
    var params = Object.clone(g_ajaxparams);
    params.cid = currentcityid;
    params.bid = "";
    params.pos = citpos;
    params.lv = curlvl - 1;
    if (curlvl > 0) {
        params.bid = seed.buildings["city" + currentcityid]["pos" + citpos][3]
    }
    params.type = bdgid;
    new Ajax.Request(g_ajaxpath + "ajax/destruct.php" + g_ajaxsuffix, {
        method: "post",
        parameters: params,
        onSuccess: function (transport) {
            var rslt = eval("(" + transport.responseText + ")");
            if (rslt.ok) {
                time = rslt.timeNeeded;
                seed.queue_con["city" + currentcityid].push([bdgid, 0, parseInt(rslt.buildingId), unixtime(), unixtime() + time, 0, time, parseInt(citpos)]);
                Modal.hideModalAll();
                update_bdg();
                queue_changetab_building();
                if (rslt.updateSeed) {
                    update_seed(rslt.updateSeed)
                }
            } else {
                if (rslt.tracker) {
                    Modal.showAlert(printLocalError((rslt.error_code || null), (rslt.msg || null), (rslt.feedback || null)))
                } else {
                    var msg = (rslt.msg) ? rslt.msg : g_js_strings.deleteaction.somethingwentwrong;
                    Modal.showAlert(msg)
                }
            }
        },
        onFailure: function () {}
    })
}
function update_citylist() {
    var h = Array();
    var g = 0;
    var e = {};
    if (!Object.isArray(seed.queue_atkinc) && Object.keys(seed.queue_atkinc) && Object.keys(seed.queue_atkinc).length > 0) {
        var m = Object.keys(seed.queue_atkinc);
        var a, n, b;
        for (var f = 0; f < m.length; f++) {
            marchId = m[f];
            a = seed.queue_atkinc[m[f]];
            n = a.marchType;
            var b = a.score != undefined;
            if (a.mid && (a.fromPlayerId != tvuid) && b) {
                if (e[a.toCityId]) {
                    e[a.toCityId]++
                } else {
                    e[a.toCityId] = 1
                }
            }
        }
    }
    for (var f = 0; f < seed.cities.length; f++, g++) {
        var d = parseInt(seed.cities[f][0]);
        var l = "";
        if (e[d]) {
            l = "city_attack"
        } else {
            if (d == currentcityid) {
                l = "city_selected"
            } else {
                l = "city_unselected"
            }
        }
        h.push('<a id="citysel_' + (f + 1) + '" onmouseover="showCityTooltip(this,event,\'mod_maparea\');return false;" onmouseout="removeTooltip();return false;" onclick="citysel_click(this);return false;" name="' + d + '" class="city ' + l + '"><span>' + roman[f] + "</span></a>")
    }
    if (seed.cities.length < cm.cities.max()) {
        h.push('<a onclick="modal_addcityhelp();return false;" onmouseout="removeTooltip();return false;" onmouseover="showAddCityTooltip(this,event,\'mod_maparea\');return false;" class="city_new"><span class="pluscity">+</span></a>');
        g++
    }
    for (var c = g; c < 8; c++) {
        h.push('<div class="city_locked"></div>')
    }
    $("mod_citylist").innerHTML = h.join("")
}
function update_queue() {
    var U = false;
    var y = false;
    var D = $("queue_building").visible();
    if (D) {
        var C = new Array()
    }
    var M = seed.queue_con["city" + currentcityid];
    var I = false;
    var K = -1;
    for (var T = 0; T < M.length; T++) {
        var A = unixtime();
        var c = parseInt(M[T][4]) - A;
        if (c > 0) {
            cm.speedUpModalTimer.update("bdg", cm.log.convertToHMS(c, false), c);
            cm.guardianModalModel.update(c);
            U = true;
            y = true;
            if (D) {
                var o = cm.guardianModalModel.upgrading() ? fUp(cm.guardianModalModel.getType()) + " Guardian" : buildingcost["bdg" + M[T][0]][0];
                var f = M[T][5] / M[T][6] + ((A - M[T][3]) / (M[T][4] - M[T][3])) * ((M[T][6] - M[T][5]) / M[T][6]);
                var J = parseInt(270 * f);
                C.push('<div class="queue_item">');
                C.push('<div class="info"><div class="stat"><span class="item">');
                C.push(o);
                var x = o;
                if (parseInt(M[T][1]) > 0) {
                    C.push(" (" + g_js_strings.commonstr.lv + M[T][1]);
                    C.push(")");
                    x += " (" + g_js_strings.commonstr.lv + M[T][1] + ")"
                } else {
                    C.push(" (" + g_js_strings.commonstr.destroy + ")");
                    x += " (" + g_js_strings.commonstr.destroy + ")"
                }
                C.push('</span><span class="time">');
                C.push(timestr(c));
                C.push('</span><div class="speedup"><a class="inlineButton red14" name="' + M[T][2] + '" onclick="cm.BuildingSpeedupController.queueClick(event, &quot;' + x + '&quot;);">');
                C.push("<span>" + g_js_strings.commonstr.speedup + '</span></a></div></div><div class="bar" style="width:');
                C.push(J);
                C.push('px;">&nbsp;</div></div>');
                C.push('<div class="stats">');
                C.push('<span class="friends">' + g_js_strings.update_queue.frhelp + ": <span>");
                var r = seed.updateHelpConstruct["city" + currentcityid];
                if (r) {
                    var z = seed.updateHelpConstruct["city" + currentcityid]["b" + M[T][2]];
                    if (z && parseInt(z.n) > 0) {
                        C.push(z.n)
                    } else {
                        C.push("0")
                    }
                } else {
                    C.push("0")
                }
                C.push("</span></span>");
                C.push('<span class="allis">' + g_js_strings.update_queue.allihelp + ": <span>");
                if (r) {
                    var z = seed.updateHelpConstruct["city" + currentcityid]["b" + M[T][2]];
                    if (z && parseInt(z.a) > 0) {
                        C.push(z.a)
                    } else {
                        C.push("0")
                    }
                } else {
                    C.push("0")
                }
                C.push("</span></span>");
                C.push("</div>");
                C.push("</div>");
                if ($("modal_build_timeremaining")) {
                    $("modal_build_timeremaining").innerHTML = timestr(c)
                }
            }
        } else {
            cm.speedUpModalTimer.endSpeedUpModal("bdg");
            var t = parseInt(M[T][1]);
            var b = M[T][7];
            if (t == 0) {
                K = parseInt(M[T][0]);
                bdgOriginalLvl = parseInt(seed.buildings["city" + currentcityid]["pos" + b][1]);
                if (!seed.buildings["city" + currentcityid]["pos" + b]) {
                    return false
                }
                bdgType = parseInt(seed.buildings["city" + currentcityid]["pos" + b][0]);
                removeCityFromView(b);
                if (bdgOriginalLvl > 1) {
                    mult = Math.pow(2, bdgOriginalLvl - 2);
                    seed.resources["city" + currentcityid].rec1[0] += parseInt(buildingcost["bdg" + bdgType][1]) * mult * 3600;
                    seed.resources["city" + currentcityid].rec2[0] += parseInt(buildingcost["bdg" + bdgType][2]) * mult * 3600;
                    seed.resources["city" + currentcityid].rec3[0] += parseInt(buildingcost["bdg" + bdgType][3]) * mult * 3600;
                    seed.resources["city" + currentcityid].rec4[0] += parseInt(buildingcost["bdg" + bdgType][4]) * mult * 3600;
                    seed.citystats["city" + currentcityid].gold[0] += parseInt(buildingcost["bdg" + bdgType][5]) * mult
                }
                if (bdgType > 0 && bdgType < 5) {
                    var u = parseInt(seed.citystats["city" + currentcityid]["pop"][3]);
                    for (k = bdgOriginalLvl; k > 0; k--) {
                        u -= k * 10
                    }
                    seed.citystats["city" + currentcityid]["pop"][3] = u
                } else {
                    if (bdgType == 5) {
                        var L = seed.citystats["city" + currentcityid]["pop"][1];
                        var B = seed.citystats["city" + currentcityid]["pop"][0];
                        for (k = bdgOriginalLvl; k > 0; k--) {
                            L -= k * 100
                        }
                        if (L < 51) {
                            L = 50
                        }
                        if (B > L) {
                            seed.citystats["city" + currentcityid]["pop"][0] = L
                        }
                        seed.citystats["city" + currentcityid]["pop"][1] = L
                    } else {
                        if (bdgType == cm.BUILDING_TYPES.WATCH_TOWER) {
                            var E = cm.WatchTowerList.getCityWatchTower(currentcityid);
                            if (E) {
                                E.demolish()
                            }
                        }
                    }
                }
                seed.queue_con["city" + currentcityid].splice(T, 1);
                T--;
                I = true;
                var n = parseInt(seed.player.might);
                for (var S = bdgOriginalLvl - 1; S > -1; S--) {
                    n -= buildingmight[parseInt(K)][S]
                }
                seed.player.might = n;
                update_might();
                update_pop()
            } else {
                seed.con_hlp["b" + M[T][2]] = 0;
                if (!seed.buildings["city" + currentcityid]["pos" + b]) {
                    return false
                }
                seed.buildings["city" + currentcityid]["pos" + b] = [M[T][0], M[T][1], b, seed.buildings["city" + currentcityid]["pos" + b][3]];
                K = parseInt(M[T][0]);
                seed.queue_con["city" + currentcityid].splice(T, 1);
                T--;
                I = true;
                if (buildingmight[parseInt(K)]) {
                    seed.player.might = parseInt(seed.player.might) + parseInt(buildingmight[parseInt(K)][t - 1])
                }
                update_might();
                if (K > 0 && K < 5) {
                    seed.citystats["city" + currentcityid]["pop"][3] = parseInt(seed.citystats["city" + currentcityid]["pop"][3]) + t * 10
                } else {
                    if (K == 5) {
                        var e = parseInt(seed.citystats["city" + currentcityid]["pop"][1]);
                        if (e < 51) {
                            seed.citystats["city" + currentcityid]["pop"][1] = t * 100;
                            seed.citystats["city" + currentcityid]["pop"][0] = 50
                        } else {
                            seed.citystats["city" + currentcityid]["pop"][1] = parseInt(seed.citystats["city" + currentcityid]["pop"][1]) + t * 100
                        }
                        seed.citystats["city" + currentcityid]["pop"][0] = parseInt(seed.citystats["city" + currentcityid]["pop"][0]) + t * 50;
                        update_pop()
                    } else {
                        if (K == cm.BUILDING_TYPES.WATCH_TOWER) {
                            var E = cm.WatchTowerList.getCityWatchTower(currentcityid);
                            if (E) {
                                E.setLevel(t)
                            } else {
                                buildingId = seed.buildings["city" + currentcityid]["pos" + b][3];
                                watchTowerInfo = {
                                    buildingId: buildingId,
                                    cityId: currentcityid.toString(),
                                    slot: b,
                                    level: t
                                };
                                var E = new cm.WatchTower(watchTowerInfo);
                                cm.WatchTowerList.add(E)
                            }
                        }
                    }
                }
            }
        }
    }
    if (K > -1) {
        update_bdg();
        fields_generate();
        cm.TutorialEventDispatcher.dispatchTutorialEvent("complete", "WATCH_SAWMILL_PROGRESS");
        var s = quests_validquests();
        quest_allcompleted(s.valid);
        modal_quests_generate(s.valid, s.recommended, 0)
    }
    var g = seed.queue_tch["city" + currentcityid];
    for (var T = 0; T < g.length; T++) {
        var A = unixtime();
        var c = parseInt(g[T][3]) - A;
        if (c > 0) {
            cm.speedUpModalTimer.update("tch", cm.log.convertToHMS(c, false), c);
            U = true;
            y = true;
            if (D) {
                var f = parseInt(g[T][4]) / parseInt(g[T][5]) + ((A - parseInt(g[T][2])) / (parseInt(g[T][3]) - parseInt(g[T][2]))) * ((parseInt(g[T][5]) - parseInt(g[T][4])) / parseInt(g[T][5]));
                var J = parseInt(270 * f);
                C.push('<div class="queue_item">');
                C.push('<div class="info"><div class="stat"><span class="item">');
                C.push(techcost["tch" + g[T][0]][0] + " (" + g_js_strings.commonstr.lv + g[T][1]);
                C.push(')</span><span class="time">');
                C.push(timestr(c));
                var O = techcost["tch" + g[T][0]][0] + " (" + g_js_strings.commonstr.lv + g[T][1] + ")";
                C.push('</span><div class="speedup"><a class="inlineButton red14" name="' + g[T][0] + '" onclick=\'cm.ResearchSpeedupController.queueClick(event, "' + O + "\");'>");
                C.push("<span>" + g_js_strings.commonstr.speedup + '</span></a></div></div><div class="bar" style="width:');
                C.push(J);
                C.push('px;">&nbsp;</div></div>');
                C.push('<div class="stats">');
                C.push('<span class="friends">' + g_js_strings.update_queue.frhelp + ": <span>");
                if (seed.updateHelpResearch["city" + currentcityid]) {
                    if (parseInt(seed.updateHelpResearch["city" + currentcityid]["t" + g[T][0]].n) > 0) {
                        C.push(seed.updateHelpResearch["city" + currentcityid]["t" + g[T][0]].n)
                    } else {
                        C.push("0")
                    }
                } else {
                    C.push("0")
                }
                C.push("</span></span>");
                C.push('<span class="allis">' + g_js_strings.update_queue.allihelp + ": <span>");
                if (seed.updateHelpResearch["city" + currentcityid]) {
                    if (parseInt(seed.updateHelpResearch["city" + currentcityid]["t" + g[T][0]].a) > 0) {
                        C.push(seed.updateHelpResearch["city" + currentcityid]["t" + g[T][0]].a)
                    } else {
                        C.push("0")
                    }
                } else {
                    C.push("0")
                }
                C.push("</span></span>");
                C.push("</div>");
                C.push("</div>");
                if ($("alchemymodal")) {
                    $("alchemymodal_tch" + g[T][0] + "_queue_timeleft").innerHTML = timestr(c)
                }
            }
        } else {
            seed.tech["tch" + g[T][0]] = parseInt(g[T][1]);
            seed.tch_hlp["t" + g[T][0]] = 0;
            seed.queue_tch["city" + currentcityid].splice(T, 1);
            if ($("alchemymodal")) {
                modal_openAlchemy()
            }
            cm.speedUpModalTimer.endSpeedUpModal("tch")
        }
    }
    var R = $("queue_train").visible();
    var P = false;
    if (R) {
        var N = new Array()
    }
    var d = -1;
    var M = seed.queue_unt["city" + currentcityid];
    var W = Math.min(M.length, 1);
    for (var T = 0; T < Math.min(M.length, 1); T++) {
        var A = unixtime();
        var c = parseInt(M[T][3]) - A;
        if (c > 0) {
            cm.speedUpModalTimer.update("trn", cm.log.convertToHMS(c, false), c);
            U = true;
            P = true;
            if (R) {
                var f = parseInt(M[T][4]) / parseInt(M[T][5]) + ((A - parseInt(M[T][2])) / (parseInt(M[T][3]) - parseInt(M[T][2]))) * ((parseInt(M[T][5]) - parseInt(M[T][4])) / parseInt(M[T][5]));
                var J = parseInt(270 * f);
                N.push('<div class="queue_item">');
                N.push('<div class="info"><div class="stat"><span class="item">');
                var V = unitcost["unt" + M[T][0]][0];
                N.push(V);
                N.push('</span><span class="time">');
                N.push(timestr(c));
                N.push("</span>");
                N.push('<div class="speedup"><a class="inlineButton red14" name="" onclick="modal_speedup( \'trn\', 2, 2, \'' + V + "', 0 );\">");
                N.push("<span>" + g_js_strings.commonstr.speedup + "</span></a></div>");
                N.push('</div><div class="bar" style="width:');
                N.push(J);
                N.push('px;">&nbsp;</div></div>');
                N.push('<div class="stats">' + g_js_strings.commonstr.amt + ": ");
                N.push(M[T][1]);
                if (seed.queue_unt["city" + currentcityid].length > 1) {
                    N.push('<span class="troop_queue">' + g_js_strings.update_queue.troopqueue + ": " + (seed.queue_unt["city" + currentcityid].length - 1) + "</span>")
                }
                N.push("</div>");
                N.push("</div>")
            }
        } else {
            cm.speedUpModalTimer.endSpeedUpModal("trn");
            seed.units["city" + currentcityid]["unt" + M[T][0]] = parseInt(seed.units["city" + currentcityid]["unt" + M[T][0]]) + parseInt(M[T][1]);
            if ((T + 1) < M.length) {
                var l = A - parseInt(M[T + 1][2]);
                M[T + 1][2] = A;
                M[T + 1][3] = parseInt(M[T + 1][3]) + l
            }
            seed.queue_unt["city" + currentcityid].splice(T, 1);
            T--;
            I = true
        }
    }
    var M = seed.queue_fort["city" + currentcityid];
    for (var T = 0; T < Math.min(M.length, 1); T++) {
        var A = unixtime();
        var c = parseInt(M[T][3]) - A;
        if (c > 0) {
            cm.speedUpModalTimer.update("frt", cm.log.convertToHMS(c, false), c);
            U = true;
            P = true;
            if (R) {
                var f = parseInt(M[T][4]) / parseInt(M[T][5]) + ((A - parseInt(M[T][2])) / (parseInt(M[T][3]) - parseInt(M[T][2]))) * ((parseInt(M[T][5]) - parseInt(M[T][4])) / parseInt(M[T][5]));
                var J = parseInt(270 * f);
                N.push('<div class="queue_item">');
                N.push('<div class="info"><div class="stat"><span class="item">');
                N.push(fortcost["frt" + M[T][0]][0]);
                N.push('</span><span class="time">');
                N.push(timestr(c));
                N.push("</span>");
                N.push('<div class="speedup"><a class="inlineButton red14" onclick="modal_speedup(');
                N.push(["'frt'", M[T][0], 0, "'" + g_js_strings.commonstr.fortification + "'", M[T][2]].join(","));
                N.push(');return false;"><span>' + g_js_strings.commonstr.speedup + "</span></a></div>");
                N.push('</div><div class="bar" style="width:');
                N.push(J);
                N.push('px;">&nbsp;</div>');
                N.push('</div><div class="stats">' + g_js_strings.commonstr.amt + ": ");
                N.push(M[T][1]);
                N.push("</div>");
                N.push("</div>")
            }
        } else {
            cm.speedUpModalTimer.endSpeedUpModal("frt");
            seed.fortifications["city" + currentcityid]["fort" + M[T][0]] = parseInt(seed.fortifications["city" + currentcityid]["fort" + M[T][0]]) + parseInt(M[T][1]);
            cityinfo_defenses();
            if ((T + 1) < M.length) {
                var l = A - parseInt(M[T + 1][2]);
                M[T + 1][2] = A;
                M[T + 1][3] = parseInt(M[T + 1][3]) + l
            }
            seed.queue_fort["city" + currentcityid].splice(T, 1);
            T--;
            I = true
        }
    }
    var Q = seed.queue_mkt["city" + currentcityid];
    var F = $("queue_market").visible();
    var v = false;
    if (F) {
        var H = new Array()
    }
    var w = -1;
    var Q = seed.queue_mkt["city" + currentcityid];
    if (!Object.isArray(Q)) {
        var G = Object.keys(Q);
        for (var T = 0; T < G.length; T++) {
            var A = unixtime();
            var p = Q[G[T]];
            for (var S = 0; S < p.length; S++) {
                var c = parseInt(p[S].eventUnixTime) - A;
                if (c > 0) {
                    cm.speedUpModalTimer.update("market", cm.log.convertToHMS(c, false), c);
                    U = true;
                    v = true;
                    if (F) {
                        switch (parseInt(p[S].resourceType)) {
                        case 1:
                            var a = resourceinfo.rec1;
                            break;
                        case 2:
                            var a = resourceinfo.rec2;
                            break;
                        case 3:
                            var a = resourceinfo.rec3;
                            break;
                        case 4:
                            var a = resourceinfo.rec4;
                            break;
                        default:
                        }
                        var f = 1 - (c / (60 * 30));
                        var J = parseInt(270 * f);
                        var h = (p[S].unitPricex1000) / 1000;
                        H.push('<div class="queue_item">');
                        H.push('<div class="info"><div class="stat"><span class="item">');
                        H.push(g_js_strings.update_queue.akbatc.replace("%1$s", p[S].quantityK).replace("%2$s", a).replace("%3$s", h));
                        H.push('</span><span class="time">');
                        H.push(timestr(c));
                        H.push("</span>");
                        H.push('<div class="speedup"><a class="inlineButton red14" onclick="modal_speedup_market(');
                        H.push(p[S].eventUnixTime + "," + S + "," + p[S].marketDeliveryId);
                        H.push(');return false;"><span>' + g_js_strings.commonstr.speedup + "</span></a></div>");
                        H.push('</div><div class="bar" style="width:');
                        H.push(J);
                        H.push('px;">&nbsp;</div></div>');
                        H.push("</div>")
                    }
                } else {
                    cm.speedUpModalTimer.endSpeedUpModal("market");
                    seed.queue_mkt["city" + currentcityid][G[T]].splice(S, 1);
                    if (seed.queue_mkt["city" + currentcityid][G[T]].length < 1) {
                        delete seed.queue_mkt["city" + currentcityid][G[T]]
                    }
                    if (Object.keys(seed.queue_mkt["city" + currentcityid]).length < 1) {
                        seed.queue_mkt["city" + currentcityid] = []
                    }
                }
            }
        }
    }
    if (I) {}
    if (D) {
        $("queue_building").innerHTML = C.join("")
    } else {
        if (R) {
            $("queue_train").innerHTML = N.join("")
        } else {
            if (F) {
                $("queue_market").innerHTML = H.join("")
            }
        }
    }
    if (!y) {
        $("queue_building").hide()
    }
    if (!P) {
        $("queue_train").hide()
    }
    if (!v) {
        $("queue_market").hide()
    }
    if (y || P || v) {
        $("queue_head_toggle").show();
        if ($("queue_list").visible()) {
            $("queue_head_toggle").removeClassName("expand_button");
            $("queue_head_toggle").addClassName("collapse_button")
        } else {
            $("queue_head_toggle").removeClassName("collapse_button");
            $("queue_head_toggle").addClassName("expand_button")
        }
    } else {
        $("queue_head_toggle").hide();
        $("queue_head_toggle").removeClassName("collapse_button");
        $("queue_head_toggle").addClassName("expand_button")
    }
}
var cm = cm || {};
cm.view = function (a) {
    return {
        setBackground: function () {
            var b = "city06_bg_lvl1";
            var c = [1, 1, 1, 3, 3, 5, 5, 7, 7, 7, 10, 10];
            a.each(c, function (d, e) {
                if (a(".bldg_0_" + d).length > 0) {
                    b = "city06_bg_lvl" + e
                }
            });
            a(".cityNum6").addClass(b)
        },
        addBlank: function () {
            a("#citymap").append("<div class='mapfill_2'>&nbsp;</div>")
        }
    }
}(jQuery);
var maxbdglvl = new Object();

function update_bdg() {
    var l = seed.buildings["city" + currentcityid];
    maxbdglvl = new Object();
    var j = parseInt(cm.cities.selectedIndex());
    var d = "cityNum" + j;
    $("citymap").className = (j == 6 ? "" : "citymap ") + d + " city_" + l.pos0[1];
    if (seed.courtItems) {
        if (seed.courtItems.indexOf("831") >= 0) {
            $("citymap").addClassName("red")
        } else {
            if (seed.courtItems.indexOf("832") >= 0) {
                $("citymap").addClassName("blue")
            } else {
                if (seed.courtItems.indexOf("833") >= 0) {
                    $("citymap").addClassName("purple")
                } else {
                    if (seed.courtItems.indexOf("834") >= 0) {
                        $("citymap").addClassName("green")
                    } else {
                        if (seed.courtItems.indexOf("835") >= 0) {
                            $("citymap").addClassName("yellow")
                        } else {
                            if (seed.courtItems.indexOf("891") >= 0) {
                                $("citymap").addClassName("halloween")
                            }
                        }
                    }
                }
            }
        }
    }
    if (cm.WatchTowerList) {
        var a = cm.WatchTowerList.getCityWatchTower(currentcityid);
        if (a) {
            if (cm.CurrentWatchTowerTimer && cm.CurrentWatchTowerTimer.isActive()) {
                try {
                    document.getElementById("slot_" + a.getSlot()).removeChild(cm.CurrentWatchTowerTimer.getHtmlElement())
                } catch (g) {}
            }
        }
    }
    var m = -1;
    for (var h = 0; h < 33; h++) {
        var q = l["pos" + h];
        if (q == null) {
            $("slot_" + h).className = "blank";
            $("slot_" + h).innerHTML = ""
        } else {
            var f = q[1];
            var o = q[0];
            if (parseInt(f) == 0) {
                f = 1
            }
            $("slot_" + h).className = "bldg_" + o + "_" + f;
            if (h == 0) {
                $("slot_" + h).innerHTML = "<span class='leveltag'>" + f + "</span><span class='statues'></span>"
            } else {
                $("slot_" + h).innerHTML = "<span class='leveltag'>" + f + "</span>"
            }
            maxbdglvl["b" + q[0]] = parseInt(q[1]);
            if (o == cm.BUILDING_TYPES.WATCH_TOWER) {
                m = h
            }
        }
        $("slot_" + h).setOpacity(1)
    }
    for (var h = 0; h < seed.queue_con["city" + currentcityid].length; h++) {
        var n = seed.queue_con["city" + currentcityid][h];
        var e = $("slot_" + n[7]);
        if (e != null) {
            var f = n[1];
            var c = n[2];
            e.innerHTML = "";
            e.addClassName("inprocess");
            var b = document.createElement("span");
            b.className = "backgroundContainer";
            b.innerHTML = "<span class='leveltag'>" + f + "</span><span class='currentlybuilding'></span>";
            e.appendChild(b);
            var p = document.createElement("span");
            p.className = "speedupButton";
            p.innerHTML = "<a class='inlineButton20Red' name='" + c + "' onclick='cm.BuildingSpeedupController.buildingClick(event)'><span>" + g_js_strings.commonstr.speedup + "</span></a>";
            e.appendChild(p)
        }
    }
    cm.view.setBackground();
    cm.view.addBlank();
    if (cm.WatchTowerList) {
        var a = cm.WatchTowerList.getCityWatchTower(currentcityid);
        if (a) {
            if (cm.CurrentWatchTowerTimer && cm.CurrentWatchTowerTimer.isActive()) {
                cm.CurrentWatchTowerTimer.show()
            }
        }
    }
}
function popgoldchg(g, b, a, e) {
    if ((e + a) > 100) {
        e--
    } else {
        if ((e + a) < 100) {
            e++
        }
    }
    var d = g;
    var h = parseInt(b * e / 100);
    var c = 0;
    if (g < h) {
        c = parseInt(((100 - a) * 0.0005) * h);
        d = Math.min(g + c, h)
    } else {
        if (g > h) {
            c = -parseInt((a * 0.0005) * g);
            d = Math.max(g + c, h)
        }
    }
    var f = parseInt(d * (a / 100));
    return [c, f]
}
function invite_friends_popup() {
    cm.invite.load(cm.InviteTypes.INVITE_TYPE_GENERAL);
    cm.invite.open()
}
function invite_friends_popup_knight() {
    top.location = knightinviteUrl
}
function init() {
    try {
        cm.MixPanelTracker.init();
        if (g_env == "prod" && g_track_loading == 1) {
            cm.MixPanelTracker.trackFunnel("Loading Flow 2", 1, "Init")
        }
    } catch (e) {}
    if (seed.playerSettings.s1 == "a") {
        Chat.chatType = 2
    }
    seed.prevtick = unixtime();
    currentcityid = seed.cities[0][0];
    cm.CitySwitch.setCurrentCity(currentcityid);
    cm.guardianCity.init();
    currentcityinfo = seed.cities[0];
    var d = new Array();
    citylist = new Object();
    for (var s = 0; s < seed.cities.length; s++) {
        var n = seed.cities[s][0];
        citylist["city" + n] = seed.prevtick;
        if (s == 0) {
            d.push('<a id="oldcitysel_1" class="sel city"></a>')
        } else {
            d.push('<a id="oldcitysel_' + (s + 1) + '" class="city"></a>')
        }
        seed.citystats["city" + n].pop[0] = parseInt(seed.citystats["city" + n].pop[0]);
        seed.citystats["city" + n].pop[1] = parseInt(seed.citystats["city" + n].pop[1]);
        seed.citystats["city" + n].pop[2] = parseInt(seed.citystats["city" + n].pop[2]);
        seed.citystats["city" + n].gold[0] = parseInt(seed.citystats["city" + n].gold[0]);
        seed.citystats["city" + n].gold[1] = parseInt(seed.citystats["city" + n].gold[1]);
        seed.newTradeReports = parseInt(seed.newTradeReports);
        for (var r = 1; r < 5; r++) {
            seed.resources["city" + n]["rec" + r][0] = parseInt(seed.resources["city" + n]["rec" + r][0]);
            seed.resources["city" + n]["rec" + r][1] = parseInt(seed.resources["city" + n]["rec" + r][1]);
            seed.resources["city" + n]["rec" + r][2] = parseInt(seed.resources["city" + n]["rec" + r][2]);
            seed.resources["city" + n]["rec" + r][3] = parseInt(seed.resources["city" + n]["rec" + r][3])
        }
        var l = seed.queue_con["city" + n];
        var w = Object.keys(seed.buildings["city" + n]);
        for (var p = 0; p < l.length; p++) {
            for (var r = 0; r < w.length; r++) {
                if (seed.buildings["city" + n][w[r]][3] == l[p][2]) {
                    l[p][7] = seed.buildings["city" + n][w[r]][2];
                    break
                }
            }
        }
    }
    if (Object.isArray(seed.items)) {
        if (seed.items.length == 0) {
            seed.items = new Object()
        }
    }
    var h = Object.keys(seed.tech);
    for (var s = 0; s < h.length; s++) {
        seed.tech[h[s]] = parseInt(seed.tech[h[s]])
    }
    g_reqtime = parseInt(g_reqtime);
    g_restime = parseInt(g_restime);
    g_timeoff = g_restime - parseInt((new Date()).getTime() / 1000);
    var c = seed.citystats["city" + currentcityid].pop[0];
    var g = seed.citystats["city" + currentcityid].pop[1];
    var b = seed.citystats["city" + currentcityid].pop[2];
    var v = popgoldchg(c, g, seed.citystats["city" + currentcityid].gold[1], b);
    update_pop();
    update_gold();
    $("stat_happy_num").innerHTML = b + "%";
    if (d.length < 3) {}
    $("maparea_citysel").innerHTML = d.join("");
    $("topnav_level").innerHTML = seed.player.title;
    cm.CitySwitch.init(currentcityid, "city");
    update_bdg();
    var t = quests_validquests();
    quest_allcompleted(t.valid);
    if (window.messages_update_count && typeof messages_update_count == "function") {
        messages_update_count()
    }
    update_knights();
    update_boosts();
    $("kocinitloading").remove();
    $("kochead").show();
    $("kocmain").show();
    setcamelottime();
    try {
        if (g_env == "prod" && g_track_loading == 1) {
            cm.MixPanelTracker.trackFunnel("Loading Flow 2", 2, "Show Main")
        }
    } catch (e) {}
    var f = parseInt(seed.tutorial.t1);
    var u = false;
    var o = false;
    $("main_engagement_tabs").show();
    var a = g_showNewTutorial ? cm.BLTutorialSteps : cm.MerlinTutorialSteps;
    if (f == 0) {
        tutorialAdvance(1, 10);
        cm.TutorialManager.init(a);
        cm.TutorialManager.startFromBeginning();
        o = true;
        cm.MixPanelTracker.track("fte_conv_founded_a_kingdom")
    } else {
        if (f == 10) {
            tutorialAdvance(1, 10);
            cm.TutorialManager.init(a);
            cm.TutorialManager.startFromBeginning();
            o = true
        } else {
            if (f < 8 && f > 0) {
                cm.BLTutorialSteps = cm.MerlinTutorialSteps = null;
                tutorialAdvance(1, 97)
            } else {
                if (f > 10 && f < 22) {
                    var m = confirm(g_js_strings.init.tutorialcont);
                    if (m) {
                        cm.TutorialManager.init(a);
                        cm.TutorialManager.startFromBeginning();
                        o = true
                    } else {
                        seed.tutorial.t1 = 99;
                        tutorialAdvance(1, 99);
                        tutorialClear();
                        Modal.hideModalAll();
                        cm.BLTutorialSteps = cm.MerlinTutorialSteps = null
                    }
                } else {
                    cm.BLTutorialSteps = cm.MerlinTutorialSteps = null
                }
            }
        }
    }
    update_might();
    directory_changetab(1);
    update_friendlist();
    if (!cm.TutorialManager.inTutorialMode()) {
        if (g_allianceWindow != "") {
            openAllianceWindow(g_allianceWindow);
            u = true
        } else {
            if (g_messageWindow != "") {
                openMessageWindow(g_messageWindow);
                u = true
            } else {
                if (g_popInviteType) {} else {
                    if (seed.platform.type == "kabam" && cm.WorldSettings.hasKeyValuePair("MWW_ON", "true")) {
                        cm.mww.startMMW(0);
                        u = true
                    } else {
                        if (mmbfreeplay == true) {
                            cm.mww.start(1);
                            u = true
                        }
                    }
                }
            }
        }
    }
    new PeriodicalExecuter(secondupdate, 1);
    new PeriodicalExecuter(statusupdate, 30);
    new PeriodicalExecuter(user_engagement_popup, 240);
    new PeriodicalExecuter(threeminupdate, 180);
    new PeriodicalExecuter(fullupdate, 360);
    Event.observe("mainbody", "click", function () {
        if (g_chatcount > 100) {
            g_chatcount = 100
        }
    });
    cm.log.l("tutorialFlag=" + o);
    if (!o) {
        jQuery(document).trigger("tutorialEnd");
        ProgressBar.initializeProgressBar(1, true, function () {
            cm.TownCrierFetcher.fetchAnnoucements()
        })
    }
    if (g_modal) {
        if (g_modal == 1) {
            HelpDesk.show()
        } else {
            if (g_modal == 2) {
                modal_getgems()
            }
        }
    }
    cm.IncomingAttackManager.init();
    createItems()
}
function createItems() {
    Object.keys(itemlist).each(function (b) {
        var a = Number(b.split("i")[1]);
        ksoItems[a] = new cm.ItemModel(a, itemlist["i" + a]);
        ksoItems[a].count = seed.items["i" + a] ? Number(seed.items["i" + a]) : 0
    });
    (seed.courtItems).each(function (b) {
        if (Number(b) != 0) {
            b = Number(b);
            var a = ksoItems[b];
            a.isEquipped = true
        }
    })
}
function ABTestFriendInviter() {
    var a = (parseInt(user_id) % 2 == 0);
    cm.log.l("ABTestFriendInviter()  user_id=" + user_id + "   evenUser=" + a);
    if (a) {
        cm.invite.load(2);
        cm.invite.open()
    }
}
cm.BootLoader.add(new cm.BootLoaderCallback(init, null, 10));
var g_numoffriendlistpages = 0;
var g_currentfriendlistpage = 0;
var g_friendsperpage = 8;
var g_friendlistitemwidth = 84 + 2;

function friendlist_prev() {
    friendlist_goto(g_currentfriendlistpage - 1)
}
function friendlist_next() {
    friendlist_goto(g_currentfriendlistpage + 1)
}
function friendlist_first() {
    friendlist_goto(1)
}
function friendlist_last() {
    friendlist_goto(g_numoffriendlistpages)
}
function friendlist_goto(a) {
    if (a >= 1 && a <= g_numoffriendlistpages) {
        var c = g_friendsperpage * g_friendlistitemwidth;
        var b = (c * (a - 1)) * (-1);
        $("panel_friendlist").setStyle({
            left: b + "px"
        });
        g_currentfriendlistpage = a
    } else {
        if (a < 1) {
            g_currentfriendlistpage = 1
        } else {
            g_currentfriendlistpage = g_numoffriendlistpages
        }
    }
    friendlist_navstatusupdate()
}
function friendlist_navstatusupdate() {
    if (g_currentfriendlistpage == g_numoffriendlistpages) {
        $("button_friendlist_next").removeClassName("next");
        $("button_friendlist_next").addClassName("next_");
        $("button_friendlist_last").removeClassName("last");
        $("button_friendlist_last").addClassName("last_")
    } else {
        $("button_friendlist_next").removeClassName("next_");
        $("button_friendlist_next").addClassName("next");
        $("button_friendlist_last").removeClassName("last_");
        $("button_friendlist_last").addClassName("last")
    }
    if (g_currentfriendlistpage == 1) {
        $("button_friendlist_prev").removeClassName("prev");
        $("button_friendlist_prev").addClassName("prev_");
        $("button_friendlist_first").removeClassName("first");
        $("button_friendlist_first").addClassName("first_")
    } else {
        $("button_friendlist_prev").removeClassName("prev_");
        $("button_friendlist_prev").addClassName("prev");
        $("button_friendlist_first").removeClassName("first_");
        $("button_friendlist_first").addClassName("first")
    }
}
function main_beginnerupsell_hover(c, a, b) {
    showTooltip(g_js_strings.init.main_beginnnerupsell_hoverexc.replace("%1$s", itemlist.i10000.name), c, a, b)
};
var cm = cm || {};
cm.makeAnimatedChest = function (f) {
    var j, g, d = 1000,
        l = 3600;
    if (cm.util.isIE() || cm.util.isChrome()) {
        l = 2400
    }
    function c(n) {
        var o = 0;
        for (var m in n) {
            o++
        }
        return o
    }
    function h(m, n) {
        return "<div class='" + m + "' >" + n + "</div>"
    }
    function i(m) {
        var p = c(m.items);
        var n = p * 85;
        var o = (p > 1 ? "These prizes have now " : "This prize has ") + " been added to <strong>Inventory</strong>";
        return b("prize_message_bg", "prize_message_bg.png") + h("title", "Exciting Mystery Chest") + h("txt", o) + "<div class='subItemsContainer'><div class='subItems' style='width: " + n + "px;'>" + e(m) + "</div></div>"
    }
    function b(m, n, o) {
        return "<div class='" + m + "' style='background: url(" + stimgUrl + "img/" + n + ");'>" + (o || "") + "</div>"
    }
    function e(m) {
        var p = "";
        var o = 0;
        for (var n in m.items) {
            p += a(o++, m.items[n], n)
        }
        return p
    }
    function a(m, o, t) {
        var s = t;
        var r = stimgUrl + "img/items/70/" + s + ".jpg?0";
        var n = " style='background: url(" + stimgUrl + "img/icon_bg_x" + o + ".png);'";
        var q = itemlist["i" + s].name + " ~ " + itemlist["i" + s].description;
        var p = q.replace('"', "'");
        cm.log.l("tooltip=" + p);
        return "<div class='sub" + m + " icon_bg' " + n + "><img class='item' src='" + r + "' title=\"" + p + '" />' + b("number_bg", "number_bg.png", "x" + o) + "</div>"
    }
    function k() {
        if (j < g) {
            f(".subItems .sub" + (j++)).fadeIn(d, k)
        }
    }
    return {
        modal: function (m) {
            j = 0;
            g = c(m.items);
            setTimeout(k, l);
            cm.ModalManager.add({
                show: function (n) {
                    f(".chest_animation").remove();
                    var o = "?r=" + cm.util.rand(0, 1000);
                    f(n).append(b("chest_animation", "chest_animation.gif" + o))
                },
                body: i(m),
                style: "background: url(" + stimgUrl + "img/bg_chest_modal.jpg);",
                "class": "animatedChestModal",
                curtain: true,
                width: 591,
                height: 364,
                left: 85,
                top: 100
            });
            f(".icon_bg").hide()
        },
        test: function (m) {
            m = m || 0;
            var n = [];
            n[0] = {
                items: {
                    "7": 1
                }
            };
            n[1] = {
                items: {
                    "7": 1,
                    "401": 2
                }
            };
            n[2] = {
                items: {
                    "7": 1,
                    "401": 2,
                    "4": 3
                }
            };
            n[3] = {
                items: {
                    "7": 1,
                    "401": 2,
                    "4": 3,
                    "211": 4
                }
            };
            n[4] = {
                items: {
                    "7": 1,
                    "401": 2,
                    "4": 3,
                    "211": 4,
                    "512": 5
                }
            };
            n[5] = {
                items: {
                    "7": 1,
                    "401": 2,
                    "4": 3,
                    "211": 4,
                    "512": 5,
                    "522": 5
                }
            };
            n[6] = {
                items: {
                    "7": 1,
                    "401": 1,
                    "4": 1,
                    "211": 1,
                    "512": 1,
                    "522": 1
                }
            };
            n[7] = {
                items: {
                    "7": 5,
                    "401": 5,
                    "4": 5,
                    "211": 5,
                    "512": 5,
                    "522": 5
                }
            };
            cm.makeAnimatedChest.modal(n[m])
        }
    }
}(jQuery);

function modal_maptile(s, u, o, p, q, f, z, D, l, c, a, e, x, b, k, w, m, d, j) {
    if ((new Date()).getTime() - g_mapObject.dragStopTime < 400) {
        return
    }
    f = f == "null" ? "" : unescape(f);
    D = D == "null" ? "" : D;
    var v = g_js_strings.commonstr.ladylord;
    if (q.charAt(0) == "f") {
        v = g_js_strings.commonstr.lady
    } else {
        if (q.charAt(0) == "m") {
            v = g_js_strings.commonstr.lord
        }
    }
    if (u != "null") {
        var B = u
    } else {
        if (u == "null" && e != "null") {
            var B = d
        } else {
            var B = o + "," + p
        }
    }
    var t = new Array();
    if (e == "city") {
        var h = 0;
        var r = 0;
        if (w) {
            if (w == currentcityid) {
                r = 2
            } else {
                for (var y = 0; y < seed.cities.length; y++) {
                    if (w == seed.cities[y][0]) {
                        r = 1
                    }
                }
            }
        }
        if (r == 2) {
            h = 3
        } else {
            if (r == 1) {
                h = 2
            } else {
                if (k && seed.allianceDiplomacies && seed.allianceDiplomacies.allianceId) {
                    var C = seed.allianceDiplomacies.friendly;
                    if (seed.allianceDiplomacies.allianceId == k) {
                        r = 3;
                        h = 1
                    } else {
                        if (C) {
                            var n = new Hash(C);
                            n.each(function (i) {
                                if (i.key == "a" + k) {
                                    h = 1
                                }
                            })
                        }
                    }
                }
            }
        }
        t.push("<div class='maptilewrap'>");
        t.push("<div class='maptileuserwrap clearfix'>");
        t.push("<div class='leftpic'><img src='" + stimgUrl + "img/avatars/100/" + q + ".jpg'/></div>");
        t.push("<div class='rightinfo'>");
        t.push("<div class='name'>" + v + " " + f + "</div>");
        t.push("<div>" + g_js_strings.commonstr.might + ": " + z + "</div>");
        t.push("<div>" + g_js_strings.commonstr.title + ": " + titlenames[parseInt(D)] + "</div>");
        t.push("<div>" + g_js_strings.commonstr.alliance + ": " + (l == "null" ? "---" : l) + "</div>");
        t.push("<div>" + g_js_strings.commonstr.status + ": " + x + "</div>");
        t.push("</div>");
        t.push("</div>");
        t.push("<div class='maptileinfowrap'>");
        t.push("<div>" + g_js_strings.commonstr.city + ": <span>" + unescape(u) + "</span></div>");
        t.push("<div>" + g_js_strings.commonstr.coordinates + ": ");
        var A = new cm.utils.CoordinateLink(o, p);
        A.setClassName("coordinateLink");
        t.push(A.getHTML());
        t.push("</div>");
        t.push("<div>" + g_js_strings.commonstr.province + ": <span>" + provincenames["p" + a] + "</span></div>");
        t.push("<div><a  onclick='setBookmarkLocation(" + s + ',"' + B + "\");return false;'>" + g_js_strings.modal_maptile.bookmarkloc + "</a></div>");
        t.push("</div>");
        if (h == 3) {
            t.push("<div class='citybtnrow clearfix'>");
            t.push("<a  class='button20' onclick='Modal.hideModal();changeview_city();return false;'><span>" + g_js_strings.modal_maptile.viewcity + "</span></a>");
            t.push("<a  class='button20' onclick='modal_wilderness_view(" + s + "," + b + ',"' + e + '",' + o + "," + p + ");return false;'><span>" + g_js_strings.modal_maptile.viewreinforcements + "</span></a>");
            t.push("<a  class='button20' onclick='Modal.hideModal();changeview_court();return false;'><span>" + g_js_strings.modal_maptile.visitcourt + "</span></a>");
            t.push("</div>")
        } else {
            if (h == 2) {
                t.push("<div class='btnrowleft clearfix'>");
                t.push("<a  class='button20' onclick='Modal.hideModal();citysel_viewother(" + w + ");return false;'><span>" + g_js_strings.modal_maptile.viewcity + "</span></a>");
                t.push("<a id='btnTransport' class='button20' onclick='modal_attack(1," + o + "," + p + ");return false;'><span>" + g_js_strings.commonstr.transport + "</span></a>");
                t.push("<a id='btnReinforce' class='button20' onclick='modal_attack(2," + o + "," + p + ");return false;'><span>" + g_js_strings.commonstr.reinforce + "</span></a>");
                t.push("<a  class='button20' onclick='modal_wilderness_view(" + s + "," + b + ',"' + e + '",' + o + "," + p + ");return false;'><span>" + g_js_strings.modal_maptile.viewreinforcements + "</span></a>");
                t.push("<a id='btnReassign' class='button20' onclick='modal_attack(5," + o + "," + p + ");return false;'><span>" + g_js_strings.commonstr.reassign + "</span></a>");
                t.push("<a  class='button20' onclick='Modal.hideModal();changeview_court();return false;'><span>" + g_js_strings.modal_maptile.visitcourt + "</span></a>");
                t.push("</div>");
                t.push("<div id='error_overmarch'></div>")
            } else {
                if (h == 1) {
                    t.push("<div class='btnrowleft clearfix'>");
                    t.push("<a  class='button20' onclick='Modal.hideModal();changeview_court(" + m + ");return false;'><span>" + g_js_strings.modal_maptile.visitcourt + "</span></a>");
                    t.push("<a id='btnTransport' class='button20' onclick='modal_attack(1," + o + "," + p + ");return false;'><span>" + g_js_strings.commonstr.transport + "</span></a>");
                    if (r != 0) {
                        t.push("<a id='btnReinforce' class='button20' onclick='modal_attack(2," + o + "," + p + ");return false;'><span>" + g_js_strings.commonstr.reinforce + "</span></a>")
                    }
                    t.push("<a  class='button20' onclick='getMessageWindow(" + m + ',"' + escape(f) + "\");return false;'><span>" + g_js_strings.commonstr.message + "</span></a>");
                    t.push("</div>");
                    t.push("<div id='error_overmarch'></div>")
                } else {
                    cm.log.l("name=" + escape(f));
                    t.push("<div class='btnrowleft clearfix'>");
                    t.push("<a  class='button20' onclick='Modal.hideModal();changeview_court(" + m + ");return false;'><span>" + g_js_strings.modal_maptile.visitcourt + "</span></a>");
                    t.push("<a id='btnScout' class='button20' onclick='modal_attack(3," + o + "," + p + ");return false;'><span>" + g_js_strings.commonstr.scout + "</span></a>");
                    t.push("<a id='btnAttack'  class='button20' onclick='modal_attack(4," + o + "," + p + ");return false;'><span>" + g_js_strings.commonstr.attack + "</span></a>");
                    t.push("<a  class='button20' onclick='getMessageWindow(" + m + ',"' + escape(f) + "\");return false;'><span>" + g_js_strings.commonstr.message + "</span></a>");
                    t.push("</div>");
                    t.push("<div id='error_overmarch'></div>")
                }
            }
        }
        t.push("</div>")
    } else {
        if (e == "bcity") {
            t.push("<div class='maptilewrap'>");
            t.push("<div class='maptileuserwrap clearfix'>");
            t.push("<div class='leftpic'><img src='" + stimgUrl + "img/building_icons/" + e + "_lvl4.png'/></div>");
            t.push("<div class='rightinfo'>");
            t.push("<div class='name'>" + d + " " + g_js_strings.commonstr.lv + b + "</div>");
            t.push("<div>" + g_js_strings.modal_maptile.barbarianinvasion + "</div>");
            t.push("</div>");
            t.push("</div>");
            t.push("<div class='maptileinfowrap'>");
            t.push("<div>" + g_js_strings.commonstr.coordinates + ": ");
            var A = new cm.utils.CoordinateLink(o, p);
            A.setClassName("coordinateLink");
            t.push(A.getHTML());
            t.push("</div>");
            t.push("<div>" + g_js_strings.commonstr.province + ": <span>" + provincenames["p" + a] + "</span></div>");
            t.push("<div><a  onclick='setBookmarkLocation(" + s + ',"' + B + "\");return false;'>" + g_js_strings.modal_maptile.bookmarkloc + "</a></div>");
            t.push("</div>");
            t.push("<div class='btnrow2'>");
            t.push("<a id='btnScout'  class='inlineButton blue20' onclick='modal_attack(3," + o + "," + p + ");return false;'><span>" + g_js_strings.commonstr.scout + "</span></a>");
            t.push("<a id='btnAttack'  class='inlineButton blue20' onclick='modal_attack(4," + o + "," + p + ");return false;'><span>" + g_js_strings.commonstr.attack + "</span></a>");
            if (("on" == cm.features.AUTO_ATTACK) && (seed.player.title >= cm.AutoAttackLevelLock)) {
                t.push("<a id='btnRaid' class='inlineButton blue20' onclick='modal_attack(" + cm.MARCH_TYPES.MARCH_TYPE_BARBARIAN + "," + o + "," + p + ");return false;'><span>" + g_js_strings.commonstr.raid + "</span></a>")
            }
            t.push("</div>");
            t.push("<div id='error_overmarch'></div>");
            t.push("</div>")
        } else {
            if (e == "city_mist") {
                t.push("<div class='maptilewrap'>");
                t.push("<div class='maptileuserwrap clearfix'>");
                t.push("<div class='leftpic'></div>");
                t.push("<div class='rightinfo'>");
                t.push("<div class='name'>???</div>");
                t.push("<div>" + v + ": " + (f || "---") + "</div>");
                t.push("<div>" + g_js_strings.commonstr.might + ": " + (z || "---") + "</div>");
                t.push("<div>" + g_js_strings.commonstr.title + ": " + (titlenames[parseInt(D)] || "---") + "</div>");
                t.push("<div>" + g_js_strings.commonstr.alliance + ": " + (l == "null" ? "---" : l) + "</div>");
                t.push("</div>");
                t.push("</div>");
                t.push("<div class='maptileinfowrap'>");
                t.push("<div>" + g_js_strings.commonstr.coordinates + ": ");
                var A = new cm.utils.CoordinateLink(o, p);
                A.setClassName("coordinateLink");
                t.push(A.getHTML());
                t.push("</div>");
                t.push("<div>" + g_js_strings.commonstr.province + ": <span>" + provincenames["p" + a] + "</span></div>");
                t.push("<div><a  onclick='setBookmarkLocation(" + s + ',"' + B + "\");return false;'>" + g_js_strings.modal_maptile.bookmarkloc + "</a></div>");
                t.push("</div>");
                if (m == tvuid) {
                    if (e == "plain") {
                        if (seed.cities.length < 5) {
                            t.push("<div class='btnrow clearfix' style='margin-left:50px;'>");
                            t.push("<a class='button20' onclick='AddCity.startBuildProcess(" + s + "," + w + ");return false;'><span>" + g_js_strings.modal_maptile.buildcity + "</span></a>")
                        } else {
                            t.push("<div class='btnrow clearfix' style='margin-left:100px;'>")
                        }
                    } else {
                        t.push("<div class='btnrow clearfix' style='margin-left:100px;'>")
                    }
                    t.push("<a  class='button20' onclick='modal_wilderness_view(" + s + "," + b + ',"' + d + '",' + o + "," + p + ");return false;'><span>" + g_js_strings.modal_maptile.viewtroops + "</span></a>");
                    if (w == currentcityid) {
                        t.push("<a  class='button20' onclick='modal_wilderness_abandon(" + s + "," + b + "," + g_mapObject.typeId[e] + "," + o + "," + p + ");return false;'><span>" + g_js_strings.commonstr.abandon + "</span></a>")
                    } else {
                        t.push("<a  class='button20 unmet' onclick='return false;'><span>" + g_js_strings.commonstr.abandon + "</span></a>")
                    }
                    t.push("<a id='btnReinforce' class='button20' onclick='modal_attack(2," + o + "," + p + ");return false;'><span>" + g_js_strings.commonstr.reinforce + "</span></a>");
                    t.push("</div>");
                    t.push("<div id='error_overmarch'></div>")
                } else {
                    if (e != "bog") {
                        t.push("<div class='btnrow clearfix'>");
                        t.push("<a id='btnScout'  class='button20' onclick='modal_attack(3," + o + "," + p + ");return false;'><span>" + g_js_strings.commonstr.scout + "</span></a>");
                        t.push("<a id='btnAttack'  class='button20' onclick='modal_attack(4," + o + "," + p + ");return false;'><span>" + g_js_strings.commonstr.attack + "</span></a>");
                        t.push("</div>");
                        t.push("<div id='error_overmarch'></div>")
                    }
                }
                t.push("</div>")
            } else {
                var g = (e == "lake" || e == "woods" || e == "grassland" || e == "hills" || e == "mountain" || e == "plain") ? g_js_strings.commonstr.wilderness + " - " : "";
                t.push("<div class='maptilewrap'>");
                t.push("<div class='maptileuserwrap clearfix'>");
                t.push("<div class='leftpic'><img src='" + stimgUrl + "img/building_icons/" + e + "_lvl4.png'/></div>");
                t.push("<div class='rightinfo'>");
                t.push("<div class='name'>" + g + d + " " + g_js_strings.commonstr.lv + b + "</div>");
                if (j) {
                    t.push("<div class='misted'>");
                    t.push(g_js_strings.modal_maptile.ownermisted);
                    t.push("</div>")
                }
                t.push("<div>" + v + ": " + (f || "---") + "</div>");
                t.push("<div>" + g_js_strings.commonstr.might + ": " + (z || "---") + "</div>");
                t.push("<div>" + g_js_strings.commonstr.title + ": " + (titlenames[parseInt(D)] || "---") + "</div>");
                t.push("<div>" + g_js_strings.commonstr.alliance + ": " + (l == "null" ? "---" : l) + "</div>");
                t.push("</div>");
                t.push("</div>");
                t.push("<div class='maptileinfowrap'>");
                t.push("<div>" + g_js_strings.commonstr.coordinates + ": ");
                var A = new cm.utils.CoordinateLink(o, p);
                A.setClassName("coordinateLink");
                t.push(A.getHTML());
                t.push("</div>");
                t.push("<div>" + g_js_strings.commonstr.province + ": <span>" + provincenames["p" + a] + "</span></div>");
                t.push("<div><a  onclick='setBookmarkLocation(" + s + ',"' + B + "\");return false;'>" + g_js_strings.modal_maptile.bookmarkloc + "</a></div>");
                t.push("</div>");
                if (m == tvuid) {
                    if (e == "plain") {
                        if (seed.cities.length < cm.cities.max()) {
                            t.push("<div class='btnrow clearfix' style='margin-left:50px;'>");
                            t.push("<a  class='button20' onclick='AddCity.startBuildProcess(" + s + "," + w + ");return false;'><span>" + g_js_strings.modal_maptile.buildcity + "</span></a>")
                        } else {
                            t.push("<div class='btnrow clearfix' style='margin-left:50px;'>")
                        }
                    } else {
                        t.push("<div class='btnrow clearfix' style='margin-left:50px;'>")
                    }
                    t.push("<a  class='button20' onclick='modal_wilderness_view(" + s + "," + b + ',"' + d + '",' + o + "," + p + ");return false;'><span>" + g_js_strings.modal_maptile.viewtroops + "</span></a>");
                    if (w == currentcityid) {
                        t.push("<a  class='button20' onclick='modal_wilderness_abandon(" + s + "," + b + "," + g_mapObject.typeId[e] + "," + o + "," + p + ");return false;'><span>" + g_js_strings.commonstr.abandon + "</span></a>")
                    } else {
                        t.push("<a  class='button20 unmet' onclick='return false;'><span>" + g_js_strings.commonstr.abandon + "</span></a>")
                    }
                    t.push("<a id='btnReinforce' class='button20' onclick='modal_attack(2," + o + "," + p + ");return false;'><span>" + g_js_strings.commonstr.reinforce + "</span></a>");
                    t.push("<a class='button20' onclick='WildDefense.defenseModal(" + s + ");return false;'><span>" + g_js_strings.commonstr.defend + "</span></a>");
                    t.push("</div>");
                    t.push("<div id='error_overmarch'></div>")
                } else {
                    if (e != "bog") {
                        t.push("<div class='btnrow clearfix'>");
                        t.push("<a id='btnScout' class='button20' onclick='modal_attack(3," + o + "," + p + ");return false;'><span>" + g_js_strings.commonstr.scout + "</span></a>");
                        t.push("<a id='btnAttack' class='button20' onclick='modal_attack(4," + o + "," + p + ");return false;'><span>" + g_js_strings.commonstr.attack + "</span></a>");
                        t.push("</div>");
                        t.push("<div id='error_overmarch'></div>")
                    }
                }
                t.push("</div>")
            }
        }
    }
    Modal.showModal(500, 400, 120, 190, g_js_strings.modaltitles.profile, t.join(""));
    attack_checkOverMarch()
};

function reCenterMapWithCoor() {
    var d = parseInt($("mapXCoor").value);
    var c = parseInt($("mapYCoor").value);
    d = (isNaN(d)) ? 0 : d;
    d = (d > 749) ? 749 : d;
    d = (d < 0) ? 0 : d;
    c = (isNaN(c)) ? 0 : c;
    c = (c > 749) ? 749 : c;
    c = (c < 0) ? 0 : c;
    $("mapXCoor").value = d;
    $("mapYCoor").value = c;
    var b = d;
    var a = c;
    g_mapObject = new MapObject(b, a)
}
function startMap(c) {
    cm.WildernessNameLookup = {
        "10": g_js_strings.commonstr.grassland,
        "11": g_js_strings.commonstr.lake,
        "20": g_js_strings.commonstr.woods,
        "30": g_js_strings.commonstr.hills,
        "40": g_js_strings.commonstr.mountain,
        "50": g_js_strings.commonstr.plain
    };
    currentcityinfo = seed.cities[0];
    var b = currentcityinfo[2];
    var a = currentcityinfo[3];
    $("mapXCoor").value = b;
    $("mapYCoor").value = a;
    g_mapObject = new MapObject(b, a)
}
var MapObject = Class.create({
    initialize: function (a, b) {
        that = this;
        this.horWindowSizeHalf = 380;
        this.verWindowSizeHalf = 227;
        this.map = $("map1");
        this.centerleft = a;
        this.centertop = b;
        this.hpxmultiplier = 96;
        this.vpxmultiplier = 58;
        this.blockmaxcount = 75;
        this.maxtilerow = 750;
        this.maxtilecol = 750;
        this.leftedgesize = 480;
        this.topedgesize = 290;
        this.setPosition();
        this.getMoreSlots();
        this.dragStopTime = 0;
        this.isDragging = false;
        if ("on" == cm.features.JQUERY_MAPDRAG) {
            jQuery("#map1").draggable({
                start: function (c) {
                    that.isDragging = true;
                    removeTooltip()
                },
                stop: function (c) {
                    that.isDragging = false;
                    that.dragStopTime = (new Date()).getTime();
                    that.changePosition()
                }
            })
        } else {
            this.mapdrag = new Draggable("map1", {
                revert: false,
                onStart: function (c, e) {
                    var d = e.target.onclick;
                    e.target.onclick = function () {
                        e.target.onclick = d;
                        return false
                    }
                },
                onEnd: function () {
                    that.changePosition()
                }
            })
        }
        this.typeId = {
            bog: 0,
            grassland: 10,
            lake: 11,
            woods: 20,
            hills: 30,
            mountain: 40,
            plain: 50,
            city: 51,
            ruin: 52,
            city_mist: 53,
            camelot1: 101,
            camelot2: 102,
            camelot3: 103,
            camelot4: 104,
            camelot5: 105,
            camelot6: 106
        };
        this.types = [];
        this.types[this.typeId.bog] = "bog";
        this.types[this.typeId.grassland] = "grassland";
        this.types[this.typeId.lake] = "lake";
        this.types[this.typeId.woods] = "woods";
        this.types[this.typeId.hills] = "hills";
        this.types[this.typeId.mountain] = "mountain";
        this.types[this.typeId.plain] = "plain";
        this.types[this.typeId.city] = "city";
        this.types[this.typeId.ruin] = "ruin";
        this.types[this.typeId.city_mist] = "city_mist";
        this.types[this.typeId.camelot1] = "camelot1";
        this.types[this.typeId.camelot2] = "camelot2";
        this.types[this.typeId.camelot3] = "camelot3";
        this.types[this.typeId.camelot4] = "camelot4";
        this.types[this.typeId.camelot5] = "camelot5";
        this.types[this.typeId.camelot6] = "camelot6";
        this.ttMsg = [];
        this.ttMsg.bcity = g_js_strings.MapObject.bcitydesc2;
        this.ttMsg.lake = g_js_strings.MapObject.lakedesc2;
        this.ttMsg.woods = g_js_strings.MapObject.woodsdesc2;
        this.ttMsg.grassland = g_js_strings.MapObject.grassdesc2;
        this.ttMsg.hills = g_js_strings.MapObject.hillsdesc2;
        this.ttMsg.mountain = g_js_strings.MapObject.mtndesc2;
        this.ttMsg.plain = g_js_strings.MapObject.plaindesc2;
        this.ttMsg.ruin = g_js_strings.MapObject.ruindesc2;
        this.ttMsg.bog = g_js_strings.MapObject.bogdesc2;
        this.typename = [];
        this.typename.bcity = g_js_strings.commonstr.barbariancamp;
        this.typename.bog = g_js_strings.commonstr.bog;
        this.typename.grassland = g_js_strings.commonstr.grassland;
        this.typename.lake = g_js_strings.commonstr.lake;
        this.typename.woods = g_js_strings.commonstr.woods;
        this.typename.hills = g_js_strings.commonstr.hills;
        this.typename.mountain = g_js_strings.commonstr.mountain;
        this.typename.plain = g_js_strings.commonstr.plain;
        this.typename.city = g_js_strings.commonstr.city;
        this.typename.ruin = g_js_strings.commonstr.ruin;
        this.typename.camelot1 = "Camelot";
        this.typename.camelot2 = "Camelot";
        this.typename.camelot3 = "Camelot";
        this.typename.camelot4 = "Camelot";
        this.typename.camelot5 = "Camelot";
        this.typename.camelot6 = "Camelot"
    },
    setPosition: function () {
        that.map.style.left = "-" + ((that.centerleft * that.hpxmultiplier) + that.leftedgesize - that.horWindowSizeHalf) + "px";
        that.map.style.top = "-" + ((that.centertop * that.vpxmultiplier) + that.topedgesize - that.verWindowSizeHalf) + "px"
    },
    setCenterSlot: function () {
        var b = that.map.positionedOffset()[0];
        var a = that.map.positionedOffset()[1];
        that.centerleft = parseInt(((b * -1) + that.horWindowSizeHalf - that.leftedgesize) / that.hpxmultiplier);
        that.centertop = parseInt(((a * -1) + that.verWindowSizeHalf - that.topedgesize) / that.vpxmultiplier);
        if (that.centerleft <= 0) {
            that.centerleft = 740;
            that.setPosition()
        } else {
            if (that.centerleft >= 750) {
                that.centerleft = 5;
                that.setPosition()
            }
        }
        if (that.centertop <= -3) {
            that.centertop = 743;
            that.setPosition()
        } else {
            if (that.centertop >= 750) {
                that.centertop = 3;
                that.setPosition()
            }
        }
    },
    getSlotCity: function (b, a) {
        var f = seed.cities;
        for (var e = 0; e < f.length; e++) {
            var g = f[e][0];
            if (b == 1) {
                if (g == a) {
                    return (roman[e])
                }
            } else {
                var d = Object.keys(seed.wilderness["city" + g]);
                for (var c = 0; c < d.length; c++) {
                    if (seed.wilderness["city" + g][d[c]].tileId == a) {
                        return (roman[e])
                    }
                }
            }
        }
        return ""
    },
    populateSlots: function (w, x, o) {
        var aa = new Hash(w);
        var A = aa.keys();
        var X = A.length;
        var s = "";
        for (var V = 0; V < X; V++) {
            var u = A[V];
            var Y = "tip_" + A[V];
            var M = aa.get(u);
            var ab = parseInt(M.xCoord);
            var y = parseInt(M.yCoord);
            var R = that.types[M.tileType];
            var Q = M.tileLevel;
            var N = (ab * that.hpxmultiplier + that.leftedgesize) + "px";
            var c = (y * that.vpxmultiplier + that.topedgesize) + "px";
            var S = 150;
            var L = M.misted;
            var z = null;
            var l = null;
            var J = null;
            var Z = null;
            var G = null;
            var d = null;
            var W = null;
            var K = null;
            if (M.tileUserId) {
                var k = o["u" + M.tileUserId];
                if (k && k.length != 0) {
                    z = k.n;
                    l = k.m;
                    J = k.t;
                    Z = k.s.toLowerCase() + k.i;
                    switch (parseInt(k.w)) {
                    case 1:
                        G = g_js_strings.commonstr.normal;
                        break;
                    case 2:
                        G = g_js_strings.MapObject.begprotect;
                        break;
                    case 3:
                        G = g_js_strings.commonstr.truce;
                        break;
                    case 4:
                        G = g_js_strings.commonstr.vacation;
                        break;
                    default:
                        G = g_js_strings.commonstr.normal
                    }
                    if (k.a && k.a != 0) {
                        d = x["a" + k.a];
                        W = k.a
                    }
                }
            }
            var B = "";
            var t = "";
            var q = "";
            if (y % S == 0) {
                B += "border-top:2px dashed #a02932;";
                q += "border-top:2px dashed #a02932;"
            }
            if (ab % S == 0) {
                B += "border-left:2px dashed #a02932;";
                t += "border-left:2px dashed #a02932;"
            }
            if (y == 749) {
                B += "border-bottom:2px dashed #a02932;";
                q += "border-bottom:2px dashed #a02932;"
            }
            if (ab == 749) {
                B += "border-right:2px dashed #a02932;";
                t += "border-right:2px dashed #a02932;"
            }
            if (R == "city" && !M.tileUserId) {
                R = "bcity"
            }
            var g = $("maparea_citysel").select(".sel")[0].id;
            var f = 0;
            if (g) {
                f = parseInt(g.split("_")[1]) - 1
            }
            var E = seed.cities[f][2];
            var r = seed.cities[f][3];
            var n = this.distance(E, r, ab, y);
            var m = g_js_strings.commonstr.distance + ": <span class='distance'>" + n + "</span>";
            var v = "";
            var C = "";
            var h = "";
            var P = "";
            if (M.tileType >= 100) {
                v = "<div>(" + ab + "," + y + ") Camelot</div>"
            } else {
                if (M.tileUserId && M.tileUserId == tvuid) {
                    var a = "";
                    P = "rogreen";
                    if (M.tileType == 51) {
                        a = this.getSlotCity(1, M.tileCityId)
                    } else {
                        a = this.getSlotCity(2, M.tileId)
                    }
                    C = "<div class='roicon'>" + a + "</div>";
                    if (M.tileType == 51) {
                        if (currentcityid == M.tileCityId) {
                            h += "<div>(" + ab + "," + y + ") " + M.cityName || g_js_strings.MapObject.cityname + "</div>"
                        } else {
                            h += "<div>(" + ab + "," + y + ") " + m + "</div><div>" + M.cityName || g_js_strings.MapObject.cityname + "</div>"
                        }
                        h += "<div>" + g_js_strings.commonstr.might + ": " + (l || "----") + "</div>";
                        h += "<div>" + g_js_strings.commonstr.alliance + ": " + (d || "----") + "</div>"
                    } else {
                        var e = (seed.wildDef["t" + M.tileId]) ? parseInt(seed.wildDef["t" + M.tileId].fort60Count) : 0;
                        var I = (seed.wildDef["t" + M.tileId]) ? WildDefense.c_mercenaryList[parseInt(seed.wildDef["t" + M.tileId].mercLevel)] : "";
                        var U = "";
                        if (e > 0) {
                            U += e + " " + g_js_strings.commonstr.traps + "<br>"
                        }
                        if (I != "") {
                            U += g_js_strings.commonstr.mercenary + " - " + I
                        }
                        h += "<div>(" + ab + "," + y + ") " + m + "</div>";
                        h += "<div>" + g_js_strings.commonstr.wilderness + " - " + that.typename[R] + " " + g_js_strings.commonstr.lv + Q + "</div>";
                        h += "<div>" + g_js_strings.MapObject.ownedbyyou + "(" + seed.player.name + ") </div>";
                        h += "<div>" + ((U == "") ? "No defenses" : U) + "</div>"
                    }
                } else {
                    if (M.tileUserId && parseInt(M.tileUserId) > 0) {
                        C = "<div class='roicon'></div>";
                        h += "<div>(" + ab + "," + y + ") " + m + "</div>";
                        if (M.tileType == 51) {
                            h += "<div>" + M.cityName || g_js_strings.MapObject.cityname + "</div>"
                        } else {
                            h += "<div>" + g_js_strings.commonstr.wilderness + " - " + that.typename[R] + " " + g_js_strings.commonstr.lv + Q + "</div>"
                        }
                        h += "<div>" + g_js_strings.MapObject.ownedby + ": " + (z || "----") + "</div>";
                        h += "<div>" + g_js_strings.commonstr.might + ": " + (l || "----") + "</div>";
                        if (W) {
                            h += "<div>" + g_js_strings.commonstr.alliance + ": " + (d || "----");
                            h += "(";
                            if (seed.allianceDiplomacies && seed.allianceDiplomacies.allianceId == W) {
                                P = "roblue";
                                h += g_js_strings.commonstr.yours
                            } else {
                                if (seed.allianceDiplomacies && seed.allianceDiplomacies.hostile && seed.allianceDiplomacies.hostile["a" + W]) {
                                    P = "rored";
                                    h += g_js_strings.commonstr.hostile
                                } else {
                                    if (seed.allianceDiplomacies && ((seed.allianceDiplomacies.friendly && seed.allianceDiplomacies.friendly["a" + W]) || (seed.allianceDiplomacies.friendlyToThem && seed.allianceDiplomacies.friendlyToThem["a" + W]))) {
                                        P = "roblue";
                                        h += g_js_strings.commonstr.friendly
                                    } else {
                                        P = "royellow";
                                        h += g_js_strings.commonstr.neutral
                                    }
                                }
                            }
                            h += ")"
                        } else {
                            P = "royellow"
                        }
                        h += "</div>"
                    } else {
                        if (R == "city_mist") {
                            P = "royellow";
                            C = "<div class='roicon'></div>";
                            h += "<div>(" + ab + "," + y + ") " + m + "</div>";
                            h += "<div>?????</div>";
                            h += "<div>" + g_js_strings.commonstr.might + ": ?????</div>";
                            h += "<div>" + g_js_strings.commonstr.alliance + ": ?????</div>"
                        } else {
                            if (L) {
                                P = "royellow";
                                C = "<div class='roicon'></div>";
                                h += "<div>(" + ab + "," + y + ") " + m + "</div>";
                                h += "<div>" + g_js_strings.commonstr.wilderness + " - " + that.typename[R] + " " + g_js_strings.commonstr.lv + Q + "</div>";
                                h += "<div>" + g_js_strings.commonstr.might + ": ?????</div>";
                                h += "<div>" + g_js_strings.commonstr.alliance + ": ?????</div>"
                            } else {
                                P = "royellow";
                                C = "<div class='roicon'></div>";
                                h += "<div>(" + ab + "," + y + ") " + m + "</div>";
                                if (R == "lake" || R == "woods" || R == "grassland" || R == "hills" || R == "mountain") {
                                    h += "<div>" + g_js_strings.commonstr.wilderness + " - " + that.typename[R] + " " + g_js_strings.commonstr.lv + Q + "</div>";
                                    h += "<div>" + that.ttMsg[R].replace("%1$s", ((5 * parseInt(Q)) + "%")) + "</div>"
                                } else {
                                    h += "<div>" + that.typename[R] + " " + g_js_strings.commonstr.lv + Q + "</div>";
                                    h += "<div>" + that.ttMsg[R] + "</div>"
                                }
                            }
                        }
                    }
                }
            }
            v = escape("<div class='" + P + "'>" + h + C + "</div>");
            var D = "";
            var b = "";
            if (M.tileType != 0 && R != "bcity" && R != "ruin" && R != "city_mist" && M.tileType <= 100) {
                if (M.tileUserId && M.tileUserId == tvuid) {
                    D = " mapcastle";
                    if (M.tileType == 51) {
                        b = this.getSlotCity(1, M.tileCityId)
                    } else {
                        b = this.getSlotCity(2, M.tileId)
                    }
                } else {
                    if (M.tileUserId && M.tileUserId > 0) {
                        if (seed.allianceDiplomacies && (seed.allianceDiplomacies.allianceId == W)) {
                            D = " shield"
                        } else {
                            if (seed.allianceDiplomacies && ((seed.allianceDiplomacies.friendly && seed.allianceDiplomacies.friendly["a" + W]) || (seed.allianceDiplomacies.friendlyToThem && seed.allianceDiplomacies.friendlyToThem["a" + W]))) {
                                D = " shield"
                            } else {
                                if (seed.allianceDiplomacies && seed.allianceDiplomacies.hostile && seed.allianceDiplomacies.hostile["a" + W]) {
                                    D = " sword"
                                }
                            }
                        }
                    }
                }
            }
            var O = "_" + Q + D;
            var T = R + O;
            var j = M && parseInt(M.cityNum) > 5 ? "city" + M.cityNum + O : T;
            if (M.tileUserId && M.tileUserId == tvuid && M.tileType == 51 && parseInt(seed.playerEffects.fogExpire) > F) {
                j = "city_mist_0"
            }
            var F = unixtime();
            if (seed.con_hlp == 5) {
                s += "<a style='" + B + "top:" + c + ";left:" + N + ";' class='" + j + " slot'><span>HELLO</span></a>"
            } else {
                s += "<a onclick='modal_maptile(" + M.tileId + ',"' + escape(M.cityName) + '",' + ab + "," + y + ',"' + Z + '","' + escape(z) + '",' + (l || '"--------"') + ',"' + J + '","' + d + '",' + K + "," + M.tileProvinceId + ',"' + R + '","' + G + '",' + Q + "," + W + "," + M.tileCityId + "," + M.tileUserId + ',"' + that.typename[R] + '",' + L + ");return false;' onmouseover='showMapTileTooltip(\"" + v + '",this,event,"mapwindow", ' + ab + ", " + y + ");return false;' onmouseout='removeTooltip();return false;' id='" + u + "' style='" + B + "top:" + c + ";left:" + N + ";' class='" + j + " slot'><span>" + b + "</span></a>"
            }
            if (ab >= 745) {
                var H = ((ab - 745) * that.hpxmultiplier) + "px";
                var ac = "eh_" + u;
                s += "<a onclick='modal_maptile(" + M.tileId + ',"' + escape(M.cityName) + '",' + ab + "," + y + ',"' + Z + '","' + escape(z) + '",' + (l || '"--------"') + ',"' + J + '","' + d + '",' + K + "," + M.tileProvinceId + ',"' + R + '","' + G + '",' + Q + "," + W + "," + M.tileCityId + "," + M.tileUserId + ',"' + that.typename[R] + '",' + L + ");return false;' onmouseover='showMapTileTooltip(\"" + v + '",this,event,"mapwindow", ' + ab + ", " + y + ");return false;' onmouseout='removeTooltip();return false;' id='" + ac + "' style='" + q + "top:" + c + ";left:" + H + ";' class='" + j + " slot'><span></span></a>"
            } else {
                if (ab < 5) {
                    var ac = "eh_" + u;
                    var H = (((ab + 750) * that.hpxmultiplier) + that.leftedgesize) + "px";
                    s += "<a onclick='modal_maptile(" + M.tileId + ',"' + escape(M.cityName) + '",' + ab + "," + y + ',"' + Z + '","' + escape(z) + '",' + (l || '"--------"') + ',"' + J + '","' + d + '",' + K + "," + M.tileProvinceId + ',"' + R + '","' + G + '",' + Q + "," + W + "," + M.tileCityId + "," + M.tileUserId + ',"' + that.typename[R] + '",' + L + ");return false;' onmouseover='showMapTileTooltip(\"" + v + '",this,event,"mapwindow", ' + ab + ", " + y + ");return false;' onmouseout='removeTooltip();return false;' id='" + ac + "' style='" + q + "top:" + c + ";left:" + H + ";' class='" + j + " slot'><span></span></a>"
                }
            }
            if (y >= 745) {
                var ac = "ev_" + u;
                var p = ((y - 745) * that.vpxmultiplier) + "px";
                s += "<a onclick='modal_maptile(" + M.tileId + ',"' + escape(M.cityName) + '",' + ab + "," + y + ',"' + Z + '","' + escape(z) + '",' + (l || '"--------"') + ',"' + J + '","' + d + '",' + K + "," + M.tileProvinceId + ',"' + R + '","' + G + '",' + Q + "," + W + "," + M.tileCityId + "," + M.tileUserId + ',"' + that.typename[R] + '",' + L + ");return false;' onmouseover='showMapTileTooltip(\"" + v + '",this,event,"mapwindow", ' + ab + ", " + y + ");return false;' onmouseout='removeTooltip();return false;' id='" + ac + "' style='" + t + "top:" + p + ";left:" + N + ";' class='" + j + " slot'><span></span></a>"
            } else {
                if (y < 5) {
                    var ac = "ev_" + u;
                    var p = (((y + 750) * that.vpxmultiplier) + that.topedgesize) + "px";
                    s += "<a onclick='modal_maptile(" + M.tileId + ',"' + escape(M.cityName) + '",' + ab + "," + y + ',"' + Z + '","' + escape(z) + '",' + (l || '"--------"') + ',"' + J + '","' + d + '",' + K + "," + M.tileProvinceId + ',"' + R + '","' + G + '",' + Q + "," + W + "," + M.tileCityId + "," + M.tileUserId + ',"' + that.typename[R] + '",' + L + ");return false;' onmouseover='showMapTileTooltip(\"" + v + '",this,event,"mapwindow", ' + ab + ", " + y + ");return false;' onmouseout='removeTooltip();return false;' id='" + ac + "' style='" + t + "top:" + p + ";left:" + N + ";' class='" + j + " slot'><span></span></a>"
                }
            }
            if (y >= 745 && ab >= 745) {
                var p = ((y - 745) * that.vpxmultiplier) + "px";
                var H = ((ab - 745) * that.hpxmultiplier) + "px";
                var ac = "c_" + u;
                s += "<a onclick='modal_maptile(" + M.tileId + ',"' + escape(M.cityName) + '",' + ab + "," + y + ',"' + Z + '","' + escape(z) + '",' + (l || '"--------"') + ',"' + J + '","' + d + '",' + K + "," + M.tileProvinceId + ',"' + R + '","' + G + '",' + Q + "," + W + "," + M.tileCityId + "," + M.tileUserId + ',"' + that.typename[R] + '",' + L + ");return false;' onmouseover='showMapTileTooltip(\"" + v + '",this,event,"mapwindow", ' + ab + ", " + y + ");return false;' onmouseout='removeTooltip();return false;' id='" + ac + "' style='top:" + p + ";left:" + H + ";' class='" + j + " slot'><span></span></a>"
            }
            if (y < 5 && ab >= 745) {
                var p = (((y + 750) * that.vpxmultiplier) + that.topedgesize) + "px";
                var H = ((ab - 745) * that.hpxmultiplier) + "px";
                var ac = "c_" + u;
                s += "<a onclick='modal_maptile(" + M.tileId + ',"' + escape(M.cityName) + '",' + ab + "," + y + ',"' + Z + '","' + escape(z) + '",' + (l || '"--------"') + ',"' + J + '","' + d + '",' + K + "," + M.tileProvinceId + ',"' + R + '","' + G + '",' + Q + "," + W + "," + M.tileCityId + "," + M.tileUserId + ',"' + that.typename[R] + '",' + L + ");return false;' onmouseover='showMapTileTooltip(\"" + v + '",this,event,"mapwindow", ' + ab + ", " + y + ");return false;' onmouseout='removeTooltip();return false;' id='" + ac + "' style='top:" + p + ";left:" + H + ";' class='" + j + " slot'><span></span></a>"
            }
            if (y < 5 && ab < 5) {
                var p = (((y + 750) * that.vpxmultiplier) + that.topedgesize) + "px";
                var H = (((ab + 750) * that.hpxmultiplier) + that.leftedgesize) + "px";
                var ac = "c_" + u;
                s += "<a onclick='modal_maptile(" + M.tileId + ',"' + escape(M.cityName) + '",' + ab + "," + y + ',"' + Z + '","' + escape(z) + '",' + (l || '"--------"') + ',"' + J + '","' + d + '",' + K + "," + M.tileProvinceId + ',"' + R + '","' + G + '",' + Q + "," + W + "," + M.tileCityId + "," + M.tileUserId + ',"' + that.typename[R] + '",' + L + ");return false;' onmouseover='showMapTileTooltip(\"" + v + '",this,event,"mapwindow", ' + ab + ", " + y + ");return false;' onmouseout='removeTooltip();return false;' id='" + ac + "' style='top:" + p + ";left:" + H + ";' class='" + j + " slot'><span></span></a>"
            }
            if (y >= 745 && ab < 5) {
                var H = (((ab + 750) * that.hpxmultiplier) + that.leftedgesize) + "px";
                var p = ((y - 745) * that.vpxmultiplier) + "px";
                var ac = "c_" + u;
                s += "<a onclick='modal_maptile(" + M.tileId + ',"' + escape(M.cityName) + '",' + ab + "," + y + ',"' + Z + '","' + escape(z) + '",' + (l || '"--------"') + ',"' + J + '","' + d + '",' + K + "," + M.tileProvinceId + ',"' + R + '","' + G + '",' + Q + "," + W + "," + M.tileCityId + "," + M.tileUserId + ',"' + that.typename[R] + '",' + L + ");return false;' onmouseover='showMapTileTooltip(\"" + v + '",this,event,"mapwindow", ' + ab + ", " + y + ");return false;' onmouseout='removeTooltip();return false;' id='" + ac + "' style='top:" + p + ";left:" + H + ";' class='" + j + " slot'><span></span></a>"
            }
        }
        that.map.innerHTML = s
    },
    getMoreSlots: function () {
        var blocklist = that.generateBlockList();
        var blocklistcnt = blocklist.length;
        var blockString = blocklist.join(",");
        var params = Object.clone(g_ajaxparams);
        params.blocks = blockString;
        new Ajax.Request(g_ajaxpath + "ajax/fetchMapTiles.php" + g_ajaxsuffix, {
            method: "post",
            parameters: params,
            onSuccess: function (transport) {
                var rslt = eval("(" + transport.responseText + ")");
                if (rslt.ok) {
                    that.populateSlots(rslt.data, rslt.allianceNames, rslt.userInfo)
                }
            },
            onFailure: function () {}
        })
    },
    getTileData: function (blocklist, callback, failed_callback) {
        var params = Object.clone(g_ajaxparams);
        params.blocks = blocklist.join(",");
        new Ajax.Request(g_ajaxpath + "ajax/fetchMapTiles.php" + g_ajaxsuffix, {
            method: "post",
            parameters: params,
            onSuccess: function (transport) {
                callback(eval("(" + transport.responseText + ")"))
            },
            onFailure: function () {
                if (failed_callback) {
                    failed_callback()
                }
            }
        })
    },
    changePosition: function () {
        that.setCenterSlot();
        that.getMoreSlots()
    },
    removeSlots: function (c, k) {
        var d = c * 10;
        var m = k * 10;
        for (var f = d; f < (d + 10); f++) {
            for (var e = m; e < (m + 10); e++) {
                var h = "l_" + f + "_t_" + e;
                if ($(h)) {
                    that.map.removeChild($(h))
                }
                var g = "eh_" + h;
                if ($(g)) {
                    that.map.removeChild($(g))
                }
                var b = "ev_" + h;
                if ($(b)) {
                    that.map.removeChild($(b))
                }
                var a = "c_" + h;
                if ($(a)) {
                    that.map.removeChild($(a))
                }
            }
        }
    },
    freeMoreSlots: function () {
        var h = parseInt(that.centerleft / 10);
        var b = parseInt(that.centertop / 10);
        var g = h - 1;
        var d = h + 1;
        g = g < 0 ? that.blockmaxcount + g : g;
        d = d > (that.blockmaxcount - 1) ? (d - that.blockmaxcount) : d;
        var a = b - 1;
        var f = b + 1;
        a = a < 0 ? (that.blockmaxcount + a) : a;
        f = f > (that.blockmaxcount - 1) ? (f - that.blockmaxcount) : f;
        for (var e = 0; e < 75; e++) {
            for (var c = 0; c < 75; c++) {
                if (that.blockslots[e][c] == true && ((e < g && e > d) || (c < a && c > f))) {
                    that.blockslots[e][c] = false;
                    that.removeSlots(e, c)
                }
            }
        }
    },
    generateBlockList: function () {
        var h = [];
        var g = parseInt(that.centerleft / 5) * 5;
        var b = parseInt(that.centertop / 5) * 5;
        for (var e = (g - 5); e <= (g + 5); e += 5) {
            var f = e;
            if (e < 0) {
                f = that.maxtilerow - 5
            }
            if (e > (that.maxtilerow - 5)) {
                f = 0
            }
            for (var c = (b - 5); c <= (b + 5); c += 5) {
                var a = c;
                if (c < 0) {
                    a = that.maxtilecol - 5
                }
                if (c > (that.maxtilecol - 5)) {
                    a = 0
                }
                var d = "bl_" + f + "_bt_" + a;
                h.push(d)
            }
        }
        return h
    },
    distance: function (e, g, d, f) {
        var b = 750;
        var a = b / 2;
        var c = Math.abs(d - e);
        if (c > a) {
            c = b - c
        }
        var h = Math.abs(f - g);
        if (h > a) {
            h = b - h
        }
        return Math.round(100 * Math.sqrt(c * c + h * h)) / 100
    }
});

function showMapTileTooltip(j, h, n, f, l, k) {
    if (g_mapObject.isDragging) {
        return
    }
    var b = document.createElement("div");
    b.innerHTML = unescape(j);
    var m, g;
    for (var e = 0; e < seed.cities.length; e++) {
        m = seed.cities[e];
        g = m[0];
        if (g == currentcityid) {
            var a = m[2];
            var p = m[3];
            var d = g_mapObject.distance(a, p, l, k);
            var o = $(b).getElementsByClassName("distance");
            if (o && o.length > 0) {
                var c = o[0];
                c.innerHTML = d
            }
            showTooltip(b.innerHTML, h, n, f)
        }
    }
}
cm.BootLoader.add(startMap, null, 9);
cm = cm || {};
cm.MarchProgressBar = function (d) {
    var c = {};
    var e = function (f) {
            c[f] = true
        };
    var b = function (f) {
            f = f || currentcityid;
            if (undefined == c[f]) {
                c[f] = false
            } else {
                c[f] = !c[f]
            }
            a()
        };
    var a = function (g) {
            if (undefined == c[currentcityid]) {
                c[currentcityid] = true
            }
            var h = d("#untqueue_head_toggle");
            var f = d("#untqueue_list");
            if (undefined != g) {
                f.html(g)
            }
            if ("" == f.html().replace(/ /g, "")) {
                h.hide();
                return
            }
            h.show();
            if (c[currentcityid]) {
                f.show();
                h.removeClass("expand_button");
                h.addClass("collapse_button")
            } else {
                f.hide();
                h.removeClass("collapse_button");
                h.addClass("expand_button")
            }
        };
    return {
        forceOn: e,
        toggle: b,
        updateView: a
    }
}(jQuery);
var MarchReport = Class.create({
    initialize: function (b, o, e, h, d, a, p, i, c, l, f, n, k, g, j, q, m) {
        this.rptid = b;
        this.side = o;
        this.tiletype = e;
        this.tilelv = h;
        this.defid = d;
        this.defnm = a;
        this.defgen = p;
        this.atknm = i;
        this.atkgen = c;
        this.marchtype = l;
        this.xcoord = f;
        this.ycoord = n;
        this.timestamp = k;
        this.unread = g;
        this.atkxcoord = j;
        this.atkycoord = q;
        this.rslt = m;
        this.tpgs = pageNavigatorModel.getPageCount();
        this.currpg = pageNavigatorModel.getCurrentPage()
    },
    generateBackButton: function () {
        return "<div class='clearfix' style='float:left'><a  class='button20' onclick='loadPage_pagination(\"modal_msg_list_pagination\",\"" + this.currpg + '","modal_messages_viewreports",' + this.tpgs + ");return false;'><span>" + g_js_strings.modal_messages_viewreports_view.backtoreports + "</span></a></div>"
    },
    render: function () {},
    renderReportTitle: function (c) {
        var a = new Array();
        a.push("<div class='reportdetail clearfix'>");
        a.push("<div class='side'>");
        a.push("<div class='report_title'> #{title}");
        if (parseInt(this.tiletype) != 51) {
            a.push(g_mapObject.types[parseInt(this.tiletype)].capitalize());
            a.push(" " + g_js_strings.commonstr.lv + this.tilelv)
        } else {
            if (parseInt(this.defid) == 0) {
                a.push(g_js_strings.commonstr.barbariancamp);
                a.push(" " + g_js_strings.commonstr.lv + this.tilelv)
            }
        }
        var d = new cm.utils.CoordinateLink(this.xcoord, this.ycoord);
        d.setClassName("coordinateLink");
        a.push(" " + d.getHTML());
        if (this.marchtype != 1) {
            if (parseInt(this.rslt.conquered) == 1) {
                a.push(" - <b class='conq'>" + g_js_strings.commonstr.conquered + "</b>")
            }
        }
        a.push("</div>");
        a.push("</div>");
        a.push("<div class='reporttimestamp'>" + formatDateByUnixTime(this.timestamp) + "</div>");
        a.push("<div class='reportid'>" + g_js_strings.modal_messages_viewreports_view.reportno + " " + this.rptid + " </div>");
        a.push("</div>");
        var b = new Template(a.join(""));
        return b.evaluate(c)
    },
    renderWildernessCannotBeConquered: function () {
        var a = new Array();
        try {
            if ((!this.rslt.conquered || this.rslt.conquered == false || parseInt(this.rslt.conquered) == 0) && parseInt(this.rslt.winner) == 1 && parseInt(this.tiletype) != 51 && parseInt(this.side) == 1) {
                a.push("<div class='reportdetail clearfix'>");
                a.push("<b class='conq'>" + g_js_strings.modal_messages_viewreports_view.cannotbeconq + "</b>");
                a.push("</div>")
            }
        } catch (b) {
            a.push("renderCannotBeConquered Exception: " + b)
        }
        return a.join("")
    },
    renderAttackResult: function () {
        var a = new Array();
        try {
            if (!(Object.keys(this.rslt.fght.s0).length == 0 && Object.keys(this.rslt.fght.s1) == 0)) {
                a.push("<div class='reportdetail' style='margin-top:0px;'>");
                a.push("<div class='reportttl'>");
                switch (this.getAttackReportType()) {
                case "wilderness_win":
                    a.push(g_js_strings.modal_messages_viewreports_view.attack_result_wilderness_barbarian_win);
                    break;
                case "wilderness_lose":
                    a.push(g_js_strings.modal_messages_viewreports_view.attack_result_wilderness_barbarian_lose);
                    break;
                case "barbarian_win":
                    a.push(g_js_strings.modal_messages_viewreports_view.attack_result_wilderness_barbarian_win);
                    break;
                case "barbarian_lose":
                    a.push(g_js_strings.modal_messages_viewreports_view.attack_result_wilderness_barbarian_lose);
                    break;
                case "attack_win":
                    a.push(g_js_strings.modal_messages_viewreports_view.attack_result_attacked_enemy_win);
                    break;
                case "defend_victory":
                    a.push(g_js_strings.modal_messages_viewreports_view.attack_result_attack_by_enemy_win);
                    break;
                case "defend_defeat":
                    a.push(g_js_strings.modal_messages_viewreports_view.attack_result_attack_by_enemy_lose);
                    break;
                case "attack_defeat":
                    a.push(g_js_strings.modal_messages_viewreports_view.attack_result_attacked_enemy_lose);
                    break;
                case "barbarianraid_win1":
                case "barbarianraid_win2":
                    a.push(g_js_strings.barbarian.barbarianwin);
                    break;
                case "barbarianraid_lose1":
                case "barbarianraid_lose2":
                    a.push(g_js_strings.barbarian.barbarianlose);
                    break;
                default:
                    throw "No attack result found"
                }
                a.push("</div>");
                a.push("<div class='nobreach'>");
                if (parseInt(this.rslt.winner) == 1 && typeof (this.rslt.wall) != "undefined") {
                    if (parseInt(this.tiletype) == 51) {
                        a.push(g_js_strings.modal_messages_viewreports_view.wallbreach + " ")
                    } else {
                        a.push(g_js_strings.modal_messages_viewreports_view.securedwilderness + " ")
                    }
                }
                if (parseInt(this.rslt.winner) == 2) {
                    if (parseInt(this.tiletype) == 51) {
                        a.push(g_js_strings.modal_messages_viewreports_view.nowallbreach + " ")
                    } else {
                        a.push(g_js_strings.modal_messages_viewreports_view.nosecuredwilderness + " ");
                        if (typeof (this.rslt.wall) != "undefined") {
                            a.push(this.rslt.wall);
                            a.push(g_js_strings.modal_messages_viewreports_view.wildernesspercsec)
                        }
                    }
                }
                if (parseInt(this.rslt.winner) == 1 && parseInt(this.side) == 0 && parseInt(this.tiletype) == 51) {
                    if (typeof (this.rslt.wall) != "undefined") {
                        a.push(this.rslt.wall);
                        a.push(g_js_strings.modal_messages_viewreports_view.percdamage)
                    }
                    if (parseInt(this.rslt.wall) == 100) {
                        a.push(" " + g_js_strings.modal_messages_viewreports_view.pendingcancel)
                    }
                }
                a.push("</div>");
                a.push("</div>")
            }
        } catch (b) {
            a.push("renderAttackResult Exception: " + b)
        }
        return a.join("")
    },
    renderBattleReport: function () {
        var k = new Array();
        try {
            if (Object.keys(this.rslt.fght.s0).length == 0 && Object.keys(this.rslt.fght.s1) == 0) {
                k.push("<div class='reportdetail clearfix' style='display:none;'>")
            } else {
                k.push("<div class='reportdetail clearfix'>")
            }
            k.push("<div class='side leftside'>");
            k.push("<div class='sidettl'><b style='font-size:14px;'>" + g_js_strings.commonstr.attackers + "</b><span class='who'>(");
            if (this.atknm != "") {
                k.push(this.atknm);
                k.push(")");
                if (this.atkxcoord != undefined || this.atkxcoord != null) {
                    k.push(" - <b>");
                    var c = new cm.utils.CoordinateLink(this.atkxcoord, this.atkycoord);
                    c.setClassName("coordinateLink");
                    k.push(c.getHTML());
                    k.push("</b>")
                }
                k.push("</span>")
            } else {
                k.push(g_js_strings.commonstr.enemy);
                k.push(")</span>")
            }
            if ((parseInt(this.rslt.winner) == 1) || (parseInt(this.rslt.winner) == 2)) {
                k.push("<b class='winner'>" + g_js_strings.commonstr.winner + "</b>")
            }
            if (parseInt(this.marchtype) != 3 && this.rslt.s1KCombatLv) {
                k.push("<br/>" + g_js_strings.modal_messages_viewreports_view.knightskills + ": " + this.rslt.s1KCombatLv);
                if (typeof (this.rslt.s1atkBoost) != "undefined" && this.rslt.s1atkBoost != 0) {
                    k.push("<br/>" + g_js_strings.modal_messages_viewreports_view.attackboosted + ": " + this.rslt.s1atkBoost * 100 + "%")
                }
                if (typeof (this.rslt.s1defBoost) != "undefined" && this.rslt.s1defBoost != 0) {
                    k.push("<br/>" + g_js_strings.modal_messages_viewreports_view.defenseboosted + ": " + this.rslt.s1defBoost * 100 + "%")
                }
            }
            k.push("</div>");
            k.push("<table cellpadding='0' cellspacing='0' class='trttl'>");
            k.push("<thead><tr><td>&nbsp;</td><td class='trnm'>" + g_js_strings.commonstr.troops + "</td><td class='startcol'>" + g_js_strings.commonstr.fought + "</td><td class='endcol'>" + g_js_strings.commonstr.survived + "</td></tr></thead><tbody>");
            var l = Object.keys(this.rslt.fght.s1);
            for (var f = 0; f < l.length; f++) {
                var a = parseInt(this.rslt.fght.s1[l[f]][0]);
                var g = parseInt(this.rslt.fght.s1[l[f]][1]);
                k.push("<tr><td><img src='");
                k.push(stimgUrl);
                k.push("img/units/unit_");
                if (l[f].split("u")[0] == "") {
                    k.push(l[f].split("u")[1])
                } else {
                    k.push(l[f].split("f")[1])
                }
                k.push("_30.png'/></td><td class='trnm'>");
                if (l[f].split("u")[0] == "") {
                    k.push(unitcost["unt" + l[f].split("u")[1]][0])
                } else {
                    k.push(fortcost["frt" + l[f].split("f")[1]][0])
                }
                k.push("</td><td class='startcol'>");
                k.push(a);
                k.push("</td><td class='endcol");
                if (g < a) {
                    k.push(" loseunt")
                }
                k.push("'>");
                k.push(g);
                k.push("</td></tr>")
            }
            k.push("</tbody></table>");
            k.push("</div>");
            k.push("<div class='side rightside'>");
            k.push("<div class='sidettl'><b style='font-size:14px;'>" + g_js_strings.commonstr.defenders + "</b><span class='who'>(");
            k.push(this.defnm);
            k.push(")</span>");
            if (parseInt(this.rslt.winner) == 0) {
                k.push("<b class='winner'>" + g_js_strings.commonstr.winner + "</b>")
            }
            if (parseInt(this.marchtype) != 3 && this.rslt.s0KCombatLv) {
                k.push("<br/>" + g_js_strings.modal_messages_viewreports_view.knightskills + ": " + this.rslt.s0KCombatLv);
                if (typeof (this.rslt.s0atkBoost) != "undefined" && this.rslt.s0atkBoost != 0) {
                    k.push("<br/>" + g_js_strings.modal_messages_viewreports_view.attackboosted + ": " + this.rslt.s0atkBoost * 100 + "%")
                }
                if (typeof (this.rslt.s0defBoost) != "undefined" && this.rslt.s0defBoost != 0) {
                    k.push("<br/>" + g_js_strings.modal_messages_viewreports_view.defenseboosted + ": " + this.rslt.s0defBoost * 100 + "%")
                }
            }
            k.push("</div>");
            var l = Object.keys(this.rslt.fght.s0);
            var b = 0;
            var d = 0;
            for (var f = 0; f < l.length; f++) {
                b = b + parseInt(this.rslt.fght.s0[l[f]][0]);
                d = d + parseInt(this.rslt.fght.s0[l[f]][1])
            }
            var j = (b - d) / b;
            if (j.toFixed(2) < 0.25 && l.length > 0 && parseInt(this.rslt.winner) == 0 && parseInt(this.side) == 1) {
                k.push(g_js_strings.modal_messages_viewreports_view.overwhelmedinbattle);
                k.push("<table cellpadding='0' cellspacing='0' class='trttl'>");
                k.push("<thead><tr><td>&nbsp;</td><td class='trnm'>" + g_js_strings.commonstr.troops + "</td><td class='endcol'>" + g_js_strings.commonstr.killed + "</td></tr></thead><tbody>");
                for (var f = 0; f < l.length; f++) {
                    var a = parseInt(this.rslt.fght.s0[l[f]][0]);
                    var g = parseInt(this.rslt.fght.s0[l[f]][1]);
                    k.push("<tr><td><img src='");
                    k.push(stimgUrl);
                    k.push("img/units/unit_");
                    if (l[f].split("u")[0] == "") {
                        k.push(l[f].split("u")[1])
                    } else {
                        k.push(l[f].split("f")[1])
                    }
                    k.push("_30.png'/></td><td class='trnm'>");
                    if (l[f].split("u")[0] == "") {
                        k.push(unitcost["unt" + l[f].split("u")[1]][0])
                    } else {
                        k.push(fortcost["frt" + l[f].split("f")[1]][0])
                    }
                    k.push("</td><td class='endcol");
                    k.push(" loseunt");
                    k.push("'>");
                    k.push(a - g);
                    k.push("</td></tr>")
                }
                k.push("</tbody></table>")
            } else {
                if (l.length > 0) {
                    k.push("<table cellpadding='0' cellspacing='0' class='trttl'>");
                    k.push("<thead><tr><td>&nbsp;</td><td class='trnm'>" + g_js_strings.commonstr.troops + "</td><td class='startcol'>" + g_js_strings.commonstr.fought + "</td><td class='endcol'>" + g_js_strings.commonstr.survived + "</td></tr></thead><tbody>");
                    for (var f = 0; f < l.length; f++) {
                        var a = parseInt(this.rslt.fght.s0[l[f]][0]);
                        var g = parseInt(this.rslt.fght.s0[l[f]][1]);
                        k.push("<tr><td><img src='");
                        k.push(stimgUrl);
                        k.push("img/units/unit_");
                        if (l[f].split("u")[0] == "") {
                            k.push(l[f].split("u")[1])
                        } else {
                            k.push(l[f].split("f")[1])
                        }
                        k.push("_30.png'/></td><td class='trnm'>");
                        if (l[f].split("u")[0] == "") {
                            k.push(unitcost["unt" + l[f].split("u")[1]][0])
                        } else {
                            k.push(fortcost["frt" + l[f].split("f")[1]][0])
                        }
                        k.push("</td><td class='startcol'>");
                        k.push(a);
                        k.push("</td><td class='endcol");
                        if (g < a) {
                            k.push(" loseunt")
                        }
                        k.push("'>");
                        k.push(g);
                        k.push("</td></tr>")
                    }
                    k.push("</tbody></table>")
                }
            }
            if (l.length == 0) {
                k.push(g_js_strings.modal_messages_viewreports_view.notroopsdef)
            }
            k.push("</div>");
            k.push("</div>")
        } catch (h) {
            k.push("Render Battle Report Exception: " + h)
        }
        return k.join("")
    },
    renderMarchLoot: function () {
        var b = new Array();
        try {
            b.push("<div class='loot_vertical'>");
            if (this.rslt.loot && (parseInt(this.rslt.loot[0]) > 0 || parseInt(this.rslt.loot[1]) > 0 || parseInt(this.rslt.loot[2]) > 0 || parseInt(this.rslt.loot[3]) > 0 || parseInt(this.rslt.loot[4]) > 0 || !Object.isArray(this.rslt.loot[5]))) {
                if (parseInt(this.side) == 1) {
                    b.push(g_js_strings.commonstr.loot)
                } else {
                    if (parseInt(this.side) == 0) {
                        b.push("<span style='color:#A02932;'>" + g_js_strings.commonstr.plundered + "</span>")
                    }
                }
                b.push("<div class='item'><img src='");
                b.push(stimgUrl);
                var d = 0;
                var a = addCommas(this.rslt.loot[0]);
                if (parseInt(this.side) == 1) {
                    d += this.rslt.loot[0];
                    b.push("img/gold_30.png'/><b>" + resourceinfo.rec0 + ":</b> " + a + "</div>")
                } else {
                    if (parseInt(this.rslt.loot[0]) > 0 && parseInt(this.side) == 0) {
                        b.push("img/gold_30.png'/><b>" + resourceinfo.rec0 + ":</b><span style='color:#A02932;'> -" + a + "</span></div>")
                    } else {
                        if (parseInt(this.rslt.loot[0]) == 0 && parseInt(this.side) == 0) {
                            b.push("img/gold_30.png'/><b>" + resourceinfo.rec0 + ":</b><span style='color:#A02932;'> " + a + "</span></div>")
                        }
                    }
                }
                for (var c = 1; c < 5; c++) {
                    b.push("<div class='item'><img src='");
                    b.push(stimgUrl);
                    b.push("img/");
                    switch (c) {
                    case 1:
                        b.push("food");
                        break;
                    case 2:
                        b.push("wood");
                        break;
                    case 3:
                        b.push("stone");
                        break;
                    case 4:
                        b.push("iron");
                        break
                    }
                    b.push("_30.png'/><b>");
                    b.push(resourceinfo["rec" + c]);
                    var j = addCommas(this.rslt.loot[c]);
                    if (parseInt(this.side) == 1) {
                        d += this.rslt.loot[c];
                        b.push(":</b> " + j + "</div>")
                    } else {
                        if (parseInt(this.rslt.loot[c]) > 0 && parseInt(this.side) == 0) {
                            b.push(":</b><span style='color:#A02932;'> -" + j + "</span></div>")
                        } else {
                            if (parseInt(this.rslt.loot[c]) == 0 && parseInt(this.side) == 0) {
                                b.push(":</b><span style='color:#A02932;'> " + j + "</span></div>")
                            }
                        }
                    }
                }
                if (!Object.isArray(this.rslt.loot[5]) && Object.keys(this.rslt.loot[5]).length > 0) {
                    var h = Object.keys(this.rslt.loot[5]);
                    b.push("<div class='loot crests clearfix'>");
                    for (var c = 0; c < h.length; c++) {
                        b.push("<div class='item'><img style='width:30px;' src='");
                        b.push(stimgUrl);
                        b.push("img/items/70/");
                        b.push(h[c]);
                        b.push(".png'/><b>");
                        b.push(itemlist["i" + h[c]].name);
                        b.push(": </b> ");
                        b.push(this.rslt.loot[5][h[c]]);
                        b.push("</div>")
                    }
                    b.push("</div>")
                }
            } else {
                var f = new Template("<div class='item'><img src='" + stimgUrl + "img/#{item}_30.png'/><b>#{item_name}:</b><span style='color:#77823C;'>#{number_item}</span></div>");
                b.push(f.evaluate({
                    item: "gold",
                    item_name: resourceinfo.rec0,
                    number_item: 0
                }));
                b.push(f.evaluate({
                    item: "food",
                    item_name: resourceinfo.rec1,
                    number_item: 0
                }));
                b.push(f.evaluate({
                    item: "wood",
                    item_name: resourceinfo.rec2,
                    number_item: 0
                }));
                b.push(f.evaluate({
                    item: "stone",
                    item_name: resourceinfo.rec3,
                    number_item: 0
                }));
                b.push(f.evaluate({
                    item: "iron",
                    item_name: resourceinfo.rec4,
                    number_item: 0
                }))
            }
            b.push("</div>")
        } catch (g) {
            b.push("renderMarchLoot Exception: " + g)
        }
        return b.join("")
    },
    renderMarchScenery: function (b) {
        var a = new Array();
        try {
            a.push("<div class='loot_and_scene'>");
            a.push(this.renderMarchLoot());
            a.push("<div class='scene'><img src='" + stimgUrl + "img/marchreport/" + b + "'/></div><div style='clear:both'></div>");
            a.push("</div>")
        } catch (c) {
            a.push("renderMarchScenery Exception: " + c)
        }
        return a.join("")
    },
    renderButtons: function () {
        var a = new Array();
        a.push("<div class='reportbuttons'>");
        a.push(this.generateBackButton());
        a.push("</div>");
        a.push("<div style='clear:both'></div>");
        return a.join("")
    }
});
MarchReport.getMarchReport = function () {
    var h = arguments[0];
    var q = arguments[1];
    var n = h[0];
    var a = h[1];
    var p = h[2];
    var e = h[3];
    var m = h[4];
    var f = h[5];
    var l = h[6];
    var i = h[7];
    var g = h[8];
    var s = h[9];
    var j = h[10];
    var k = h[11];
    var b = h[12];
    var t = h[13];
    var c = h[14];
    var d = h[15];
    var o = formatDateByUnixTime(b);
    var r = null;
    if (s == 1) {
        r = new TransportReport(n, a, p, e, m, f, l, i, g, s, j, k, b, t, c, d, q)
    } else {
        if (s == 3) {
            r = new ScoutReport(n, a, p, e, m, f, l, i, g, s, j, k, b, t, c, d, q)
        } else {
            if (s == 4) {
                r = new AttackReport(n, a, p, e, m, f, l, i, g, s, j, k, b, t, c, d, q)
            } else {
                if (s == 8) {
                    r = new AttackReport(n, a, p, e, m, f, l, i, g, s, j, k, b, t, c, d, q)
                }
            }
        }
    }
    return r
};
MarchReport.showFeedHover = function (d, b, a) {
    var c = "";
    switch (a) {
    case "wilderness_win":
        c = g_js_strings.modal_messages_viewreports_view.incentive_msg_hover_winwithrec;
        break;
    case "wilderness_lose":
        c = g_js_strings.modal_messages_viewreports_view.incentive_msg_hover_norec;
        break;
    case "barbarian_win":
        c = g_js_strings.modal_messages_viewreports_view.incentive_msg_hover_winwithrec;
        break;
    case "barbarian_lose":
        c = g_js_strings.modal_messages_viewreports_view.incentive_msg_hover_norec;
        break;
    case "attack_win":
        c = g_js_strings.modal_messages_viewreports_view.incentive_msg_hover_winwithrec;
        break;
    case "defend_victory":
        c = g_js_strings.modal_messages_viewreports_view.incentive_msg_hover_norec;
        break;
    case "defend_defeat":
        c = g_js_strings.modal_messages_viewreports_view.incentive_msg_hover_norec;
        break;
    case "attack_defeat":
        c = g_js_strings.modal_messages_viewreports_view.incentive_msg_hover_norec;
        break;
    default:
        throw "No text found"
    }
    showTooltip(g_js_strings.modal_messages_viewreports_view.incentive_msg_hover_numassist + " " + c, d, b, "modal_msg_body")
};
var TransportReport = Class.create(MarchReport, {
    render: function () {
        var a = new Array();
        try {
            a.push(this.renderReportTitle({
                title: g_js_strings.modal_messages_viewreports_view.transpto + " "
            }));
            a.push(this.renderTransportReport());
            a.push(this.renderButtons())
        } catch (b) {
            a.push(b)
        }
        return a.join("")
    },
    renderTransportReport: function () {
        var a = new Array();
        try {
            a.push(this.renderMarchScenery("transport_scene.jpg"))
        } catch (b) {
            a.push(b)
        }
        return a.join("")
    },
    renderMarchLoot: function () {
        var a = new Array();
        try {
            var b = new Template("<div class='item'><img src='" + stimgUrl + "img/#{item}_30.png'/><b>#{item_name}:</b><span style='color:#77823C;'>#{number_item}</span></div>");
            a.push("<div class='loot_vertical'>");
            a.push(b.evaluate({
                item: "gold",
                item_name: resourceinfo.rec0,
                number_item: addCommas(this.rslt.gold)
            }));
            a.push(b.evaluate({
                item: "food",
                item_name: resourceinfo.rec1,
                number_item: addCommas(this.rslt.resource1)
            }));
            a.push(b.evaluate({
                item: "wood",
                item_name: resourceinfo.rec2,
                number_item: addCommas(this.rslt.resource2)
            }));
            a.push(b.evaluate({
                item: "stone",
                item_name: resourceinfo.rec3,
                number_item: addCommas(this.rslt.resource3)
            }));
            a.push(b.evaluate({
                item: "iron",
                item_name: resourceinfo.rec4,
                number_item: addCommas(this.rslt.resource4)
            }));
            a.push("</div>")
        } catch (c) {
            a.push("renderMarchLoot Exception: " + c)
        }
        return a.join("")
    }
});
var ScoutReport = Class.create(MarchReport, {
    render: function () {
        var c = new Array();
        try {
            var h = g_js_strings.modal_messages_viewreports_view.antiscoutingat + " ";
            if (parseInt(this.side) == 1) {
                h = g_js_strings.modal_messages_viewreports_view.scoutingat + " "
            }
            c.push(this.renderReportTitle({
                title: h
            }));
            if (parseInt(this.rslt.score) > 0) {
                c.push("<div class='reportdetail'>");
                c.push("<div class='side clearfix'>");
                c.push("<div class='scoutttl'>" + g_js_strings.modal_messages_viewreports_view.scoutrpt + "</div>");
                c.push("<div class='reporttablewrap'>");
                c.push("<table cellpadding='0' cellspacing='0' class='trttl'>");
                c.push("<thead><tr><td>&nbsp;</td><td class='trnm'>" + g_js_strings.commonstr.nametx + "</td><td class='startcol'>" + g_js_strings.commonstr.count + "</td></tr></thead><tbody>");
                if (this.rslt.unts && !Object.isArray(this.rslt.unts)) {
                    var b = Object.keys(this.rslt.unts);
                    for (var d = 0; d < b.length; d++) {
                        c.push("<tr><td><img src='");
                        c.push(stimgUrl);
                        c.push("img/units/unit_");
                        c.push(b[d].split("u")[1]);
                        c.push("_30.png'/></td><td class='trnm'>");
                        c.push(unitcost["unt" + b[d].split("u")[1]][0]);
                        c.push("</td><td class='startcol'>");
                        c.push(this.rslt.unts[b[d]]);
                        c.push("</td></tr>")
                    }
                } else {
                    c.push("<tr><td colspan='3'>" + g_js_strings.modal_messages_viewreports_view.nounits + "</td></tr>")
                }
                c.push("</tbody></table>");
                c.push("</div>");
                if (this.rslt.lstlgn) {
                    c.push("<div class='reporttablewrap'>");
                    c.push("<table cellpadding='0' cellspacing='0' class='trttl'>");
                    c.push("<thead><tr><td colspan='2'>" + g_js_strings.modal_messages_viewreports_view.lastlogin + "</td></tr></thead><tbody>");
                    c.push("<tr><td colspan='2'>");
                    c.push(new Date(this.rslt.lstlgn * 1000).toGMTString());
                    c.push("</td></tr>");
                    c.push("</tbody></table>");
                    c.push("</div>")
                }
                if (this.rslt.knght && this.rslt.knght.cbt) {
                    c.push("<div class='reporttablewrap'>");
                    c.push("<table cellpadding='0' cellspacing='0' class='trttl'>");
                    c.push("<thead><tr><td colspan='2'>" + g_js_strings.modal_messages_viewreports_view.knightcomabtlv + "</td></tr></thead><tbody>");
                    c.push("<tr><td colspan='2'>");
                    c.push(this.rslt.knght.cbt);
                    c.push("</td></tr>");
                    c.push("</tbody></table>");
                    c.push("</div>")
                }
                if (this.rslt.frt && !Object.isArray(this.rslt.frt)) {
                    c.push("<div class='reporttablewrap'>");
                    c.push("<table cellpadding='0' cellspacing='0' class='trttl'>");
                    c.push("<thead><tr><td>&nbsp;</td><td class='trnm'>" + g_js_strings.commonstr.nametx + "</td><td class='startcol'>" + g_js_strings.commonstr.count + "</td></tr></thead><tbody>");
                    var b = Object.keys(this.rslt.frt);
                    for (var d = 0; d < b.length; d++) {
                        c.push("<tr><td><img src='");
                        c.push(stimgUrl);
                        c.push("img/units/unit_");
                        c.push(b[d].split("f")[1]);
                        c.push("_30.png'/></td><td class='trnm'>");
                        c.push(fortcost["frt" + b[d].split("f")[1]][0]);
                        c.push("</td><td class='startcol'>");
                        c.push(this.rslt.frt[b[d]]);
                        c.push("</td></tr>")
                    }
                    c.push("</tbody></table>");
                    c.push("</div>")
                }
                if (this.rslt.blds && !Object.isArray(this.rslt.blds)) {
                    c.push("<div class='reporttablewrap'>");
                    c.push("<table cellpadding='0' cellspacing='0' class='trttl'>");
                    c.push("<thead><tr><td>&nbsp;</td><td class='trnm'>" + g_js_strings.commonstr.building + "</td><td class='startcol'>" + g_js_strings.commonstr.levels + "</td></tr></thead><tbody>");
                    var b = Object.keys(this.rslt.blds);
                    for (var d = 0; d < b.length; d++) {
                        var a = parseInt(b[d].split("b")[1]);
                        c.push("<tr><td>&nbsp;</td><td class='trnm'>");
                        c.push(buildingcost["bdg" + a][0]);
                        c.push("</td><td class='startcol'>");
                        c.push(this.rslt.blds[b[d]].join(", "));
                        c.push("</td></tr>")
                    }
                    c.push("</tbody></table>");
                    c.push("</div>")
                }
                if (this.rslt.rsc && !Object.isArray(this.rslt.rsc)) {
                    c.push("<div class='reporttablewrap'>");
                    c.push("<table cellpadding='0' cellspacing='0' class='trttl'>");
                    c.push("<thead><tr><td>&nbsp;</td><td class='trnm'>" + g_js_strings.commonstr.resource + "</td><td class='startcol'>" + g_js_strings.commonstr.quantity + "</td></tr></thead><tbody>");
                    var b = Object.keys(this.rslt.rsc);
                    for (var d = 0; d < b.length; d++) {
                        var f = parseInt(b[d].split("r")[1]);
                        c.push("<tr><td><img src='");
                        c.push(stimgUrl);
                        c.push("img/");
                        if (f == 1) {
                            c.push("food")
                        } else {
                            if (f == 2) {
                                c.push("wood")
                            } else {
                                if (f == 3) {
                                    c.push("stone")
                                } else {
                                    if (f == 4) {
                                        c.push("iron")
                                    }
                                }
                            }
                        }
                        c.push("_30.png'/></td><td class='trnm'>");
                        c.push(resourceinfo["rec" + f]);
                        c.push("</td><td class='startcol'>");
                        c.push(addCommas(parseInt(this.rslt.rsc[b[d]])));
                        c.push("</td></tr>")
                    }
                    c.push("</tbody></table>");
                    c.push("</div>")
                }
                if (this.rslt.tch && !Object.isArray(this.rslt.tch)) {
                    c.push("<div class='reporttablewrap'>");
                    c.push("<table cellpadding='0' cellspacing='0' class='trttl'>");
                    c.push("<thead><tr><td class='trnm'>" + g_js_strings.commonstr.research + "</td><td class='startcol'>" + g_js_strings.commonstr.levels + "</td></tr></thead><tbody>");
                    var b = Object.keys(this.rslt.tch);
                    for (var d = 0; d < b.length; d++) {
                        c.push("<tr><td class='trnm'>");
                        c.push(techcost["tch" + b[d].split("t")[1]][0]);
                        c.push("</td><td class='startcol'>");
                        c.push(this.rslt.tch[b[d]]);
                        c.push("</td></tr>")
                    }
                    c.push("</tbody></table>");
                    c.push("</div>")
                }
                c.push("</div></div>")
            } else {
                if (parseInt(this.side) == 1) {
                    c.push("<div class='reportdetail clearfix'><div class='side'><div class='scoutttl'>" + g_js_strings.modal_messages_viewreports_view.scoutfail + "</div></div></div>")
                }
            }
            c.push(this.renderBattleReport());
            if (parseInt(seed.tech.tch6) < 10) {
                c.push("<div class='reportdetail clearfix'>" + g_js_strings.modal_messages_viewreports_view.eagleeyes + "</div>")
            }
        } catch (g) {
            c.push(g)
        }
        c.push(this.renderButtons());
        return c.join("")
    }
});
var AttackReport = Class.create(MarchReport, {
    render: function () {
        var a = new Array();
        try {
            a.push(this.renderReportTitle({
                title: g_js_strings.modal_messages_viewreports_view.battleat + " "
            }));
            a.push(this.renderWildernessCannotBeConquered());
            a.push(this.renderAttackResult());
            a.push(this.renderAttackScenery());
            a.push(this.renderIncentiveText());
            a.push(this.renderButtons());
            a.push(this.renderBattleReport());
            a.push(this.renderButtons())
        } catch (b) {
            a.push("Attack Report render :" + b)
        }
        return a.join("")
    },
    renderAttackScenery: function () {
        var a = "";
        a = this.renderMarchScenery(this.getAttackReportType() + ".jpg");
        return a
    },
    showFeedButton: function () {
        return false;
        var b = new Date().getTime();
        var j = b - (this.timestamp * 1000);
        var e = (j < 23 * 60 * 60 * 1000);
        var a = false;
        if (this.getAttackReportType() == "wilderness_lose") {
            return false
        }
        if (this.isViewerWinner()) {
            if (this.rslt.loot && (parseInt(this.rslt.loot[0]) > 100 || parseInt(this.rslt.loot[1]) > 100 || parseInt(this.rslt.loot[2]) > 100 || parseInt(this.rslt.loot[3]) > 100 || parseInt(this.rslt.loot[4]) > 100)) {
                a = true
            } else {
                a = false
            }
        } else {
            if (this.rslt.side == 0) {
                var h = Object.keys(this.rslt.fght.s0);
                for (var f = 0; f < h.length; f++) {
                    var c = parseInt(this.rslt.fght.s0[h[f]][0]);
                    var g = parseInt(this.rslt.fght.s0[h[f]][1]);
                    var d = c - g;
                    if (d > 100) {
                        a = true;
                        break
                    }
                }
            } else {
                var h = Object.keys(this.rslt.fght.s1);
                for (var f = 0; f < h.length; f++) {
                    var c = parseInt(this.rslt.fght.s1[h[f]][0]);
                    var g = parseInt(this.rslt.fght.s1[h[f]][1]);
                    var d = c - g;
                    if (d > 100) {
                        a = true;
                        break
                    }
                }
            }
        }
        return e && a
    },
    renderIncentiveText: function () {
        var b = new Array();
        try {
            if (this.showFeedButton()) {
                var a = new Template("<div class='report_incentive_paragraph'>#{incentiveText}</div>");
                var c = {
                    incentiveText: g_js_strings.modal_messages_viewreports_view.incentive_paragraph
                };
                switch (this.getAttackReportType()) {
                case "wilderness_win":
                    c.incentiveText = g_js_strings.modal_messages_viewreports_view.incentive_msg_main_sharestorywithrec;
                    break;
                case "wilderness_lose":
                    c.incentiveText = g_js_strings.modal_messages_viewreports_view.incentive_msg_main_sharestory;
                    break;
                case "barbarian_win":
                    c.incentiveText = g_js_strings.modal_messages_viewreports_view.incentive_msg_main_sharestorywithrec;
                    break;
                case "barbarian_lose":
                    c.incentiveText = g_js_strings.modal_messages_viewreports_view.incentive_msg_main_sharestory;
                    break;
                case "attack_win":
                    c.incentiveText = g_js_strings.modal_messages_viewreports_view.incentive_msg_main_sharestorywithrec;
                    break;
                case "defend_victory":
                    c.incentiveText = g_js_strings.modal_messages_viewreports_view.incentive_msg_main_sharestory;
                    break;
                case "defend_defeat":
                    c.incentiveText = g_js_strings.modal_messages_viewreports_view.incentive_msg_main_sharestory;
                    break;
                case "attack_defeat":
                    c.incentiveText = g_js_strings.modal_messages_viewreports_view.incentive_msg_main_sharestory;
                    break;
                case "barbarianraid_win1":
                case "barbarianraid_win2":
                case "barbarianraid_lose1":
                case "barbarianraid_lose2":
                    c.incentiveText = "";
                    break;
                default:
                    throw "No text found"
                }
                b.push(a.evaluate(c))
            }
        } catch (d) {
            b.push("incentive text error " + d)
        }
        return b.join("")
    },
    renderButtons: function () {
        var a = new Array();
        a.push("<div style='clear:both;margin:10px 0px 10px 30px'>");
        a.push(this.generateBackButton());
        a.push(this.renderFeedButton());
        a.push("</div>");
        a.push("<div style='clear:both'></div>");
        return a.join("")
    },
    renderFeedButton: function () {
        var a = new Array();
        try {
            if (this.showFeedButton()) {
                var d = 0;
                if (this.rslt.loot && (parseInt(this.rslt.loot[0]) > 0 || parseInt(this.rslt.loot[1]) > 0 || parseInt(this.rslt.loot[2]) > 0 || parseInt(this.rslt.loot[3]) > 0 || parseInt(this.rslt.loot[4]) > 0 || !Object.isArray(this.rslt.loot[5]))) {
                    if (parseInt(this.side) == 1) {
                        for (var b = 0; b < 5; b++) {
                            d += this.rslt.loot[b]
                        }
                    }
                }
                var g = new Template('<div class=\'clearfix\' style=\'float:left;\'><a  class=\'button20\' onclick=\'modal_share_victory("#{tileName}",#{tilelv}, #{total_res},"#{defnm}", "#{atknm}", "#{defgen}" ,"#{atkgen}",  #{feed_id},#{rptid},#{side})\' onmouseover=\'MarchReport.showFeedHover(this,event,"' + this.getAttackReportType() + "\");' onmouseout='removeTooltip();'><span>#{button_text}</span></a></div>");
                var c = {
                    tilelv: this.tilelv,
                    total_res: d,
                    defnm: this.defnm,
                    atknm: this.atknm,
                    defgen: this.defgen,
                    atkgen: this.atkgen,
                    rptid: this.rptid,
                    side: this.side
                };
                switch (this.getAttackReportType()) {
                case "wilderness_win":
                    c = {
                        tilelv: this.tilelv,
                        total_res: d,
                        defnm: "null",
                        atknm: "null",
                        defgen: "null",
                        atkgen: "null",
                        rptid: this.rptid,
                        side: this.side
                    };
                    c.tileName = g_mapObject.types[parseInt(this.tiletype)].capitalize();
                    c.button_text = g_js_strings.commonstr.sharetowall;
                    c.feed_id = 110;
                    break;
                case "wilderness_lose":
                    c = {
                        tilelv: this.tilelv,
                        total_res: d,
                        defnm: "null",
                        atknm: "null",
                        defgen: "null",
                        atkgen: "null",
                        rptid: this.rptid,
                        side: this.side
                    };
                    c.tileName = g_mapObject.types[parseInt(this.tiletype)].capitalize();
                    c.button_text = g_js_strings.modal_messages_viewreports_view.sharetorecovertroops;
                    c.feed_id = 114;
                    break;
                case "barbarian_win":
                    c.tileName = g_mapObject.types[parseInt(this.tiletype)].capitalize();
                    c.button_text = g_js_strings.commonstr.sharetowall;
                    c.feed_id = 111;
                    break;
                case "barbarian_lose":
                    c.tileName = g_mapObject.types[parseInt(this.tiletype)].capitalize();
                    c.button_text = g_js_strings.modal_messages_viewreports_view.sharetorecovertroops;
                    c.feed_id = 115;
                    break;
                case "attack_win":
                    c.tileName = g_mapObject.types[parseInt(this.tiletype)].capitalize();
                    c.button_text = g_js_strings.commonstr.sharetowall;
                    c.feed_id = 112;
                    break;
                case "defend_victory":
                    c.tileName = g_mapObject.types[parseInt(this.tiletype)].capitalize();
                    c.button_text = g_js_strings.modal_messages_viewreports_view.sharetorecovertroops;
                    c.feed_id = 113;
                    break;
                case "defend_defeat":
                    c.tileName = g_mapObject.types[parseInt(this.tiletype)].capitalize();
                    c.button_text = g_js_strings.modal_messages_viewreports_view.sharetorecovertroops;
                    c.feed_id = 117;
                    break;
                case "attack_defeat":
                    c.tileName = g_mapObject.types[parseInt(this.tiletype)].capitalize();
                    c.button_text = g_js_strings.modal_messages_viewreports_view.sharetorecovertroops;
                    c.feed_id = 116;
                    break;
                default:
                    throw "No report type"
                }
                a.push(g.evaluate(c))
            }
        } catch (f) {
            a.push(f)
        }
        return a.join("")
    },
    getAttackReportType: function () {
        var a = "";
        try {
            if (parseInt(this.marchtype) == 8) {
                var b = 1 + Math.floor(Math.random() * 2);
                if (parseInt(this.rslt.winner) == 0) {
                    a = "barbarianraid_lose" + b
                } else {
                    a = "barbarianraid_win" + b
                }
            } else {
                if (parseInt(this.tiletype) != 51) {
                    if (parseInt(this.rslt.winner) == 1 && parseInt(this.side) == 1 || parseInt(this.rslt.winner) == 2 && parseInt(this.side) == 1) {
                        a = "wilderness_win"
                    } else {
                        if (parseInt(this.rslt.winner) == 0 && parseInt(this.side) == 0) {
                            a = "wilderness_win"
                        } else {
                            if ((parseInt(this.side) == 1 && parseInt(this.rslt.winner) == 0) || (parseInt(this.side) == 0 && parseInt(this.rslt.winner) == 1)) {
                                a = "wilderness_lose"
                            }
                        }
                    }
                } else {
                    if (parseInt(this.defid) == 0) {
                        if (parseInt(this.rslt.winner) == 1 && parseInt(this.side) == 1 || parseInt(this.rslt.winner) == 2 && parseInt(this.side) == 1) {
                            a = "barbarian_win"
                        } else {
                            if (parseInt(this.side) == 1 && parseInt(this.rslt.winner) == 0) {
                                a = "barbarian_lose"
                            }
                        }
                    } else {
                        if (parseInt(this.rslt.winner) == 1 && parseInt(this.side) == 1 || parseInt(this.rslt.winner) == 2 && parseInt(this.side) == 1) {
                            a = "attack_win"
                        } else {
                            if (parseInt(this.rslt.winner) == 0 && parseInt(this.side) == 0) {
                                a = "defend_victory"
                            } else {
                                if (parseInt(this.side) == 0 && (parseInt(this.rslt.winner) == 1 || parseInt(this.rslt.winner) == 2)) {
                                    a = "defend_defeat"
                                } else {
                                    if (parseInt(this.side) == 1 && parseInt(this.rslt.winner) == 0) {
                                        a = "attack_defeat"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        } catch (c) {
            a = "error"
        }
        return a
    },
    isViewerWinner: function () {
        if (parseInt(this.side) == 1 && (parseInt(this.rslt.winner) == 1 || parseInt(this.rslt.winner) == 2)) {
            return true
        } else {
            if (parseInt(this.side) == 0 && parseInt(this.rslt.winner) == 0) {
                return true
            } else {
                return false
            }
        }
    }
});

function modal_openMarket(a) {
    modal_marketplace(a)
}
function modal_marketplace(b) {
    var a = new Array();
    a.push("<div class='tabsbar clearfix' id='marketmod_recsel' name='1'><a  class='tab selected' id='marketmod_recsel1' onclick='modal_marketplace_changerec(1);return false;'><span><img src='" + stimgUrl + "img/chrome_icon_food.png' align='absmiddle'/> " + resourceinfo.rec1 + "</span></a><a class='tab'  id='marketmod_recsel2' onclick='modal_marketplace_changerec(2);return false;'><span><img src='" + stimgUrl + "img/chrome_icon_wood.png' align='absmiddle'/> " + resourceinfo.rec2 + "</span></a><a class='tab'  id='marketmod_recsel3' onclick='modal_marketplace_changerec(3);return false;'><span><img src='" + stimgUrl + "img/chrome_icon_stone.png' align='absmiddle'/> " + resourceinfo.rec3 + "</span></a><a class='tab'  id='marketmod_recsel4' onclick='modal_marketplace_changerec(4);return false;'><span><img src='" + stimgUrl + "img/chrome_icon_ore.png' align='absmiddle'/> " + resourceinfo.rec4 + "</span></a><a  class='tab' id='marketmod_recsel5' onclick='modal_marketplace_viewtransactions();return false;'><span id='market_num_of_transactions'>" + g_js_strings.commonstr.transactions + "</span></a></div>");
    a.push("<div class='marketmain_maxtransac' id='marketmain_maxtransac' style='display:none;' name='" + b + "'>max</div>");
    a.push("<div class='marketmain_bdy' id='marketmain_bdy'>");
    a.push("<div class='buysellinfo'>");
    a.push("<div class='buyselltophd'>" + g_js_strings.commonstr.buy.toUpperCase() + "</div>");
    a.push("<div id='marketmod_selltable' class='buyselltable'></div>");
    a.push("</div>");
    a.push("<div class='acct'>");
    a.push("<div class='accthd'>" + g_js_strings.modal_marketplace.youract + "</div>");
    a.push("<div class='info'><b id='marketmod_recname'>" + resourceinfo.rec1 + "");
    a.push("</b>: <span id='marketmod_recnum'>");
    a.push(addCommas(parseInt(seed.resources["city" + currentcityid]["rec" + 1][0]) / 3600));
    a.push("</span></div>");
    a.push("<div class='info'><b>" + resourceinfo.rec0 + "</b>: <span id='marketmod_goldnum'>");
    a.push(addCommas(seed.citystats["city" + currentcityid].gold[0]));
    a.push("</span></div>");
    a.push("</div>");
    a.push("<div class='marketinfotx'><div>");
    a.push(g_js_strings.modal_marketplace.provincedesc + ": <b>" + provincenames["p" + currentcityinfo[4]] + "</b>. " + g_js_strings.modal_marketplace.provincerestr);
    a.push("</div></div>");
    a.push("<input type='hidden' id='marketmod_transac' value='2'/>");
    a.push("<div class='transactions'>");
    a.push("<div class='header'>" + g_js_strings.commonstr.sell.toUpperCase() + "</div>");
    a.push("<div class='clearfix transactentry'><b>" + g_js_strings.modal_marketplace.resamt + ":</b><br/><input type='text' id='marketmod_amount' value='0' maxlength='6' onkeyup='modal_marketplace_updateprice();'/></div>");
    a.push("<div class='tradingfee'>" + g_js_strings.modal_marketplace.roundingdesc + "</div><br/>");
    a.push("<div class='clearfix transactentry'><b>" + g_js_strings.modal_marketplace.unitprice + ":</b><br/><input type='text' id='marketmod_price' value='0' onkeyup='modal_marketplace_updateprice();' maxlength='5'/></div>");
    a.push("<div class='tradingfee'>" + g_js_strings.modal_marketplace.newpercdesc + "</div><br/>");
    a.push("<div class='clearfix transactentry'><b>" + g_js_strings.modal_marketplace.tradefee + ": </b><br/><span id='marketmod_fee' class='price'>0</span> <span class='price'>" + resourceinfo.rec0 + "</span></div>");
    a.push("<div class='marketmod_totalpricediv clearfix transactentry'><b id='marketmod_totalpricetxt'>" + g_js_strings.modal_marketplace.totalcost + ":</b><br/><span id='marketmod_totalprice' class='price'>0</span> <span class='price'>" + resourceinfo.rec0 + "</span></div><br/>");
    a.push("<div class='clearfix buysellbtn'><a onclick='market_confirm_transaction(2,0);return false;'  class='button25'><span id='modal_marketplace_buysell'>" + g_js_strings.commonstr.sell + "</span></a></div>");
    a.push("</div>");
    a.push("</div>");
    a.push("<div id='marketmain_transactions' style='display:none;'>");
    a.push("<div class='marketmain_transactions'>");
    a.push("<div class='transacthd'>" + g_js_strings.modal_marketplace.pendingoffers + "</div>");
    a.push("<div id='marketmain_transactions_pending' class='market_transactions_table'></div>");
    a.push("<div class='transacthd'>" + g_js_strings.modal_marketplace.tradestatus + "</div>");
    a.push("<div id='marketmain_transactions_status' class='market_transactions_table'></div>");
    a.push("</div>");
    a.push("</div>");
    $("modal_build_content").innerHTML = a.join("");
    getModalResourceBar();
    modal_marketplace_changerec(1)
}
function modal_marketplace_cancel(mid, rtype, postingtype, kremaining, price) {
    var params = Object.clone(g_ajaxparams);
    params.cid = currentcityid;
    params.pro = currentcityinfo[4];
    params.mid = mid;
    params.rtype = rtype;
    new Ajax.Request(g_ajaxpath + "ajax/untrade.php" + g_ajaxsuffix, {
        method: "post",
        parameters: params,
        onSuccess: function (transport) {
            var rslt = eval("(" + transport.responseText + ")");
            if (rslt.ok) {
                modal_marketplace_viewtransactions();
                Modal.showAlert(g_js_strings.modal_marketplace_cancel.transcancel);
                if (parseInt(postingtype) == 1) {
                    seed.citystats["city" + currentcityid].gold[0] = parseInt(seed.citystats["city" + currentcityid].gold[0]) + (kremaining * price);
                    update_gold()
                } else {
                    seed.resources["city" + currentcityid]["rec" + rtype][0] = parseInt(seed.resources["city" + currentcityid]["rec" + rtype][0]) + (kremaining * 3600000)
                }
                getModalResourceBar()
            } else {
                if (!rslt.error_code && rslt.msg) {
                    var msgObj = {
                        type: "worker",
                        text: rslt.msg
                    };
                    Modal.showTrackerAlert(msgObj)
                } else {
                    Modal.showAlert(printLocalError((rslt.error_code || null), (rslt.msg || null), (rslt.feedback || null)))
                }
            }
        },
        onFailure: function () {}
    })
}
function modal_marketplace_viewtransactions() {
    $("marketmain_maxtransac").hide();
    var sels = $("marketmod_recsel").select(".selected");
    if (sels.length > 0) {
        sels[0].removeClassName("selected")
    }
    $("marketmod_recsel5").addClassName("selected");
    $("modal_build").className = "tab0";
    var params = Object.clone(g_ajaxparams);
    params.cid = currentcityid;
    new Ajax.Request(g_ajaxpath + "ajax/getCityTradeStatus.php" + g_ajaxsuffix, {
        method: "post",
        parameters: params,
        onSuccess: function (transport) {
            var rslt = eval("(" + transport.responseText + ")");
            if (rslt.ok) {
                $("marketmain_bdy").hide();
                var pending = new Array();
                pending.push("<table cellpadding='0' cellspacing='0'><thead><tr><td class='resource'>" + g_js_strings.commonstr.resource + "</td><td class='amount'>" + g_js_strings.commonstr.amount + "</td><td class='unitprice'>" + g_js_strings.modal_marketplace.unitprice + "</td><td class='amounttraded'>" + g_js_strings.modal_marketplace_viewtransactions.amttraded + "</td><td class='status'>" + g_js_strings.commonstr.status + "</td><td class='actions'>" + g_js_strings.commonstr.actions + "</td></tr></thead><tbody>");
                var numoftransactions = rslt.pending.length;
                for (var i = 0; i < rslt.pending.length; i++) {
                    pending.push("<tr><td>");
                    pending.push(resourceinfo["rec" + rslt.pending[i].resourceType]);
                    pending.push("</td><td>");
                    pending.push(parseInt(rslt.pending[i].quantityK) * 1000);
                    pending.push("</td><td>");
                    pending.push(parseInt(rslt.pending[i].unitPricex1000) / 1000);
                    pending.push("</td><td>");
                    pending.push((parseInt(rslt.pending[i].quantityK) - parseInt(rslt.pending[i].remainingQuantityK)) * 1000);
                    pending.push("</td><td>");
                    if (parseInt(rslt.pending[i].postingType) == 1) {
                        pending.push(g_js_strings.commonstr.buying)
                    } else {
                        pending.push(g_js_strings.commonstr.selling)
                    }
                    pending.push("</td><td>");
                    pending.push("<a  class='button20' onclick='modal_marketplace_cancel(" + rslt.pending[i].marketPostingId + "," + rslt.pending[i].resourceType + "," + rslt.pending[i].postingType + "," + rslt.pending[i].remainingQuantityK + "," + rslt.pending[i].unitPricex1000 + ");return false;'><span>" + g_js_strings.commonstr.cancel + "</span></a>");
                    pending.push("</td></tr>")
                }
                pending.push("</tbody></table>");
                $("marketmain_transactions_pending").innerHTML = pending.join("");
                $("marketmain_transactions").show();
                var delivery = new Array();
                delivery.push("<table cellpadding='0' cellspacing='0'><thead><tr><td class='resource'>" + g_js_strings.commonstr.resource + "</td><td class='amount'>" + g_js_strings.commonstr.amount + "</td><td class='unitprice'>" + g_js_strings.modal_marketplace.unitprice + "</td><td class='amounttraded'>" + g_js_strings.modal_marketplace_viewtransactions.totalprice + "</td><td class='status'>" + g_js_strings.modal_marketplace_viewtransactions.esttime + "</td><td class='actions'>" + g_js_strings.commonstr.actions + "</td></tr></thead><tbody>");
                if (!Object.isArray(rslt.deliveries)) {
                    var times = Object.keys(rslt.deliveries);
                    for (var k = 0; k < times.length; k++) {
                        var deliv = rslt.deliveries[times[k]];
                        for (var i = 0; i < deliv.length; i++) {
                            if (seed.queue_mkt["city" + currentcityid][times[k]] && seed.queue_mkt["city" + currentcityid][times[k]][i]) {
                                numoftransactions++;
                                delivery.push("<tr><td>");
                                delivery.push(resourceinfo["rec" + deliv[i].resourceType]);
                                delivery.push("</td><td>");
                                delivery.push(parseInt(deliv[i].quantityK) * 1000);
                                delivery.push("</td><td>");
                                delivery.push(parseInt(deliv[i].unitPricex1000) / 1000);
                                delivery.push("</td><td>");
                                delivery.push(parseInt(deliv[i].quantityK) * parseInt(deliv[i].unitPricex1000));
                                delivery.push("</td><td class='time' name='" + deliv[i].eventUnixTime + "_" + i + "'>");
                                delivery.push(timestr(parseInt(deliv[i].eventUnixTime) - unixtime()));
                                delivery.push("</td><td>");
                                delivery.push("&nbsp;");
                                delivery.push("<a  class='inlineButton20Red' onclick='modal_marketplace_speedup(" + deliv[i].marketDeliveryId + "," + deliv[i].eventUnixTime + "," + i + ");return false;'><span>" + g_js_strings.commonstr.speedup + "</span></a>");
                                delivery.push("</td></tr>")
                            }
                        }
                    }
                }
                $("marketmain_transactions_status").innerHTML = delivery.join("");
                if (rslt.updateSeed) {
                    update_seed(rslt.updateSeed)
                }
                $("market_num_of_transactions").innerHTML = g_js_strings.commonstr.transactions + "<br/>" + numoftransactions
            } else {
                Modal.showAlert(printLocalError((rslt.error_code || null), (rslt.msg || null), (rslt.feedback || null)))
            }
        },
        onFailure: function () {}
    })
}
function modal_marketplace_speedup(b, c, a) {
    var d = new Array();
    d.push("<div id='modal_lv10'>");
    d.push("<div class='lv10 clearfix'>");
    d.push("<img src='");
    d.push(stimgUrl);
    d.push("img/items/70/49.jpg'/>");
    d.push("<div class='info'><div class='ttl'>" + g_js_strings.commonstr.youneed + " ");
    d.push(itemlist.i49.name);
    d.push(" to finish this transaction immediately.</div><div class='own'>" + g_js_strings.commonstr.youown + ": ");
    if (seed.items.i49 > 0) {
        d.push(seed.items.i49)
    } else {
        d.push(0)
    }
    d.push("</div></div>");
    d.push("</div>");
    d.push("<div class='btns clearfix'>");
    if (seed.items.i49 > 0) {
        d.push("<a  class='button20' onclick='modal_marketplace_speedup_do(" + b + "," + c + "," + a + ");return false;'><span>" + g_js_strings.commonstr.speedup + "</span></a>")
    } else {
        d.push("<a  class='button20' onclick='Modal.hideModalAll();modal_shop(2);return false;'><span>" + g_js_strings.commonstr.getmore + "</span></a>")
    }
    d.push("<a  class='cancel' onclick='Modal.hideModal();return false;'>" + g_js_strings.commonstr.cancel + "</a>");
    d.push("</div></div>");
    Modal.showModal(400, 400, 130, 130, g_js_strings.modaltitles.speedupmarkettransaction, d.join(""))
}
function modal_marketplace_speedup_do(mid, timeidx, idx) {
    var params = Object.clone(g_ajaxparams);
    params.mid = mid;
    params.cid = currentcityid;
    params.iid = 49;
    new Ajax.Request(g_ajaxpath + "ajax/speedupTrade.php" + g_ajaxsuffix, {
        method: "post",
        parameters: params,
        onSuccess: function (transport) {
            var rslt = eval("(" + transport.responseText + ")");
            if (rslt.ok) {
                seed.items.i49 = parseInt(seed.items.i49) - 1;
                ksoItems[49].subtract();
                Modal.hideModal();
                if (seed.queue_mkt["city" + currentcityid][timeidx] && seed.queue_mkt["city" + currentcityid][timeidx][idx]) {
                    seed.queue_mkt["city" + currentcityid][timeidx][idx].eventUnixTime = "1";
                    seed.resources["city" + currentcityid]["rec" + seed.queue_mkt["city" + currentcityid][timeidx][idx].resourceType][0] += parseInt(seed.queue_mkt["city" + currentcityid][timeidx][idx].quantityK) * 3600000
                }
                modal_marketplace_viewtransactions()
            } else {
                Modal.showAlert(rslt.msg)
            }
        },
        onFailure: function () {}
    })
}
function modal_marketplace_buysell(b, c) {
    $("marketmod_transac").value = b;
    var a = $("market_buyselltabs").select(".selected");
    if (a.length > 0) {
        a[0].removeClassName("selected")
    }
    c.className = "tab selected";
    if (parseInt(b) == 1) {
        $("modal_marketplace_buysell").innerHTML = g_js_strings.commonstr.buy;
        $("marketmod_totalpricetxt").innerHTML = g_js_strings.modal_marketplace_buysell.totalcost + ":"
    } else {
        $("modal_marketplace_buysell").innerHTML = g_js_strings.commonstr.sell;
        $("marketmod_totalpricetxt").innerHTML = g_js_strings.modal_marketplace_buysell.totalearned + ":"
    }
    modal_marketplace_updateprice()
}
function modal_marketplace_base() {
    modal_marketplace_changerec(1)
}
function modal_marketplace_checkbuy(quantk, price, res) {
    var params = Object.clone(g_ajaxparams);
    params.pid = currentcityinfo[4];
    new Ajax.Request(g_ajaxpath + "ajax/getMarketInfo.php" + g_ajaxsuffix, {
        method: "post",
        parameters: params,
        onSuccess: function (transport) {
            var rslt = eval("(" + transport.responseText + ")");
            if (rslt.ok) {
                var sellinfo = rslt.data[res]["2"];
                if (!Object.isArray(sellinfo)) {
                    var pricemg = parseInt(price * 1000) + "mg";
                    if (parseInt(sellinfo[pricemg]) >= quantk) {
                        market_dotrade(quantk, price, 1)
                    } else {
                        Modal.hideModal();
                        Modal.showAlert(g_js_strings.modal_marketplace_bidoffer.noresource, false, 450);
                        modal_marketplace_changerec(res)
                    }
                } else {
                    Modal.hideModal();
                    Modal.showAlert(g_js_strings.modal_marketplace_bidoffer.noresource, false, 450);
                    modal_marketplace_changerec(res)
                }
            } else {}
        },
        onFailure: function () {}
    })
}
function modal_marketplace_changerec(recid) {
    market_update_num_of_transaction();
    var oldid = $("marketmod_recsel").getAttribute("name");
    var sels = $("marketmod_recsel").select(".selected");
    if (sels.length > 0) {
        sels[0].removeClassName("selected")
    }
    $("marketmod_goldnum").innerHTML = addCommas(seed.citystats["city" + currentcityid].gold[0]);
    $("marketmod_recsel").setAttribute("name", recid);
    $("marketmod_recsel" + recid).addClassName("selected");
    $("modal_build").className = "tab" + recid;
    $("marketmod_selltable").innerHTML = "<div class='spinny'></div>";
    var params = Object.clone(g_ajaxparams);
    params.pid = currentcityinfo[4];
    new Ajax.Request(g_ajaxpath + "ajax/getMarketInfo.php" + g_ajaxsuffix, {
        method: "post",
        parameters: params,
        onSuccess: function (transport) {
            var rslt = eval("(" + transport.responseText + ")");
            if (rslt.ok) {
                var buyhtml = new Array();
                var buyinfo = rslt.data[recid][1];
                var recnm = resourceinfo["rec" + recid];
                buyhtml.push("<div class='buysellhd'>" + g_js_strings.modal_marketplace_changerec.numrequested.replace("%1$s", recnm) + "</div>");
                buyhtml.push("<table cellpadding='0' cellspacing='0'><thead><tr><td class='amount'><div>" + g_js_strings.commonstr.amount + "</div></td><td class='unitprice'>" + g_js_strings.modal_marketplace.unitprice + "</td></tr></thead><tbody>");
                if (!Object.isArray(buyinfo)) {
                    var prices = Object.keys(buyinfo);
                    for (var i = 0; i < prices.length; i++) {
                        buyhtml.push("<tr><td class='amount'><div>");
                        buyhtml.push(addCommas(parseInt(buyinfo[prices[i]]) * 1000));
                        buyhtml.push("</div></td><td class='unitprice'><div>");
                        buyhtml.push(parseInt(prices[i].split("mg")[0]) / 1000);
                        buyhtml.push("</div></td></tr>")
                    }
                }
                buyhtml.push("</tbody></table>");
                var sellhtml = new Array();
                var sellinfo = rslt.data[recid][2];
                sellhtml.push("<table cellpadding='5' cellspacing='0' width='100%'><thead><tr><td><div>" + g_js_strings.commonstr.amount + "</div></td><td><div>" + g_js_strings.modal_marketplace.unitprice + "</div></td><td colspan='2'></td></tr></thead><tbody>");
                if (!Object.isArray(sellinfo)) {
                    var prices = Object.keys(sellinfo);
                    for (var i = 0; i < prices.length; i++) {
                        sellhtml.push("<tr><td width='27%' class='amount'>");
                        sellhtml.push("<input type='hidden' id='market_resourceamount_input" + i + "' value='" + parseInt(sellinfo[prices[i]]) * 1000 + "'/>");
                        sellhtml.push(addCommas(parseInt(sellinfo[prices[i]]) * 1000));
                        sellhtml.push("</td><td width='26%' class='unitprice'>");
                        sellhtml.push(parseInt(prices[i].split("mg")[0]) / 1000);
                        sellhtml.push("</td>");
                        sellhtml.push("<td width='25%' class='max'><input type='hidden' id='market_unitprice_input" + i + "' value='" + (parseInt(prices[i].split("mg")[0]) / 1000) + "'/><input type='text' id='market_amount_input" + i + "' /></td>");
                        sellhtml.push('<td width="22%" class="buttons"><a class="buttonDown14" onclick="market_max(' + i + "," + parseInt(sellinfo[prices[i]]) * 1000 + '); return false;"><span>' + g_js_strings.commonstr.max + "</span></a>");
                        sellhtml.push("<a class='button14' onclick='market_confirm_transaction(1," + i + "); return false;'><span>" + g_js_strings.commonstr.buy + "</span></a></td>");
                        sellhtml.push("</tr>")
                    }
                }
                sellhtml.push("</tbody></table>");
                $("marketmod_selltable").innerHTML = sellhtml.join("")
            } else {
                Modal.showAlert(printLocalError((rslt.error_code || null), (rslt.msg || null), (rslt.feedback || null)))
            }
        },
        onFailure: function () {}
    });
    $("marketmod_recname").innerHTML = $("marketmod_recsel" + recid).innerHTML;
    $("marketmod_recnum").innerHTML = addCommas(parseInt(parseInt(seed.resources["city" + currentcityid]["rec" + recid][0]) / 3600));
    $("marketmod_amount").value = 0;
    $("marketmod_price").value = 0;
    $("marketmod_fee").innerHTML = "0";
    $("marketmod_totalprice").innerHTML = "0";
    $("marketmain_transactions").hide();
    $("marketmain_bdy").show()
}
function market_update_num_of_transaction() {
    var params = Object.clone(g_ajaxparams);
    params.cid = currentcityid;
    new Ajax.Request(g_ajaxpath + "ajax/getCityTradeStatus.php" + g_ajaxsuffix, {
        method: "post",
        parameters: params,
        onSuccess: function (transport) {
            var rslt = eval("(" + transport.responseText + ")");
            if (rslt.ok) {
                var numoftransactions = rslt.pending.length;
                if (!Object.isArray(rslt.deliveries)) {
                    var times = Object.keys(rslt.deliveries);
                    for (var k = 0; k < times.length; k++) {
                        var deliv = rslt.deliveries[times[k]];
                        for (var i = 0; i < deliv.length; i++) {
                            if (seed.queue_mkt["city" + currentcityid][times[k]] && seed.queue_mkt["city" + currentcityid][times[k]][i]) {
                                numoftransactions++
                            }
                        }
                    }
                }
                $("market_num_of_transactions").innerHTML = g_js_strings.commonstr.transactions + "<br/>" + numoftransactions;
                if ($("marketmain_maxtransac")) {
                    if (parseInt(numoftransactions) >= parseInt($("marketmain_maxtransac").getAttribute("name"))) {
                        if (parseInt($("marketmain_maxtransac").getAttribute("name")) < 10) {
                            $("marketmain_maxtransac").innerHTML = g_js_strings.market_update_num_of_transaction.maxtransac + " " + g_js_strings.market_update_num_of_transaction.upgrademarket.replace("%1$s", buildingcost.bdg10[0])
                        } else {
                            $("marketmain_maxtransac").innerHTML = g_js_strings.market_update_num_of_transaction.maxtransac
                        }
                        $("marketmain_maxtransac").show()
                    } else {
                        $("marketmain_maxtransac").hide()
                    }
                }
            } else {}
        },
        onFailure: function () {}
    })
}
function market_max(c, b) {
    var a = market_resource_maxpossible(c, b);
    $("market_amount_input" + c).value = a
}
function market_resource_maxpossible(a, b) {
    var d = parseInt(b) * parseFloat($("market_unitprice_input" + a).value);
    var e = parseInt(d * 0.005 * 100) / 100;
    var f = d + e;
    var h = parseInt(seed.citystats["city" + currentcityid].gold[0]);
    var g = 0;
    if (f < h) {
        g = b
    } else {
        var i = h / 1.005;
        var c = parseInt(h / (1.005 * parseFloat($("market_unitprice_input" + a).value)));
        g = market_rounddown_resourceamount(c)
    }
    if (g < 1000) {
        g = 0
    }
    if (g > 999000) {
        g = 999000
    }
    return g
}
function market_rounddown_resourceamount(a) {
    return Math.floor(parseFloat(a) / 1000) * 1000
}
function market_confirm_transaction(d, a) {
    var f = new Array();
    var o;
    var g;
    var j;
    var p;
    var h;
    var l;
    var n;
    var e;
    var k = new Array();
    if (d == 1) {
        o = g_js_strings.modaltitles.confirmbuy;
        g = g_js_strings.commonstr.buy;
        j = $("market_amount_input" + a).value;
        p = $("market_unitprice_input" + a).value;
        e = g_js_strings.modal_marketplace_buysell.totalcost
    } else {
        o = g_js_strings.modaltitles.confirmsale;
        g = g_js_strings.commonstr.sell;
        j = $("marketmod_amount").value;
        p = $("marketmod_price").value;
        e = g_js_strings.modal_marketplace_buysell.totalearned
    }
    if (/^((\d+(\.\d*)?)|((\d*\.)?\d+))$/.test(p) == false) {
        k.push(g_js_strings.modal_marketplace_bidoffer.invalidprice)
    }
    if (/^\d+$/.test(j) == false) {
        k.push(g_js_strings.modal_marketplace_bidoffer.invalidamt)
    }
    if (k.length > 0) {
        Modal.showAlert(k);
        return false
    }
    j = market_rounddown_resourceamount(parseInt(j, 10));
    if (parseInt(j) < 1000) {
        if (parseInt(d) == 1) {
            Modal.showAlert(g_js_strings.modal_marketplace_bidoffer.buyink, false, 450)
        } else {
            Modal.showAlert(g_js_strings.modal_marketplace_bidoffer.sellink, false, 450)
        }
        return false
    }
    if (parseInt(d) == 1) {
        h = parseInt(j) * parseFloat(p);
        l = parseInt(h * 0.005);
        n = parseInt(h + l)
    } else {
        h = parseInt(j) * parseFloat(p);
        l = parseInt(h * 0.005);
        n = parseInt(h - l)
    }
    if (n > parseInt(seed.citystats["city" + currentcityid].gold[0]) && parseInt(d) == 1) {
        Modal.showAlert(g_js_strings.modal_marketplace_bidoffer.nogold, false, 450);
        return false
    }
    if (l > parseInt(seed.citystats["city" + currentcityid].gold[0]) && parseInt(d) == 2) {
        Modal.showAlert(g_js_strings.modal_marketplace_bidoffer.nogold, false, 450);
        return false
    }
    if (parseInt(d) == 2) {
        var m = parseInt($("marketmod_recsel").getAttribute("name"));
        var b = 0;
        var c = "";
        if (m == 1) {
            b = parseInt(seed.resources["city" + currentcityid].rec1[0] / 3600)
        } else {
            if (m == 2) {
                b = parseInt(seed.resources["city" + currentcityid].rec2[0] / 3600)
            } else {
                if (m == 3) {
                    b = parseInt(seed.resources["city" + currentcityid].rec3[0] / 3600)
                } else {
                    b = parseInt(seed.resources["city" + currentcityid].rec4[0] / 3600)
                }
            }
        }
        if (j > b) {
            Modal.showAlert(g_js_strings.modal_marketplace_bidoffer.noresource, false, 450);
            return false
        }
    }
    if (!(parseInt(j) > 0)) {
        if (parseInt(d) == 1) {
            Modal.showAlert(g_js_strings.modal_marketplace_bidoffer.buyink, false, 450)
        } else {
            Modal.showAlert(g_js_strings.modal_marketplace_bidoffer.sellink, false, 450)
        }
        return false
    } else {
        if (!(p > 0)) {
            Modal.showAlert(g_js_strings.modal_marketplace_bidoffer.greaterthan, false, 450);
            return false
        } else {
            if (!(parseInt(p * 1000) > 0)) {
                Modal.showAlert(g_js_strings.modal_marketplace_bidoffer.atleast, false, 450);
                return false
            }
        }
    }
    if (parseInt(d) == 2) {
        j = market_rounddown_resourceamount(j)
    }
    var i = j;
    if ($("market_resourceamount_input" + a)) {
        i = parseInt($("market_resourceamount_input" + a).value)
    }
    if (parseInt(d) == 1) {
        if (j > i) {
            j = i
        }
    }
    f.push("<input type='hidden' id='market_submit_totalprice' value='" + n + "'/>");
    f.push("<input type='hidden' id='market_submit_unitprice' value='" + p + "'/>");
    f.push("<input type='hidden' id='market_submit_quantity' value='" + j + "'/>");
    f.push("<input type='hidden' id='market_submit_type' value='" + d + "'/>");
    f.push("<div class='modal_market_confirm_wrapper clearfix'>");
    f.push("<div class='header top-pad'>" + g_js_strings.modal_marketplace.resamt + ":</div>");
    f.push("<div class='amount'>" + addCommas(j) + "</div>");
    f.push("<div class='desc'>" + g_js_strings.modal_marketplace.roundingdesc + "</div>");
    f.push("<div class='header top-pad'>" + g_js_strings.modal_marketplace.unitprice + ":</div>");
    f.push("<div class='amount'>" + p + "</div>");
    f.push("<div class='desc'>" + g_js_strings.modal_marketplace.newpercdesc + "</div>");
    f.push("<div class='header top-pad'>" + g_js_strings.modal_marketplace.tradefee + ":</div>");
    f.push("<div class='price bottom-pad'>" + addCommas(l) + " " + g_js_strings.commonstr.gold + "</div>");
    f.push("<div class='header sep top-pad'>" + e + ":</div>");
    f.push("<div class='price'>" + addCommas(n) + " " + g_js_strings.commonstr.gold + "</div>");
    f.push("<div class='buttons'><a class='button25' onclick='market_submit_transaction(); return false;'><span>" + g + "</span></a> <a class='buttonDown25' onclick='Modal.hideModal(); return false;'><span>" + g_js_strings.commonstr.cancel + "</span></a></div>");
    f.push("</div>");
    Modal.showModal(400, 400, 180, 525, o.toUpperCase(), f.join(""))
}
function market_submit_transaction() {
    var d = new Array();
    var c = $("market_submit_unitprice").value;
    if (/^((\d+(\.\d*)?)|((\d*\.)?\d+))$/.test(c) == false) {
        d.push(g_js_strings.modal_marketplace_bidoffer.invalidprice)
    }
    var b = parseInt(parseInt($("market_submit_quantity").value.split(",").join("")) / 1000);
    if (/^\d+$/.test(b) == false) {
        d.push(g_js_strings.modal_marketplace_bidoffer.invalidamt)
    }
    if (d.length > 0) {
        Modal.hideModal();
        Modal.showAlert(d);
        return false
    }
    var a = $("market_submit_type").value;
    if (!(parseInt(b) > 0)) {
        Modal.hideModal();
        if (parseInt(a) == 1) {
            Modal.showAlert(g_js_strings.modal_marketplace_bidoffer.buyink)
        } else {
            Modal.showAlert(g_js_strings.modal_marketplace_bidoffer.sellink)
        }
        return false
    } else {
        if (!(c > 0)) {
            Modal.hideModal();
            Modal.showAlert(g_js_strings.modal_marketplace_bidoffer.greaterthan);
            return false
        } else {
            if (!(parseInt(c * 1000) > 0)) {
                Modal.hideModal();
                Modal.showAlert(g_js_strings.modal_marketplace_bidoffer.atleast);
                return false
            }
        }
    }
    if (parseInt(a) == 1) {
        if (parseInt($("market_submit_totalprice").innerHTML.split(",").join("")) > seed.citystats["city" + currentcityid].gold[0]) {
            Modal.hideModal();
            Modal.showAlert(g_js_strings.modal_marketplace_bidoffer.nogold);
            return false
        }
    } else {
        if ((b * 1000) > parseInt(seed.resources["city" + currentcityid]["rec" + $("marketmod_recsel").getAttribute("name")][0]) / 3600) {
            Modal.hideModal();
            Modal.showAlert(g_js_strings.modal_marketplace_bidoffer.noresource);
            return false
        }
    }
    if (a == 1) {
        modal_marketplace_checkbuy(parseInt(b), c, parseInt($("marketmod_recsel").getAttribute("name")))
    } else {
        market_dotrade(b, c, a)
    }
}
function market_dotrade(quantk, price, transac) {
    var params = Object.clone(g_ajaxparams);
    params.cid = currentcityid;
    params.quantk = quantk;
    params.price = price;
    params.transac = transac;
    params.rtype = $("marketmod_recsel").getAttribute("name");
    new Ajax.Request(g_ajaxpath + "ajax/trade.php" + g_ajaxsuffix, {
        method: "post",
        parameters: params,
        onSuccess: function (transport) {
            var rslt = eval("(" + transport.responseText + ")");
            if (rslt.ok) {
                Modal.hideModal();
                Modal.showAlert(g_js_strings.modal_marketplace_bidoffer.tradesub, false, 450);
                if (parseInt(transac) == 1) {
                    seed.citystats["city" + currentcityid].gold[0] = parseInt(seed.citystats["city" + currentcityid].gold[0]) - parseInt($("marketmod_totalprice").innerHTML.split(",").join(""));
                    var deliveries = rslt.deliveries;
                    if (deliveries) {
                        seed.queue_mkt["city" + currentcityid] = deliveries;
                        queue_changetab_market()
                    }
                } else {
                    seed.citystats["city" + currentcityid].gold[0] = parseInt(seed.citystats["city" + currentcityid].gold[0]) - parseInt($("marketmod_fee").innerHTML.split(",").join(""));
                    seed.resources["city" + currentcityid]["rec" + params.rtype][0] = parseInt(seed.resources["city" + currentcityid]["rec" + params.rtype][0]) - quantk * 3600000
                }
                $("marketmod_amount").value = 0;
                $("marketmod_price").value = 0;
                modal_marketplace_updateprice();
                modal_marketplace_changerec($("marketmod_recsel").getAttribute("name"));
                update_gold();
                if (rslt.updateSeed) {
                    update_seed(rslt.updateSeed)
                }
                market_update_num_of_transaction();
                getModalResourceBar()
            } else {
                Modal.hideModal();
                Modal.showAlert(printLocalError((rslt.error_code || null), (rslt.msg || null), (rslt.feedback || null)))
            }
        },
        onFailure: function () {}
    })
}
function modal_marketplace_updateprice() {
    var b = parseInt($("marketmod_amount").value) * parseFloat($("marketmod_price").value);
    var a = parseInt(b * 0.005 * 100) / 100;
    $("marketmod_fee").innerHTML = addCommas(parseInt(a));
    if (parseInt($("marketmod_transac").value) == 1) {
        $("marketmod_totalprice").innerHTML = addCommas(parseInt(b + a))
    } else {
        $("marketmod_totalprice").innerHTML = addCommas(parseInt(b - a))
    }
}
function modal_marketplace_bidoffer() {
    var invalid = new Array();
    var price = $("marketmod_price").value;
    if (/^((\d+(\.\d*)?)|((\d*\.)?\d+))$/.test(price) == false) {
        invalid.push(g_js_strings.modal_marketplace_bidoffer.invalidprice)
    }
    var quantk = parseInt(parseInt($("marketmod_amount").value.split(",").join("")) / 1000);
    if (/^\d+$/.test(quantk) == false) {
        invalid.push(g_js_strings.modal_marketplace_bidoffer.invalidamt)
    }
    if (invalid.length > 0) {
        Modal.showAlert(invalid);
        return false
    }
    var transac = $("marketmod_transac").value;
    if (!(parseInt(quantk) > 0)) {
        if (parseInt($("marketmod_transac").value) == 1) {
            Modal.showAlert(g_js_strings.modal_marketplace_bidoffer.buyink)
        } else {
            Modal.showAlert(g_js_strings.modal_marketplace_bidoffer.sellink)
        }
        return false
    } else {
        if (!(price > 0)) {
            Modal.showAlert(g_js_strings.modal_marketplace_bidoffer.greaterthan);
            return false
        } else {
            if (!(parseInt(price * 1000) > 0)) {
                Modal.showAlert(g_js_strings.modal_marketplace_bidoffer.atleast);
                return false
            }
        }
    }
    if (parseInt($("marketmod_transac").value) == 1) {
        if (parseInt($("marketmod_totalprice").innerHTML.split(",").join("")) > seed.citystats["city" + currentcityid].gold[0]) {
            Modal.showAlert(g_js_strings.modal_marketplace_bidoffer.nogold);
            return false
        }
    } else {
        if ((quantk * 1000) > parseInt(seed.resources["city" + currentcityid]["rec" + $("marketmod_recsel").getAttribute("name")][0]) / 3600) {
            Modal.showAlert(g_js_strings.modal_marketplace_bidoffer.noresource);
            return false
        }
    }
    var params = Object.clone(g_ajaxparams);
    params.cid = currentcityid;
    params.quantk = quantk;
    params.price = price;
    params.transac = transac;
    params.rtype = $("marketmod_recsel").getAttribute("name");
    new Ajax.Request(g_ajaxpath + "ajax/trade.php" + g_ajaxsuffix, {
        method: "post",
        parameters: params,
        onSuccess: function (transport) {
            var rslt = eval("(" + transport.responseText + ")");
            if (rslt.ok) {
                Modal.showAlert(g_js_strings.modal_marketplace_bidoffer.tradesub);
                if (parseInt($("marketmod_transac").value) == 1) {
                    seed.citystats["city" + currentcityid].gold[0] = parseInt(seed.citystats["city" + currentcityid].gold[0]) - parseInt($("marketmod_totalprice").innerHTML.split(",").join(""));
                    var deliveries = rslt.deliveries;
                    if (deliveries) {
                        seed.queue_mkt["city" + currentcityid] = deliveries;
                        queue_changetab_market()
                    }
                } else {
                    seed.citystats["city" + currentcityid].gold[0] = parseInt(seed.citystats["city" + currentcityid].gold[0]) - parseInt($("marketmod_fee").innerHTML.split(",").join(""));
                    seed.resources["city" + currentcityid]["rec" + params.rtype][0] = parseInt(seed.resources["city" + currentcityid]["rec" + params.rtype][0]) - quantk * 3600000;
                    $("marketmod_recnum").innerHTML = addCommas(parseInt(parseInt(seed.resources["city" + currentcityid]["rec" + params.rtype][0]) / 3600))
                }
                $("marketmod_goldnum").innerHTML = addCommas(seed.citystats["city" + currentcityid].gold[0]);
                $("marketmod_amount").value = 0;
                $("marketmod_price").value = 0;
                modal_marketplace_updateprice();
                modal_marketplace_changerec($("marketmod_recsel").getAttribute("name"));
                update_gold();
                if (rslt.updateSeed) {
                    update_seed(rslt.updateSeed)
                }
            } else {
                Modal.showAlert(printLocalError((rslt.error_code || null), (rslt.msg || null), (rslt.feedback || null)))
            }
        },
        onFailure: function () {}
    })
};
cm.MerlinTutorialSteps = [{
    name: "MERLIN_INTRODUCTION",
    events: {
        enter: function () {
            cm.TutorialKeyController.disableKeys();
            if (cm.TutorialProgressChecker.isSawmillPositionOccupied()) {
                cm.TutorialManager.gotoStep("WATCH_SAWMILL_PROGRESS")
            } else {
                var a = [];
                a.push("<div class='content'>");
                a.push("<div class='desc'>" + g_js_strings.tutorialMerlinTutorial.merlin0.replace("%1$s", seed.player.prefix) + "</div>");
                a.push("<div class='buttonrow clearfix'>");
                a.push("<a class='button20' onclick='cm.TutorialEventDispatcher.dispatchTutorialEvent(\"complete\", \"MERLIN_INTRODUCTION\");return false;'><span>" + g_js_strings.commonstr.next + "</span></a>");
                a.push("<a class='textlink' onclick='cm.TutorialEventDispatcher.dispatchTutorialEvent(\"skip\", \"MERLIN_INTRODUCTION\");return false;'>" + g_js_strings.commonstr.nothanks + "</a></div>");
                a.push("</div>");
                var b = new cm.MerlinTutorialDialog(a.join(""));
                b.show();
                cm.ConversionTracker.track(g_tutorialEntryTag, "FTE Tutorial v3-Merlin Intro-1" + seed.player.g);
                cm.ConversionTracker.track(g_tutorialEntryTag, "FTE Tutorial v3 Skip-Merlin Intro-1" + seed.player.g);
                cm.MixPanelTracker.trackFunnel("FTE Tutorial v3", 1, "Merlin Intro", {
                    usr_gen: seed.player.g,
                    usr_byr: seed.player.y,
                    usr_ttl: titlenames[seed.player.title],
                    distinct_id: tvuid
                });
                cm.MixPanelTracker.trackFunnel("FTE Tutorial v3 Skip", 1, "Merlin Intro", {
                    usr_gen: seed.player.g,
                    usr_byr: seed.player.y,
                    usr_ttl: titlenames[seed.player.title],
                    distinct_id: tvuid
                });
                cm.ConversionTracker.track("biftetracking", 300);
                if (numWorlds == 1) {
                    cm.ConversionTracker.track("", "fte_conv_merlin_intro");
                    fteConversionTracker("fte_conv_merlin_intro")
                }
            }
        },
        complete: function () {
            cm.TutorialManager.gotoNextStep()
        },
        skip: function () {
            cm.TutorialManager.gotoStep("MERLIN_SKIP")
        }
    }
}, {
    name: "MERLIN_INCREASE_MIGHT",
    events: {
        enter: function () {
            if (cm.TutorialProgressChecker.isSawmillPositionOccupied()) {
                cm.TutorialManager.gotoStep("WATCH_SAWMILL_PROGRESS")
            } else {
                var a = [];
                a.push("<div class='content'>");
                a.push("<div class='desc'>" + g_js_strings.tutorialMerlinTutorial.merlin1 + "</div>");
                a.push("<div class='buttonrow clearfix'>");
                a.push("<a class='button20' onclick='cm.TutorialEventDispatcher.dispatchTutorialEvent(\"complete\", \"MERLIN_INCREASE_MIGHT\");return false;'><span>" + g_js_strings.commonstr.next + "</span></a></div>");
                a.push("</div>");
                var b = new cm.MerlinTutorialDialog(a.join(""));
                b.show();
                cm.ConversionTracker.track(g_tutorialEntryTag, "FTE Tutorial v3-Merlin Increase Might-2");
                cm.MixPanelTracker.trackFunnel("FTE Tutorial v3", 2, "Merlin Increase Might", {
                    usr_gen: seed.player.g,
                    usr_byr: seed.player.y,
                    usr_ttl: titlenames[seed.player.title],
                    distinct_id: tvuid
                });
                cm.ConversionTracker.track("biftetracking", 400);
                if (numWorlds == 1) {
                    cm.ConversionTracker.track("", "fte_conv_merlin_increase_might");
                    fteConversionTracker("fte_conv_merlin_increase_might")
                }
            }
        },
        complete: function () {
            cm.TutorialManager.gotoNextStep()
        }
    }
}, {
    name: "CLICK_FIELD_TAB",
    events: {
        enter: function () {
            if (cm.TutorialProgressChecker.isSawmillPositionOccupied()) {
                cm.TutorialManager.gotoStep("WATCH_SAWMILL_PROGRESS")
            } else {
                $("arrowtip").innerHTML = "<div class='arrowup'><div>" + g_js_strings.tutorialCheck.clickforfield + "</div></div>";
                $("arrowtip").style.top = "139px";
                $("arrowtip").style.left = "49px";
                $("arrowtip").show();
                $("tutorialCover").addClassName("fieldview");
                tutorialUpdateCover2(37, 103, 43, 24);
                $("tutorialCover").show();
                cm.ConversionTracker.track("biftetracking", 500);
                if (numWorlds == 1) {
                    cm.ConversionTracker.track("", "fte_conv_field_view");
                    fteConversionTracker("fte_conv_field_view")
                }
            }
        },
        complete: function () {
            cm.TutorialManager.gotoNextStep()
        }
    }
}, {
    name: "CLICK_LOT_BUILD_SAWMILL",
    events: {
        enter: function () {
            if (cm.TutorialProgressChecker.isSawmillPositionOccupied()) {
                cm.TutorialManager.gotoStep("WATCH_SAWMILL_PROGRESS")
            } else {
                if (!$("maparea_fields").visible()) {
                    changeview_fields($("mod_views_field"))
                }
                $("arrowtip").innerHTML = "<div class='arrowdown'><div>" + g_js_strings.tutorialCheck.clickforsawmill + "</div></div>";
                $("arrowtip").style.top = "187px";
                $("arrowtip").style.left = "300px";
                $("arrowtip").show();
                $("tutorialCover").addClassName("sawmill");
                tutorialUpdateCover2(278, 306, 91, 51);
                $("tutorialCover").show();
                cm.ConversionTracker.track("biftetracking", 600);
                if (numWorlds == 1) {
                    cm.ConversionTracker.track("", "fte_conv_start_sawmill");
                    fteConversionTracker("fte_conv_start_sawmill")
                }
            }
        },
        complete: function () {
            cm.TutorialManager.gotoNextStep()
        }
    }
}, {
    name: "CHOOSE_SAWMILL",
    events: {
        enter: function () {
            if (cm.TutorialProgressChecker.isSawmillPositionOccupied()) {
                cm.TutorialManager.gotoStep("WATCH_SAWMILL_PROGRESS")
            } else {
                $("arrowtip").innerHTML = "<div class='arrowleft'><div>" + g_js_strings.tutorialCheck.clickheresawmill + "</div></div>";
                $("arrowtip").style.top = "264px";
                $("arrowtip").style.left = "254px";
                $("arrowtip").show();
                $("tutorialCover").addClassName("clicksawmill");
                tutorialUpdateCover2(128, 118, 105, 206);
                $("tutorialCover").show();
                cm.ConversionTracker.track("biftetracking", 700);
                if (numWorlds == 1) {
                    cm.ConversionTracker.track("", "fte_conv_select_sawmill");
                    fteConversionTracker("fte_conv_select_sawmill")
                }
            }
        },
        complete: function () {
            cm.TutorialManager.gotoNextStep()
        }
    }
}, {
    name: "CLICK_BUILD_BUTTON_SAWMILL",
    events: {
        enter: function () {
            if (cm.TutorialProgressChecker.isSawmillPositionOccupied()) {
                cm.TutorialManager.gotoStep("WATCH_SAWMILL_PROGRESS")
            } else {
                $("modalControls1").hide();
                if ($("modal_whats_this_link")) {
                    $("modal_whats_this_link").style.visibility = "hidden"
                }
                $("arrowtip").innerHTML = "<div class='arrowdown'><div>" + g_js_strings.tutorialCheck.clickbuildnohelp + "</div></div>";
                $("arrowtip").style.top = "175px";
                $("arrowtip").style.left = "379px";
                $("arrowtip").show();
                Modal.showCurtain();
                cm.ConversionTracker.track("biftetracking", 800);
                if (numWorlds == 1) {
                    cm.ConversionTracker.track("", "fte_conv_build_sawmill");
                    fteConversionTracker("fte_conv_build_sawmill")
                }
            }
        },
        complete: function () {
            tutorialAdvance(1, 15);
            cm.TutorialManager.gotoNextStep()
        }
    }
}, {
    name: "WATCH_SAWMILL_PROGRESS",
    events: {
        enter: function () {
            if (cm.TutorialProgressChecker.isSawmillBuilding()) {
                $("arrowtip").innerHTML = "<div class='arrowdown'></div>";
                $("arrowtip").style.top = "465px";
                $("arrowtip").style.left = "500px";
                $("arrowtip").show();
                Modal.showCurtain();
                $("modalCurtain0").setOpacity(0.3);
                cm.ConversionTracker.track("biftetracking", 900);
                if (numWorlds == 1) {
                    cm.ConversionTracker.track("", "fte_conv_building_sawmill");
                    fteConversionTracker("fte_conv_building_sawmill")
                }
            } else {
                cm.TutorialManager.gotoNextStep()
            }
        },
        complete: function () {
            cm.TutorialManager.gotoNextStep()
        }
    }
}, {
    name: "CLICK_QUEST_SAWMILL_REWARD",
    events: {
        enter: function () {
            if (cm.TutorialProgressChecker.isSawmillRewardClaimed()) {
                cm.TutorialManager.gotoStep("MERLIN_BUILD_COTTAGE")
            } else {
                tutorialAdvance(1, 16);
                Modal.hideModalAll();
                $("arrowtip").innerHTML = "<div class='arrowup'><div>" + g_js_strings.tutorialCheck.clickforquests + "</div></div>";
                $("arrowtip").style.top = "100px";
                $("arrowtip").style.left = "209px";
                $("arrowtip").show();
                $("tutorialCover").addClassName("quest");
                tutorialUpdateCover2(190, 40, 55, 55);
                $("tutorialCover").show();
                cm.ConversionTracker.track("biftetracking", 1000);
                if (numWorlds == 1) {
                    cm.ConversionTracker.track("", "fte_conv_click_quest");
                    fteConversionTracker("fte_conv_click_quest")
                }
            }
        },
        complete: function () {
            cm.TutorialManager.gotoNextStep()
        }
    }
}, {
    name: "CLICK_QUEST_REWARD_BUTTON",
    events: {
        enter: function () {
            if (cm.TutorialProgressChecker.isSawmillRewardClaimed()) {
                cm.TutorialManager.gotoStep("MERLIN_BUILD_COTTAGE")
            } else {
                modal_quests_doquests();
                $("modalControls1").hide();
                Event.observe("modalControlsClose1", "click", modal_questsFTEClose1);
                $("arrowtip").innerHTML = "<div class='arrowright'><div>" + g_js_strings.tutorialCheck.clickforreward + "</div></div>";
                $("arrowtip").style.top = "497px";
                $("arrowtip").style.left = "340px";
                $("arrowtip").show();
                Modal.showCurtain();
                cm.ConversionTracker.track("biftetracking", 1100);
                if (numWorlds == 1) {
                    cm.ConversionTracker.track("", "fte_conv_get_quest_reward");
                    fteConversionTracker("fte_conv_get_quest_reward")
                }
            }
        },
        complete: function () {
            cm.TutorialManager.gotoNextStep()
        }
    }
}, {
    name: "CLICK_QUEST_CLOSE_BUTTON",
    events: {
        enter: function () {
            if (cm.TutorialProgressChecker.isSawmillRewardClaimed()) {
                cm.TutorialManager.gotoStep("MERLIN_BUILD_COTTAGE")
            } else {
                $("arrowtip").innerHTML = "<div class='arrowright'><div style='margin-left:-100px'>" + g_js_strings.tutorialCheck.clickclosetofieldview + "</div></div>";
                $("arrowtip").style.top = "497px";
                $("arrowtip").style.left = "570px";
                $("arrowtip").show();
                var a = document.createElement("div");
                a.id = "questClickCover";
                a.className = "clickCover";
                document.body.appendChild(a);
                Modal.showCurtain();
                $("modal_quests_fte_close_btn").show();
                $("modalControls1").show();
                tutorialFlag = true
            }
        },
        complete: function () {
            tutorialAdvance(1, 18);
            cm.TutorialManager.gotoNextStep()
        }
    }
}, {
    name: "MERLIN_BUILD_COTTAGE",
    events: {
        enter: function () {
            if (cm.TutorialProgressChecker.isCottagePositionOccupied()) {
                cm.TutorialManager.gotoStep("MERLIN_CONGRATULATIONS")
            } else {
                var a = [];
                a.push("<div class='content'>");
                a.push("<div class='desc'>" + g_js_strings.tutorialMerlinTutorial.merlin4 + "</div>");
                a.push("<div class='buttonrow clearfix'>");
                a.push("<a class='button20' onclick='cm.TutorialManager.gotoNextStep();return false;'><span>" + g_js_strings.commonstr.next + "</span></a>");
                if (seed.player.entryTag == "fb884") {
                    a.push("<img src='http://offerpal.go2jump.org/aff_l?offer_id=500' width='1' height='1'/>")
                }
                a.push("</div>");
                a.push("</div>");
                var b = new cm.MerlinTutorialDialog(a.join(""));
                b.show();
                cm.ConversionTracker.track(g_tutorialEntryTag, "FTE Tutorial v3-Merlin Build Cottage-4");
                cm.MixPanelTracker.trackFunnel("FTE Tutorial v3", 4, "Merlin Build Cottage", {
                    usr_gen: seed.player.g,
                    usr_byr: seed.player.y,
                    usr_ttl: titlenames[seed.player.title],
                    distinct_id: tvuid
                });
                cm.ConversionTracker.track("biftetracking", 1200);
                if (numWorlds == 1) {
                    cm.ConversionTracker.track("", "fte_conv_merlin_build_cottage");
                    fteConversionTracker("fte_conv_merlin_build_cottage")
                }
            }
        },
        complete: function () {
            cm.TutorialManager.gotoNextStep()
        }
    }
}, {
    name: "CLICK_CITY_TAB",
    events: {
        enter: function () {
            if (cm.TutorialProgressChecker.isCottagePositionOccupied()) {
                cm.TutorialManager.gotoStep("MERLIN_CONGRATULATIONS")
            } else {
                $("arrowtip").innerHTML = "<div class='arrowup'><div>" + g_js_strings.tutorialCheck.clickforcity + "</div></div>";
                $("arrowtip").style.top = "148px";
                $("arrowtip").style.left = "6px";
                $("arrowtip").show();
                $("tutorialCover").addClassName("cityview");
                tutorialUpdateCover2(-6, 103, 43, 24);
                $("tutorialCover").show();
                cm.ConversionTracker.track("biftetracking", 1300);
                if (numWorlds == 1) {
                    cm.ConversionTracker.track("", "fte_conv_city_view");
                    fteConversionTracker("fte_conv_city_view")
                }
            }
        },
        complete: function () {
            cm.TutorialManager.gotoNextStep()
        }
    }
}, {
    name: "CLICK_LOT_BUILD_COTTAGE",
    events: {
        enter: function () {
            if (cm.TutorialProgressChecker.isCottagePositionOccupied()) {
                cm.TutorialManager.gotoStep("MERLIN_CONGRATULATIONS")
            } else {
                $("arrowtip").innerHTML = "<div class='arrowdown'><div>" + g_js_strings.tutorialCheck.clickforcott + "</div></div>";
                $("arrowtip").style.top = "216px";
                $("arrowtip").style.left = "240px";
                $("arrowtip").show();
                $("tutorialCover").addClassName("cottage");
                tutorialUpdateCover2(235, 322, 43, 59);
                $("tutorialCover").show();
                cm.ConversionTracker.track("biftetracking", 1400);
                if (numWorlds == 1) {
                    cm.ConversionTracker.track("", "fte_conv_start_cottage");
                    fteConversionTracker("fte_conv_start_cottage")
                }
            }
        },
        complete: function () {
            cm.TutorialManager.gotoNextStep()
        }
    }
}, {
    name: "CHOOSE_COTTAGE",
    events: {
        enter: function () {
            $("arrowtip").innerHTML = "<div class='arrowleft'><div>" + g_js_strings.tutorialCheck.clickherecottage + "</div></div>";
            $("arrowtip").style.top = "264px";
            $("arrowtip").style.left = "130px";
            $("arrowtip").show();
            $("tutorialCover").addClassName("clickcottage");
            tutorialUpdateCover2(16, 117, 105, 206);
            $("tutorialCover").show();
            cm.ConversionTracker.track("biftetracking", 1500);
            if (numWorlds == 1) {
                cm.ConversionTracker.track("", "fte_conv_select_cottage");
                fteConversionTracker("fte_conv_select_cottage")
            }
        },
        complete: function () {
            cm.TutorialManager.gotoNextStep()
        }
    }
}, {
    name: "CLICK_BUILD_BUTTON_COTTAGE",
    events: {
        enter: function () {
            if (cm.TutorialProgressChecker.isCottagePositionOccupied()) {
                cm.TutorialManager.gotoStep("MERLIN_CONGRATULATIONS")
            } else {
                $("modalControls1").hide();
                if ($("modal_whats_this_link")) {
                    $("modal_whats_this_link").style.visibility = "hidden"
                }
                $("arrowtip").innerHTML = "<div class='arrowdown'><div>" + g_js_strings.tutorialCheck.clickbuildnohelpcottage + "</div></div>";
                $("arrowtip").style.top = "175px";
                $("arrowtip").style.left = "379px";
                $("arrowtip").show();
                Modal.showCurtain();
                cm.ConversionTracker.track("biftetracking", 1600);
                if (numWorlds == 1) {
                    cm.ConversionTracker.track("", "fte_conv_build_cottage");
                    fteConversionTracker("fte_conv_build_cottage")
                }
            }
        },
        complete: function () {
            tutorialAdvance(1, 21);
            cm.TutorialManager.gotoNextStep()
        }
    }
}, {
    name: "MERLIN_CONGRATULATIONS",
    events: {
        enter: function () {
            var a = [];
            a.push("<div class='content'>");
            a.push("<div class='desc'>" + g_js_strings.tutorialMerlinTutorial.merlin5 + "</div>");
            a.push("<div class='buttonrow clearfix'>");
            a.push("<a class='button20' onclick='cm.TutorialManager.gotoNextStep();return false;'><span>" + g_js_strings.commonstr.next + "</span></a></div>");
            a.push("</div>");
            var b = new cm.MerlinTutorialDialog(a.join(""));
            b.show();
            cm.ConversionTracker.track(g_tutorialEntryTag, "FTE Tutorial v3-Merlin Level Up-5");
            cm.MixPanelTracker.trackFunnel("FTE Tutorial v3", 5, "Merlin Level Up", {
                usr_gen: seed.player.g,
                usr_byr: seed.player.y,
                usr_ttl: titlenames[seed.player.title],
                distinct_id: tvuid
            });
            cm.ConversionTracker.track("biftetracking", 1700);
            if (numWorlds == 1) {
                cm.ConversionTracker.track("", "fte_conv_merlin_level_up");
                fteConversionTracker("fte_conv_merlin_level_up")
            }
        },
        complete: function () {
            cm.TutorialManager.gotoNextStep()
        }
    }
}, {
    name: "MERLIN_ENDING",
    nextStepName: "ENDING",
    events: {
        enter: function () {
            var a = [];
            a.push("<div class='content'>");
            a.push("<div class='desc'>" + g_js_strings.tutorialMerlinTutorial.merlin7 + "</div>");
            a.push("<div class='buttonrow clearfix'>");
            a.push("<a class='button20' onclick='cm.TutorialEventDispatcher.dispatchTutorialEvent(\"complete\",\"MERLIN_ENDING\");return false;'><span>" + g_js_strings.commonstr.ok + "</span></a></div>");
            a.push("</div>");
            var b = new cm.MerlinTutorialDialog(a.join(""));
            b.show();
            cm.ConversionTracker.track(g_tutorialEntryTag, "FTE Tutorial v3-Merlin End-6");
            cm.MixPanelTracker.trackFunnel("FTE Tutorial v3", 6, "Merlin End", {
                usr_gen: seed.player.g,
                usr_byr: seed.player.y,
                usr_ttl: titlenames[seed.player.title],
                distinct_id: tvuid
            });
            cm.ConversionTracker.track("biftetracking", 1800, 0);
            if (numWorlds == 1) {
                cm.ConversionTracker.track("", "fte_conv_merlin_end");
                fteConversionTracker("fte_conv_merlin_end")
            }
        },
        complete: function () {
            seed.tutorial.t1 = 50;
            tutorialMerlinOver();
            cm.TutorialManager.gotoNextStep()
        }
    }
}, {
    name: "MERLIN_SKIP",
    events: {
        enter: function () {
            var a = [];
            a.push("<div class='content'>");
            a.push("<div class='desc'>" + g_js_strings.tutorialMerlinTutorial.merlin10 + "</div>");
            a.push("<div class='buttonrow clearfix'>");
            a.push("<a class='button20' onclick='cm.TutorialEventDispatcher.dispatchTutorialEvent(\"complete\", \"MERLIN_SKIP\");return false;'><span>" + g_js_strings.tutorialMerlinTutorial.skiptutorial + "</span></a>");
            a.push("<a class='button20' onclick='cm.TutorialEventDispatcher.dispatchTutorialEvent(\"cancel\", \"MERLIN_SKIP\");return false;'><span>" + g_js_strings.commonstr.cancel + "</span></a>");
            a.push("</div>");
            a.push("</div>");
            var b = new cm.MerlinTutorialDialog(a.join(""));
            b.show()
        },
        complete: function () {
            tutorialNoShow();
            cm.TutorialManager.gotoNextStep()
        },
        cancel: function () {
            cm.TutorialManager.startFromBeginning()
        }
    }
}, {
    name: "ENDING",
    events: {
        enter: function () {
            cm.TutorialManager.end();
            cm.ConversionTracker.track("biftetracking", 1900, 0)
        }
    }
}];
var pageNavigatorPresentationModel = {
    cssClass: "pageNavigator",
    itemCssClass: "pageNavigatorItem"
};
var pageNavigatorModel;
var pageNavigatorView;
var pageNavigatorController;
if (!window.Messages) {
    var Messages = new Object()
}
Messages.Properties = {
    messages_data: null
};
Messages.Methods = {
    markCheckedReportsAsRead: function () {
        var a = $("modal_msg_reports_tablediv").getElementsByTagName("input");
        var c = new Array();
        var h = new Array();
        var f = new Array();
        var e = 0;
        for (var d = 0; d < a.length; d++) {
            if (a[d].checked) {
                var b = a[d].getAttribute("name").split(",");
                if (parseInt(b[2]) == 0) {
                    if (parseInt(b[1]) == parseInt(tvuid)) {
                        c.push(b[0])
                    } else {
                        h.push(b[0])
                    }
                    if ($("viewreports_marchreport_" + b[0]).hasClassName("unread")) {
                        e++
                    }
                    a[d].checked = false;
                    $("viewreports_marchreport_" + b[0]).removeClassName("unread")
                } else {
                    if (parseInt(b[2]) == 1) {
                        f.push(b[0]);
                        if ($("viewreports_cityreport_" + b[0]).hasClassName("unread")) {
                            e++
                        }
                        a[d].checked = false;
                        $("viewreports_cityreport_" + b[0]).removeClassName("unread")
                    }
                }
            }
        }
        if (parseInt(e) == 0) {
            return false
        }
        var g = {};
        g.s0rids = c.join(",");
        g.s1rids = h.join(",");
        g.cityrids = f.join(",");
        AjaxCall.gPostRequest("ajax/readCheckedReports.php", g, function (i) {
            if (i.ok) {
                if (e > 0) {
                    seed.newReportCount = parseInt(seed.newReportCount) - e;
                    messages_notify_bug()
                }
            }
        })
    },
    deleteCheckedReports: function (a) {
        var f = $("modal_msg_reports_tablediv").getElementsByTagName("input");
        var d = new Array();
        var b = new Array();
        var g = new Array();
        var h = 0;
        for (var e = 0; e < f.length; e++) {
            if (f[e].checked) {
                var j = f[e].getAttribute("name").split(",");
                if (parseInt(j[2]) == 0) {
                    if (parseInt(j[1]) == parseInt(tvuid)) {
                        d.push(j[0])
                    } else {
                        b.push(j[0])
                    }
                    if ($("viewreports_marchreport_" + j[0]).hasClassName("unread")) {
                        h++
                    }
                } else {
                    if (parseInt(j[2]) == 1) {
                        g.push(j[0]);
                        if ($("viewreports_cityreport_" + j[0]).hasClassName("unread")) {
                            h++
                        }
                    }
                }
            }
        }
        if (d.length == 0 && b.length == 0 && g.length == 0 && a != "deleteAll") {
            return false
        }
        var c = {};
        if (a) {
            c.requestType = a
        }
        c.s0rids = d.join(",");
        c.s1rids = b.join(",");
        c.cityrids = g.join(",");
        AjaxCall.gPostRequest("ajax/deleteCheckedReports.php", c, function (i) {
            if (i.ok) {
                if (h > 0) {
                    seed.newReportCount = parseInt(seed.newReportCount) - h;
                    messages_notify_bug()
                }
                pageNavigatorModel.gotoPage(1);
                Messages.listReports()
            }
        })
    },
    viewMarchReport: function (b, o, e, h, d, a, p, i, c, l, f, n, k, g, j, q) {
        var m = arguments;
        $("modal_msg_list_pagination").hide();
        AjaxCall.gPostRequest("ajax/fetchReport.php", {
            rid: b,
            side: o
        }, function (r) {
            if (g == 1) {
                seed.newReportCount = parseInt(seed.newReportCount) - 1;
                messages_notify_bug()
            }
            $("modal_msg_list").innerHTML = MarchReport.getMarchReport(m, r).render()
        })
    },
    listReports: function (a) {
        $("modal_msg_view").hide();
        $("modal_msg_write").hide();
        $("modal_msg_list").show();
        $("modal_msg_list_actions").hide();
        $("modal_msg_links").hide();
        $("modal_msg_list_pagination").show();
        var b = $("modal_msg_tabs").select("a.selected");
        if (b.length > 0) {
            b[0].removeClassName("selected")
        }
        $("modal_msg_tabs_report").addClassName("selected");
        $("modal_msg_body").className = "modal_msg_tab2";
        AjaxCall.gPostRequest("ajax/listReports.php", {
            pageNo: a
        }, function (c) {
            Messages.handleListReports(c, a)
        })
    },
    handleListReports: function (l, a) {
        if (l.ok) {
            var n = new Array();
            n.push("<div class='modal_msg_reports'>");
            n.push("<div class='rptshd'>" + g_js_strings.modal_messages_viewreports.trooprpt + "&nbsp;&nbsp;-&nbsp;&nbsp;<a  onclick='modal_messages_viewtrades();return false;'>" + g_js_strings.modal_messages_viewdisasterreports.viewmkttrades + " (" + seed.newTradeReports + ")</a></div>");
            var b = Object.keys(l.arReports);
            if (!Object.isArray(l.arReports)) {
                n.push("<div id='modal_msg_reports_tablediv'><table cellpadding='0' cellspacing='0' class='msgviewtable reportviewtable'>");
                n.push("<thead><tr><td class='chkcol'></td><td class='dtcol'>" + g_js_strings.commonstr.date + "</td><td class='nmcol'>" + g_js_strings.commonstr.type + "</td><td class='subjcol'>" + g_js_strings.commonstr.view + "</td></tr></thead><tbody>");
                var j = null;
                var m = null;
                var h = null;
                var k = null;
                var d = "";
                var o = 0;
                for (var g = 0; g < b.length; g++) {
                    k = l.arReports[b[g]];
                    j = [];
                    m = [];
                    o = parseInt(k.reportType);
                    if (0 == o && 2 == parseInt(k.marchType)) {
                        d = "viewreports_marchreport_";
                        j = [g_js_strings.commonstr.reinforced, " - ", l.arCityNames["c" + k.side0CityId], " (", l.arPlayerNames["p" + k.side1PlayerId], ")"];
                        h = ["'" + k.reportId + "'", "'" + k.side0CityId + "'", "'" + l.arCityNames["c" + k.side0CityId] + "'", "'" + g_mapObject.getSlotCity(1, k.side0CityId) + "'", "'" + k.side1PlayerId + "'", "'" + l.arPlayerNames["p" + k.side1PlayerId] + "'", "'" + k.side1CityId + "'", "'" + l.arCityNames["c" + k.side1CityId] + "'", k.side1XCoord, k.side1YCoord];
                        m = ["<a onclick=\"jQuery('#modal_msg_body').trigger('viewReinforcedReport', [", h.join(","), ']);return false;" href="#">', g_js_strings.modal_messages_viewtrades.viewrpt, "</a>"]
                    } else {
                        if (0 == o) {
                            d = "viewreports_marchreport_";
                            switch (parseInt(k.marchType)) {
                            case 1:
                                j.push(g_js_strings.commonstr.transport);
                                break;
                            case 3:
                                j.push(g_js_strings.commonstr.scout);
                                break;
                            default:
                                j.push(g_js_strings.commonstr.attack);
                                break
                            }
                            j.push(" ");
                            if (parseInt(k.side0PlayerId) == parseInt(tvuid)) {
                                j.push("(" + l.arCityNames["c" + k.side0CityId] + ")")
                            } else {
                                var f = new cm.utils.CoordinateLink(k.side0XCoord, k.side0YCoord);
                                f.setClassName("coordinateLink");
                                j.push(f.getHTML())
                            }
                            j.push(" ");
                            if (parseInt(k.side0TileType) != 51) {
                                j.push(" - ");
                                j.push(g_mapObject.types[parseInt(k.side0TileType)].capitalize());
                                j.push(" Lv." + k.side0TileLevel)
                            } else {
                                if (parseInt(k.side0PlayerId) == 0) {
                                    j.push(" - ");
                                    j.push(g_js_strings.commonstr.barbariancamp);
                                    j.push(" " + g_js_strings.commonstr.lv + " " + k.side0TileLevel)
                                } else {
                                    if (parseInt(k.marchType) == 1) {
                                        j.push(" - <span>" + g_js_strings.commonstr.from + ": ");
                                        j.push(escape(l.arPlayerNames["p" + k.side1PlayerId]));
                                        j.push("</span>")
                                    } else {
                                        if (parseInt(k.side0PlayerId) == parseInt(tvuid)) {
                                            j.push(" - <span style='color:#A02932;'>" + g_js_strings.modal_messages_viewreports.attackedby + " ");
                                            if (parseInt(k.marchType) == 8) {
                                                j.push(g_js_strings.commonstr.barbarians)
                                            } else {
                                                j.push(escape(l.arPlayerNames["p" + k.side1PlayerId]))
                                            }
                                            if (parseInt(k.marchType) == 8) {} else {
                                                j.push(escape(l.arPlayerNames["p" + k.side1PlayerId]))
                                            }
                                            j.push("</span>")
                                        }
                                    }
                                }
                            }
                            if (parseInt(k.marchType) == 1) {
                                j.push("<span>");
                                j.push(" (" + l.arCityNames["c" + k.side1CityId] + ")");
                                j.push("</span>")
                            } else {
                                if (parseInt(k.marchType) == 8) {} else {
                                    if (parseInt(k.side0PlayerId) == parseInt(tvuid)) {
                                        j.push("<span style='color:#A02932;'>");
                                        j.push(" (" + l.arCityNames["c" + k.side1CityId] + ")");
                                        j.push("</span>")
                                    } else {
                                        j.push(" (" + l.arCityNames["c" + k.side1CityId] + ")")
                                    }
                                }
                            }
                            m.push("<a  onclick='");
                            if (k.marchType == 8) {
                                m.push("BarbarianRaid.viewMarchReport(")
                            } else {
                                m.push("Messages.viewMarchReport(")
                            }
                            h = ['"' + k.reportId + '"'];
                            if (parseInt(k.side0PlayerId) == parseInt(tvuid)) {
                                h.push(0)
                            } else {
                                h.push(1)
                            }
                            h.push(k.side0TileType);
                            h.push(k.side0TileLevel);
                            h.push(k.side0PlayerId);
                            if (parseInt(k.side0PlayerId) != 0) {
                                h.push('"' + escape(l.arPlayerNames["p" + k.side0PlayerId]) + '"')
                            } else {
                                h.push('"' + g_js_strings.commonstr.enemy + '"')
                            }
                            if (parseInt(k.side0PlayerId) != 0) {
                                h.push('"' + escape(l.arPlayerNames["g" + k.side0PlayerId]) + '"')
                            } else {
                                h.push('"0"')
                            }
                            if (parseInt(k.side1PlayerId) > 0) {
                                h.push('"' + escape(l.arPlayerNames["p" + k.side1PlayerId]) + '"')
                            } else {
                                h.push('""')
                            }
                            if (parseInt(k.side1PlayerId) != 0) {
                                h.push('"' + escape(l.arPlayerNames["g" + k.side1PlayerId]) + '"')
                            } else {
                                h.push('""')
                            }
                            h.push(k.marchType);
                            h.push(k.side0XCoord);
                            h.push(k.side0YCoord);
                            h.push(k.reportUnixTime);
                            if (parseInt(k.reportStatus) == 2) {
                                h.push(1)
                            } else {
                                h.push(0)
                            }
                            if (k.side1XCoord) {
                                h.push(k.side1XCoord);
                                h.push(k.side1YCoord)
                            } else {
                                h.push("0");
                                h.push("0")
                            }
                            m.push(h.join(","));
                            m.push(");return false;'>" + g_js_strings.modal_messages_viewtrades.viewrpt + "</a>")
                        } else {
                            if (1 == o) {
                                d = "viewreports_cityreport_";
                                switch (parseInt(k.eventType)) {
                                case 70:
                                    j.push(g_js_strings.modal_messages_viewdisasterreports.troopsdeserted);
                                    break;
                                case 80:
                                    j.push(g_js_strings.modal_messages_viewdisasterreports.troopsrecovered);
                                    break;
                                default:
                                    j.push(g_js_strings.commonstr.disaster);
                                    break
                                }
                                var c = parseInt(k.eventType);
                                switch (c) {
                                case 70:
                                case 80:
                                    m.push("<a onclick='modal_messages_viewCityEventReport(");
                                    m.push([k.reportId, a || 1, c].join(","));
                                    m.push(");return false;' href='#'>" + g_js_strings.modal_messages_viewtrades.viewrpt + "</a>");
                                    break;
                                default:
                                    break
                                }
                            }
                        }
                    }
                    n.push("<tr class='");
                    if (g % 2 == 0) {
                        n.push("stripe")
                    }
                    if (parseInt(k.reportStatus) == 2) {
                        n.push(" unread")
                    }
                    n.push("' id='" + d + k.reportId + "'>");
                    n.push("<td class='chkcol'><input type='checkbox' name='");
                    n.push([k.reportId, k.side0PlayerId, k.reportType].join(","));
                    n.push("'/></td><td class='dtcol'><div>");
                    n.push(formatDateByUnixTime(k.reportUnixTime));
                    n.push("</div></td>");
                    n.push("<td class='nmcol'><div>");
                    n.push(j.join(""));
                    n.push("</div></td>");
                    n.push("<td class='subjcol'><div>");
                    n.push(m.join(""));
                    n.push("</div></td>");
                    n.push("</tr>")
                }
                n.push("</tbody></table></div>")
            }
            n.push("<div class='clearfix ftbtns'><a class='button20' onclick='Messages.markCheckedReportsAsRead();return false;'><span>" + g_js_strings.modal_messages.markread + "</span></a><a  class='buttonDown20' onclick='Messages.deleteCheckedReports();return false;'><span>" + g_js_strings.commonstr.deletetx + "</span></a><a  class='buttonDown20' onclick='confirmReportsDeleteAll();return false;'><span>" + g_js_strings.modal_messages.deleteall + "</span></a> <a  onclick='modal_messages_reports_chk(1);return false;'>" + g_js_strings.modal_messages.chkall + "</a><a  onclick='modal_messages_reports_chk(2);return false;'>" + g_js_strings.modal_messages.unchkall + "</a></div>");
            n.push("</div>");
            $("modal_msg_list").innerHTML = n.join("");
            var e = parseInt(l.noOfPages || l.totalPages);
            e = isNaN(e) || e < 0 ? 0 : e;
            pageNavigatorController.onClick = modal_messages_viewreports;
            pageNavigatorModel.setPageCount(e);
            a = a || 1;
            pageNavigatorModel.gotoPage(a)
        } else {
            var n = new Array();
            n.push("<div class='modal_msg_reports'>");
            n.push("<div class='rptshd'>" + g_js_strings.modal_messages_viewreports.trooprpt + "&nbsp;&nbsp;-&nbsp;&nbsp;<a  onclick='modal_messages_viewtrades();return false;'>" + g_js_strings.modal_messages_viewdisasterreports.viewmkttrades + " (" + seed.newTradeReports + ")</a></div>");
            n.push("<div style='font-size:17px;margin-left:30px;margin-top:20px'>" + g_js_strings.modal_messages_viewreports.nomarchrpts + "</div>");
            n.push("</div>");
            $("modal_msg_list").innerHTML = n.join("");
            $("modal_msg_list_actions").hide();
            $("modal_msg_links").hide();
            pageNavigatorModel.setPageCount(0);
            if ($("pagination_indexOnly")) {
                ($("pagination_indexOnly")).remove()
            }
        }
    },
    handleGetEmail: function (b, f, e, a) {
        if (b.ok) {
            var d = 0;
            var g = f.selectedMessageIds.split(",");
            if (e == "markRead") {
                for (var c = 0; c < g.length; c++) {
                    if ($("modal_msg_list_" + g[c]).hasClassName("unread")) {
                        $("modal_msg_list_" + g[c]).removeClassName("unread");
                        d--
                    }
                }
            } else {
                if (e == "markUnread") {
                    for (var c = 0; c < g.length; c++) {
                        if (!$("modal_msg_list_" + g[c]).hasClassName("unread")) {
                            $("modal_msg_list_" + g[c]).addClassName("unread");
                            d++
                        }
                    }
                } else {
                    if (e == "delete" || e == "deleteAll") {
                        if (a == "inbox") {
                            modal_messages_inbox()
                        } else {
                            if (a == "outbox") {
                                modal_messages_outbox()
                            }
                        }
                        if (e == "deleteAll") {
                            d = 0;
                            Modal.hideModal();
                            seed.newMailCount = 0;
                            messages_notify_bug();
                            pageNavigatorModel.setPageCount(0)
                        } else {
                            d = -(g.length)
                        }
                    } else {
                        if (e == "blockUser") {
                            Modal.showAlert(printLocalError((b.error_code || null), (b.msg || null), (b.feedback || null)))
                        }
                    }
                }
            }
            if (d != 0) {
                seed.newMailCount = parseInt(seed.newMailCount) + d;
                messages_notify_bug()
            }
        } else {
            Modal.showAlert(printLocalError((b.error_code || null), (b.msg || null), (b.feedback || null)))
        }
    }
};
Object.extend(Messages, Messages.Methods);
Object.extend(Messages, Messages.Properties);

function modal_messages() {
    var a = new Array();
    a.push("<div id='modal_msg_body' class='modal_msg_tab1'><div class='modal_msg_body_hd'>");
    a.push("<div id='modal_msg_tabs' class='tabsbar clearfix'>");
    a.push("<a class='tab selected' id='modal_msg_tabs_inbox'  onclick='modal_messages_inbox();return false;'><span>" + g_js_strings.commonstr.inbox + "</span></a>");
    a.push("<div id='modal_msg_tabnum_inbox' class='num' style='display:none;'>0</div>");
    a.push("<a  class='tab' id='modal_msg_tabs_report' onclick='Messages.listReports();return false;'><span>" + g_js_strings.modal_messages.viewreports + "</span></a>");
    a.push("<div id='modal_msg_tabnum_report' class='num' style='display:none;'>0</div>");
    a.push("<a class='tab' id='modal_msg_tabs_outbox'  onclick='modal_messages_outbox();return false;'><span>" + g_js_strings.commonstr.outbox + "</span></a>");
    a.push("<a class='tab' id='modal_msg_tabs_write'  onclick='modal_messages_compose();return false;'><span>" + g_js_strings.commonstr.compose + "</span></a>");
    a.push("</div>");
    a.push("<div id='modal_msg_listwrap' class='modal_msg_listwrap clearfix'>");
    a.push("<div id='modal_msg_list' class='modal_msg_list'>");
    a.push("</div>");
    a.push("<div id='modal_msg_links' class='modal_msg_links'>");
    a.push("<a onclick='getUserSettings();return false;'>" + g_js_strings.modal_messages.msgsettings + "</a>");
    a.push("<a onmouseover='showTooltip(\"Report Policy Violation\",this,event,\"kocmain_bottom\");' onmouseout='removeTooltip();' onclick='HelpDesk.show(7);return false;'>" + g_js_strings.commonstr.report + "</a>");
    a.push("</div>");
    a.push("<div id='modal_msg_list_actions' class='clearfix'>");
    a.push("<a id='modal_msg_list_markasread'  class='button20' onclick='messages_action(\"markRead\",\"tbl_messages\");return false;'><span>" + g_js_strings.modal_messages.markread + "</span></a>");
    a.push("<a id='modal_msg_list_markasunread'  class='button20' onclick='messages_action(\"markUnread\",\"tbl_messages\");return false;'><span>" + g_js_strings.modal_messages.markunread + "</span></a>");
    a.push("<a class='buttonDown20' onclick='messages_action(\"delete\",\"tbl_messages\");return false;'><span>" + g_js_strings.commonstr.deletetx + "</span></a>");
    a.push("<a  class='buttonDown20' onclick='confirmDeleteAll(\"deleteAll\",\"tbl_messages\");return false;'><span>" + g_js_strings.modal_messages.deleteall + "</span></a>");
    a.push("<a  onclick='modal_messages_inbox_check(1);return false;'>" + g_js_strings.modal_messages.chkall + "</a><a  onclick='modal_messages_inbox_check(2);return false;'>" + g_js_strings.modal_messages.unchkall + "</a>");
    a.push("</div>");
    a.push("<div id='modal_msg_list_pagination' style='float:none;display:block;'></div>");
    a.push("<div id='modal_msg_write' style='display:none;'>");
    a.push("<div class='writeto'><b>" + g_js_strings.commonstr.totx + ":</b><input type='text' id='modal_msg_write_to'/></div>");
    a.push("<div class='writesubj'><b>" + g_js_strings.commonstr.subject + ":</b><input type='text' id='modal_msg_write_subj'/></div>");
    a.push("<div class='writetx'><textarea id='modal_msg_write_txt'></textarea></div>");
    a.push("<div class='btn clearfix'><a  onclick='modal_messages_send();return false;' class='button20'><span>" + g_js_strings.commonstr.send + "</span></a></div>");
    a.push("</div>");
    a.push("<div id='modal_msg_view' style='display:none;'>");
    a.push("<div><b>" + g_js_strings.commonstr.totx + ":</b> <span id='modal_msg_view_to'></span></div>");
    a.push("<div><b>" + g_js_strings.commonstr.from + ":</b> <span id='modal_msg_view_from'></span></div>");
    a.push("<div class='subj'><b>" + g_js_strings.commonstr.subject + ":</b> <span id='modal_msg_view_subj'></span></div>");
    a.push("<div class='datesent'><b>" + g_js_strings.commonstr.date + ":</b> <span id='modal_msg_view_date'></span></div>");
    a.push("<div id='modal_msg_view_actions' class='clearfix'><a  onclick='modal_messages_reply();return false;' class='button20'><span>" + g_js_strings.commonstr.reply + "</span></a><a  class='buttonDown20' onclick='messages_action(\"delete\",\"modal_msg_view\");return false;'><span>" + g_js_strings.commonstr.deletetx + "</span></a> <a  class='buttonDown20' onclick='modal_block_user_confirm();return false;'><span>" + g_js_strings.modal_messages.blockuser + "</span></a></div>");
    a.push("<div class='msgbody'><div id='modal_msg_view_body'></div></div>");
    a.push("</div>");
    a.push("<div style='clear:both'></div>");
    a.push("</div>");
    a.push("<div class='modal_msg_listwrapcap'></div>");
    a.push("<div class='modal_msg_body_foot'>&nbsp;</div>");
    if (g_env == "prod") {
        a.push('<div style="display:inline;"><img height="1" width="1" style="border-style:none;" alt="" src="http://www.googleadservices.com/pagead/conversion/1059019849/?label=sLGpCJPy5gEQybj9-AM&amp;guid=ON&amp;script=0"/></div>')
    }
    a.push("</div></div>");
    Modal.showModal(740, 400, 10, 10, g_js_strings.modaltitles.messages, a.join(""), modal_messages_inbox);
    pageNavigatorModel = new cm.PageNavigatorModel(0, 5);
    pageNavigatorView = new cm.PageNavigatorView(pageNavigatorModel, pageNavigatorPresentationModel);
    pageNavigatorController = new cm.PageNavigatorController(pageNavigatorModel, pageNavigatorView);
    $("modal_msg_list_pagination").appendChild(pageNavigatorView.getHtmlElement())
}
function modal_block_user_confirm() {
    var a = new Array();
    a.push("<div class='blockuserconfirm'>");
    a.push("<div>");
    a.push(g_js_strings.modal_block_user_confirm.blockuserconfirm);
    a.push("<div class='clearfix'>");
    a.push("<a class='button20' onclick='messages_action(\"blockUser\",\"modal_msg_view\");Modal.hideModal();return false;'><span>" + g_js_strings.modal_messages.blockuser + "</span></a>");
    a.push("<a class='button20' onclick='Modal.hideModal();return false;'><span>" + g_js_strings.commonstr.cancel + "</span></a>");
    a.push("</div>");
    a.push("</div>");
    a.push("</div>");
    Modal.showModal(400, 400, 120, 80, g_js_strings.modaltitles.blockuser, a.join(""))
}
function openMessageWindow(a) {
    if (a == "inbox") {
        modal_messages()
    }
}
function modal_messages_inbox_check(d) {
    var a = $("tbl_messages").getElementsByTagName("input");
    var b = false;
    if (d == 1) {
        b = true
    }
    for (var c = 0; c < a.length; c++) {
        a[c].checked = b
    }
    return true
}
function modal_messages_inbox() {
    var a = $("modal_msg_tabs").select("a.selected");
    if (a.length > 0) {
        a[0].removeClassName("selected")
    }
    $("modal_msg_tabs_inbox").addClassName("selected");
    $("modal_msg_list_pagination").show();
    $("modal_msg_body").className = "modal_msg_tab1";
    modal_messages_listshow("inbox");
    messages_notify_bug()
}
function modal_messages_outbox() {
    var a = $("modal_msg_tabs").select("a.selected");
    if (a.length > 0) {
        a[0].removeClassName("selected")
    }
    $("modal_msg_tabs_outbox").addClassName("selected");
    $("modal_msg_body").className = "modal_msg_tab3";
    $("modal_msg_list_pagination").show();
    modal_messages_listshow("outbox")
}
function modal_messages_reply() {
    $("modal_msg_write_to").value = $("modal_msg_view_from").firstDescendant().innerHTML;
    $("modal_msg_write_subj").value = "re: " + $("modal_msg_view_subj").innerHTML;
    modal_messages_compose()
}
function modal_messages_send() {
    var params = Object.clone(g_ajaxparams);
    params.emailTo = document.getElementById("modal_msg_write_to").value;
    params.subject = document.getElementById("modal_msg_write_subj").value;
    params.message = document.getElementById("modal_msg_write_txt").value;
    params.requestType = "COMPOSED_MAIL";
    new Ajax.Request(g_ajaxpath + "ajax/getEmail.php" + g_ajaxsuffix, {
        method: "post",
        parameters: params,
        onSuccess: function (message) {
            var rslt = eval("(" + message.responseText + ")");
            if (rslt.ok) {
                Modal.showAlert(g_js_strings.modal_messages_send.msgsent);
                $("modal_msg_write_to").value = "";
                $("modal_msg_write_subj").value = "";
                $("modal_msg_write_txt").value = ""
            } else {
                Modal.showAlert(g_js_strings.modal_messages_send.enterexistingname)
            }
        },
        onFailure: function () {
            Modal.showAlert(g_js_strings.modal_messages_send.oopscompose)
        }
    })
}
function modal_messages_compose() {
    var a = $("modal_msg_tabs").select("a.selected");
    if (a.length > 0) {
        a[0].removeClassName("selected")
    }
    $("modal_msg_tabs_write").addClassName("selected");
    $("modal_msg_view").hide();
    $("modal_msg_list").hide();
    $("modal_msg_list_actions").hide();
    $("modal_msg_links").hide();
    $("modal_msg_list_pagination").hide();
    $("modal_msg_body").className = "modal_msg_tab4";
    $("modal_msg_write").show()
}
function modal_messages_viewtrades_view(o, b, f, k, l, h, e, j, c, g) {
    var a = pageNavigatorModel.getPageCount();
    var m = pageNavigatorModel.getPageCount();
    $("modal_msg_list_pagination").hide();
    h = parseInt(h) / 1000;
    maxQuant = parseInt(e) * 1000;
    usedQuant = (parseInt(g) == 0) ? parseInt(e) * 1000 : (parseInt(e) - parseInt(g)) * 1000;
    var n = new Array();
    n.push("<div class='viewtrades'>");
    n.push("<div class='tradettl'>");
    n.push(addCommas(usedQuant));
    n.push(" ");
    n.push(resourceinfo["rec" + l]);
    switch (parseInt(k)) {
    case 1:
        n.push(" " + g_js_strings.commonstr.purchased);
        break;
    case 2:
        n.push(" " + g_js_strings.commonstr.sold);
        break
    }
    for (var d = 0; d < seed.cities.length; d++) {
        if (parseInt(seed.cities[d][0]) == parseInt(f)) {
            n.push(" - <span>(" + seed.cities[d][1] + ": " + seed.cities[d][2] + "," + seed.cities[d][3] + ")</span>");
            d = seed.cities.length
        }
    }
    n.push("</div>");
    n.push("<div>");
    n.push(resourceinfo["rec" + l]);
    switch (parseInt(k)) {
    case 1:
        n.push(" " + g_js_strings.commonstr.purchased);
        break;
    case 2:
        n.push(" " + g_js_strings.commonstr.sold);
        break
    }
    n.push(" " + g_js_strings.modal_messages_viewtrades_view.fromatob.replace("%1$s", j).replace("%2$s", b));
    n.push("</div>");
    if (parseInt(k) == 1) {
        n.push("<div><b>" + g_js_strings.modal_messages_viewtrades_view.unitprice + ":</b> " + h + " " + resourceinfo.rec0 + "</div>");
        n.push("<div><b>" + g_js_strings.modal_messages_viewtrades_view.costofa.replace("%1$s", resourceinfo["rec" + l]) + ":</b> " + addCommas(Math.floor(h * usedQuant)) + " " + resourceinfo.rec0 + "</div>");
        n.push("<div><b>" + g_js_strings.modal_messages_viewtrades_view.mktfee + ":</b> " + addCommas(parseInt(h * maxQuant * 0.005)) + " " + resourceinfo.rec0 + "</div>");
        n.push("<div><b>" + g_js_strings.modal_messages_viewtrades_view.totalgold + ":</b> " + addCommas(parseInt(parseInt(h * usedQuant * 1005) / 1000)) + " " + resourceinfo.rec0 + "</div>");
        n.push("<div>**" + g_js_strings.modal_messages_viewtrades_view.res30min + "</div>")
    } else {
        if (parseInt(k) == 2) {
            n.push("<div><b>" + g_js_strings.modal_messages_viewtrades_view.unitprice + ":</b> " + h + " " + resourceinfo.rec0 + "</div>");
            n.push("<div><b>" + g_js_strings.modal_messages_viewtrades_view.mktfee + ":</b> " + addCommas(parseInt(h * maxQuant * 0.005)) + " " + resourceinfo.rec0 + "</div>");
            n.push("<div><b>" + g_js_strings.modal_messages_viewtrades_view.goldearned + ":</b> " + addCommas(Math.floor(h * usedQuant)) + " " + resourceinfo.rec0 + " <span class='note'></span></div>")
        }
    }
    n.push("</div>");
    $("modal_msg_list").innerHTML = n.join("");
    if (parseInt(c) == 2) {
        modal_messages_viewtrades_read([o]);
        seed.newTradeReports = parseInt(seed.newTradeReports) - 1;
        messages_notify_bug()
    }
}
function modal_messages_viewtrades_read(a) {
    var c = false;
    if (!a) {
        c = true;
        var b = $("modal_msg_reports_tablediv").getElementsByTagName("input");
        var a = new Array();
        var g = 0;
        for (var d = 0; d < b.length; d++) {
            if (b[d].checked) {
                var e = b[d].getAttribute("name");
                if ($("viewreports_tradereport_" + e).hasClassName("unread")) {
                    a.push(e);
                    g++
                }
            }
        }
        if (g == 0) {
            return false
        }
    }
    var f = Object.clone(g_ajaxparams);
    f.rids = a.join(",");
    new Ajax.Request(g_ajaxpath + "ajax/readCheckedTradeReports.php" + g_ajaxsuffix, {
        method: "post",
        parameters: f,
        onSuccess: function (h) {
            if (c == true) {
                seed.newTradeReports = parseInt(seed.newTradeReports) - g;
                if (seed.newTradeReports < 0) {
                    seed.newTradeReports = 0
                }
                messages_notify_bug();
                modal_messages_viewtrades()
            }
        },
        onFailure: function () {}
    })
}
function modal_messages_viewtrades(pageNo) {
    $("modal_msg_view").hide();
    $("modal_msg_write").hide();
    $("modal_msg_list").show();
    $("modal_msg_list_actions").hide();
    $("modal_msg_links").hide();
    $("modal_msg_list_pagination").show();
    var tabs = $("modal_msg_tabs").select("a.selected");
    if (tabs.length > 0) {
        tabs[0].removeClassName("selected")
    }
    $("modal_msg_tabs_report").addClassName("selected");
    $("modal_msg_body").className = "modal_msg_tab2";
    var params = Object.clone(g_ajaxparams);
    params.pageNo = pageNo;
    new Ajax.Request(g_ajaxpath + "ajax/listTradeReports.php" + g_ajaxsuffix, {
        method: "post",
        parameters: params,
        onSuccess: function (message) {
            var rslt = eval("(" + message.responseText + ")");
            var msghtml = new Array();
            msghtml.push("<div class='modal_msg_reports'>");
            msghtml.push("<div class='rptshd'><a  onclick='Messages.listReports();return false;'>" + g_js_strings.modal_messages_viewtrades.viewtroop + "</a>&nbsp;&nbsp;-&nbsp;&nbsp;" + g_js_strings.modal_messages_viewtrades.viewmkt + "</div>");
            if (rslt.ok) {
                if (!Object.isArray(rslt.arReports)) {
                    msghtml.push("<div id='modal_msg_reports_tablediv'><table cellpadding='0' cellspacing='0' class='msgviewtable reportviewtable'>");
                    msghtml.push("<thead><tr><td class='chkcol'></td><td class='dtcol'>" + g_js_strings.commonstr.date + "</td><td class='nmcol'>" + g_js_strings.commonstr.eventtx + "</td>");
                    msghtml.push("<td class='subjcol'>" + g_js_strings.commonstr.view + "</td>");
                    msghtml.push("</tr></thead><tbody>");
                    var rptkeys = Object.keys(rslt.arReports);
                    for (var i = 0; i < rptkeys.length; i++) {
                        var idvrpt = rslt.arReports[rptkeys[i]];
                        msghtml.push("<tr class='");
                        if (i % 2 == 0) {
                            msghtml.push("stripe")
                        }
                        if (parseInt(idvrpt.status) == 2) {
                            msghtml.push(" unread")
                        }
                        msghtml.push("' id='viewreports_tradereport_");
                        msghtml.push(idvrpt.id);
                        msghtml.push("'><td class='chkcol'><input type='checkbox' name='");
                        msghtml.push(idvrpt.id);
                        msghtml.push("'/></td><td class='dtcol'><div>");
                        msghtml.push(formatDateByUnixTime(idvrpt.reportUnixTime));
                        msghtml.push("</div></td>");
                        msghtml.push("<td class='nmcol'><div>");
                        msghtml.push(addCommas(parseInt(idvrpt.quantityK) * 1000));
                        msghtml.push(" ");
                        msghtml.push(resourceinfo["rec" + idvrpt.resourceType]);
                        switch (parseInt(idvrpt.postingType)) {
                        case 1:
                            msghtml.push(" " + g_js_strings.commonstr.purchased);
                            break;
                        case 2:
                            msghtml.push(" " + g_js_strings.commonstr.sold);
                            break
                        }
                        for (var j = 0; j < seed.cities.length; j++) {
                            if (parseInt(seed.cities[j][0]) == parseInt(idvrpt.cityId)) {
                                msghtml.push(" (" + seed.cities[j][1] + ")");
                                j = seed.cities.length
                            }
                        }
                        msghtml.push("</div></td>");
                        msghtml.push("<td class='subjcol'><div>");
                        msghtml.push("<a  onclick='modal_messages_viewtrades_view(");
                        msghtml.push(idvrpt.id + ',"' + idvrpt.strReportUnixTime + '",' + idvrpt.cityId + "," + idvrpt.postingType + "," + idvrpt.resourceType + "," + idvrpt.unitPricex1000 + "," + idvrpt.quantityK + ',"' + idvrpt.strPostUnixTime + '",' + idvrpt.status + "," + idvrpt.remainingQuantityK);
                        msghtml.push(");return false;'>" + g_js_strings.modal_messages_viewtrades.viewrpt + "</a>");
                        msghtml.push("</div></td>");
                        msghtml.push("</tr>")
                    }
                    msghtml.push("</tbody></table></div>")
                }
                msghtml.push("</div>");
                msghtml.push("<div class='clearfix viewtradesbtns'><a  class='button20' onclick='modal_messages_viewtrades_read();return false;'><span>" + g_js_strings.modal_messages.markread + "</span></a>");
                msghtml.push("<a  class='buttonDown20' onclick='modal_messages_tradereports_chkdel();return false;'><span>" + g_js_strings.commonstr.deletetx + "</span></a><a  class='buttonDown20' onclick='confirmTradeReportsDeleteAll();return false;'><span>" + g_js_strings.modal_messages.deleteall + "</span></a>");
                msghtml.push(" <a  onclick='modal_messages_reports_chk(1);return false;'>Check All</a><a  onclick='modal_messages_reports_chk(2);return false;'>" + g_js_strings.modal_messages.unchkall + "</a></div>");
                $("modal_msg_list").innerHTML = msghtml.join("");
                pageNavigatorController.onClick = modal_messages_viewtrades;
                var pageCount = parseInt(rslt.noOfPages || rslt.totalPages);
                pageCount = isNaN(pageCount) || pageCount < 0 ? 0 : pageCount;
                pageNavigatorModel.setPageCount(pageCount);
                pageNo = pageNo || 1;
                pageNavigatorModel.gotoPage(pageNo)
            } else {
                pageNavigatorModel.setPageCount(0);
                msghtml.push("<div style='font-weight:bold;font-size:14px;padding:10px 0 0 20px;'>" + g_js_strings.modal_messages_viewtrades.notrades + "</div>");
                msghtml.push("</div>");
                $("modal_msg_list").innerHTML = msghtml.join("")
            }
        },
        onFailure: function () {}
    })
}
function modal_messages_viewdisasterreports(pageNo) {
    $("modal_msg_view").hide();
    $("modal_msg_write").hide();
    $("modal_msg_list").show();
    $("modal_msg_list_actions").hide();
    $("modal_msg_links").hide();
    $("modal_msg_list_pagination").show();
    var tabs = $("modal_msg_tabs").select("a.selected");
    if (tabs.length > 0) {
        tabs[0].removeClassName("selected")
    }
    $("modal_msg_tabs_report").addClassName("selected");
    $("modal_msg_body").className = "modal_msg_tab2";
    var params = Object.clone(g_ajaxparams);
    params.pageNo = pageNo;
    new Ajax.Request(g_ajaxpath + "ajax/listDisasterReports.php" + g_ajaxsuffix, {
        method: "post",
        parameters: params,
        onSuccess: function (message) {
            var rslt = eval("(" + message.responseText + ")");
            var msghtml = new Array();
            msghtml.push("<div class='modal_msg_reports'>");
            msghtml.push("<div class='rptshd'><a onclick='Messages.listReports();return false;'>" + g_js_strings.modal_messages_viewtrades.viewtroop + "</a>&nbsp;&nbsp;-&nbsp;&nbsp;" + g_js_strings.modal_messages_viewdisasterreports.disasterrpts + "&nbsp;&nbsp;-&nbsp;&nbsp;<a onclick='modal_messages_viewtrades();return false;'>" + g_js_strings.modal_messages_viewdisasterreports.viewmkttrades + " (" + seed.newTradeReports + ")</a></div>");
            if (rslt.ok) {
                if (!Object.isArray(rslt.arReports)) {
                    msghtml.push("<div id='modal_msg_reports_tablediv'><table cellpadding='0' cellspacing='0' class='msgviewtable reportviewtable'>");
                    msghtml.push("<thead><tr><td class='chkcol'></td><td class='dtcol'>" + g_js_strings.commonstr.date + "</td><td class='nmcol'>" + g_js_strings.commonstr.eventtx + "</td>");
                    msghtml.push("<td class='subjcol'>" + g_js_strings.commonstr.view + "</td></tr></thead><tbody>");
                    var rptkeys = Object.keys(rslt.arReports);
                    for (var i = 0; i < rptkeys.length; i++) {
                        var idvrpt = rslt.arReports[rptkeys[i]];
                        msghtml.push("<tr class='");
                        if (i % 2 == 0) {
                            msghtml.push("stripe")
                        }
                        msghtml.push("' id='viewdisasterreports_marchreport_");
                        msghtml.push(idvrpt.cityEventReportId);
                        msghtml.push("'><td class='chkcol'><input type='checkbox' name='");
                        msghtml.push(idvrpt.cityEventReportId);
                        msghtml.push("'/></td><td class='dtcol'><div>");
                        msghtml.push(formatDateByUnixTime(idvrpt.reportUnixTime));
                        msghtml.push("</div></td>");
                        msghtml.push("<td class='nmcol'><div>");
                        switch (parseInt(idvrpt.eventType)) {
                        case 70:
                            msghtml.push(g_js_strings.modal_messages_viewdisasterreports.troopsdeserted);
                            break;
                        case 80:
                            msghtml.push(g_js_strings.modal_messages_viewdisasterreports.troopsrecovered);
                            break;
                        default:
                            msghtml.push(g_js_strings.commonstr.disaster);
                            break
                        }
                        msghtml.push("</div></td>");
                        var eventType = parseInt(idvrpt.eventType);
                        switch (eventType) {
                        case 70:
                        case 80:
                            msghtml.push("<td class='subjcol'><div>");
                            msghtml.push("<a onclick='modal_messages_viewCityEventReport(");
                            msghtml.push(idvrpt.cityEventReportId);
                            msghtml.push(",");
                            if (pageNo) {
                                msghtml.push(pageNo)
                            } else {
                                msghtml.push(1)
                            }
                            msghtml.push(", " + eventType);
                            msghtml.push(");return false;' href='#'>" + g_js_strings.modal_messages_viewtrades.viewrpt + "</a>");
                            msghtml.push("</div></td>");
                            break;
                        default:
                            msghtml.push("<td class='subjcol'><div>");
                            msghtml.push("</div></td>");
                            break
                        }
                        msghtml.push("</tr>")
                    }
                    msghtml.push("</tbody></table></div>")
                }
            } else {}
            msghtml.push("</div>");
            $("modal_msg_list").innerHTML = msghtml.join("");
            var pageCount = parseInt(rslt.noOfPages || rslt.totalPages);
            pageCount = isNaN(pageCount) || pageCount < 0 ? 0 : pageCount;
            pageNavigatorController.onClick = modal_messages_viewdisasterreports;
            pageNavigatorModel.setPageCount(pageCount);
            pageNo = pageNo || 1;
            pageNavigatorModel.gotoPage(pageNo)
        },
        onFailure: function () {}
    })
}
function modal_messages_viewCityEventReport(reportid, pageno, eventType) {
    eventType = eventType || 80;
    if (eventType = 70) {
        var params = Object.clone(g_ajaxparams);
        params.rid = reportid;
        new Ajax.Request(g_ajaxpath + "ajax/fetchCityEventReport.php" + g_ajaxsuffix, {
            method: "post",
            parameters: params,
            onSuccess: function (message) {
                var rslt = message.responseText.evalJSON();
                $("modal_msg_list_pagination").hide();
                if (!rslt.ok) {
                    Modal.showAlert(printLocalError((rslt.error_code || null), (rslt.msg || null), (rslt.feedback || null)))
                } else {
                    var reportDate = formatDateByUnixTime(rslt.index.reportUnixTime);
                    var reportNumber = rslt.index.cityEventReportId;
                    var production = Math.floor(rslt.detail.r1production);
                    var consumption = Math.floor(rslt.detail.r1consumption);
                    var deficit = production - consumption;
                    var cityId = rslt.index.cityId;
                    var cityNumber = g_mapObject.getSlotCity(1, cityId);
                    var cityName = "";
                    for (var i = 0; i < seed.cities.length; i++) {
                        var city = seed.cities[i];
                        if (city[0] == cityId) {
                            cityName = city[1];
                            break
                        }
                    }
                    var lostTroops = [];
                    var units = rslt.detail.units;
                    for (var unitKey in units) {
                        var lost = units[unitKey];
                        var after = rslt.detail.newUnitCounts ? rslt.detail.newUnitCounts[unitKey] : "-";
                        var before = rslt.detail.oldUnitCounts ? rslt.detail.oldUnitCounts[unitKey] : "-";
                        if (lost > 0) {
                            var unitId = unitKey.substring(1);
                            var img = "img/units/unit_" + unitId + "_30.png";
                            var unitName = unitcost["unt" + unitId][0];
                            var unit = {};
                            unit.image = img;
                            unit.name = unitName;
                            unit.before = before;
                            unit.after = after;
                            unit.lost = lost;
                            lostTroops.push(unit)
                        }
                    }
                    var reportModel = {
                        date: reportDate,
                        reportNumber: reportNumber,
                        city: {
                            name: cityName,
                            number: cityNumber
                        },
                        lostTroops: lostTroops,
                        food: {
                            produced: production,
                            consumed: consumption,
                            deficit: deficit
                        }
                    };
                    var desertionReportView = new cm.DesertionReportView(reportModel);
                    var desertionReportController = new cm.DesertionReportController(reportModel, desertionReportView);
                    var modalMessgaList = $("modal_msg_list");
                    modalMessgaList.innerHTML = "";
                    modalMessgaList.appendChild(desertionReportView.getHTMLElement());
                    seed.newReportCount = parseInt(seed.newReportCount) - 1;
                    messages_notify_bug()
                }
            },
            onFailure: function () {}
        })
    } else {
        var params = Object.clone(g_ajaxparams);
        params.rid = reportid;
        new Ajax.Request(g_ajaxpath + "ajax/fetchCityEventReport.php" + g_ajaxsuffix, {
            method: "post",
            parameters: params,
            onSuccess: function (message) {
                var rslt = eval("(" + message.responseText + ")");
                $("modal_msg_list_pagination").hide();
                if (rslt.ok) {
                    var msghtml = new Array();
                    msghtml.push("<div class='reportdetail clearfix'>");
                    msghtml.push("<div class='side'><div class='scoutttl'>" + g_js_strings.modal_messages_viewdisasterreports.rewardmsg.replace("%1$s", rslt.detail.battleTimestamp) + "</div></div>");
                    msghtml.push("<div class='reporttimestamp'>" + rslt.detail.reportTimestamp + "</div>");
                    msghtml.push("<div class='reporthelp'>" + g_js_strings.modal_messages_viewdisasterreports.helpedmsg_1.replace("%1$s", rslt.detail.numFriends) + "</div>");
                    msghtml.push("</div>");
                    msghtml.push("<div class='reportdetail clearfix'><div class='side leftside'>");
                    msghtml.push("<table class='trttl' cellspacing='0' cellpadding='0'>");
                    msghtml.push("<thead><tr><td>&nbsp;</td><td class='trnm'>" + g_js_strings.commonstr.troops + "</td><td>" + g_js_strings.modal_messages_viewdisasterreports.troopsrecovered + "</td></tr></thead>");
                    msghtml.push("<tbody>");
                    var units = Object.keys(rslt.detail.units);
                    if (rslt.detail.units.length != 0) {
                        for (var i = 0; i < units.length; i++) {
                            var uid = units[i].split("u")[1];
                            msghtml.push("<tr>");
                            msghtml.push("<td><img src='" + stimgUrl + "img/units/unit_" + uid + "_30.png'/></td>");
                            msghtml.push("<td class='trnm'>" + unitcost["unt" + uid][0] + "</td>");
                            msghtml.push("<td>" + rslt.detail.units[units[i]] + "</td>");
                            msghtml.push("</tr>")
                        }
                    }
                    msghtml.push("</tbody></table>");
                    msghtml.push("</div></div>");
                    msghtml.push('<div class="reportdetail"><div class="lootttl">' + g_js_strings.commonstr.loot + '</div><div class="loot clearfix"><div class="item"><img src="' + stimgUrl + '/img/gold_30.png"><b>' + resourceinfo[0] + ":</b> " + rslt.detail.resources.r0 + '</div><div class="item"><img src="' + stimgUrl + '/img/food_30.png"><b>' + resourceinfo[1] + ":</b> " + rslt.detail.resources.r1 + '</div><div class="item"><img src="' + stimgUrl + '/img/wood_30.png"><b>' + resourceinfo[2] + ":</b> " + rslt.detail.resources.r2 + '</div><div class="item"><img src="' + stimgUrl + '/img/stone_30.png"><b>' + resourceinfo[3] + ":</b> " + rslt.detail.resources.r3 + '</div><div class="item"><img src="' + stimgUrl + '/img/iron_30.png"><b>' + resourceinfo[4] + ":</b> " + rslt.detail.resources.r4 + "</div></div></div>");
                    msghtml.push("<div class='reportdetail clearfix' style='padding-top:10px;'><a class='button20' onclick='modal_messages_viewreports(" + pageno + ");return false;'><span>" + g_js_strings.commonstr.back + "</span></a></div>");
                    $("modal_msg_list").innerHTML = msghtml.join("")
                } else {}
            },
            onFailure: function () {}
        })
    }
}
function modal_messages_viewreports(a) {
    Messages.listReports(a)
}
function modal_share_victory(c, f, d, h, a, j, b, i, k, g) {
    var e = new Array();
    e.push(["REPLACE_TiLeNaMe", c]);
    e.push(["REPLACE_TiLeLeVeL", f]);
    e.push(["REPLACE_ReSoUrCES", addCommas(d)]);
    e.push(["REPLACE_mArCh_RePortiD", k]);
    e.push(["REPLACE_sIdE", g]);
    e.push(["REPLACE_DeFeNdErNaMe", h]);
    e.push(["REPLACE_AtTaCkErNaMe", a]);
    if (j == "F") {
        j = g_js_strings.commonstr.lady
    } else {
        j = g_js_strings.commonstr.lord
    }
    if (b == "F") {
        b = g_js_strings.commonstr.lady
    } else {
        b = g_js_strings.commonstr.lord
    }
    e.push(["REPLACE_DeFeNdErGeNdEr", j]);
    e.push(["REPLACE_AtTaCkErGeNdEr", b]);
    if (parseInt(g) == 0) {} else {}
    switch (i) {
    case 110:
        common_postToProfile("110", Object.cloneFeed(template_data_110), Object.cloneFeed(actionlink_data_110), continuation_110, e);
        break;
    case 111:
        common_postToProfile("111", Object.cloneFeed(template_data_111), Object.cloneFeed(actionlink_data_111), continuation_111, e);
        break;
    case 112:
        common_postToProfile("112", Object.cloneFeed(template_data_112), Object.cloneFeed(actionlink_data_112), continuation_112, e);
        break;
    case 113:
        common_postToProfile("113", Object.cloneFeed(template_data_113), Object.cloneFeed(actionlink_data_113), continuation_113, e);
        break;
    case 114:
        common_postToProfile("114", Object.cloneFeed(template_data_114), Object.cloneFeed(actionlink_data_114), continuation_114, e);
        break;
    case 115:
        common_postToProfile("115", Object.cloneFeed(template_data_115), Object.cloneFeed(actionlink_data_115), continuation_115, e);
        break;
    case 116:
        common_postToProfile("116", Object.cloneFeed(template_data_116), Object.cloneFeed(actionlink_data_116), continuation_116, e);
        break;
    case 117:
        common_postToProfile("117", Object.cloneFeed(template_data_117), Object.cloneFeed(actionlink_data_117), continuation_117, e);
        break
    }
}
function confirmReportsDeleteAll() {
    var a = [];
    a.push("<div style='padding: 50px; font-size: 16px;'>Are you sure you want to delete all messages in this folder?<div style='padding-top:20px'>");
    a.push("<a  onclick='Messages.deleteCheckedReports(\"deleteAll\"); Modal.hideModal();' class='button20'><span>" + g_js_strings.commonstr.yes + "</span></a>");
    a.push("<a  onclick='Modal.hideModal();' class='buttonDown20'><span>" + g_js_strings.commonstr.no + "</span></a></div></div>");
    Modal.showModal(740, 400, 10, 10, g_js_strings.modaltitles.deleteall, a.join(""))
}
function modal_messages_reports_chkdel(a) {
    Messages.deleteCheckedReports(a)
}
function confirmTradeReportsDeleteAll() {
    var a = [];
    a.push("<div style='padding: 50px; font-size: 16px;'>Are you sure you want to delete all messages in this folder?<div style='padding-top:20px'>");
    a.push("<a  onclick='modal_messages_tradereports_chkdel(\"deleteAll\"); Modal.hideModal();' class='button20'><span>" + g_js_strings.commonstr.yes + "</span></a>");
    a.push("<a  onclick='Modal.hideModal();' class='buttonDown20'><span>" + g_js_strings.commonstr.no + "</span></a></div></div>");
    Modal.showModal(740, 400, 10, 10, g_js_strings.modaltitles.deleteall, a.join(""))
}
function modal_messages_tradereports_chkdel(rType) {
    var chks = $("modal_msg_reports_tablediv").getElementsByTagName("input");
    var rids = new Array();
    var unreadcount = 0;
    for (var i = 0; i < chks.length; i++) {
        if (chks[i].checked) {
            var attrs = chks[i].getAttribute("name");
            rids.push(attrs);
            if ($("viewreports_tradereport_" + attrs).hasClassName("unread")) {
                unreadcount++
            }
        }
    }
    if (rids.length == 0 && rType != "deleteAll") {
        return false
    }
    var params = Object.clone(g_ajaxparams);
    if (rType) {
        params.requestType = rType
    }
    params.rids = rids.join(",");
    new Ajax.Request(g_ajaxpath + "ajax/deleteCheckedTradeReports.php" + g_ajaxsuffix, {
        method: "post",
        parameters: params,
        onSuccess: function (message) {
            var rslt = eval("(" + message.responseText + ")");
            if (rslt.ok) {
                if (unreadcount > 0) {
                    seed.newTradeReports = parseInt(seed.newTradeReports) - unreadcount;
                    if (seed.newTradeReports < 0) {
                        seed.newTradeReports = 0
                    }
                    messages_notify_bug()
                }
                modal_messages_viewtrades()
            }
        },
        onFailure: function () {}
    })
}
function modal_messages_reports_chkread() {
    Messages.markCheckedReportsAsRead()
}
function modal_messages_reports_chk(c) {
    var b = $("modal_msg_reports_tablediv").getElementsByTagName("input");
    var a = true;
    if (c == 2) {
        a = false
    }
    for (var d = 0; d < b.length; d++) {
        b[d].checked = a
    }
}
function getReportDisplay() {
    var l = arguments[0];
    var D = arguments[1];
    var y = l[0];
    var a = l[1];
    var C = l[2];
    var g = l[3];
    var x = l[4];
    var h = l[5];
    var v = l[6];
    var m = l[7];
    var k = l[8];
    var E = l[9];
    var n = l[10];
    var r = l[11];
    var b = l[12];
    var G = l[13];
    var c = l[14];
    var f = l[15];
    var A = formatDateByUnixTime(b);
    var s = new Array();
    s.push("<div class='reportdetail clearfix'>");
    s.push("<div class='side'>");
    s.push("<div class='scoutttl'>");
    if (parseInt(E) == 3) {
        if (parseInt(a) == 1) {
            s.push(g_js_strings.modal_messages_viewreports_view.scoutingat + " ")
        } else {
            s.push(g_js_strings.modal_messages_viewreports_view.antiscoutingat + " ")
        }
    } else {
        if (parseInt(E) == 1) {
            s.push(g_js_strings.modal_messages_viewreports_view.transpto + " ")
        } else {
            s.push(g_js_strings.modal_messages_viewreports_view.battleat + " ")
        }
    }
    if (parseInt(C) != 51) {
        s.push(g_mapObject.types[parseInt(C)].capitalize());
        s.push(" " + g_js_strings.commonstr.lv + g)
    } else {
        if (parseInt(x) == 0) {
            s.push(g_js_strings.commonstr.barbariancamp);
            s.push(" " + g_js_strings.commonstr.lv + g)
        }
    }
    var F = new cm.utils.CoordinateLink(n, r);
    F.setClassName("coordinateLink");
    s.push(F.getHTML());
    if (E != 1) {
        if (parseInt(D.conquered) == 1) {
            s.push(" - <b class='conq'>" + g_js_strings.commonstr.conquered + "</b>")
        }
    }
    s.push("</div>");
    s.push("</div>");
    s.push("<div class='reporttimestamp'>" + A + "</div>");
    s.push("<div class='reportid'>" + g_js_strings.modal_messages_viewreports_view.reportno + " " + y + " </div>");
    s.push("</div>");
    if (E != 1) {
        s.push("<div class='reportdetail clearfix'>");
        if (parseInt(D.conquered) == 0 && parseInt(D.winner) == 1 && parseInt(C) != 51) {
            s.push("<b class='conq'>" + g_js_strings.modal_messages_viewreports_view.cannotbeconq + "</b>")
        } else {
            if (D.conquered == false && parseInt(D.winner) == 1 && parseInt(C) != 51) {
                s.push("<b class='conq'>" + g_js_strings.modal_messages_viewreports_view.cannotbeconq + "</b>")
            }
        }
        s.push("</div>");
        if (parseInt(E) == 3) {
            if (parseInt(D.score) > 0) {
                s.push("<div class='reportdetail'>");
                s.push("<div class='side clearfix'>");
                s.push("<div class='scoutttl'>" + g_js_strings.modal_messages_viewreports_view.scoutrpt + "</div>");
                s.push("<div class='reporttablewrap'>");
                s.push("<table cellpadding='0' cellspacing='0' class='trttl'>");
                s.push("<thead><tr><td>&nbsp;</td><td class='trnm'>" + g_js_strings.commonstr.nametx + "</td><td class='startcol'>" + g_js_strings.commonstr.count + "</td></tr></thead><tbody>");
                if (D.unts && !Object.isArray(D.unts)) {
                    var q = Object.keys(D.unts);
                    for (var w = 0; w < q.length; w++) {
                        s.push("<tr><td><img src='");
                        s.push(stimgUrl);
                        s.push("img/units/unit_");
                        s.push(q[w].split("u")[1]);
                        s.push("_30.png'/></td><td class='trnm'>");
                        s.push(unitcost["unt" + q[w].split("u")[1]][0]);
                        s.push("</td><td class='startcol'>");
                        s.push(D.unts[q[w]]);
                        s.push("</td></tr>")
                    }
                } else {
                    s.push("<tr><td colspan='3'>" + g_js_strings.modal_messages_viewreports_view.nounits + "</td></tr>")
                }
                s.push("</tbody></table>");
                s.push("</div>");
                if (D.lstlgn) {
                    s.push("<div class='reporttablewrap'>");
                    s.push("<table cellpadding='0' cellspacing='0' class='trttl'>");
                    s.push("<thead><tr><td colspan='2'>" + g_js_strings.modal_messages_viewreports_view.lastlogin + "</td></tr></thead><tbody>");
                    s.push("<tr><td colspan='2'>");
                    s.push(new Date(D.lstlgn * 1000).toGMTString());
                    s.push("</td></tr>");
                    s.push("</tbody></table>");
                    s.push("</div>")
                }
                if (D.knght && D.knght.cbt) {
                    s.push("<div class='reporttablewrap'>");
                    s.push("<table cellpadding='0' cellspacing='0' class='trttl'>");
                    s.push("<thead><tr><td colspan='2'>" + g_js_strings.modal_messages_viewreports_view.knightcomabtlv + "</td></tr></thead><tbody>");
                    s.push("<tr><td colspan='2'>");
                    s.push(D.knght.cbt);
                    s.push("</td></tr>");
                    s.push("</tbody></table>");
                    s.push("</div>")
                }
                if (D.frt && !Object.isArray(D.frt)) {
                    s.push("<div class='reporttablewrap'>");
                    s.push("<table cellpadding='0' cellspacing='0' class='trttl'>");
                    s.push("<thead><tr><td>&nbsp;</td><td class='trnm'>" + g_js_strings.commonstr.nametx + "</td><td class='startcol'>" + g_js_strings.commonstr.count + "</td></tr></thead><tbody>");
                    var q = Object.keys(D.frt);
                    for (var w = 0; w < q.length; w++) {
                        s.push("<tr><td><img src='");
                        s.push(stimgUrl);
                        s.push("img/units/unit_");
                        s.push(q[w].split("f")[1]);
                        s.push("_30.png'/></td><td class='trnm'>");
                        s.push(fortcost["frt" + q[w].split("f")[1]][0]);
                        s.push("</td><td class='startcol'>");
                        s.push(D.frt[q[w]]);
                        s.push("</td></tr>")
                    }
                    s.push("</tbody></table>");
                    s.push("</div>")
                }
                if (D.blds && !Object.isArray(D.blds)) {
                    s.push("<div class='reporttablewrap'>");
                    s.push("<table cellpadding='0' cellspacing='0' class='trttl'>");
                    s.push("<thead><tr><td>&nbsp;</td><td class='trnm'>" + g_js_strings.commonstr.building + "</td><td class='startcol'>" + g_js_strings.commonstr.levels + "</td></tr></thead><tbody>");
                    var q = Object.keys(D.blds);
                    for (var w = 0; w < q.length; w++) {
                        var z = parseInt(q[w].split("b")[1]);
                        s.push("<tr><td>&nbsp;</td><td class='trnm'>");
                        s.push(buildingcost["bdg" + z][0]);
                        s.push("</td><td class='startcol'>");
                        s.push(D.blds[q[w]].join(", "));
                        s.push("</td></tr>")
                    }
                    s.push("</tbody></table>");
                    s.push("</div>")
                }
                if (D.rsc && !Object.isArray(D.rsc)) {
                    s.push("<div class='reporttablewrap'>");
                    s.push("<table cellpadding='0' cellspacing='0' class='trttl'>");
                    s.push("<thead><tr><td>&nbsp;</td><td class='trnm'>" + g_js_strings.commonstr.resource + "</td><td class='startcol'>" + g_js_strings.commonstr.quantity + "</td></tr></thead><tbody>");
                    var q = Object.keys(D.rsc);
                    for (var w = 0; w < q.length; w++) {
                        var u = parseInt(q[w].split("r")[1]);
                        s.push("<tr><td><img src='");
                        s.push(stimgUrl);
                        s.push("img/");
                        if (u == 1) {
                            s.push("food")
                        } else {
                            if (u == 2) {
                                s.push("wood")
                            } else {
                                if (u == 3) {
                                    s.push("stone")
                                } else {
                                    if (u == 4) {
                                        s.push("iron")
                                    }
                                }
                            }
                        }
                        s.push("_30.png'/></td><td class='trnm'>");
                        s.push(resourceinfo["rec" + u]);
                        s.push("</td><td class='startcol'>");
                        s.push(addCommas(parseInt(D.rsc[q[w]])));
                        s.push("</td></tr>")
                    }
                    s.push("</tbody></table>");
                    s.push("</div>")
                }
                if (D.tch && !Object.isArray(D.tch)) {
                    s.push("<div class='reporttablewrap'>");
                    s.push("<table cellpadding='0' cellspacing='0' class='trttl'>");
                    s.push("<thead><tr><td class='trnm'>" + g_js_strings.commonstr.research + "</td><td class='startcol'>" + g_js_strings.commonstr.levels + "</td></tr></thead><tbody>");
                    var q = Object.keys(D.tch);
                    for (var w = 0; w < q.length; w++) {
                        s.push("<tr><td class='trnm'>");
                        s.push(techcost["tch" + q[w].split("t")[1]][0]);
                        s.push("</td><td class='startcol'>");
                        s.push(D.tch[q[w]]);
                        s.push("</td></tr>")
                    }
                    s.push("</tbody></table>");
                    s.push("</div>")
                }
                s.push("</div></div>")
            } else {
                if (parseInt(a) == 1) {
                    s.push("<div class='reportdetail clearfix'><div class='side'><div class='scoutttl'>" + g_js_strings.modal_messages_viewreports_view.scoutfail + "</div></div></div>")
                }
            }
        }
        if (Object.keys(D.fght.s0).length == 0 && Object.keys(D.fght.s1) == 0) {
            s.push("<div class='reportdetail clearfix' style='display:none;'>")
        } else {
            s.push("<div class='reportttl'>" + g_js_strings.modal_messages_viewreports_view.battlerpt);
            if ((parseInt(D.winner) == 1 && parseInt(a) == 1) || (parseInt(D.winner) == 0 && parseInt(a) == 0) || (parseInt(D.winner) == 2 && parseInt(a) == 1)) {
                s.push(" - <b class='victory'>" + g_js_strings.commonstr.victory + "</b>")
            } else {
                s.push(" - <b class='defeat'>" + g_js_strings.commonstr.defeat + "</b>")
            }
            s.push("</div>");
            s.push("<div class='nobreach'>");
            if (parseInt(D.winner) == 1 && typeof (D.wall) != "undefined") {
                if (parseInt(C) == 51) {
                    s.push(g_js_strings.modal_messages_viewreports_view.wallbreach + " ")
                } else {
                    s.push(g_js_strings.modal_messages_viewreports_view.securedwilderness + " ")
                }
            }
            if (parseInt(D.winner) == 2) {
                if (parseInt(C) == 51) {
                    s.push(g_js_strings.modal_messages_viewreports_view.nowallbreach + " ")
                } else {
                    s.push(g_js_strings.modal_messages_viewreports_view.nosecuredwilderness + " ");
                    if (typeof (D.wall) != "undefined") {
                        s.push(D.wall);
                        s.push(g_js_strings.modal_messages_viewreports_view.wildernesspercsec)
                    }
                }
            }
            if (parseInt(D.winner) == 1 && parseInt(a) == 0 && parseInt(C) == 51) {
                if (typeof (D.wall) != "undefined") {
                    s.push(D.wall);
                    s.push(g_js_strings.modal_messages_viewreports_view.percdamage)
                }
                if (parseInt(D.wall) == 100) {
                    s.push(" " + g_js_strings.modal_messages_viewreports_view.pendingcancel)
                }
            }
            s.push("</div>");
            s.push("<div class='reportdetail clearfix'>")
        }
        s.push("<div class='side leftside'>");
        s.push("<div class='sidettl'>" + g_js_strings.commonstr.attackers + " <span class='who'>(");
        if (m != "") {
            s.push(m);
            s.push(")");
            if (c != undefined || c != null) {
                s.push(" - <b>");
                var F = new cm.utils.CoordinateLink(c, f);
                F.setClassName("coordinateLink");
                s.push(F.getHTML());
                s.push("</b>")
            }
            s.push("</span>")
        } else {
            s.push(g_js_strings.commonstr.enemy);
            s.push(")</span>")
        }
        if ((parseInt(D.winner) == 1) || (parseInt(D.winner) == 2)) {
            s.push("<b class='winner'>" + g_js_strings.commonstr.winner + "</b>")
        }
        if (parseInt(E) != 3 && D.s1KCombatLv) {
            s.push("<br/>" + g_js_strings.modal_messages_viewreports_view.knightskills + ": " + D.s1KCombatLv);
            if (typeof (D.s1atkBoost) != "undefined" && D.s1atkBoost != 0) {
                s.push("<br/>" + g_js_strings.modal_messages_viewreports_view.attackboosted + ": " + D.s1atkBoost * 100 + "%")
            }
            if (typeof (D.s1defBoost) != "undefined" && D.s1defBoost != 0) {
                s.push("<br/>" + g_js_strings.modal_messages_viewreports_view.defenseboosted + ": " + D.s1defBoost * 100 + "%")
            }
        }
        s.push("</div>");
        s.push("<table cellpadding='0' cellspacing='0' class='trttl'>");
        s.push("<thead><tr><td>&nbsp;</td><td class='trnm'>" + g_js_strings.commonstr.troops + "</td><td class='startcol'>" + g_js_strings.commonstr.fought + "</td><td class='endcol'>" + g_js_strings.commonstr.survived + "</td></tr></thead><tbody>");
        var q = Object.keys(D.fght.s1);
        for (var w = 0; w < q.length; w++) {
            var t = parseInt(D.fght.s1[q[w]][0]);
            var j = parseInt(D.fght.s1[q[w]][1]);
            s.push("<tr><td><img src='");
            s.push(stimgUrl);
            s.push("img/units/unit_");
            if (q[w].split("u")[0] == "") {
                s.push(q[w].split("u")[1])
            } else {
                s.push(q[w].split("f")[1])
            }
            s.push("_30.png'/></td><td class='trnm'>");
            if (q[w].split("u")[0] == "") {
                s.push(unitcost["unt" + q[w].split("u")[1]][0])
            } else {
                s.push(fortcost["frt" + q[w].split("f")[1]][0])
            }
            s.push("</td><td class='startcol'>");
            s.push(t);
            s.push("</td><td class='endcol");
            if (j < t) {
                s.push(" loseunt")
            }
            s.push("'>");
            s.push(j);
            s.push("</td></tr>")
        }
        s.push("</tbody></table>");
        s.push("</div>");
        s.push("<div class='side rightside'>");
        s.push("<div class='sidettl'>" + g_js_strings.commonstr.defenders + " <span class='who'>(");
        s.push(h);
        s.push(")</span>");
        if (parseInt(D.winner) == 0) {
            s.push("<b class='winner'>" + g_js_strings.commonstr.winner + "</b>")
        }
        if (parseInt(E) != 3 && D.s0KCombatLv) {
            s.push("<br/>" + g_js_strings.modal_messages_viewreports_view.knightskills + ": " + D.s0KCombatLv);
            if (typeof (D.s0atkBoost) != "undefined" && D.s0atkBoost != 0) {
                s.push("<br/>" + g_js_strings.modal_messages_viewreports_view.attackboosted + ": " + parseInt(D.s0atkBoost) * 100 + "%")
            }
            if (typeof (D.s0defBoost) != "undefined" && D.s0defBoost != 0) {
                s.push("<br/>" + g_js_strings.modal_messages_viewreports_view.defenseboosted + ": " + parseInt(D.s0defBoost) * 100 + "%")
            }
        }
        s.push("</div>");
        var q = Object.keys(D.fght.s0);
        var p = 0;
        var d = 0;
        for (var w = 0; w < q.length; w++) {
            p = p + parseInt(D.fght.s0[q[w]][0]);
            d = d + parseInt(D.fght.s0[q[w]][1])
        }
        var e = (p - d) / p;
        if (e.toFixed(2) < 0.25 && q.length > 0 && parseInt(D.winner) == 0 && parseInt(a) == 1) {
            s.push(g_js_strings.modal_messages_viewreports_view.overwhelmedinbattle);
            s.push("<table cellpadding='0' cellspacing='0' class='trttl'>");
            s.push("<thead><tr><td>&nbsp;</td><td class='trnm'>" + g_js_strings.commonstr.troops + "</td><td class='endcol'>" + g_js_strings.commonstr.killed + "</td></tr></thead><tbody>");
            for (var w = 0; w < q.length; w++) {
                var t = parseInt(D.fght.s0[q[w]][0]);
                var j = parseInt(D.fght.s0[q[w]][1]);
                s.push("<tr><td><img src='");
                s.push(stimgUrl);
                s.push("img/units/unit_");
                if (q[w].split("u")[0] == "") {
                    s.push(q[w].split("u")[1])
                } else {
                    s.push(q[w].split("f")[1])
                }
                s.push("_30.png'/></td><td class='trnm'>");
                if (q[w].split("u")[0] == "") {
                    s.push(unitcost["unt" + q[w].split("u")[1]][0])
                } else {
                    s.push(fortcost["frt" + q[w].split("f")[1]][0])
                }
                s.push("</td><td class='endcol");
                s.push(" loseunt");
                s.push("'>");
                s.push(t - j);
                s.push("</td></tr>")
            }
            s.push("</tbody></table>")
        } else {
            if (q.length > 0) {
                s.push("<table cellpadding='0' cellspacing='0' class='trttl'>");
                s.push("<thead><tr><td>&nbsp;</td><td class='trnm'>" + g_js_strings.commonstr.troops + "</td><td class='startcol'>" + g_js_strings.commonstr.fought + "</td><td class='endcol'>" + g_js_strings.commonstr.survived + "</td></tr></thead><tbody>");
                for (var w = 0; w < q.length; w++) {
                    var t = parseInt(D.fght.s0[q[w]][0]);
                    var j = parseInt(D.fght.s0[q[w]][1]);
                    s.push("<tr><td><img src='");
                    s.push(stimgUrl);
                    s.push("img/units/unit_");
                    if (q[w].split("u")[0] == "") {
                        s.push(q[w].split("u")[1])
                    } else {
                        s.push(q[w].split("f")[1])
                    }
                    s.push("_30.png'/></td><td class='trnm'>");
                    if (q[w].split("u")[0] == "") {
                        s.push(unitcost["unt" + q[w].split("u")[1]][0])
                    } else {
                        s.push(fortcost["frt" + q[w].split("f")[1]][0])
                    }
                    s.push("</td><td class='startcol'>");
                    s.push(t);
                    s.push("</td><td class='endcol");
                    if (j < t) {
                        s.push(" loseunt")
                    }
                    s.push("'>");
                    s.push(j);
                    s.push("</td></tr>")
                }
                s.push("</tbody></table>")
            }
        }
        if (q.length == 0) {
            s.push(g_js_strings.modal_messages_viewreports_view.notroopsdef)
        }
        s.push("</div>");
        s.push("</div>");
        if (D.loot && (parseInt(D.loot[0]) > 0 || parseInt(D.loot[1]) > 0 || parseInt(D.loot[2]) > 0 || parseInt(D.loot[3]) > 0 || parseInt(D.loot[4]) > 0 || !Object.isArray(D.loot[5]))) {
            s.push("<div class='reportdetail'><div class='lootttl'>");
            if (parseInt(a) == 1) {
                s.push(g_js_strings.commonstr.loot)
            } else {
                if (parseInt(a) == 0) {
                    s.push("<span style='color:#A02932;'>" + g_js_strings.commonstr.plundered + "</span>")
                }
            }
            s.push("</div>");
            s.push("<div class='loot clearfix'>");
            s.push("<div class='item'><img src='");
            s.push(stimgUrl);
            var B = 0;
            if (parseInt(a) == 1) {
                B += D.loot[0];
                s.push("img/gold_30.png'/><b>" + resourceinfo.rec0 + ":</b> " + D.loot[0] + "</div>")
            } else {
                if (parseInt(D.loot[0]) > 0 && parseInt(a) == 0) {
                    s.push("img/gold_30.png'/><b>" + resourceinfo.rec0 + ":</b><span style='color:#A02932;'> -" + D.loot[0] + "</span></div>")
                } else {
                    if (parseInt(D.loot[0]) == 0 && parseInt(a) == 0) {
                        s.push("img/gold_30.png'/><b>" + resourceinfo.rec0 + ":</b><span style='color:#A02932;'> " + D.loot[0] + "</span></div>")
                    }
                }
            }
            for (var w = 1; w < 5; w++) {
                s.push("<div class='item'><img src='");
                s.push(stimgUrl);
                s.push("img/");
                switch (w) {
                case 1:
                    s.push("food");
                    break;
                case 2:
                    s.push("wood");
                    break;
                case 3:
                    s.push("stone");
                    break;
                case 4:
                    s.push("iron");
                    break
                }
                s.push("_30.png'/><b>");
                s.push(resourceinfo["rec" + w]);
                if (parseInt(a) == 1) {
                    B += D.loot[w];
                    s.push(":</b> " + D.loot[w] + "</div>")
                } else {
                    if (parseInt(D.loot[w]) > 0 && parseInt(a) == 0) {
                        s.push(":</b><span style='color:#A02932;'> -" + D.loot[w] + "</span></div>")
                    } else {
                        if (parseInt(D.loot[w]) == 0 && parseInt(a) == 0) {
                            s.push(":</b><span style='color:#A02932;'> " + D.loot[w] + "</span></div>")
                        }
                    }
                }
            }
            s.push("</div>");
            if (!Object.isArray(D.loot[5]) && Object.keys(D.loot[5]).length > 0) {
                var o = Object.keys(D.loot[5]);
                s.push("<div class='loot crests clearfix'>");
                for (var w = 0; w < o.length; w++) {
                    s.push("<div class='item'><img style='width:30px;' src='");
                    s.push(stimgUrl);
                    s.push("img/items/70/");
                    s.push(o[w]);
                    s.push(".png'/><b>");
                    s.push(itemlist["i" + o[w]].name);
                    s.push(": </b> ");
                    s.push(D.loot[5][o[w]]);
                    s.push("</div>")
                }
                s.push("</div>")
            }
            s.push("</div>")
        }
        if (parseInt(E) == 3 && parseInt(seed.tech.tch6) < 10) {
            s.push("<div class='reportdetail clearfix'>" + g_js_strings.modal_messages_viewreports_view.eagleeyes + "</div>")
        }
        s.push("</div>")
    } else {
        s.push("<div class='reportdetail'><div class='loot clearfix'>");
        s.push("<div class='item'><img src='");
        s.push(stimgUrl);
        s.push("img/gold_30.png'/><b>" + resourceinfo.rec0 + ":</b><span style='color:#77823C;'> " + D.gold + "</span></div>");
        for (var w = 1; w < 5; w++) {
            s.push("<div class='item'><img src='");
            s.push(stimgUrl);
            s.push("img/");
            switch (w) {
            case 1:
                s.push("food");
                break;
            case 2:
                s.push("wood");
                break;
            case 3:
                s.push("stone");
                break;
            case 4:
                s.push("iron");
                break
            }
            s.push("_30.png'/><b>");
            s.push(resourceinfo["rec" + w]);
            s.push(":</b><span style='color:#77823C;'> " + D["resource" + w] + "</span></div>")
        }
        s.push("</div></div>")
    }
    return s.join("")
}
function modal_messages_viewreports_view(b, n, e, h, d, a, o, i, c, l, f, m, k, g, j, p) {
    Messages.viewMarchReport(b, n, e, h, d, a, o, i, c, l, f, m, k, g, j, p)
}
var currentBoxType = "";

function modal_messages_listshow(boxType, pageNo) {
    $("modal_msg_view").hide();
    $("modal_msg_write").hide();
    $("modal_msg_list").show();
    $("modal_msg_list_actions").show();
    $("modal_msg_links").show();
    if (boxType == "inbox") {
        $("modal_msg_list_markasread").show();
        $("modal_msg_list_markasunread").show()
    } else {
        $("modal_msg_list_markasread").hide();
        $("modal_msg_list_markasunread").hide()
    }
    var params = Object.clone(g_ajaxparams);
    params.requestType = "GET_MESSAGE_HEADERS_FOR_USER_INBOX";
    params.boxType = boxType;
    params.pageNo = (pageNo || 1);
    currentBoxType = boxType;
    new Ajax.Request(g_ajaxpath + "ajax/getEmail.php" + g_ajaxsuffix, {
        method: "post",
        parameters: params,
        onSuccess: function (message) {
            var rslt = eval("(" + message.responseText + ")");
            if (rslt.ok) {
                var msghtml = new Array();
                var colHeading = (boxType == "outbox") ? g_js_strings.commonstr.totx : g_js_strings.commonstr.from;
                msghtml.push("<table cellpadding='0' cellspacing='0' border='0' class='msgviewtable' id='tbl_messages'>");
                msghtml.push("<thead><tr><td class='chkcol'></td><td class='dtcol'>" + g_js_strings.commonstr.date + "</td><td class='nmcol'>" + colHeading + "</td><td class='subjcol'>" + g_js_strings.commonstr.subject + "</td></tr></thead><tbody>");
                var i = 0;
                for (msgId in rslt.message) {
                    var onclickaction = [];
                    onclickaction.push("modal_messages_view(" + msgId + ',"' + boxType + '",');
                    if (parseInt(rslt.message[msgId].messageRead) == 1) {
                        onclickaction.push(0)
                    } else {
                        onclickaction.push(1)
                    }
                    onclickaction.push(");");
                    msghtml.push("<tr id='modal_msg_list_" + msgId + "' class='");
                    if (parseInt(rslt.message[msgId].messageRead) == 1) {
                        msghtml.push("")
                    } else {
                        msghtml.push("unread")
                    }
                    if (i++ % 2 == 0) {
                        msghtml.push(" stripe")
                    }
                    msghtml.push("'>");
                    msghtml.push("<td class='chkcol'><input type='checkbox' id='inbox_chk_" + msgId + "'/></td>");
                    msghtml.push("<td class='dtcol' onclick='" + onclickaction.join("") + "' ><div>" + rslt.message[msgId].dateSent + "</div></td>");
                    msghtml.push("<td class='nmcol'><div><a href='javascript:void(0)' onclick='getInfoForAnUser(" + rslt.message[msgId].fromUserId + ")'>" + rslt.message[msgId].displayName + "</a></div></td>");
                    msghtml.push("<td class='subjcol' onclick='" + onclickaction.join("") + "' ><div><a onclick='");
                    var subject = g_js_strings.modal_messages_listshow.nosubject;
                    if (rslt.message[msgId].subject && rslt.message[msgId].subject.length > 0) {
                        subject = rslt.message[msgId].subject
                    }
                    msghtml.push("return false'>" + subject + "</a></div></td>");
                    msghtml.push("</tr>")
                }
                msghtml.push("</tbody></table>");
                $("modal_msg_list").innerHTML = msghtml.join("");
                if (rslt.messageCount == 0) {
                    $("modal_msg_list").innerHTML = "<div style='font-size:17px;margin-left:30px;margin-top:20px'>" + g_js_strings.modal_messages_listshow.nomsg + "</div>";
                    $("modal_msg_list_actions").hide();
                    $("modal_msg_links").hide();
                    if ($("pagination_indexOnly")) {
                        ($("pagination_indexOnly")).remove()
                    }
                }
                var pageCount = parseInt(rslt.noOfPages || rslt.totalPages);
                pageCount = isNaN(pageCount) || pageCount < 0 ? 0 : pageCount;
                pageNavigatorController.onClick = paginationWrapperForListShow;
                pageNavigatorModel.setPageCount(pageCount);
                pageNo = pageNo || 1;
                pageNavigatorModel.gotoPage(pageNo)
            }
        },
        onFailure: function () {}
    });
    var msglis = new Array();
    msglis.push("<table cellpadding='0' cellspacing='0' border='1'>");
    msglis.push("<thead><tr><td></td><td>" + g_js_strings.commonstr.date + "</td><td>" + g_js_strings.commonstr.from + "</td><td>" + g_js_strings.commonstr.subject + "</td></tr></thead>");
    msglis.push("<tbody>");
    msglis.push("</tbody>");
    msglis.push("</table>");
    $("modal_msg_list").innerHTML = msglis.join("")
}
function paginationWrapperForListShow(a) {
    modal_messages_listshow(currentBoxType, a);
    $("modal_msg_list_pagination").show()
}
function modal_messages_view(msgid, boxType, unread) {
    var tpgs = pageNavigatorModel.getPageCount();
    var currpg = pageNavigatorModel.getCurrentPage();
    $("modal_msg_write").hide();
    $("modal_msg_list").hide();
    $("modal_msg_list_actions").hide();
    $("modal_msg_links").hide();
    $("modal_msg_list_pagination").hide();
    if (boxType == "inbox") {
        $("modal_msg_view_actions").show()
    } else {
        $("modal_msg_view_actions").hide()
    }
    $("modal_msg_view").setAttribute("name", msgid);
    load_start();
    var params = Object.clone(g_ajaxparams);
    params.messageId = msgid;
    params.requestType = "GET_MESSAGE_FOR_ID";
    new Ajax.Request(g_ajaxpath + "ajax/getEmail.php" + g_ajaxsuffix, {
        method: "post",
        parameters: params,
        onSuccess: function (message) {
            var rslt = eval("(" + message.responseText + ")");
            if (rslt.ok) {
                load_stop();
                if (unread == 1) {
                    seed.newMailCount = parseInt(seed.newMailCount) - 1;
                    messages_notify_bug()
                }
                var listinfo = $("modal_msg_list_" + msgid).getElementsByTagName("td");
                $("modal_msg_view_to").innerHTML = "Me";
                $("modal_msg_view_from").innerHTML = listinfo[2].getElementsByTagName("div")[0].innerHTML;
                $("modal_msg_view_subj").innerHTML = listinfo[3].getElementsByTagName("a")[0].innerHTML;
                $("modal_msg_view_date").innerHTML = listinfo[1].getElementsByTagName("div")[0].innerHTML;
                $("modal_msg_view_body").innerHTML = rslt.messageBody + "<br/><a  class='button20' onclick='loadPage_pagination(\"modal_msg_list_pagination\",\"" + currpg + '","paginationWrapperForListShow",' + tpgs + ");return false;'><span>" + g_js_strings.commonstr.back + "</span></a>";
                $("modal_msg_view").show()
            }
        },
        onFailure: function () {}
    })
}
function messages_notify_bug() {
    var a = parseInt(seed.newMailCount) + parseInt(seed.newTradeReports) + parseInt(seed.newReportCount);
    if (a > 0) {
        $("chrome_messages_notify").innerHTML = a;
        $("chrome_messages_notify").removeClassName("noCount");
        if ($("modal_msg_tabs")) {
            if (parseInt(seed.newMailCount) > 0) {
                $("modal_msg_tabnum_inbox").innerHTML = seed.newMailCount;
                $("modal_msg_tabnum_inbox").show()
            } else {
                $("modal_msg_tabnum_inbox").hide()
            }
            if (parseInt(seed.newReportCount) + parseInt(seed.newTradeReports) > 0) {
                $("modal_msg_tabnum_report").innerHTML = parseInt(seed.newReportCount) + parseInt(seed.newTradeReports);
                $("modal_msg_tabnum_report").show()
            } else {
                $("modal_msg_tabnum_report").hide()
            }
        }
    } else {
        $("chrome_messages_notify").addClassName("noCount");
        if ($("modal_msg_tabs")) {
            $("modal_msg_tabnum_inbox").hide();
            $("modal_msg_tabnum_report").hide()
        }
    }
    return true
}
var g_reports_update_count = 0;
var g_reports_disaster_update_count = 0;
var g_messages_update_count = 0;

function reports_update_count() {}
function messages_update_count() {
    var params = Object.clone(g_ajaxparams);
    params.requestType = "GET_UNREAD_MESSAGES";
    new Ajax.Request(g_ajaxpath + "ajax/updateChrome.php" + g_ajaxsuffix, {
        method: "post",
        parameters: params,
        onSuccess: function (message) {
            var rslt = eval("(" + message.responseText + ")");
            if (rslt.ok) {
                seed.newMailCount = parseInt(rslt.noOfUnreadMessages);
                messages_notify_bug()
            }
        },
        onFailure: function () {}
    })
}
function confirmDeleteAll(c, a) {
    var b = [];
    b.push("<div style='padding: 50px; font-size: 16px;'>Are you sure you want to delete all messages in this folder?<div style='padding-top:20px'>");
    b.push("<a  onclick='messages_action(\"" + c + '","' + a + "\")' class='button20'><span>" + g_js_strings.commonstr.yes + "</span></a>");
    b.push("<a  onclick='Modal.hideModal();' class='buttonDown20'><span>" + g_js_strings.commonstr.no + "</span></a></div></div>");
    Modal.showModal(740, 400, 10, 10, g_js_strings.modaltitles.deleteall, b.join(""))
}
function messages_action(c, b) {
    var d = {};
    var a = "";
    d.requestType = "ACTION_ON_MESSAGES";
    d.selectedAction = c;
    if (b == "tbl_messages") {
        d.selectedMessageIds = getSelectedMessages("tbl_messages");
        if (d.selectedMessageIds == 0 && c != "deleteAll") {
            return false
        }
    } else {
        if (b == "modal_msg_view") {
            d.selectedMessageIds = $("modal_msg_view").getAttribute("name")
        }
    }
    if ($("modal_msg_tabs_inbox").hasClassName("selected")) {
        a = "inbox"
    } else {
        if ($("modal_msg_tabs_outbox").hasClassName("selected")) {
            a = "outbox"
        }
    }
    d.boxType = a;
    AjaxCall.gPostRequest("ajax/getEmail.php", d, function (e) {
        Messages.handleGetEmail(e, d, c, a)
    })
}
function getSelectedMessages(b) {
    var e = document.getElementById(b).getElementsByTagName("INPUT");
    var c = "";
    for (var a = 0; a < e.length; a++) {
        if (e[a].type.toUpperCase() == "CHECKBOX" && e[a].checked) {
            var d = e[a].id;
            c += d.substring(d.lastIndexOf("_") + 1) + ","
        }
    }
    if (c.length > 0) {
        c = c.substring(0, c.length - 1)
    }
    return c
}
function modal_messages_viewreports_showFeedHover(c, b, a) {
    MarchReport.showFeedHover(c, b, a)
}
function getMessageWindow(b, c, d, a) {
    c = unescape(c);
    if (d == null) {
        d = "user"
    }
    var e = new Array();
    if (!a || a == "") {
        a = "tmp_MessageModule"
    }
    e.push("<div id='" + a + "'>");
    e.push("<div id='gb_message_window'><div class='msgttl'>" + g_js_strings.getMessageWindow.sendmessage + '</div><input type="hidden" value=\'' + b + "' id='gb_message_toId' />");
    e.push("<table cellpadding='0' cellspacing='0'><tr><td>" + g_js_strings.commonstr.totx + "</td>");
    e.push("<td class='tocol'>" + c + "</td></tr>");
    e.push("<tr><td class='tocol'>" + g_js_strings.commonstr.subject + "</td>");
    e.push("<td><input type='text' id='gb_message_subject' /></td></tr>");
    e.push("<tr><td class='tocol'>" + g_js_strings.commonstr.message + "</td><td>");
    e.push('<textarea name="gb_message_content" id="gb_message_content"></textarea>');
    e.push("</td></tr>");
    e.push("<tr><td colspan='2' class='btns'><a  class='button20' onclick='sendMessageModule(\"" + a + '","' + d + "\");return false;'><span>" + g_js_strings.commonstr.send + "</span></a>");
    e.push("<a  class='buttonDown20' onclick='Modal.hideModal();return false;'><span>" + g_js_strings.commonstr.cancel + "</span></a></td>");
    e.push("</tr></table></div></div>");
    Modal.showModal(740, 400, 10, 250, g_js_strings.modaltitles.sendmessage, e.join(""))
}
function sendMessageModule(divId, type) {
    if (type == null) {
        type = user
    }
    var params = Object.clone(g_ajaxparams);
    params.toIds = document.getElementById("gb_message_toId").value;
    params.subject = document.getElementById("gb_message_subject").value;
    params.message = document.getElementById("gb_message_content").value;
    params.type = type;
    new Ajax.Request(g_ajaxpath + "ajax/sendMessage.php" + g_ajaxsuffix, {
        method: "post",
        parameters: params,
        onSuccess: function (message) {
            var rslt = eval("(" + message.responseText + ")");
            if (rslt.ok && document.getElementById(divId)) {
                document.getElementById(divId).innerHTML = "<div class='msgcon'><div class='msg'>" + g_js_strings.sendMessageModule.msgsent + "</div></div>"
            } else {
                document.getElementById(divId).innerHTML = "<div class='msgcon'><div class='msg'>" + g_js_strings.sendMessageModule.retrydesc + "</div></div>"
            }
        },
        onFailure: function () {}
    })
};
var cm = function (parent) {
        var my = parent.mww = parent.mww || {};

        function mmb_modal_confirm(pid) {
            var mmbhtml = new Array();
            mmbhtml.push("<div class='modal_mmb'>");
            mmbhtml.push("<div class='chosenitemwrap clearfix'>");
            mmbhtml.push("<div class='merlinleft'>");
            mmbhtml.push("</div>");
            mmbhtml.push("<div class='inforight clearfix'>");
            mmbhtml.push("<div class='titlebar'>");
            mmbhtml.push(g_js_strings.modal_mmb.playmmb);
            mmbhtml.push("</div>");
            mmbhtml.push("<div class='clearfix'>");
            mmbhtml.push("<div class='chosenitem'>");
            mmbhtml.push("<div class='cardtitle'>" + g_js_strings.mmb_modal_confirm.youwon + "</div>");
            mmbhtml.push("<div class='card'><img src='" + stimgUrl + "img/items/70/" + pid + ".jpg'/></div>");
            mmbhtml.push("<div class='placard'>" + itemlist["i" + pid].name + "</div>");
            mmbhtml.push("</div>");
            mmbhtml.push("<div class='chosenitemdesc'>");
            mmbhtml.push("<div class='desctitle'>" + itemlist["i" + pid].name + "</div>");
            mmbhtml.push("<div class='desc'>" + itemlist["i" + pid].description + "</div>");
            mmbhtml.push("<div class='applytext'>" + g_js_strings.mmb_modal_confirm.addedto + " <a  onclick='Modal.hideModalAll();cm.InventoryView.openInventory();return false;'>" + g_js_strings.commonstr.inventory + "</a></div>");
            mmbhtml.push("</div>");
            mmbhtml.push("</div>");
            mmbhtml.push("<div class='shareupsell'" + (cm.feedTracking.get("mmb_modal_confirm") ? "" : " style='visibility:hidden;'") + ">" + g_js_strings.mmb_modal_confirm.sharemmtoken + "</div>");
            mmbhtml.push("<div class='okaybtn clearfix'>");
            if (cm.feedTracking.get("mmb_modal_confirm") !== false) {
                mmbhtml.push("<a class='button25' onclick='cm.mww.mmb_share(\"" + pid + "\");return false;'><span>" + (g_js_strings.mmb_modal_confirm.sharefreetoken) + "</span></a>")
            } else {
                mmbhtml.push("<a class='buttonDown25' onclick='Modal.hideModal(); return false;'><span>" + g_js_strings.commonstr.ok + "</span></a>")
            }
            cm.feedTracking.setFalse("mmb_modal_confirm");
            mmbhtml.push("</div>");
            mmbhtml.push("</div>");
            mmbhtml.push("</div>");
            mmbhtml.push("</div>");
            var dialogProperties = {
                winWidth: 740,
                winHeight: 400,
                winLeft: 10,
                winTop: 10,
                winTitle: g_js_strings.modaltitles.mmb,
                winContent: mmbhtml.join(""),
                shutdown: my.modal_mmb
            };
            Modal.show(dialogProperties)
        }
        function mmb_add_confirm(pid) {
            Modal.hideModal();
            my.modal_mmb()
        }
        function modal_mmb_openbox(boxnum) {
            var mmbhtml = new Array();
            mmbhtml.push("<div>" + g_js_strings.modal_mmb_openbox.youvewon + "</div>");
            mmbhtml.push("<div class='item itemwin'><img src='http://profile.ak.fbcdn.net/profile5/224/58/q535310007_4445.jpg'/><div>" + g_js_strings.modal_mmb_openbox.redtapestry + "</div></div>");
            Modal.showModal(600, 400, 10, 10, g_js_strings.modaltitles.mmb, mmbhtml.join(""))
        }
        function testPanel() {
            var test = false;
            return (test ? "<input type='button' value='close' onclick='cm.flash.close();' /><input type='button' value='getgems' onclick='cm.flash.modal_getgems();' /><input type='button' value='Barkskin' onclick=\"cm.flash.incrementItem('271');\" /><input type='button' value='Wood 20k' onclick=\"cm.flash.incrementItem('1024');\" /><input type='button' value='postToProfile 85' onclick=\"cm.flash.postToProfile('10001', 85);\" /><input type='button' value='postToProfile 202' onclick=\"cm.flash.postToProfile('Item', 202);\" /><input type='button' value='post to profile 203' onclick=\"cm.flash.postToProfile('ItemB', 203);\" /><br>" : "")
        }
        function track(ftflag, is_mmw_on) {
            var origin = {
                0: "User Clicked on bottom left Link from within the game",
                1: "Auto Start from Game",
                2: "From items page",
                undefined: "Unknown Start."
            };
            var sub = {
                0: "From Link",
                1: "Auto Start",
                2: "From Items Page",
                undefined: "Unknown"
            };
            cm.MixPanelTracker.track("MWW " + sub[ftflag], {
                last_fbuid_digit: lastFbuidDigit,
                distinct_id: user_id,
                origin: origin[ftflag],
                mwwOn: is_mmw_on
            })
        }
        my.mmb_share = function (pid, feedNum, callback) {
            if (!feedNum) {
                feedNum = 85
            }
            var reparr = new Array();

            function feed_cb() {
                (feedNum == 202 ? continuation_202 : continuation_203)();
                if (typeof callback == "function") {
                    callback()
                }
            }
            if (feedNum == 85) {
                reparr.push(["REPLACE_ItEmNaMe", itemlist["i" + pid].name]);
                var temptemplate = Object.cloneFeed(template_data_85);
                temptemplate.media[0].src = stimgUrl + "img/items/130/" + pid + ".jpg";
                common_postToProfile("85", temptemplate, Object.cloneFeed(actionlink_data_85), continuation_85, reparr);
                mmb_add_confirm(pid)
            }
            if (feedNum == 202) {
                itemWon = pid;
                reparr.push(["REPLACE_ItEmNaMe", itemWon]);
                var temptemplate = Object.cloneFeed(template_data_202);
                temptemplate.media[0].src = stimgUrl + "img/feeds/merlin_magical_token.jpg";
                common_postToProfile("202", temptemplate, Object.cloneFeed(actionlink_data_202), feed_cb, reparr)
            }
            if (feedNum == 203) {
                itemWon = pid;
                reparr.push(["REPLACE_ItEmNaMe", itemWon]);
                var temptemplate = Object.cloneFeed(template_data_203);
                temptemplate.media[0].src = stimgUrl + "img/feeds/merlin_magical_token.jpg";
                common_postToProfile("203", temptemplate, Object.cloneFeed(actionlink_data_203), feed_cb, reparr)
            }
        };
        my.modal_mmb = function () {
            Modal.hideModalAll();
            var tokenCnt = parseInt(seed.items.i599) || 0;
            var mmbhtml = new Array();
            mmbhtml.push("<div class='modal_mmb'>");
            mmbhtml.push("<div class='topinfo clearfix'>");
            mmbhtml.push("<div class='enddeco'></div>");
            mmbhtml.push("<div class='middlecontent'>");
            mmbhtml.push("<div class='titlebar'>");
            mmbhtml.push(g_js_strings.modal_mmb.playmmb);
            mmbhtml.push("</div>");
            mmbhtml.push("<div class='description'>" + g_js_strings.modal_mmb.gamechance + "</div>");
            mmbhtml.push("<div class='description'>" + g_js_strings.modal_mmb.everyonewins + "</div>");
            if (cm.WorldSettings.hasKeyValuePair("MIGRATION1", "true")) {
                if (seed.platform.type == "kabam") {
                    mmbhtml.push("<div class='kabammsg' style='margin-top: 10px; color: #900;'> " + g_js_strings.modal_mmb.playonkabam + " </div>")
                } else {
                    mmbhtml.push("<div class='kabammsg' style='margin-top: 10px;'><a style=' color: #900;' href='" + seed.platform.url + "' target='_top'> " + g_js_strings.modal_mmb.playonfb + " </a></div>")
                }
            }
            mmbhtml.push("</div>");
            mmbhtml.push("<div class='enddeco'></div>");
            mmbhtml.push("</div>");
            mmbhtml.push("<div class='playgamewrap'>");
            mmbhtml.push("<div class='playgametext'>" + g_js_strings.modal_mmb.usetokens + "</div>");
            mmbhtml.push("<div class='playgametext'>" + g_js_strings.commonstr.cost + ": <span>1<img src='" + stimgUrl + "img/mmb_merlintoken1.png'/> " + g_js_strings.modal_mmb.magicaltokens + "</span></div>");
            mmbhtml.push("<div class='playgametoken'>" + g_js_strings.commonstr.youown + ": " + tokenCnt);
            if (tokenCnt > 0) {
                mmbhtml.push("<a  onclick='Modal.hideModalAll();cm.ShopView.openShop();return false;'>" + g_js_strings.commonstr.buymore + "</a>")
            }
            mmbhtml.push("</div>");
            if (tokenCnt > 0) {
                mmbhtml.push("<div class='playbtn clearfix'><a class='button30' onclick='Modal.hideModal();cm.mww.start(0);return false;'><span>" + g_js_strings.modal_mmb.playnow + "</span></a></div><div class='playbtn'><a class='closelink'  onclick='Modal.hideModal();return false;'>" + g_js_strings.modal_mmb.playlater + "</a></div>")
            } else {
                mmbhtml.push("<div class='playbtn clearfix'><a  class='button30' onclick='Modal.hideModal();cm.ShopView.openShop();return false;'><span>" + g_js_strings.commonstr.buymore + "</span></a></div>")
            }
            mmbhtml.push("</div>");
            mmbhtml.push("</div>");
            Modal.showModal(740, 400, 10, 10, g_js_strings.modaltitles.mmb, mmbhtml.join(""))
        };
        my.modal_mmb_tooltip = function (iid, tgt, evt) {
            showTooltip(itemlist["i" + iid].description, tgt, evt, "modal_mmb")
        };
        my.modal_mmb_play = function () {
            $("mmbPlayBox").innerHTML = "";
            var fronts = $("mmbDisplayCase").getElementsByClassName("item");
            for (var i = 0; i < fronts.length; i++) {
                Element.extend(fronts[i]);
                fronts[i].hide()
            }
            var backs = $("mmbPickCase").getElementsByTagName("a");
            for (var i = 0; i < backs.length; i++) {
                Element.extend(backs[i]);
                backs[i].show()
            }
            $("mmbPickText").show()
        };
        my.incrementItem = function (itemId) {
            if (seed.items["i" + itemId]) {
                seed.items["i" + itemId] = parseInt(seed.items["i" + itemId]) + 1;
                ksoItems[itemId].add()
            } else {
                seed.items["i" + itemId] = 1;
                ksoItems[itemId].add()
            }
            cm.log.l("Item Added: i" + itemId + "=" + seed.items["i" + itemId])
        };
        my.chooseMmbCard = function () {
            var params = Object.clone(g_ajaxparams);
            new Ajax.Request(g_ajaxpath + "ajax/magicalboxPick.php" + g_ajaxsuffix, {
                method: "post",
                parameters: params,
                onSuccess: function (transport) {
                    var rslt = eval("(" + transport.responseText + ")");
                    if (rslt.ok) {
                        Modal.hideModal();
                        my.incrementItem(rslt.prize);
                        var tokenCount = parseInt(seed.items.i599);
                        if (tokenCount > 0) {
                            seed.items.i599 = (tokenCount - 1).toString();
                            ksoItems[599].subtract()
                        }
                        mmb_modal_confirm(rslt.prize)
                    } else {
                        Modal.showAlert(printLocalError((rslt.error_code || null), (rslt.msg || null), (rslt.feedback || null)))
                    }
                },
                onFailure: function () {}
            })
        };
        my.start = function (ftflag) {
            Modal.hideModal();
            track(ftflag, false);
            var params = Object.clone(g_ajaxparams);
            params.ftflag = ftflag;
            new Ajax.Request(g_ajaxpath + "ajax/magicalboxPreview.php" + g_ajaxsuffix, {
                method: "post",
                parameters: params,
                onSuccess: function (message) {
                    var rslt = eval("(" + message.responseText + ")");
                    if (rslt.ok) {
                        var lockeditems;
                        var showitems;
                        if (rslt.unlocked || ftflag == 0) {
                            showitems = rslt.data
                        } else {
                            showitems = rslt.data.slice(0, 10);
                            lockeditems = rslt.data.slice(10)
                        }
                        var mmbhtml = new Array();
                        mmbhtml.push("<div id='modal_mmb' class='modal_mmb' style=''>");
                        mmbhtml.push("<div class='topinfo clearfix'>");
                        mmbhtml.push("<div class='enddeco'></div>");
                        mmbhtml.push("<div class='middlecontent'>");
                        mmbhtml.push("<div class='titlebar'>");
                        mmbhtml.push(g_js_strings.modal_mmb.playmmb);
                        mmbhtml.push("</div>");
                        mmbhtml.push("<div class='description'>" + g_js_strings.modal_mmb.gamechance + "</div>");
                        mmbhtml.push("<div class='description'>" + g_js_strings.modal_mmb_game.playfreedesc + "</div>");
                        if (cm.WorldSettings.hasKeyValuePair("MIGRATION1", "true")) {
                            if (seed.platform.type == "kabam") {
                                mmbhtml.push("<div class='kabammsg' style='margin-top: 10px; color: #900;'> Playing on Kabam.com gives two tokens per day! </div>")
                            } else {
                                mmbhtml.push("<div class='kabammsg' style='margin-top: 10px;'><a style=' color: #900;' href='" + seed.platform.url + "' target='_top'> Play on Kabam.com for one additional FREE token! </a></div>")
                            }
                        }
                        mmbhtml.push("<div class='playbtn clearfix' id='mmbPlayBox'><a onclick='cm.mww.modal_mmb_play();return false;' class='button30' style='width:200px;'><span>" + g_js_strings.modal_mmb.playnow + "</span></a></div>");
                        mmbhtml.push("<div id='mmbPickText' class='mmbpicktext' style='display:none;'>" + g_js_strings.modal_mmb_game.pickbox + "</div>");
                        mmbhtml.push("</div>");
                        mmbhtml.push("<div class='enddeco'></div>");
                        mmbhtml.push("</div>");
                        mmbhtml.push("<div class='displaycase clearfix'>");
                        mmbhtml.push("<div id='mmbDisplayCase'>");
                        for (var i = 0; i < showitems.length; i++) {
                            mmbhtml.push("<div class='item' onmouseout='removeTooltip();return false;' onmouseover='cm.mww.modal_mmb_tooltip(" + showitems[i] + ",this,event)'>");
                            mmbhtml.push("<div class='card'><img src='" + stimgUrl + "img/items/70/" + showitems[i] + ".jpg'/></div>");
                            mmbhtml.push("<div class='placard'>" + itemlist["i" + showitems[i]].name + "</div>");
                            mmbhtml.push("</div>")
                        }
                        if (lockeditems) {
                            for (var i = 0; i < lockeditems.length; i++) {
                                mmbhtml.push("<div class='item' onmouseout='removeTooltip();return false;' onmouseover='cm.mww.modal_mmb_tooltip(" + lockeditems[i] + ",this,event)'>");
                                mmbhtml.push("<div class='card'><img src='" + stimgUrl + "img/items/70/" + lockeditems[i] + ".jpg'/><div class='lockedicon'>&nbsp;</div></div>");
                                mmbhtml.push("<div class='placard'>" + itemlist["i" + lockeditems[i]].name + "</div>");
                                mmbhtml.push("</div>")
                            }
                        }
                        mmbhtml.push("</div>");
                        mmbhtml.push("<div id='mmbPickCase'>");
                        for (var i = 0; i < 20; i++) {
                            mmbhtml.push("<a  class='pickitem' style='display:none;' onclick='cm.mww.chooseMmbCard();return false;'><span>?</span></a>")
                        }
                        mmbhtml.push("</div>");
                        mmbhtml.push("</div>");
                        mmbhtml.push("</div>");
                        Modal.showModal(740, 400, 10, 10, g_js_strings.modaltitles.mmb, mmbhtml.join(""))
                    }
                },
                onFailure: function () {}
            })
        };
        my.startMMW = function (ftflag) {
            Modal.hideModal();
            track(ftflag, true);
            cm.flash.setFTFlag(ftflag);
            var ht = testPanel() + "<div id='modal_mmb' class='modal_mmb modal_mww'></div>";
            Modal.showModal(740, 400, 10, 10, g_js_strings.modaltitles.mmb, ht, function () {
                cm.flash_init.exe()
            }, undefined, false)
        };
        return parent
    }(cm);
if (!window.Modal) {
    var Modal = new Object()
}
Modal.Properties = {
    curtain: null,
    modalid: 0,
    onCloseCallback: null,
    m_onCloseCallbackMap: {},
    shutdown: {},
    stack: []
};
Modal.Methods = {
    showAlert: function (d, a, e, f) {
        if (d.tracker) {
            this.showTrackerAlert(d, e)
        } else {
            f = f || {};
            var c = new Array();
            c.push("<div class='kofcalert'>");
            c.push(d);
            c.push("</div>");
            if (a) {
                c.push("<div class='" + (f.buttonContainerClass ? f.buttonContainerClass : "kofccustombtn clearfix") + "'>");
                c.push(a);
                c.push("</div>")
            } else {
                c.push("<div class='kofcalertbtn clearfix'>");
                c.push("<a class='button20' onclick='Modal.hideModal();return false;'><span>");
                c.push(g_js_strings.commonstr.ok);
                c.push("</span></a>");
                c.push("</div>")
            }
            var b = 150;
            if (e) {
                b = e
            }
            this.showModal(400, 400, 150, b, f.title ? f.title : g_js_strings.modaltitles.notice, c.join(""), null, null, null, f)
        }
    },
    showTrackerAlert: function (a, d) {
        var e = d || 150,
            b = {
                merlin: [
                    ["default", "0", "1", "3"], "error"],
                traffic: [
                    ["8"], "excesstraffic"],
                knight: [
                    ["216"], "error"],
                worker: [
                    ["103", "2", "102"], "error"]
            },
            i = a.type || "",
            g = g_js_strings.modaltitles.error,
            f = a.text || "";
        if (a.errorCode && a.msg) {
            for (var h in b) {
                if (b[h][0].indexOf(a.errorCode.toString()) != -1) {
                    i = h;
                    g = g_js_strings.modaltitles[b[h][1]];
                    break
                }
            }
            if (f == "") {
                f = g_js_strings.errorcode["err_" + a.errorCode]
            }
        }
        var c = [];
        c.push("<div class='kofctrackeralert " + i + "'>");
        c.push("<div class='text'>");
        c.push(f);
        c.push("</div>");
        c.push("</div>");
        c.push("<div class='btn' onclick='Modal.hideModal();return false;'>");
        c.push(g_js_strings.commonstr.ok);
        c.push("</div>");
        this.showModal(436, 279, 150, e, g, c.join(""))
    },
    showModalUEP: function (c, b, d, e) {
        var a = new Array();
        a.push("<div class='uepwrap'>");
        a.push("<div class='clearfix'>");
        a.push("<div class='leftimg'>");
        a.push(d);
        a.push("</div>");
        a.push("<div class='righttxt'>");
        a.push(c);
        a.push("</div>");
        a.push("</div>");
        a.push("<div class='btnrow clearfix'>");
        a.push(b);
        a.push("</div>");
        a.push("</div>");
        if (e && e == 1) {
            this.showModal(544, 368, 100, 300, "", a.join(""))
        } else {
            this.showModal(544, 368, 100, 125, "", a.join(""))
        }
    },
    showModalUEP2: function (c, b, d, e) {
        var a = new Array();
        a.push("<div class='uepwrap'>");
        a.push("<div class='clearfix'>");
        a.push("<div class='leftimg'>");
        a.push(d);
        a.push("</div>");
        a.push("<div class='righttxt'>");
        a.push(c);
        a.push("</div>");
        a.push("</div>");
        a.push("<div class='btnrow2'>");
        a.push(b);
        a.push("</div>");
        a.push("</div>");
        if (e && e == 1) {
            this.showModal(544, 368, 100, 300, "", a.join(""))
        } else {
            this.showModal(544, 368, 100, 125, "", a.join(""))
        }
    },
    show: function (c) {
        var a = {
            winWidth: 740,
            winHeight: 400,
            winLeft: 10,
            winTop: 10,
            winTitle: "Window Title",
            winContent: "Window Content",
            callback: function () {},
            callbackparams: [],
            topBar: null,
            shutdown: function () {}
        };
        var b = c;
        this.shutdown[(this.modalid + 1).toString()] = b.shutdown;
        this.showModal(b.winWidth, b.winHeight, b.winLeft, b.winTop, b.winTitle, b.winContent, b.callback, b.callbackparams, b.topBar)
    },
    showModal: function (b, d, g, e, j, h, i, f, c, a) {
        if (cm.TutorialManager.inTutorialMode()) {
            tutorialClear()
        }
        this.modalid++;
        this.showCurtain();
        this.showWindow(b, d, g, e, j, h, i, f, c, a)
    },
    hideModal: function () {
        cm.util.clearDouble("modal_getgems");
        this.hideCurtain();
        this.hideWindow();
        if (this.modalid > 0) {
            this.modalid--
        }
        var a = this.shutdown[(this.modalid + 1).toString()];
        delete this.shutdown[(this.modalid + 1).toString()];
        if (a && typeof a == "function") {
            a()
        }
    },
    hideModalAll: function () {
        while (this.modalid > 0) {
            this.hideModal()
        }
        this.modalid = 0
    },
    showWindow: function (e, g, k, h, p, l, n, i, f, c) {
        c = jQuery.extend({
            additionalClass: ""
        }, c);
        if (!$("modalBox" + this.modalid)) {
            if (this.onCloseCallback) {
                this.m_onCloseCallbackMap[this.modalid] = this.onCloseCallback;
                this.onCloseCallback = null
            }
            var a = document.createElement("div");
            a.id = "modalBox" + this.modalid;
            modalboxHtml = new Array();
            if (parseInt(e) == 740) {
                a.className = "modalBox " + (f === false ? "" : ("modalBox740 " + c.additionalClass));
                modalboxHtml.push('<div id="modalInner' + this.modalid + '" class="modalInner modalInner' + (f === false ? "" : "740") + '">');
                modalboxHtml.push('<div id="modalTitleBar' + this.modalid + '" class="modalTitleBar modalTitleBar740" style="' + (f === false ? "display: none;" : "") + '">')
            } else {
                if (parseInt(e) == 500) {
                    a.className = "modalBox modalBox500";
                    modalboxHtml.push('<div id="modalInner' + this.modalid + '" class="modalInner modalInner500">');
                    modalboxHtml.push('<div id="modalTitleBar' + this.modalid + '" class="modalTitleBar modalTitleBar500">')
                } else {
                    if (parseInt(e) == 400) {
                        a.className = "modalBox modalBox400 " + c.additionalClass;
                        modalboxHtml.push('<div id="modalInner' + this.modalid + '" class="modalInner modalInner400">');
                        modalboxHtml.push('<div id="modalTitleBar' + this.modalid + '" class="modalTitleBar modalTitleBar400">')
                    } else {
                        if (parseInt(e) == 436) {
                            a.className = "modalBox modalBox436";
                            modalboxHtml.push('<div id="modalInner' + this.modalid + '" class="modalInner modalInner436">');
                            modalboxHtml.push('<div id="modalTitleBar' + this.modalid + '" class="modalTitleBar modalTitleBar436">')
                        } else {
                            if (parseInt(e) == 544) {
                                a.className = "modalBox modalBoxUEP";
                                modalboxHtml.push('<div id="modalInner' + this.modalid + '" class="modalInner modalInnerUEP">');
                                modalboxHtml.push('<div id="modalTitleBar' + this.modalid + '" class="modalTitleBar modalTitleBarUEP">')
                            } else {
                                if (parseInt(e) == 250) {
                                    a.className = "modalBox modalBoxFBFan";
                                    modalboxHtml.push('<div id="modalInner' + this.modalid + '" class="modalInner modalInnerFBFan">');
                                    modalboxHtml.push('<div id="modalTitleBar' + this.modalid + '" class="modalTitleBar modalTitleBarFBFan">')
                                } else {
                                    if (parseInt(e) == 580) {
                                        a.className = "modalBox modalBoxHelpDesk";
                                        modalboxHtml.push('<div id="modalInner' + this.modalid + '" class="modalInner modalInnerHelpDesk">');
                                        modalboxHtml.push('<div id="modalTitleBar' + this.modalid + '" class="modalTitleBar modalTitleBarHelpDesk">')
                                    } else {
                                        a.className = "modalBox";
                                        modalboxHtml.push('<div id="modalInner' + this.modalid + '" class="modalInner">');
                                        modalboxHtml.push('<div id="modalTitleBar' + this.modalid + '" class="modalTitleBar">')
                                    }
                                }
                            }
                        }
                    }
                }
            }
            modalboxHtml.push('<div id="modalTitle' + this.modalid + '" class="modalTitle"></div>');
            if (!c.noControl) {
                modalboxHtml.push('<div id="modalControls' + this.modalid + '" class="modalControls">');
                if (parseInt(e) == 250) {
                    modalboxHtml.push('<a onclick="Modal.hideModal();" id="modalControlsClose' + this.modalid + '">x</a>')
                } else {
                    modalboxHtml.push('<a onclick="Modal.hideModal();" id="modalControlsClose' + this.modalid + '"><span>&nbsp;</span></a>')
                }
                modalboxHtml.push("</div>")
            }
            modalboxHtml.push("</div>");
            if (parseInt(e) == 740) {
                modalboxHtml.push('<div id="modalContent' + this.modalid + '" class="modalContent modalContent740"></div>')
            } else {
                if (parseInt(e) == 500) {
                    modalboxHtml.push('<div id="modalContent' + this.modalid + '" class="modalContent modalContent500"></div>')
                } else {
                    if (parseInt(e) == 400) {
                        modalboxHtml.push('<div id="modalContent' + this.modalid + '" class="modalContent modalContent400"></div>')
                    } else {
                        if (parseInt(e) == 519) {
                            modalboxHtml.push('<div id="modalContent' + this.modalid + '" class="modalContent modalContentUEP"></div>')
                        } else {
                            if (parseInt(e) == 250) {
                                modalboxHtml.push('<div id="modalContent' + this.modalid + '" class="modalContent modalContentFBFan"></div>')
                            } else {
                                modalboxHtml.push('<div id="modalContent' + this.modalid + '" class="modalContent"></div>')
                            }
                        }
                    }
                }
            }
            modalboxHtml.push("</div>");
            a.innerHTML = modalboxHtml.join("");
            document.getElementsByTagName("body")[0].appendChild(a)
        }
        var a = $("modalBox" + this.modalid);
        this.stack.push(a);
        a.show();
        switch (e) {
        case 740:
            var b = 742;
            var m = 10;
            break;
        case 500:
            var b = 522;
            var m = 119;
            break;
        case 400:
            var b = 416;
            var m = 172;
            break;
        default:
            var b = e;
            var m = k;
            break
        }
        switch (h) {
        case "high":
            var d = 48;
        case "low":
            var d = 500;
        default:
            var d = h
        }
        a.style.width = b + "px";
        $("modalTitle" + this.modalid).innerHTML = p;
        $("modalContent" + this.modalid).innerHTML = l;
        a.style.top = d + "px";
        a.style.left = m + "px";
        var j = (this.modalid + 1) * 100 + 100010;
        Element.setStyle($("modalBox" + this.modalid), {
            zIndex: j
        });
        if (n) {
            if (i) {
                n(i)
            } else {
                n()
            }
        }
    },
    hideWindow: function () {
        if ($("modalTitle" + this.modalid)) {
            $("modalTitle" + this.modalid).innerHTML = "";
            $("modalContent" + this.modalid).innerHTML = "";
            Element.remove($("modalBox" + this.modalid));
            if (this.m_onCloseCallbackMap[this.modalid]) {
                this.m_onCloseCallbackMap[this.modalid]();
                delete this.m_onCloseCallbackMap[this.modalid]
            }
        }
    },
    showCurtain: function (c) {
        if (!$("modalCurtain")) {
            var a = document.getElementsByTagName("body")[0];
            var b = document.createElement("div");
            b.className = "modalCurtain";
            b.id = "modalCurtain" + this.modalid;
            a.appendChild(b);
            var d = (this.modalid + 1) * 100 + 100000;
            if (c) {
                d = c;
                this.modalid++;
                b.id = "modalCurtain" + this.modalid
            }
            Element.setStyle($("modalCurtain" + this.modalid), {
                zIndex: d
            })
        } else {
            $("modalCurtain").show()
        }
    },
    hideCurtain: function () {
        if ($("modalCurtain" + this.modalid)) {
            Element.remove($("modalCurtain" + this.modalid))
        }
    },
    okay: function (a) {
        a.text = a.text ? a.text : "Are you sure you want to do that?";
        a.width = a.width ? a.width : 740;
        a.top = a.top ? a.top : 10;
        a.left = a.left ? a.left : 10;
        a.title = a.title ? a.title : g_js_strings.modal_questions.question;
        a.formattedText = a.formattedText ? a.formattedText : ["<div style='padding: 50px; font-size: 16px;'>", a.text, "<br>", "<div style='margin-top:10px;'>", "<a class='okay inlineButton blue20'><span>", g_js_strings.commonstr.ok, "</span></a> &nbsp; ", "<a class='cancel inlineButton blue20'><span>", g_js_strings.commonstr.cancel, "</span></a>", "</div></div>"].join("");
        Modal.showModal(a.width, 400, a.left, a.top, a.title, a.formattedText);
        $$("#modalBox" + this.modalid + " .okay")[0].onclick = function () {
            if (a.okay) {
                a.okay(a.data)
            }
            Modal.hideModal()
        };
        $$("#modalBox" + this.modalid + " .cancel")[0].onclick = function () {
            if (a.cancel) {
                a.cancel()
            }
            Modal.hideModal()
        }
    },
    confirm: function (a) {
        a.width = 400;
        a.top = 130;
        a.left = 130;
        a.formattedText = ["<div style='padding-top: 40px; font-size: 12px;'>", "<div style='width: 330px; margin: 0 auto 40px;'>", a.text, "</div>", "<div style='margin-top:10px; text-align: center;'>", "<a class='okay inlineButton blue20'><span>", g_js_strings.commonstr.ok, "</span></a> &nbsp; ", "<a class='cancel inlineButton blue20'><span>", g_js_strings.commonstr.cancel, "</span></a>", "</div>", "</div>"].join("");
        Modal.okay(a)
    },
    multiButton: function (h) {
        var g = new Array();
        var c = new Array();
        var d = null;
        var b = false;
        g.push("<div class='mistwarn'>" + h.body + "</div>");
        for (var a in h.buttons) {
            if (h.buttons.hasOwnProperty(a)) {
                var f = h.buttons[a];
                if (!b && f.description) {
                    b = true
                }
                d = f.cls || "button20";
                c.push("<a class='" + d + " choice" + a + "'><span>" + f.txt + "</span></a>")
            }
        }
        Modal.showAlert(g.join(""), c.join(""), undefined, h);
        for (var a in h.buttons) {
            if (h.buttons.hasOwnProperty(a)) {
                var e = jQuery("#modalBox" + this.modalid + " .choice" + a);
                if (b) {
                    e.wrap('<div class="descriptionButtonWrapper" />')
                }
                e.bind("click", h.buttons[a].exe);
                if (h.buttons[a].description) {
                    e.parent().width(e.outerWidth());
                    e.parent().append('<div class="description">' + h.buttons[a].description + "</div>")
                }
            }
        }
    }
};
Object.extend(Modal, Modal.Methods);
Object.extend(Modal, Modal.Properties);
cm.ModalManager = function (d) {
    var a = [],
        c = 0;
    var e = {
        style: "",
        "class": "",
        left: 200,
        top: 150,
        width: 300,
        height: 200,
        show: function () {}
    };

    function f() {
        if (c > 0) {
            c--;
            var h = c;
            if (typeof a[c].close == "function") {
                a[c].close()
            }
            d(".cmModal" + c + ", .curtainNum" + c).remove()
        }
    }
    function g(h, i) {
        i = i ? " style='background: url(" + stimgUrl + "img/" + i + ");' " : "";
        return "<div class='" + h + "' " + i + "/>"
    }
    function b(k) {
        if (k.closeNow) {
            f()
        }
        var j = d.extend({}, e, k);
        var h = k["class"] + " cmModal" + c;
        var i = k.style + "position: absolute; left: " + j.left + "px; top: " + j.top + "px; width: " + j.width + "px; height: " + j.height + "px;";
        a[c] = j;
        d("body").append((j.curtain ? g("curtainMM curtainNum" + c) : "") + "<div class='cmModalContainer " + h + "' style='" + i + "'>" + g("close", "close_icon.png") + j.body + "</div>");
        j.show(".cmModal" + c)
    }
    return {
        add: function (h) {
            b(h);
            var i = h.lower ? 100000 : 100400;
            d(".cmModal" + c).css("z-index", i + (c * 5));
            d(".curtainNum" + c).css("z-index", (i - 1) + (c * 5));
            d(".close").unbind("click").bind("click", f);
            c++
        },
        close: function () {
            f()
        },
        alert: function (i) {
            if (typeof i == "string") {
                i = {
                    text: i
                }
            }
            var h = "<div class='main'>" + i.text + "</div><div class='bottom_box'>" + (i.button_text || g_js_strings.commonstr.ok) + "</div>";
            cm.ModalManager.add({
                body: h,
                "class": "guardian_generic",
                curtain: true,
                width: 360,
                height: 250,
                left: 225,
                top: 155
            });
            d(".guardian_generic .bottom_box").unbind("click").bind("click", function () {
                f();
                if (typeof i.exe == "function") {
                    i.exe()
                }
            })
        }
    }
}(jQuery);
var cm = cm || {};
cm.NotificationDialogManager = new function () {
    var a = null;
    var b = function () {
            a = null
        };
    this.popup = function (c) {
        if (a && a.isActive() && c.getPriority() >= a.getPriority()) {
            a.removeEventListener(cm.DialogEvent.CLOSE, b);
            a.close();
            a = null
        }
        if (!a || !a.isActive()) {
            a = c;
            a.setParentElement(document.getElementById("mod_maparea"));
            a.addEventListener(cm.DialogEvent.CLOSE, b);
            a.show();
            jQuery(a.getHtmlElement()).animate({
                top: -25
            }, "slow")
        }
    }
}();
var cm = cm || {};
cm.PageNavigatorModel = function (b, d) {
    var a = b;
    var c = d;
    var e = b > 0 ? 1 : 0;
    this.onPageChange = null;
    this.onPageCountChange = null;
    this.gotoPage = function (f) {
        e = f;
        if (this.onPageChange != null) {
            this.onPageChange()
        }
    };
    this.gotoPrevPage = function () {
        if (e > 1) {
            this.gotoPage(e - 1)
        }
    };
    this.gotoNextPage = function () {
        if (e < a) {
            this.gotoPage(e + 1)
        }
    };
    this.gotoLastPage = function () {
        this.gotoPage(a)
    };
    this.getSlidingWindow = function () {
        var f = {
            start: 1,
            end: c
        };
        if (a > c) {
            start = Math.max(e - Math.floor((c - 1) / 2), 1);
            end = Math.min(start + c - 1, a);
            if (end - start + 1 < c) {
                start = end - c + 1
            }
            f.start = start;
            f.end = end
        }
        return f
    };
    this.setPageCount = function (f) {
        if (f <= 0) {
            e = 0
        } else {
            e = e > 0 ? e : 1
        }
        e = Math.min(e, a);
        a = f;
        if (this.onPageCountChange != null) {
            this.onPageCountChange()
        }
    };
    this.getPageCount = function () {
        return a
    };
    this.getCurrentPage = function () {
        return e
    };
    this.getMaxPagesShown = function () {
        return c
    };
    this.hasPrev = function () {
        return a > c && e > 1
    };
    this.hasNext = function () {
        return a > c && e < a
    }
};
cm.PageNavigatorItemView = function (j, e) {
    var i = this;
    var f = j;
    var d = true;
    var c = false;
    var b = true;
    var g = e;
    var a = new Element("a").update(j);
    a.href = "javascript:void(0)";
    if (g && g.itemCssClass) {
        a.addClassName(g.itemCssClass)
    }
    this.onclick = null;
    var h = function (k) {
            if (i.onClick != null && d) {
                i.onClick(i)
            }
            Event.stop(k)
        };
    Event.observe(a, "mouseup", h);
    this.setText = function (k) {
        f = k;
        a.update(k)
    };
    this.setEnabled = function (k) {
        enabled = k;
        if (!k) {
            a.addClassName("disabled")
        } else {
            a.removeClassName("disabled")
        }
    };
    this.isEnabled = function () {
        return d
    };
    this.setSelected = function (k) {
        c = k;
        if (k) {
            a.addClassName("selected")
        } else {
            a.removeClassName("selected")
        }
    };
    this.isSelected = function () {
        return c
    };
    this.setVisible = function (k) {
        b = k;
        if (!k) {
            a.addClassName("hidden")
        } else {
            a.removeClassName("hidden")
        }
    };
    this.isVisible = function () {
        return b
    };
    this.getHtmlElement = function () {
        return a
    };
    this.getText = function () {
        return f
    }
};
cm.PageNavigatorView = function (c, f) {
    var k = this;
    var g = c;
    var j = [];
    var h = f;
    var b = new Element("div");
    if (h && h.cssClass) {
        b.addClassName(f.cssClass)
    }
    if (g.getPageCount <= 1) {
        b.addClassName("disabled")
    }
    this.first = new cm.PageNavigatorItemView("|&lt;", h);
    this.first.setEnabled(g.hasPrev());
    b.appendChild(this.first.getHtmlElement());
    this.prev = new cm.PageNavigatorItemView("&lt;", h);
    this.prev.setEnabled(g.hasPrev());
    b.appendChild(this.prev.getHtmlElement());
    var e;
    var d = g.getMaxPagesShown();
    for (e = 1; e <= d; e++) {
        var a = new cm.PageNavigatorItemView(e.toString(), h);
        a.setSelected(e == g.getCurrentPage());
        j.push(a);
        b.appendChild(a.getHtmlElement())
    }
    this.next = new cm.PageNavigatorItemView(">", h);
    this.next.setEnabled(g.hasNext());
    b.appendChild(this.next.getHtmlElement());
    this.last = new cm.PageNavigatorItemView(">|", h);
    this.last.setEnabled(g.hasNext());
    b.appendChild(this.last.getHtmlElement());
    b.appendChild(new Element("br", {
        clear: "all"
    }));
    _onPageCountChange = function () {
        k.update()
    };
    _onPageChange = function () {
        k.update()
    };
    g.onPageCountChange = _onPageCountChange;
    g.onPageChange = _onPageChange;
    this.update = function () {
        if (g.getPageCount() > 1) {
            b.removeClassName("disabled")
        } else {
            b.addClassName("disabled")
        }
        this.first.setEnabled(g.hasPrev());
        this.prev.setEnabled(g.hasPrev());
        this.next.setEnabled(g.hasNext());
        this.last.setEnabled(g.hasNext());
        var n = g.getSlidingWindow();
        if (n) {
            var p = n.start;
            var l = n.end;
            var m;
            for (m = p; m <= l; m++) {
                var o = j[m - p];
                o.setSelected(m == g.getCurrentPage());
                o.setVisible(m <= g.getPageCount());
                o.setEnabled(m <= g.getPageCount());
                o.setText(m.toString())
            }
        }
    };
    this.getHtmlElement = function () {
        return b
    };
    this.getItem = function (i) {
        var l = null;
        if (i >= 0 && i < j.length) {
            l = j[i]
        }
        return l
    };
    this.getItemCount = function () {
        return j.length
    }
};
cm.PageNavigatorController = function (j, m) {
    var n = this;
    var l = j;
    var h = m;
    this.onClick = null;
    var c = function (i) {
            if (typeof (i) == "function") {
                i(l.getCurrentPage())
            }
        };
    var o = function () {
            var i = l.getCurrentPage();
            l.gotoPage(1);
            if (i != l.getCurrentPage()) {
                c(n.onClick)
            }
        };
    var b = function () {
            var i = l.getCurrentPage();
            l.gotoPrevPage();
            if (i != l.getCurrentPage()) {
                c(n.onClick)
            }
        };
    var d = function () {
            var i = l.getCurrentPage();
            l.gotoNextPage();
            if (i != l.getCurrentPage()) {
                c(n.onClick)
            }
        };
    var f = function () {
            var i = l.getCurrentPage();
            l.gotoLastPage();
            if (i != l.getCurrentPage()) {
                c(n.onClick)
            }
        };
    var k = function (p) {
            var q = l.getCurrentPage();
            var i = parseInt(p.getText());
            if (!isNaN(i)) {
                l.gotoPage(i)
            }
            if (q != l.getCurrentPage()) {
                c(n.onClick)
            }
        };
    h.first.onClick = o;
    h.prev.onClick = b;
    h.next.onClick = d;
    h.last.onClick = f;
    var g;
    var e = h.getItemCount();
    var n = this;
    for (g = 0; g < e; g++) {
        var a = h.getItem(g);
        if (a) {
            a.onClick = k
        }
    }
};
var noOfPageIndexesToBeShown = 5;
var baseStartPageIndex = 1;
var currentPage_Pagination = 1;

function ctrlPagination(a, c, b, e) {
    baseStartPageIndex = 1;
    if (e > 1) {
        baseStartPageIndex = e
    }
    if (e) {
        currentPage_Pagination = e
    } else {
        currentPage_Pagination = 1;
        $(a).innerHTML = ""
    }
    if (c > 1) {
        var d = [];
        d.push("<div id='pagination_indexOnly'>" + findPageIndexes_pagination(a, b, c) + "</div>");
        if (document.getElementById(a)) {
            document.getElementById(a).innerHTML = d.join("")
        }
        if ($(a + "_pageNo_" + currentPage_Pagination)) {
            $(a + "_pageNo_" + currentPage_Pagination).className = "paginationHighlightedPage"
        }
    }
}
function findPageIndexes_pagination(a, b, f) {
    var g = [];
    prefixDiv = "";
    var h = 0;
    var d = (baseStartPageIndex + noOfPageIndexesToBeShown) - 1;
    h = (d > f) ? f : d;
    for (var c = baseStartPageIndex; c <= h; c++) {
        var e = "";
        if (c == h && h < f) {
            e = 'baseStartPageIndex++;loadPage_pagination("' + a + '",' + c + ',"' + b + '",' + f + ");"
        } else {
            if (c == baseStartPageIndex && baseStartPageIndex > 1) {
                e = 'baseStartPageIndex--;loadPage_pagination("' + a + '",' + c + ',"' + b + '",' + f + ");"
            } else {
                e = 'loadPage_pagination("' + a + '","' + c + '","' + b + '",' + f + ")"
            }
        }
        g.push("<a  id='" + a + "_pageNo_" + c + "' class='paginationNormalPage' onclick='");
        g.push(e);
        g.push(";return false;'>");
        g.push(c);
        g.push("</a> ")
    }
    if (h < f) {
        g.push("<a onclick='baseStartPageIndex++;loadPage_pagination(\"" + a + '",' + (currentPage_Pagination + 1) + ',"' + b + '",' + f + ");return false;'>" + g_js_strings.commonstr.next.toLowerCase() + "&gt;&gt;</a>")
    }
    if (baseStartPageIndex > 1) {
        prefixDiv += "<a onclick='baseStartPageIndex--;loadPage_pagination(\"" + a + '",' + (currentPage_Pagination - 1) + ',"' + b + '",' + f + ");return false;'> &lt;&lt;" + g_js_strings.commonstr.prev.toLowerCase() + " </a>"
    }
    return prefixDiv + g.join("")
}
function loadPage_pagination(divId, currentPage, callbackFunction, totalPages) {
    currentPage_Pagination = parseInt(currentPage);
    var fn = callbackFunction + "(" + currentPage_Pagination + ")";
    eval(fn);
    if ($("pagination_indexOnly")) {
        $("pagination_indexOnly").innerHTML = findPageIndexes_pagination(divId, callbackFunction, totalPages)
    }
    if ($(divId + "_pageNo_" + currentPage_Pagination)) {
        $(divId + "_pageNo_" + currentPage_Pagination).className = "paginationHighlightedPage"
    }
};

function resizeIframe(b, a) {
    var c = parseInt(a);
    if (c > 100) {
        if (b != "") {
            $(b).height = (c + 20) + "px"
        } else {
            $("paymentIFrame").height = (c + 30) + "px";
            $("paymentPage").height = (c + 30) + "px"
        }
    }
}
if (!window.Payment) {
    var Payment = new Object()
}
Payment.Properties = {
    c_payment_abbr_to_symbol: {
        USD: "&#36;",
        AUD: "&#36; AUD",
        CAD: "&#36; CAD",
        EUR: "&#128;",
        GBP: "&#163;",
        HKD: "&#36; HKD",
        NZD: "&#36; NZD",
        SGD: "&#36; SGD",
        JPY: "&#165;"
    },
    card: [],
    debitCardData: null,
    bankTransferData: null,
    payPalData: null,
    mobileData: null,
    packages: null,
    currency: "USD",
    offersData: null,
    otherData: [],
    optionOrder: [],
    selectedIndex: 0,
    isDefaultPaypal: false
};
Payment.Methods = {
    resetData: function () {
        this.selectedIndex = 0;
        this.card.creditCardData = [];
        this.debitCardData = null;
        this.bankTransferData = null;
        this.payPalData = null;
        this.mobileData = null;
        this.packages = null;
        this.currency = "USD";
        this.offersData = null;
        this.optionOrder = [];
        this.selectedIndex = 0;
        this.otherData = [];
        this.isDefaultPaypal = false
    },
    processPaymentXML: function () {
        var a = cm.PreloadedPaymentXMLService.getResult();
        if (a.ok) {
            if (cm.PreloadedPaymentXMLService.getVersion() == 2) {
                var b = a.data.paymentURL;
                this.paymentURL = b;
                if (b) {
                    Payment.renderPaymentModalV2(b)
                } else {
                    Modal.showAlert(g_js_strings.errorcode.err_default)
                }
            } else {
                var c = a.data;
                Payment.initializeData(c);
                Payment.renderPaymentModal()
            }
        } else {
            Modal.showAlert(g_js_strings.errorcode.err_default)
        }
    },
    startPaymentModal: function () {
        cm.flash.hideFlash();
        if (!cm.PreloadedPaymentXMLService.hasExpired()) {
            Payment.processPaymentXML()
        } else {
            var a = function (c) {
                    cm.PreloadedPaymentXMLService.removeEventListener(cm.ServiceEvent.SUCESS, a);
                    Payment.processPaymentXML()
                };
            var b = function (c) {
                    cm.PreloadedPaymentXMLService.removeEventListener(cm.ServiceEvent.FAILED, b);
                    Modal.showAlert(g_js_strings.errorcode.err_default)
                };
            cm.PreloadedPaymentXMLService.addEventListener(cm.ServiceEvent.SUCCESS, a);
            cm.PreloadedPaymentXMLService.addEventListener(cm.ServiceEvent.FAILED, b);
            cm.PreloadedPaymentXMLService.makeRequest()
        }
    },
    initializeData: function (c) {
        this.resetData();
        var e = c["101"];
        if (!e) {
            return false
        }
        var a = Object.keys(e);
        for (var b = 0; b < a.length; b++) {
            var d = e[a[b]];
            switch (d.category) {
            case "Credit Cards":
                Payment.initCreditCardData(d);
                break;
            case "Debit Cards":
                Payment.initDebitCardData(d);
                break;
            case "PayPal":
                Payment.initPayPalData(d);
                break;
            case "Mobile":
                Payment.initMobileData(d);
                break;
            case "Offers":
                Payment.initOffersData(d);
                break;
            default:
                Payment.initOtherData(d);
                break
            }
        }
        Payment.initOptionOrder()
    },
    initOptionOrder: function () {
        var b = [];
        for (var a = 0; a < this.card.creditCardData.length; a++) {
            b.push(this.card.creditCardData[a])
        }
        if (this.payPalData) {
            b.push(this.payPalData)
        }
        if (this.debitCardData) {
            b.push(this.debitCardData)
        }
        if (this.mobileData) {
            b.push(this.mobileData)
        }
        if (this.otherData) {
            for (var c = 0; c < this.otherData.length; c++) {
                b.push(this.otherData[c])
            }
        }
        this.optionOrder = b
    },
    initOtherData: function (a) {
        this.otherData.push(a)
    },
    initCreditCardData: function (a) {
        this.card.creditCardData[this.card.creditCardData.length] = a
    },
    initDebitCardData: function (a) {
        if ((this.debitCardData && parseInt(this.debitCardData.ranking) > parseInt(a.ranking)) || !this.debitCardData) {
            this.debitCardData = a
        }
    },
    initPayPalData: function (a) {
        if ((this.payPalData && parseInt(this.payPalData.ranking) > parseInt(a.ranking)) || !this.payPalData) {
            this.payPalData = a
        }
    },
    initMobileData: function (a) {
        if ((this.mobileData && parseInt(this.mobileData.ranking) > parseInt(a.ranking)) || !this.mobileData) {
            this.mobileData = a
        }
    },
    initOffersData: function (a) {
        if ((this.offersData && parseInt(this.offersData.ranking) > parseInt(a.ranking)) || !this.offersData) {
            this.offersData = a
        }
    },
    renderPaymentModalV2: function (a) {
        var c = "paymentIFrame";
        if ($(c)) {
            return
        }
        var b = '<div class="modalBody" id="paymentPage">  <iframe style="background-color: transparent; margin-left: -2px; border: medium none;" width="760px" id="paymentIFrame" name="paymentIFrame" allowtransparency="true" frameborder="0"></iframe></div>';
        Modal.onCloseCallback = modal_getgems_check;
        Modal.show({
            winWidth: 740,
            winHeight: 400,
            winLeft: 10,
            winTop: 10,
            winTitle: g_js_strings.modaltitles.getmoregems,
            winContent: b,
            callback: function () {
                modal_getgems_open;
                cm.IframeUtil.post("paymentIFrame", a)
            },
            shutdown: cm.flash.showFlash
        })
    },
    renderPaymentModal: function () {
        var a = [];
        a.push("<div id='modal_getgemsdiv'>");
        a.push(this.getTopHtml());
        a.push("<div class='payoptions clearfix'>");
        a.push(this.getOptionListHtml());
        a.push(this.getPackagesHtml());
        a.push("</div>");
        a.push("</div>");
        if (g_env == "prod") {
            a.push('<div style="display:inline;"><img height="1" width="1" style="border-style:none;" alt="" src="http://www.googleadservices.com/pagead/conversion/1059019849/?label=C6l1CLvt5gEQybj9-AM&amp;guid=ON&amp;script=0"/></div>')
        }
        Modal.show({
            winWidth: 740,
            winHeight: 400,
            winLeft: 10,
            winTop: 10,
            winTitle: g_js_strings.modaltitles.getmoregems,
            winContent: a.join(""),
            callback: modal_getgems_open,
            shutdown: cm.flash.showFlash
        })
    },
    modalGetPackages: function () {
        var d = null;
        var b = 0;
        this.isDefaultPaypal = false;
        if ((this.optionOrder.length > 0) && ("EUR" == this.optionOrder[0].currency)) {
            for (b = this.optionOrder.length - 1; b; --b) {
                if ("paypal" == this.optionOrder[b].method) {
                    d = this.optionOrder[b].campaigns;
                    this.isDefaultPaypal = true;
                    break
                }
            }
        }
        if (null == d) {
            d = this.optionOrder[0].campaigns
        }
        var a = Object.keys(d);
        var c = [];
        for (b = 0; b < a.length; b++) {
            if (d[a[b]].packageId) {
                c.push(d[a[b]])
            }
        }
        return c
    },
    getPackagesHtml: function () {
        var a = this.modalGetPackages();
        var h = [];
        var b = 0;
        var k = 0;
        var j = 0;
        var c = "";
        var f = 0;
        var p = "";
        var l = false;
        h.push("<div class='promolist'>");
        for (var g = 0; g < a.length; g++) {
            b = parseInt(a[g].base) + parseInt(a[g].bonus);
            k = a[g].price;
            j = a[g].msrpPrice;
            if (j != k) {
                l = true
            } else {
                l = false
            }
            c = a[g].url;
            f = a[g].packageChestId;
            p = this.c_payment_abbr_to_symbol[a[g].currency] || a[g].currency;
            var n, e = "";
            if (l) {
                n = g_js_strings.modal_getgems.purchaseafordiscount.replace("%1$s", b).replace("%2$s", parseInt(j)).replace(/%3\$s/g, p).replace("%4$s", k);
                var m = parseInt((parseFloat(j) - parseFloat(k)) / parseFloat(j) * 100);
                e = "saleTag" + m
            } else {
                n = g_js_strings.modal_getgems.purchaseaforb.replace("%1$s", b).replace("%2$s", k).replace("%3$s", p)
            }
            var o = '				<div class="packageContainer package#{chestId} #{onsale}" onclick="cm.ConversionTracker.track(\'payments\', \'PAYMENT_BUY_PACKAGE\', \'PACKAGE#{index1}\');Payment.gotoIframe(\'#{iframeUrl}\',#{cents},#{index0});return false;" onmouseout="removeTooltip();return false;" onmouseover="Payment.doPackageTooltip(#{index0},this,event);">			    <div class="rightColumn"></div>			    <div class="leftColumn">			        <div class="packageName">#{name}</div>			        <div class="packageDescription">#{description}</div>			        <a class="packageButton"><span class="innerContainer">#{buttonText}</span></a><span class="#{saleTag}">&nbsp;</span>			    </div>			</div>			';
            packageInfo = {
                chestId: f,
                onsale: (l ? "onsale" : ""),
                index0: g,
                index1: g + 1,
                iframeUrl: c,
                cents: a[g].cents,
                name: itemlist["i" + f].name,
                description: itemlist["i" + f].description,
                buttonText: n,
                saleTag: e
            };
            var d = new Template(o).evaluate(packageInfo);
            h.push(d)
        }
        h.push("</div>");
        return h.join("")
    },
    doPackageTooltip: function (d, g, a) {
        var c = this.modalGetPackages();
        var b = c[d].packageContents;
        var f = Object.keys(b);
        var e = new Array();
        for (i = 0; i < f.length; i++) {
            e.push("<div style='padding-bottom:2px;'><b>x");
            e.push(b[f[i]].quantity);
            e.push("</b> - ");
            e.push(b[f[i]].name);
            e.push("</div>")
        }
        showTooltip(e.join(""), g, a, "mainbody")
    },
    getTopHtml: function () {
        var c = "";
        for (var b = 0; b < this.optionOrder.length; ++b) {
            c += this.optionOrder[b].category;
            if (b < (this.optionOrder.length - 2)) {
                c += g_js_strings.modal_getgems.itemseparator
            } else {
                if (b < (this.optionOrder.length - 1)) {
                    c += g_js_strings.modal_getgems.itemseparatorlast
                }
            }
        }
        var a = [];
        a.push("<div class='paytitle'>" + g_js_strings.modal_getgems.purchasegemstitle + "</div>");
        a.push("<div class='paydescription'>" + g_js_strings.modal_getgems.purchasegemsdescription.replace("%1$s", c) + "</div>");
        return a.join("")
    },
    getOptionListHtml: function () {
        var c = [];
        c.push("<div class='optionlist'>");
        c.push("<div class='directlist'>");
        c.push("<div class='directlisthd'>" + g_js_strings.modal_getgems.gemsdirect + "</div>");
        c.push("<div id='gemsdirectpurchasedrop'>");
        c.push("<select id='gemsdirectselect'>");
        var f = this.optionOrder[0].campaigns;
        var e = Object.keys(f);
        for (var b = 0; b < e.length; b++) {
            var h = this.c_payment_abbr_to_symbol[f[e[b]].currency] || f[e[b]].currency;
            var d = f[e[b]].price;
            if (parseInt(f[e[b]].level) != 0) {
                c.push("<option value='" + e[b] + "' selected>")
            } else {
                c.push("<option value='" + e[b] + "'>")
            }
            c.push(f[e[b]].gems + " " + g_js_strings.commonstr.gems + " (" + h + d + ")");
            c.push("</option>")
        }
        c.push("</select>");
        c.push("</div>");
        for (var b = 0; b < this.optionOrder.length; b++) {
            var g = (b == 0) ? "checked" : "";
            c.push("<div class='payopt'><input type='radio' name='gemsdirect' value='" + b + "' " + g + " onclick='Payment.selectOption(this);' onchange='Payment.selectOption(this);'/><label for='gemsdirect1'>");
            c.push("<img src='");
            c.push(this.optionOrder[b].asset);
            c.push("'/></label></div>")
        }
        c.push("<div class='pnow clearfix'><a  class='button20' onclick='Payment.gotoIframe();return false;'><span>" + g_js_strings.modal_getgems.purchasenow + "</span></a></div>");
        c.push("</div>");
        c.push("<div class='otherway'>");
        c.push("<div class='otherwayhd'>" + g_js_strings.modal_getgems.gemoffer + "</div>");
        if (this.offersData && this.offersData.campaigns) {
            var j = Object.keys(this.offersData.campaigns)[0];
            var a = this.offersData.campaigns[j].url;
            c.push('<div class=\'pnow\'><a onclick=\'cm.ConversionTracker.track("payments", "PAYMENT_SEE_OFFERS2", "");Payment.gotoBigIframe("' + a + "\");return false;'>" + g_js_strings.modal_getgems.obtaindesc + "</a></div>")
        }
        c.push("</div>");
        c.push("</div>");
        return c.join("")
    },
    gotoIframe: function (l, a, c, d) {
        removeTooltip();
        var g = false;
        if (l) {
            var b = l;
            var f = a || null;
            g = this.isDefaultPaypal || d
        } else {
            var m = $("gemsdirectselect").value;
            var b = this.optionOrder[this.selectedIndex].campaigns[m].url;
            var f = this.optionOrder[this.selectedIndex].campaigns[m].cents || null;
            g = (this.optionOrder[this.selectedIndex].category == "Debit Cards" || this.optionOrder[this.selectedIndex].category == "PayPal") ? true : false;
            var e = ["PAYMENT_CREDIT_CARD", "PAYMENT_PAYPAL2", "PAYMENT_MOBILE2"];
            cm.ConversionTracker.track("payments", e[this.selectedIndex], "")
        }
        var h = "_blank";
        if (!g) {
            h = "payment_iframe";
            var k = [];
            k.push("<div class=\"goback\"><a onclick=\"cm.ConversionTracker.track('payments', 'PAYMENT_TRIALPAY_BACK', '');Modal.hideModal();Payment.startPaymentModal();return false;\">" + g_js_strings.modal_getgems_direct.backtogem + "</a></div>");
            if (parseInt(c) >= 0) {
                var j = Payment.modalGetPackages()[c];
                k.push("<div class='promobanner clearfix'");
                k.push(">");
                k.push("<img src='");
                k.push(stimgUrl);
                k.push("img/payments/chests/");
                k.push(j.packageChestId);
                k.push(".png'/>");
                k.push("<div class='promoinfo'>");
                k.push("<div class='nm'>" + j.packageName + "</div>");
                k.push("<div class='desc'>" + j.packageDescription + "</div>");
                k.push("</div>");
                k.push("</div>")
            }
            if (f && Payment.payPalData) {
                k.push("<div class='paybypaypal'><a onclick='Payment.gotoIframe(Payment.getPayPalLink(" + f + "), undefined, undefined, true);return false;'>");
                k.push("<img src='");
                k.push(stimgUrl);
                k.push("img/paypal.jpg'/> " + g_js_strings.modal_getgems_direct.clickforpaypal + "</a></div>")
            }
            k.push('<div id="payment_iframe_loading" style="width:600px;height:585px;margin:20px 0 15px 55px;overflow:hidden;"><div style="margin: 50px;text-align:center;font-size: 20px;"><img src="' + stimgUrl + 'img/spinny.gif" /></div></div>');
            k.push('<iframe name="payment_iframe" id="payment_iframe" width="600" height="585" scrolling="no" frameborder="0" style="display:none; margin:20px 0 15px 55px;"></iframe>');
            if (undefined == cm.features.NO_RIGHTNOW_CRM || "true" == cm.features.NO_RIGHTNOW_CRM) {
                k.push("<div class='phone'>Have a question? Contact us at (877) 399-6537</div>")
            } else {
                k.push("<div class='phone'><a onclick='HelpDesk.show();return false;'>");
                k.push(g_js_strings.modal_getgems_direct.needassistance);
                k.push("</a></div>")
            }
            $("modal_getgemsdiv").innerHTML = k.join("");
            $("payment_iframe").observe("load", this.gotoIframeDone)
        }
        cm.IframeUtil.post(h, b)
    },
    gotoBigIframe: function (a) {
        this.gotoIframe(a)
    },
    gotoIframeDone: function (a) {
        $("payment_iframe").stopObserving("load", this.gotoIframeDone);
        $("payment_iframe_loading").hide();
        $("payment_iframe").show()
    },
    getPayPalLink: function (d) {
        var e = Payment.payPalData.campaigns;
        var a = Object.keys(e);
        var c = "";
        for (var b = 0; b < a.length; b++) {
            if (parseInt(e[a[b]].cents) == parseInt(d)) {
                return e[a[b]].url
            } else {
                if (parseInt(e[a[b]].level) != 0) {
                    c = e[a[b]].url
                }
            }
        }
        return c
    },
    selectOption: function (h) {
        this.selectedIndex = h.value;
        var g = this.optionOrder[h.value].campaigns;
        var b = Object.keys(g);
        var d = [];
        d.push("<select id='gemsdirectselect'>");
        for (var c = 0; c < b.length; c++) {
            var e = g[b[c]].price;
            var a = g[b[c]].cents;
            var f = this.c_payment_abbr_to_symbol[g[b[c]].currency] || g[b[c]].currency;
            if (parseInt(g[b[c]].level) != 0) {
                d.push("<option value='" + b[c] + "' selected>")
            } else {
                d.push("<option value='" + b[c] + "'>")
            }
            d.push(g[b[c]].gems + " " + g_js_strings.commonstr.gems + " (" + f + e + ")");
            d.push("</option>")
        }
        d.push("</select>");
        $("gemsdirectpurchasedrop").innerHTML = d.join("")
    }
};
Object.extend(Payment, Payment.Methods);
Object.extend(Payment, Payment.Properties);

function modal_getgems() {
    if (cm.util.preventDoubleClick("modal_getgems")) {
        return false
    }
    if (false) {
        seed.player.entryTag = "swaves";
        g_locale = "zh_CN"
    }
    cm.log.l("g_locale=" + g_locale + "  seed.player.entryTag=" + seed.player.entryTag + "  seed.player.sixwavesig=" + (seed.player.sixwavesig ? "set" : "unset"));
    Payment.startPaymentModal()
}
function modal_getgems_geturls() {
    var params = Object.clone(g_ajaxparams);
    new Ajax.Request(g_ajaxpath + "ajax/trialpayUrls.php" + g_ajaxsuffix, {
        method: "post",
        parameters: params,
        onSuccess: function (transport) {
            var rslt = eval("(" + transport.responseText + ")");
            if (rslt.ok) {
                g_offerPaymentUrl = rslt.data.offer;
                g_paymentDirectUrls = rslt.data.quickpay;
                modal_getgems_pt2()
            } else {}
        },
        onFailure: function () {}
    })
}
var g_promos = null;

function modal_getgems_getbonusgems(a) {
    switch (parseInt(a)) {
    case 5:
        return 0;
        break;
    case 10:
        return 0;
        break;
    case 20:
        return 0;
        break;
    case 30:
        return 0;
        break;
    case 50:
        return 25;
        break;
    case 100:
        return 100;
        break;
    case 250:
        return 300;
        break;
    case 500:
        return 750;
        break
    }
}
function modal_getgems_packagetooltip(e, h, a) {
    var b = g_promos[e].itemsInPackage;
    var g = new Object();
    var f = new Array();
    for (c = 0; c < b.length; c++) {
        if (g["i" + b[c]]) {
            g["i" + b[c]]++
        } else {
            g["i" + b[c]] = 1
        }
    }
    var d = Object.keys(g);
    for (var c = 0; c < d.length; c++) {
        f.push("<div style='padding-bottom:2px;'><b>x");
        f.push(g[d[c]]);
        f.push("</b> - ");
        f.push(itemlist[d[c]].name);
        f.push("</div>")
    }
    showTooltip(f.join(""), h, a, "mainbody")
}
function modal_getgems_pt2() {
    isswaves = true;
    var shophtml = new Array();
    var params = Object.clone(g_ajaxparams);
    new Ajax.Request(g_ajaxpath + "ajax/promos.php" + g_ajaxsuffix, {
        method: "post",
        parameters: params,
        onSuccess: function (transport) {
            var rslt = eval("(" + transport.responseText + ")");
            if (rslt.ok) {
                g_promos = rslt.data;
                shophtml.push("<div id='modal_getgemsdiv'>");
                if (!isswaves) {
                    shophtml.push("<div class='creditcard'>" + g_js_strings.modal_getgems.purchasegems + "<img src='");
                    shophtml.push(stimgUrl);
                    shophtml.push("img/creditcards.gif'/><img src='");
                    shophtml.push(stimgUrl);
                    shophtml.push("img/paypal.jpg'/></div>");
                    shophtml.push("<div class='currencyinfo'>(" + g_js_strings.modal_getgems.pricesshown.replace("%1$s", g_paymentCurrency) + ")</div>")
                } else {
                    shophtml.push("<div class='creditcard'>" + g_js_strings.modal_getgems.selectbundle + ":</div>")
                }
                shophtml.push("<div class='payoptions clearfix'>");
                var promopts = new Array();
                var curprice = 9999;
                var promolist = Object.keys(g_promos);
                for (var i = 0; i < promolist.length; i++) {
                    var gemreq = parseInt(g_promos[promolist[i]].gemsRequired);
                    if (gemreq != curprice) {
                        promopts.push(promolist[i]);
                        curprice = gemreq
                    }
                }
                if (promopts.length > 1) {
                    if (parseInt(g_promos[promopts[0]].gemsRequired) < parseInt(g_promos[promopts[1]].gemsRequired)) {
                        promopts.reverse()
                    }
                }
                if (!isswaves) {
                    shophtml.push("<div class='promolist'>");
                    promopts.reverse();
                    for (var i = 0; i < promopts.length; i++) {
                        var gemreq = parseInt(g_promos[promopts[i]].gemsRequired);
                        var price = modal_getgems_gemprice_nobonus(gemreq);
                        var bonus = modal_getgems_gembonus_nobonus(gemreq);
                        var totalgemreq = gemreq + bonus;
                        shophtml.push("<a  class='gembtn' onclick='modal_getgems_direct(1," + totalgemreq + ");return false;' onmouseout='removeTooltip();return false;' onmouseover='modal_getgems_packagetooltip(" + promopts[i] + ",this,event);'>");
                        shophtml.push("<img src='");
                        shophtml.push(stimgUrl);
                        shophtml.push("img/trialpay/");
                        shophtml.push(g_promos[promopts[i]].itemId);
                        shophtml.push(".png' class='packagepic'/>");
                        shophtml.push("<div class='packageinfo'><div class='ttl'>");
                        shophtml.push(itemlist["i" + g_promos[promopts[i]].itemId].name);
                        shophtml.push("</div><div class='desc'>");
                        shophtml.push(g_promos[promopts[i]].description);
                        shophtml.push("</div></div>");
                        shophtml.push("<div class='pricing'>");
                        shophtml.push(g_js_strings.modal_getgems.purchaseaforb.replace("%1$s", g_promos[promopts[i]].gemsRequired).replace("%2$s", price).replace("%3$s", g_paymentSymbol));
                        shophtml.push("</div>");
                        if (bonus > 0) {
                            shophtml.push("<div class='bonus'><b>+");
                            shophtml.push(bonus);
                            shophtml.push("</b>" + g_js_strings.modal_getgems.bonusgems + "</div>")
                        }
                        shophtml.push("</a>")
                    }
                    shophtml.push("</div>")
                } else {
                    shophtml.push("<table style='text-align:left;margin:0 auto 5px auto;'>");
                    for (var i = 0; i < promopts.length; i++) {
                        shophtml.push("<tr style='font-size:14px;' onmouseover='modal_getgems_packagetooltip(" + promopts[i] + ",this,event);' onmouseout='removeTooltip();return false;'><td style='height:40px;'>");
                        var price = parseInt(g_promos[promopts[i]].gemsRequired) / 10;
                        shophtml.push("<b>" + g_js_strings.commonstr.purchase + " " + g_promos[promopts[i]].gemsRequired);
                        shophtml.push("&nbsp;<img src='");
                        shophtml.push(stimgUrl);
                        shophtml.push("img/gem.png' style='margin-bottom:-3px;'/></b>");
                        shophtml.push("</td><td style='font-weight:bold;font-size:16px;padding:0 5px;'>+</td><td>" + g_js_strings.commonstr.get + " ");
                        shophtml.push(" 1");
                        shophtml.push("<img style='height:35px;width:32px;margin:0 5px -15px 5px;' src='");
                        shophtml.push(stimgUrl);
                        shophtml.push("img/trialpay/");
                        shophtml.push(g_promos[promopts[i]].itemId);
                        shophtml.push(".png'/>");
                        shophtml.push(g_promos[promopts[i]].name);
                        shophtml.push("</td></tr>")
                    }
                    shophtml.push("</table>");
                    shophtml.push("<div style='font-size:10px;'>*" + g_js_strings.modal_getgems.singletransact + "</div>")
                }
                if (!isswaves) {
                    shophtml.push("<div class='directlist'>");
                    shophtml.push("<div class='directlisthd'>" + g_js_strings.modal_getgems.gemsdirect + "</div>");
                    shophtml.push("<div id='gemsdirectpurchasedrop'>");
                    shophtml.push("<select id='gemsdirectselect'>");
                    var gemcounts = Object.keys(g_paymentDirectUrls[2]);
                    for (var i = 0; i < gemcounts.length; i++) {
                        if (parseInt(gemcounts[i]) == 300) {
                            shophtml.push("<option value='" + gemcounts[i] + "' selected>")
                        } else {
                            shophtml.push("<option value='" + gemcounts[i] + "'>")
                        }
                        shophtml.push(gemcounts[i] + " " + g_js_strings.commonstr.gems + " (" + g_paymentSymbol + g_paymentDirectUrls[2][gemcounts[i]].price + ")");
                        shophtml.push("</option>")
                    }
                    shophtml.push("</select>");
                    shophtml.push("</div>");
                    shophtml.push("<div id='gemsmobilepurchasedrop' style='display:none;'></div>");
                    shophtml.push("<div class='payopt'><input type='radio' name='gemsdirect' value='1' checked id='gemsdirect1' onclick='modal_getgems_mobile_unselect();' onchange='modal_getgems_mobile_unselect();'/><label for='gemsdirect1'><img src='");
                    shophtml.push(stimgUrl);
                    shophtml.push("img/creditcards.gif'/></label></div>");
                    shophtml.push("<div class='payopt'><input type='radio' name='gemsdirect' value='2' id='gemsdirect2' onclick='modal_getgems_mobile_unselect();' onchange='modal_getgems_mobile_unselect();'/><label for='gemsdirect2'><img src='");
                    shophtml.push(stimgUrl);
                    shophtml.push("img/paypal.jpg'/></label></div>");
                    if (g_paymentMobileCheck == 1) {
                        shophtml.push("<div class='payopt mobi'><input type='radio' name='gemsdirect' value='2' id='gemsdirect3' onclick='modal_getgems_mobile_select();' onchange='modal_getgems_mobile_select();'/><label for='gemsdirect3'><img src='");
                        shophtml.push(stimgUrl);
                        shophtml.push("img/icon_mobile.png' class='mobi'/>" + g_js_strings.modal_getgems.obtainmobile + "</label></div>")
                    }
                    if (g_paymentMobileCheck == 1 || g_paymentMobileLinkTarget == 2) {
                        modal_getgems_mobile_init()
                    }
                    shophtml.push("<div class='pnow clearfix'><a  class='button20' onclick='modal_getgems_purchasedirect();return false;'><span>" + g_js_strings.modal_getgems.purchasenow + "</span></a></div>");
                    shophtml.push("<div class='pnow'><a href='" + appUrl + "?page=payment' target='_blank'>" + g_js_strings.modal_getgems.obtaindesc + "</a></div>");
                    if (g_paymentMobileLinkTarget == 1) {
                        shophtml.push("<div class='pnow'><b>" + g_js_strings.modal_getgems.ordash + "</b>&nbsp;<a href='" + g_paymentMobile + "' target='_blank'>" + g_js_strings.modal_getgems.obtainmobile + "</a></div>")
                    } else {
                        if (g_paymentMobileLinkTarget == 2) {
                            shophtml.push("<div class='pnow' id='modal_getgems_mobilelink1' style='display:none;'><b>" + g_js_strings.modal_getgems.ordash + "</b>&nbsp;<a onclick='modal_getgems_mobilepopup();return false;' href='#'>" + g_js_strings.modal_getgems.obtainmobile + "</a></div>")
                        }
                    }
                    if (g_gashurl.length > 0 && seed.player.entryTag.substr(0, 6) == "swaves") {
                        shophtml.push("<div class='pnow'><b>" + g_js_strings.modal_getgems.ordash + "</b>&nbsp;<a href='#' onclick='modal_getgems_offers(1);return false;'>" + g_js_strings.modal_getgems.linkgashmycard + "</a></div>");
                        shophtml.push("<div class='pnow'><a href='#' onclick='modal_getgems_offers(1);return false;'><img src='" + stimgUrl + "img/logo_gash.gif'/></a></div>");
                        shophtml.push("<div class='pnow'><a href='#' onclick='modal_getgems_offers(1);return false;'><img src='" + stimgUrl + "img/logo_mycard.gif'/></a></div>")
                    }
                    shophtml.push("</div>")
                }
                shophtml.push("</div>");
                if (!isswaves) {
                    shophtml.push("<div class='takeoffers'><b>" + g_js_strings.modal_getgems.ordash + "</b>");
                    if (g_paymentFlow == "newwindow") {
                        shophtml.push("<a href='" + appUrl + "?page=payment' target='_blank'>" + g_js_strings.modal_getgems.obtainmobiledesc + "</a>")
                    } else {
                        if (g_paymentFlow == "replacewindow") {
                            shophtml.push("<a href='" + appUrl + "?page=payment' target='_top'>" + g_js_strings.modal_getgems.obtainmobiledesc + "</a>")
                        } else {
                            if (g_paymentFlow == "modaloverlay") {
                                shophtml.push("<a href='#' onclick='modal_getgems_offers();return false;'>" + g_js_strings.modal_getgems.obtainmobiledesc + "</a>")
                            } else {
                                shophtml.push("<a href='" + appUrl + "?page=payment' target='_blank'>" + g_js_strings.modal_getgems.obtainmobiledesc + "</a>")
                            }
                        }
                    }
                    shophtml.push("</div>");
                    if (g_paymentMobileLinkTarget == 1) {
                        shophtml.push("<div class='takeoffers' style='padding-top:0;'><b>" + g_js_strings.modal_getgems.ordash + "</b><a href='" + g_paymentMobile + "' target='_blank'>" + g_js_strings.modal_getgems.obtainmobile + "</a></div>")
                    } else {
                        if (g_paymentMobileLinkTarget == 2) {
                            shophtml.push("<div class='takeoffers' id='modal_getgems_mobilelink2' style='display:none;padding-top:0;'><b>" + g_js_strings.modal_getgems.ordash + "</b><a href='#' onclick='modal_getgems_mobilepopup();return false;'>" + g_js_strings.modal_getgems.obtainmobile + "</a></div>")
                        }
                    }
                    if (g_gashurl.length > 0) {
                        shophtml.push("<div class='takeoffers' style='padding-top:0;'><b>" + g_js_strings.modal_getgems.ordash + "</b><a href='#' onclick='modal_getgems_offers(1);return false;'>GASH & MyCard</a></div>")
                    }
                }
                shophtml.push("</div>");
                if (isswaves) {
                    var custom = "serverid%3D" + g_server + "%26productid%3D101"
                }
                Modal.showModal(740, 400, 10, 10, g_js_strings.modaltitles.getmoregems, shophtml.join(""), modal_getgems_open)
            }
        },
        onFailure: function () {}
    })
}
function modal_getgems_gemprice(a) {
    return g_paymentDirectUrls[2][a].price
}
function modal_getgems_gemprice_nobonus(a) {
    return g_paymentDirectUrls[2][parseInt(a + modal_getgems_gembonus_nobonus(a))].price
}
function modal_getgems_gembonus(a) {
    switch (parseInt(a)) {
    case 525:
        return 25;
        break;
    case 1100:
        return 100;
        break;
    case 2800:
        return 300;
        break;
    case 5570:
        return 570;
        break;
    default:
        return 0;
        break
    }
}
function modal_getgems_gembonus_nobonus(a) {
    switch (parseInt(a)) {
    case 500:
        return 25;
        break;
    case 1000:
        return 100;
        break;
    case 2500:
        return 300;
        break;
    case 5000:
        return 570;
        break;
    default:
        return 0;
        break
    }
}
function modal_getgems_purchasedirect() {
    if ($("gemsdirect1").checked) {
        modal_getgems_direct(1, $("gemsdirectselect").value)
    } else {
        if ($("gemsdirect2").checked) {
            var a = modal_getgems_directpayurl(2, $("gemsdirectselect").value);
            a += user_id + "&server_id=" + g_server;
            window.open(a)
        } else {
            if ($("gemsdirect3").checked) {
                modal_getgems_purchasemobile($("gemsmobileselect").value)
            }
        }
    }
}
function modal_getgems_purchasemobile(b) {
    var a = new Array();
    Modal.showModal(740, 400, 10, 10, "Get Gems", a.join(""))
}
function modal_getgems_goback() {
    Modal.hideModal();
    modal_getgems()
}
function modal_getgems_directpayurl(a, b) {
    if (parseInt(a) == 1) {
        return g_paymentDirectUrls[2][b].url
    } else {
        if (parseInt(a) == 2) {
            return g_paymentDirectUrls[3][b].url
        }
    }
}
function modal_getgems_direct(e, g) {
    removeTooltip();
    var c = new Array();
    c.push('<div class="goback"><a onclick="modal_getgems_goback();return false;">' + g_js_strings.modal_getgems_direct.backtogem + "</a></div>");
    var a = Object.keys(g_promos);
    var b = null;
    var f = 0;
    for (var d = 0; d < a.length; d++) {
        if (parseInt(g_promos[a[d]].gemsRequired) <= g) {
            b = g_promos[a[d]];
            f = a[d];
            break
        }
    }
    if (b != null) {
        c.push("<div class='promobanner clearfix'");
        c.push(">");
        c.push("<img src='");
        c.push(stimgUrl);
        c.push("img/trialpay/");
        c.push(b.itemId);
        c.push(".png'/>");
        c.push("<div class='promoinfo'>");
        c.push("<div class='nm'>" + b.name + "</div>");
        c.push("<div class='desc'>" + b.description + "</div>");
        c.push("</div>");
        c.push("</div>")
    }
    if (e == 1) {
        c.push("<div class='paybypaypal'><a href='");
        c.push("' target='_blank'><img src='");
        c.push(stimgUrl);
        c.push("img/paypal.jpg'/> " + g_js_strings.modal_getgems_direct.clickforpaypal + "</a></div>")
    }
    c.push("<div class='phone'>Have a question? Contact us at (877) 399-6537</div>");
    $("modal_getgemsdiv").innerHTML = c.join("")
}
function modal_getgems_mobile_unselect() {
    $("gemsdirectpurchasedrop").show();
    $("gemsmobilepurchasedrop").hide()
}
function modal_getgems_mobile_select() {
    $("gemsdirectpurchasedrop").hide();
    $("gemsmobilepurchasedrop").show()
}
function modal_getgems_mobile_init() {
    var params = Object.clone(g_ajaxparams);
    var profiler = new cm.Profiler("ResponseTime", "paymentXml.php");
    new Ajax.Request(g_ajaxpath + "ajax/paymentXml.php" + g_ajaxsuffix, {
        method: "post",
        parameters: params,
        onSuccess: function (transport) {
            profiler.stop();
            var rslt = eval("(" + transport.responseText + ")");
            if (rslt.ok) {
                var groups = Object.keys(rslt.data);
                for (var g = 0; g < groups.length; g++) {
                    if (g_paymentMobileCheck == 1 && rslt.data[groups[g]].method == "bokuStatic") {
                        var campaigns = Object.keys(rslt.data[groups[g]].campaigns);
                        var selecthtml = new Array();
                        selecthtml.push("<select id='gemsmobileselect'>");
                        var selindex = 0;
                        var overtwenty = false;
                        for (var i = 0; i < campaigns.length; i++) {
                            selecthtml.push("<option value='");
                            selecthtml.push(rslt.data[groups[g]].campaigns[campaigns[i]].url);
                            selecthtml.push("'>");
                            selecthtml.push(rslt.data[groups[g]].campaigns[campaigns[i]].gems + " " + g_js_strings.commonstr.gems + " (" + g_paymentSymbol + rslt.data[groups[g]].campaigns[campaigns[i]].price + ")");
                            selecthtml.push("</option>");
                            if (!overtwenty) {
                                if (parseInt(rslt.data[groups[g]].campaigns[campaigns[i]].gems) <= 200) {
                                    selindex = i
                                }
                            }
                            if (parseInt(rslt.data[groups[g]].campaigns[campaigns[i]].gems) >= 200) {
                                overtwenty = true
                            }
                        }
                        selecthtml.push("</select>");
                        $("gemsmobilepurchasedrop").innerHTML = selecthtml.join("");
                        $("gemsmobileselect").selectedIndex = selindex;
                        if (g_paymentMethod == 1) {
                            $("gemsdirect3").checked = true;
                            modal_getgems_mobile_select()
                        }
                    } else {
                        if (g_paymentMobileLinkTarget == 2 && rslt.data[groups[g]].method == "bokuAutoPreset") {
                            var campaigns = Object.keys(rslt.data[groups[g]].campaigns);
                            var preseturl = rslt.data[groups[g]].campaigns[campaigns[0]].url;
                            if ($("modal_getgems_mobilelink1")) {
                                $("modal_getgems_mobilelink1").setAttribute("name", preseturl);
                                $("modal_getgems_mobilelink1").show()
                            }
                            if ($("modal_getgems_mobilelink2")) {
                                $("modal_getgems_mobilelink2").setAttribute("name", preseturl);
                                $("modal_getgems_mobilelink2").show()
                            }
                        }
                    }
                }
            } else {}
        },
        onFailure: function () {
            profiler.stop()
        }
    })
}
function modal_getgems_mobilepopup() {
    var b = "";
    if ($("modal_getgems_mobilelink1")) {
        b = $("modal_getgems_mobilelink1").getAttribute("name")
    } else {
        if ($("modal_getgems_mobilelink2")) {
            b = $("modal_getgems_mobilelink2").getAttribute("name")
        }
    }
    if (b.length > 0) {
        var a = new Array();
        Modal.showModal(740, 600, 10, 10, g_js_strings.modal_getgems.obtainmobile, a.join(""))
    }
}
function modal_getgems_offers(b) {
    var a = new Array();
    a.push('<div class="goback"><a  onclick="modal_getgems_goback();return false;">' + g_js_strings.modal_getgems_direct.backtogem + "</a></div>");
    $("modal_getgemsdiv").innerHTML = a.join("")
}
function modal_getgems_open() {
    if ($("modalControlsClose2")) {
        Event.observe("modalControlsClose2", "click", modal_getgems_check)
    } else {
        if ($("modalControlsClose1")) {
            Event.observe("modalControlsClose1", "click", modal_getgems_check)
        }
    }
    cm.ConversionTracker.track("payments", "PAYMENT_MODAL_LOADED", "")
}
var g_getgems_chk = 0;

function modal_getgems_check() {
    new PeriodicalExecuter(function (pe) {
        if (g_getgems_chk > 20) {
            g_getgems_chk = 0;
            pe.stop()
        } else {
            g_getgems_chk++;
            var params = Object.clone(g_ajaxparams);
            new Ajax.Request(g_ajaxpath + "ajax/getGems.php" + g_ajaxsuffix, {
                method: "post",
                parameters: params,
                onSuccess: function (transport) {
                    var rslt = eval("(" + transport.responseText + ")");
                    if (rslt.ok) {
                        if (parseInt(rslt.data) > parseInt(seed.player.gems)) {
                            alert(g_js_strings.modal_getgems_check.gemsupdated);
                            seed.player.gems = parseInt(rslt.data);
                            if ($("modal_shop_gems")) {
                                $("modal_shop_gems").innerHTML = rslt.data
                            }
                            $("kochead_gems").innerHTML = seed.player.gems;
                            g_getgems_chk = 0;
                            pe.stop();
                            cm.CRMLink.update()
                        }
                    } else {}
                },
                onFailure: function () {}
            })
        }
    }, 30)
};
var cm = cm || {};
cm.Player = function (e) {
    cm.CustomEventDispatcher.call(this);
    var j = this;
    var g;
    var b;
    var f;
    var i;
    var m;
    var d;
    var l;
    var c = function (n) {
            return d < n
        };
    this.getTitle = function () {
        return m
    };
    this.setMight = function (p) {
        g = p;
        var n = cm.LevelUtil.getUserLevel(p);
        if (!cm.TutorialManager.inTutorialMode() && !b && c(n.level)) {
            b = true;
            i = d;
            f = m;
            d = n.level;
            m = n.title;
            var o = cm.LevelUtil.getQuestId(d);
            l.claim(o)
        }
    };
    this.getLevel = function () {
        return d
    };
    this.getMight = function () {
        return g
    };
    var k = function (q) {
            var o;
            for (o = i; o <= d; o++) {
                var n = cm.LevelUtil.getQuestId(o);
                seed.quests["q" + n] = 1
            }
            b = false;
            var p = new cm.PlayerEvent(cm.PlayerEvent.LEVEL_INCREASED);
            p.setTarget(j);
            p.setPreviousState({
                level: i,
                title: f
            });
            j.dispatchCustomEvent(p)
        };
    var a = function (n) {
            d = i;
            m = f;
            b = false
        };
    var h = function () {
            d = parseInt(e.level);
            b = false;
            l = new cm.LevelUpReward();
            l.addEventListener(cm.RewardEvent.SUCCESS, k);
            l.addEventListener(cm.RewardEvent.FAILURE, a)
        };
    h()
};
cm.OOP.inherits(cm.Player, cm.CustomEventDispatcher);
cm.PlayerController = function (a) {
    var c = function (h) {
            if (!cm.TutorialManager.inTutorialMode()) {
                var m = h.getTarget();
                var l = h.getPreviousState();
                var d = cm.LevelUtil.getLevelUpRewards(l.level, m.getLevel());
                var f = parseInt(seed.player.avatarId) > 8 ? ".jpg" : ".png";
                var j = seed.player.avatarurl.replace("profile", "130").replace(".png", f);
                var g = {
                    text: {
                        levelUp: g_js_strings.LevelUp.levelUp,
                        congratulations: g_js_strings.LevelUp.congratulations.replace("%1$s", m.getLevel()),
                        yourReward: g_js_strings.LevelUp.yourReward,
                        gold: g_js_strings.commonstr.gold,
                        celebrate: g_js_strings.LevelUp.celebrate
                    },
                    avatar: {
                        name: seed.player.prefix + " " + seed.player.name,
                        pictureUrl: j,
                        title: m.getTitle(),
                        level: m.getLevel(),
                        previousLevel: l.level
                    },
                    reward: {
                        gold: addCommas(d)
                    },
                    player: m
                };
                var i = new cm.LevelUpRewardDialog(g);
                var k = new cm.LevelUpRewardDialogController(g, i);
                i.show()
            }
        };
    var b = function () {
            a.addEventListener(cm.PlayerEvent.LEVEL_INCREASED, c)
        };
    b()
};
cm.PlayerEvent = function (a) {
    cm.CustomEvent.call(this, a);
    var b;
    this.setPreviousState = function (c) {
        b = c
    };
    this.getPreviousState = function () {
        return b
    }
};
cm.OOP.inherits(cm.PlayerEvent, cm.CustomEvent);
cm.PlayerEvent.LEVEL_INCREASED = "levelIncreased";
cm.LevelUtil = new function () {
    var c = 11000;
    var b = 2;
    var a = 90;
    this.getQuestId = function (d) {
        return d + c
    };
    this.getUserLevel = function (g) {
        var d, f, h, j;
        try {
            for (d = b; d <= a; d++) {
                f = parseInt(questlist["q" + (d + c)].objective[2]);
                if (g < f) {
                    break
                }
            }
        } catch (e) {}
        j = d - 1;
        h = titlenames[j.toString()];
        return {
            level: j,
            title: h
        }
    };
    this.getLevelUpRewards = function (g, d) {
        var h = 0;
        var e, j;
        try {
            for (e = Math.max(2, g + 1); e <= Math.min(d, a); e++) {
                j = questlist["q" + (e + c)].reward;
                h += parseInt(j[0][0])
            }
        } catch (f) {}
        return h
    }
}();
if (!window.ProgressBar) {
    var ProgressBar = new Object()
}
ProgressBar.Properties = {
    progressbar_data: null
};
ProgressBar.Methods = {
    initializeProgressBar: function (d, e, c) {
        var b = parseInt(d);
        if (e) {
            var a = e
        } else {
            var a = false
        }
        var f = Object.clone(g_ajaxparams);
        if (b == 1) {
            f.loadFlag = true
        } else {
            f.loadFlag = false
        }
        new Ajax.Request(g_ajaxpath + "ajax/updateUserReengagement.php" + g_ajaxsuffix, {
            method: "post",
            parameters: f,
            onSuccess: function (l) {
                var h = l.responseText.evalJSON();
                if (h.ok && parseInt(h.maxScore) < 4) {
                    var i = {
                        install: {
                            complete: "complete",
                            text: g_js_strings.initializeProgressBar.install
                        },
                        bookmark: {
                            complete: h.status.bookmarked == "1" ? "complete" : "",
                            text: g_js_strings.initializeProgressBar.bookmark
                        },
                        fan: {
                            complete: h.status.fan ? "complete" : "",
                            text: g_js_strings.initializeProgressBar.fan
                        },
                        permissions: {
                            complete: h.status.publish_stream == "1" ? "complete" : "",
                            text: g_js_strings.initializeProgressBar.permissions
                        },
                        alliance: {
                            complete: h.status.alliance == "1" ? "complete" : "",
                            text: g_js_strings.initializeProgressBar.joinAlliance
                        }
                    };
                    var k = [];
                    k.push('<div class="progressBar">');
                    k.push('    <div class="topRow">');
                    k.push('        <a onclick="ProgressBar.modal_progress_actions()" class="container end install {install.complete}">{install.text}</a>');
                    k.push('        <a onclick="ProgressBar.modal_progress_actions()" class="container bookmark {bookmark.complete}">{bookmark.text}</a>');
                    k.push('        <a onclick="ProgressBar.modal_progress_actions()" class="container fan {fan.complete}">{fan.text}</a>');
                    k.push('        <a onclick="ProgressBar.modal_progress_actions()" class="container permissions {permissions.complete}">{permissions.text}</a>');
                    k.push('        <a onclick="ProgressBar.modal_progress_actions()" class="container end alliance {alliance.complete}">{alliance.text}</a>');
                    k.push("    </div>");
                    k.push('    <div class="bottomRow">');
                    k.push('        <a class="finishButton" onclick="ProgressBar.modal_progress_actions()">Click to Finish!</a>');
                    k.push("    </div>");
                    k.push("</div>");
                    var g = {
                        self: k.join("\n")
                    };
                    ProgressBar.progressbar_data = h;
                    $("progressBar").innerHTML = jsonT(i, g);
                    $("progressBar").show();
                    if (h.pop && !a) {
                        ProgressBar.modal_progress_actions(2)
                    } else {
                        if (b == 2) {
                            ProgressBar.modal_progress_actions(1)
                        }
                    }
                } else {
                    if (h.ok && parseInt(h.maxScore) == 4 && !h.score && b == 2) {
                        ProgressBar.progressbar_data = h;
                        ProgressBar.modal_progress_actions(1)
                    } else {
                        if (h.ok && h.score && b == 2) {
                            Modal.hideModalAll();
                            $("progressBar").innerHTML = "";
                            $("progressBar").hide()
                        } else {
                            if (!h.ok) {
                                if (h.error_code && h.error_code != 0 && h.error_code != 1001) {
                                    Modal.showAlert(printLocalError((h.error_code || null), (h.msg || null), (h.feedback || null)))
                                } else {
                                    if (h.error_code && h.error_code == 1001) {
                                        var j = $("progressBar");
                                        j.addClassName("fbdown").show()
                                    }
                                }
                            }
                        }
                    }
                }
                if (typeof (c) == "function") {
                    c()
                }
            },
            onFailure: function () {}
        })
    },
    modal_progress_actions: function (f) {
        Modal.hideModalAll();
        var b = 1;
        var e = Object.keys(this.progressbar_data.status);
        for (var d = 0; d < e.length; d++) {
            if (this.progressbar_data.status[e[d]] == true || parseInt(this.progressbar_data.status[e[d]]) == 1) {
                b++
            }
        }
        var g = new Array();
        g.push("<div class='progressmodalbox'>");
        g.push("<div class='progressheader'>");
        g.push("</div>");
        g.push("<div class='progress-bar clearfix'>");
        var a = new Array(0, 1, 2, 3, 6);
        for (var d = 1; d <= 5; d++) {
            if (d <= b) {
                g.push("<div class='progress-bar-complete-step" + d + "'>");
                g.push("<div class='progress-bar-step" + d + "-status'>" + g_js_strings.initializeProgressBar.completetxt + "</div>");
                g.push("</div>")
            } else {
                g.push("<div class='progress-bar-incomplete-step" + d + "'>");
                g.push("<div class='progress-bar-step-percentage'>" + (d * 20) + "%</div>");
                g.push("</div>")
            }
        }
        g.push("</div>");
        g.push("<div class='button_wrapper clearfix'>");
        var c = "";
        g.push("<div class='buttonrow clearfix'>");
        if (parseInt(this.progressbar_data.status.alliance) === 0) {
            g.push("<a class='fbishbutton subscribe' onclick='modal_alliance()' style='text-align:center;'><span>");
            g.push(g_js_strings.initializeProgressBar.joinAlliance);
            g.push("</span></a>")
        } else {
            c = " complete";
            g.push("<div class='completedbar'>");
            g.push("</div>")
        }
        g.push("<div class='desc" + c + "'>");
        g.push(g_js_strings.modal_progress_actions.joinAlliance);
        g.push("</div>");
        g.push("</div>");
        c = "";
        g.push("<div class='buttonrow clearfix'>");
        if (parseInt(this.progressbar_data.status.publish_stream) == 0) {
            g.push("<a class='fbishbutton publish' onclick='FB.Connect.showPermissionDialog(\"publish_stream\");return false;'><span>");
            g.push(g_js_strings.modal_progress_actions.publishper);
            g.push("</span></a>")
        } else {
            c = " complete";
            g.push("<div class='completedbar'>");
            g.push("</div>")
        }
        g.push("<div class='desc" + c + "'>");
        g.push(g_js_strings.modal_progress_actions.enabletxt);
        g.push("</div>");
        g.push("</div>");
        c = "";
        g.push("<div class='buttonrow clearfix'>");
        if (this.progressbar_data.status.fan == false) {
            g.push("<a class='fbishbutton fan' onclick='ProgressBar.showFanBox();return false;'><span><img src='" + stimgUrl + "img/become_fan_Icon.jpg'/>");
            g.push(g_js_strings.modal_progress_actions.becomefan);
            g.push("</span></a>")
        } else {
            c = " complete";
            g.push("<div class='completedbar'>");
            g.push("</div>")
        }
        g.push("<div class='desc" + c + "'>");
        g.push(g_js_strings.modal_progress_actions.becometxt);
        g.push("</div>");
        g.push("</div>");
        c = "";
        g.push("<div class='buttonrow clearfix'>");
        if (parseInt(this.progressbar_data.status.bookmarked) == 0) {
            g.push("<a class='fbishbutton bookmark' onclick='FB.Connect.showBookmarkDialog();return false;'><span><img src='" + stimgUrl + "img/bookmark_icon.jpg'/>");
            g.push(g_js_strings.modal_progress_actions.addbook);
            g.push("</span></a>")
        } else {
            c = " complete";
            g.push("<div class='completedbar'>");
            g.push("</div>")
        }
        g.push("<div class='desc" + c + "'>");
        g.push(g_js_strings.modal_progress_actions.bookmarktxt);
        g.push("</div>");
        g.push("</div>");
        g.push("<div class='buttonrow clearfix'>");
        g.push("<div class='completedbar'>");
        g.push("</div>");
        g.push("<div class='desc complete'>");
        g.push(g_js_strings.modal_progress_actions.installtxt);
        g.push("</div>");
        g.push("</div>");
        g.push("</div>");
        g.push("<div class='actionbtns clearfix'>");
        g.push("<a onclick='ProgressBar.updateProgressStatus();return false;' class='button20 updatebtn'><span>");
        g.push(g_js_strings.modal_progress_actions.updatestatus);
        g.push("</span></a>");
        g.push("<a onclick='Modal.hideModal();return false;' class='button20 remindbtn'><span>");
        g.push(g_js_strings.commonstr.close);
        g.push("</span></a>");
        g.push("</div>");
        g.push("<div class='statusmsg'>");
        g.push(g_js_strings.modal_progress_actions.pressbutton.replace("%1$s", g_js_strings.modal_progress_actions.updatestatus));
        g.push("</div>");
        g.push("<div class='statusmsg'>");
        g.push(g_js_strings.modal_progress_actions.upto24);
        g.push("</div>");
        g.push("</div>");
        Modal.showModal(500, 400, 130, 130, g_js_strings.modaltitles.continuesetup, g.join(""));
        if (f && this.progressbar_data.gemsGained) {
            this.modal_gems_gained()
        } else {
            if (f && f == 1 && !this.progressbar_data.gemsGained) {
                this.modal_gems_not_gained()
            }
        }
    },
    updateProgressStatus: function () {
        this.initializeProgressBar(2)
    },
    showFanBox: function () {
        var a = new Array();
        a.push("<div class='progressfanboxwrap'>");
        a.push("<div class='fanboxbody'>");
        a.push($("fbFanBox").innerHTML);
        a.push("</div>");
        a.push("</div>");
        Modal.showModal(250, 400, 245, 190, "Become a Fan", a.join(""))
    },
    modal_gems_gained: function () {
        seed.player.gems = parseInt(seed.player.gems) + parseInt(this.progressbar_data.gemsGained);
        $("kochead_gems").innerHTML = seed.player.gems;
        var a = "";
        switch (parseInt(this.progressbar_data.maxScore)) {
        case 1:
            a = g_js_strings.modal_gems_gained.msg1;
            break;
        case 2:
            a = g_js_strings.modal_gems_gained.msg2;
            break;
        case 3:
            a = g_js_strings.modal_gems_gained.msg3;
            break;
        case 4:
            a = g_js_strings.modal_gems_gained.msg4;
            break;
        default:
            break
        }
        Modal.showAlert(a);
        if (parseInt(this.progressbar_data.maxScore) == 4) {
            $("progressBar").innerHTML = "";
            $("progressBar").hide()
        }
    },
    modal_gems_not_gained: function () {}
};
Object.extend(ProgressBar, ProgressBar.Methods);
Object.extend(ProgressBar, ProgressBar.Properties);
cm = cm || {};
cm.QuestModel = jQueryClass.extend({
    init: function (b, a) {
        this.id = Number(b);
        this.heading = a.heading;
        this.name = a.name;
        this.category = a.category;
        this.description = a.description;
        this.objective = "";
        this.order = Number(a.preferredorder);
        this.prerequisite = Number(a.prerequisite);
        this.reward = this.setReward(a.reward);
        this.claimed = "";
        this.prereqmet = "";
        this.objectivemet = ""
    },
    setReward: function (g) {
        var f = g[0],
            b = g[1],
            e = g[2],
            h = g[3],
            d = {};
        d.resources = [];
        d.units = [];
        d.items = [];
        d.player = [];
        if (f.length !== 0) {
            for (var j = 0; j < f.length; ++j) {
                var c = Number(j),
                    a, i = Number(f[j]);
                switch (c) {
                case 0:
                    a = g_js_strings.commonstr.gold;
                    break;
                case 1:
                    a = g_js_strings.commonstr.food;
                    break;
                case 2:
                    a = g_js_strings.commonstr.wood;
                    break;
                case 3:
                    a = g_js_strings.commonstr.stone;
                    break;
                case 4:
                    a = g_js_strings.commonstr.ore;
                    break;
                case 5:
                    a = g_js_strings.commonstr.population;
                    break
                }
                d.resources.push({
                    id: c,
                    name: a,
                    count: i,
                    type: "resource"
                })
            }
        } else {
            d.resources = null
        }
        if (b.length !== 0) {
            for (var j = 0; j < b.length; ++j) {
                var c = Number(b[j][0]),
                    i = Number(b[j][1]);
                d.units.push({
                    id: c,
                    name: unitcost["unt" + c][0],
                    count: i,
                    type: "unit"
                })
            }
        } else {
            d.units = null
        }
        if (e.length !== 0) {
            for (var j = 0; j < e.length; ++j) {
                if (typeof (e[j]) == "number" || typeof (e[j]) == Number) {
                    e = [
                        [e[0], e[1]]
                    ]
                }
                var c = Number(e[j][0]);
                var a = itemlist["i" + c].name;
                var i = Number(e[j][1]);
                d.items.push({
                    id: c,
                    name: a,
                    count: i,
                    type: "item"
                })
            }
        } else {
            d.items = null
        }
        for (var j = 0; j < h.length; ++j) {
            var c = Number(j),
                a, i = Number(h[j]);
            switch (j) {
            case 0:
                a = g_js_strings.commonstr.gems;
                break;
            case 1:
                a = g_js_strings.commonstr.might;
                break;
            case 2:
                a = g_js_strings.commonstr.title;
                break
            }
            if (i > 0) {
                d.player.push({
                    id: c,
                    name: a,
                    count: i,
                    type: "player"
                })
            } else {
                d.player.push(null)
            }
        }
        return d
    }
});

function modal_quests() {
    var a = new Array();
    a.push("<div id='modal_quests'>");
    a.push("<div class='questlist' id='modal_quests_questlist'>");
    a.push("<div class='hdg'><span>" + g_js_strings.commonstr.building + "</span></div>");
    a.push("<a  class='quest questsel questcomp'><span>" + g_js_strings.modal_quests.enlistfriends + "</span></a>");
    a.push("<a  class='quest questrec'><span>" + g_js_strings.modal_quests.askhelp + "</span></a>");
    a.push("<a  class='quest'><span>" + g_js_strings.modal_quests.buildcott + "</span></a>");
    a.push("<a  class='questgroup questgroupopen'><span>" + g_js_strings.modal_quests.domexpan + "</span></a>");
    a.push("<div>");
    a.push("<a  class='questsub'><span>" + g_js_strings.modal_quests.buildcott + "</span></a>");
    a.push("</div>");
    a.push("</div>");
    a.push("<div class='questbody' id='modal_quests_questbody'>");
    a.push("<div class='questname' id='modal_quests_qbdy_nm'>" + g_js_strings.modal_quests.buildfarm + "</div>");
    a.push("<div class='questhdg'>" + g_js_strings.modal_quests.questdesc + "</div>");
    a.push("<div class='questtx' id='modal_quests_qbdy_desc'>" + g_js_strings.modal_quests.buildfarmdesc + "</div>");
    a.push("<div class='questhdg'>" + g_js_strings.modal_quests.questobj + "</div>");
    a.push("<div class='questtx' id='modal_quests_qbdy_obj'>" + g_js_strings.modal_quests.farlvl1 + "</div>");
    a.push("<div class='questhdg'>" + g_js_strings.modal_quests.questrwd + "</div>");
    a.push("<div class='questtx clearfix' id='modal_quests_qbdy_award'>" + g_js_strings.modal_quests.squireandfood + "</div>");
    a.push("<div class='questbtn clearfix'>");
    a.push("<a  onclick='modal_quest_getaward(this,0);return false;' class='share' id='modal_quests_qbdy_btn2'><div class='ga'>" + g_js_strings.modal_quests.getrwd + "</div></a>");
    a.push("</div>");
    a.push("<div class='clearfix'>");
    a.push("<a style='display:none;margin-top:30px;margin-left:330px;' onclick='modal_questsFTEClose1();return false;' class='button25' id='modal_quests_fte_close_btn'><span>" + g_js_strings.commonstr.close + "</span></a>");
    a.push("</div>");
    a.push("</div>");
    if (g_env == "prod") {
        a.push('<div style="display:inline;"><img height="1" width="1" style="border-style:none;" alt="" src="http://www.googleadservices.com/pagead/conversion/1059019849/?label=nQH8CKPw5gEQybj9-AM&amp;guid=ON&amp;script=0"/></div>')
    }
    a.push("</div>");
    if (cm.TutorialManager.inTutorialMode()) {
        Modal.showModal(740, 400, 10, 10, g_js_strings.modaltitles.quests, a.join(""));
        cm.TutorialEventDispatcher.dispatchTutorialEvent("complete", "CLICK_QUEST_SAWMILL_REWARD")
    } else {
        Modal.showModal(740, 400, 10, 10, g_js_strings.modaltitles.quests, a.join(""), modal_quests_doquests)
    }
}
function modal_questsFTE() {
    modal_quests_doquests();
    $("modalControls1").hide();
    Event.observe("modalControlsClose1", "click", modal_questsFTEClose);
    seed.tutorial.t1 = 3;
    tutorialAdvance(1, 3);
    tutorialFTE(3)
}
function modal_questsFTE1() {
    modal_quests_doquests();
    $("modalControls1").hide();
    Event.observe("modalControlsClose1", "click", modal_questsFTEClose1);
    seed.tutorial.t1 = 17;
    tutorialCheck(17)
}
function modal_questsFTEClose() {
    tutorialAdvance(1, 5);
    seed.tutorial.t1 = 5;
    tutorialFTE(5)
}
function modal_questsFTEClose1() {
    var a = document.getElementById("questClickCover");
    if (a) {
        document.body.removeChild(a)
    }
    Modal.hideModalAll();
    cm.TutorialEventDispatcher.dispatchTutorialEvent("complete", "CLICK_QUEST_CLOSE_BUTTON")
}
function modal_quests_doquests() {
    var a = quests_validquests();
    for (var b = 0; b < a.valid.length; b++) {
        if (parseInt(a.valid[b]) == 8002) {
            a.valid.splice(b, 1);
            a.valid = [8002].concat(a.valid);
            break
        } else {
            if (parseInt(a.valid[b]) == 8003) {
                a.valid.splice(b, 1);
                a.valid = [8003].concat(a.valid);
                break
            } else {
                if (parseInt(a.valid[b]) == 8004) {
                    a.valid.splice(b, 1);
                    a.valid = [8004].concat(a.valid);
                    break
                } else {
                    if (parseInt(a.valid[b]) == 8005) {
                        a.valid.splice(b, 1);
                        a.valid = [8005].concat(a.valid);
                        break
                    } else {
                        if (parseInt(a.valid[b]) == 8006) {
                            a.valid.splice(b, 1);
                            a.valid = [8006].concat(a.valid);
                            break
                        } else {
                            if (parseInt(a.valid[b]) == 8007) {
                                a.valid.splice(b, 1);
                                a.valid = [8007].concat(a.valid);
                                break
                            }
                        }
                    }
                }
            }
        }
    }
    quest_allcompleted(a.valid);
    modal_quests_generate(a.valid, a.recommended, 1)
}
function modal_quests_viewquest(b) {
    removePopOverLayer();
    var a = $("modal_quests_questlist").select(".questsel");
    if (a.length > 0) {
        a[0].removeClassName("questsel")
    }
    $("modal_quests_questlist_q" + b).addClassName("questsel");
    $("modal_quests_qbdy_nm").innerHTML = questlist["q" + b].name;
    $("modal_quests_qbdy_desc").innerHTML = questlist["q" + b].description;
    $("modal_quests_qbdy_obj").innerHTML = quest_string_objective(b);
    $("modal_quests_qbdy_award").innerHTML = quest_string_award(b);
    $("modal_quests_qbdy_btn2").setAttribute("name", b);
    if ($("modal_quests_questlist_q" + b).hasClassName("questcomp")) {
        $("modal_quests_qbdy_btn2").removeClassName("incomplete");
        $("modal_quests_qbdy_obj").removeClassName("incomplete")
    } else {
        $("modal_quests_qbdy_btn2").addClassName("incomplete");
        $("modal_quests_qbdy_obj").addClassName("incomplete")
    }
}
function modal_quests_togglegroup(a) {
    return false
}
function modal_quests_generate(b, f, a) {
    var m = 0;
    var l = new Array();
    var p = new Object();
    for (var g = 0; g < b.length; g++) {
        var c = questlist["q" + b[g]];
        if (!p[c.heading]) {
            p[c.heading] = new Object()
        }
        if (!p[c.heading][c.category]) {
            p[c.heading][c.category] = new Array()
        }
        c.qid = b[g];
        p[c.heading][c.category].push(c)
    }
    var n = Object.keys(p);
    var h = 0;
    for (var g = 0; g < n.length; g++) {
        var o = Object.keys(p[n[g]]);
        if (a == 1) {
            l.push("<div class='hdg'><span>");
            l.push(n[g]);
            l.push("</span></div>")
        }
        for (var e = 0; e < o.length; e++) {
            h++;
            if (a == 1) {
                l.push("<a  class='questgroup questgroupopen' id='modal_quests_questlist_gtop");
                l.push(h);
                l.push("' onclick='modal_quests_togglegroup(");
                l.push(h);
                l.push(");return false;'><span>");
                l.push(o[e]);
                l.push("</span></a>");
                l.push("<div id='modal_quests_questlist_g");
                l.push(h);
                l.push("'>")
            }
            for (var d = 0; d < p[n[g]][o[e]].length; d++) {
                if (a == 1) {
                    l.push("<a  id='modal_quests_questlist_q");
                    l.push(p[n[g]][o[e]][d].qid);
                    l.push("' onclick='modal_quests_viewquest(");
                    l.push(p[n[g]][o[e]][d].qid);
                    l.push(");return false;' class='questsub")
                }
                if (parseInt(p[n[g]][o[e]][d].qid) == parseInt(f)) {
                    if (a == 1) {
                        l.push(" questrec")
                    }
                }
                if (g_questcomp["q" + p[n[g]][o[e]][d].qid] == 1) {
                    if (a == 1) {
                        l.push(" questcomp")
                    }
                    m++
                }
                if (a == 1) {
                    l.push("'><span>");
                    l.push(p[n[g]][o[e]][d].name);
                    l.push("</span><span class='questrec_label'></span></a>")
                }
            }
            if (a == 1) {
                l.push("</div>")
            }
        }
    }
    if (a == 1) {
        $("modal_quests_questlist").innerHTML = l.join("");
        modal_quests_viewquest(f)
    }
    quest_notify_bug(m)
}
var g_questcomp = new Object();

function quest_allcompleted(a) {
    for (var b = 0; b < a.length; b++) {
        if (!g_questcomp["q" + a[b]]) {
            if (quest_check_objective(a[b])) {
                g_questcomp["q" + a[b]] = 1
            }
        }
    }
    var c = Object.keys(g_questcomp);
    quest_notify_bug(c.length);
    return true
}
function quest_notify_bug(b) {
    if (b > 0) {
        $("chrome_quest_notify").innerHTML = b;
        $("chrome_quest_notify").removeClassName("noCount")
    } else {
        var a = $("chrome_quest_notify");
        if (a) {
            a.addClassName("noCount")
        }
    }
    return true
}
function modal_quest_getaward(tgt, share) {
    var newCityModalFlag = ($("modal_quests_qbdy_btn2")) ? false : true;
    if ($("modal_quests_qbdy_btn2") && $("modal_quests_qbdy_btn2").hasClassName("incomplete")) {
        return false
    } else {
        var qid = parseInt(tgt.getAttribute("name"));
        var tutorialFlag = false;
        var params = Object.clone(g_ajaxparams);
        params.cid = currentcityid;
        params.qid = qid;
        new Ajax.Request(g_ajaxpath + "ajax/quest.php" + g_ajaxsuffix, {
            method: "post",
            parameters: params,
            onSuccess: function (transport) {
                if (seed.tutorial.t1 == 17) {
                    tutorialAdvance(1, 18);
                    tutorialFlag = true
                }
                var rslt = eval("(" + transport.responseText + ")");
                if (rslt.ok) {
                    if (qid == 8003 && !seed.items.i1203) {
                        seed.items.i1101 = parseInt(seed.items.i1101) - 4;
                        seed.items.i1102 = parseInt(seed.items.i1102) - 2;
                        seed.items.i1103 = parseInt(seed.items.i1103) - 1;
                        ksoItems[1101].subtract(4);
                        ksoItems[1102].subtract(2);
                        ksoItems[1103].subtract(1)
                    } else {
                        if (qid == 8004 && !seed.items.i1204) {
                            seed.items.i1103 = parseInt(seed.items.i1103) - 4;
                            seed.items.i1104 = parseInt(seed.items.i1104) - 3;
                            seed.items.i1105 = parseInt(seed.items.i1105) - 1;
                            ksoItems[1103].subtract(4);
                            ksoItems[1104].subtract(3);
                            ksoItems[1105].subtract(1)
                        } else {
                            if (qid == 8005 && !seed.items.i1205) {
                                seed.items.i1106 = parseInt(seed.items.i1106) - 4;
                                seed.items.i1107 = parseInt(seed.items.i1107) - 3;
                                seed.items.i1108 = parseInt(seed.items.i1108) - 2;
                                ksoItems[1106].subtract(4);
                                ksoItems[1107].subtract(3);
                                ksoItems[1108].subtract(2)
                            } else {
                                if (qid == 8006 && !seed.items.i1206) {
                                    seed.items.i1109 = parseInt(seed.items.i1109) - 4;
                                    seed.items.i1110 = parseInt(seed.items.i1110) - 3;
                                    seed.items.i1111 = parseInt(seed.items.i1111) - 2;
                                    ksoItems[1109].subtract(4);
                                    ksoItems[1110].subtract(3);
                                    ksoItems[1111].subtract(2)
                                } else {
                                    if (qid == 8007 && !seed.items.i1207) {
                                        seed.items.i1112 = parseInt(seed.items.i1111) - 4;
                                        seed.items.i1113 = parseInt(seed.items.i1112) - 3;
                                        seed.items.i1114 = parseInt(seed.items.i1113) - 2;
                                        ksoItems[1112].subtract(4);
                                        ksoItems[1113].subtract(3);
                                        ksoItems[1114].subtract(2)
                                    } else {
                                        if (qid == 8008 && !seed.items.i1206) {
                                            seed.items.i1115 = parseInt(seed.items.i1115) - 4;
                                            seed.items.i1116 = parseInt(seed.items.i1116) - 3;
                                            seed.items.i1117 = parseInt(seed.items.i1117) - 2;
                                            ksoItems[1115].subtract(4);
                                            ksoItems[1116].subtract(3);
                                            ksoItems[1117].subtract(2)
                                        }
                                    }
                                }
                            }
                        }
                    }
                    quest_give_award(qid);
                    if (cm.TutorialManager.inTutorialMode()) {
                        tutorialClear();
                        tutorialFlag = true
                    }
                    if (parseInt(seed.tutorial.t1) == 4) {
                        $("modalControls1").show();
                        tutorialFlag = true
                    }
                    cm.TutorialEventDispatcher.dispatchTutorialEvent("complete", "CLICK_QUEST_REWARD_BUTTON");
                    seed.quests["q" + qid] = 1;
                    if (newCityModalFlag) {
                        Modal.hideModal();
                        modal_addcityhelp()
                    } else {
                        modal_quests_doquests()
                    }
                    if (rslt.updateSeed) {
                        update_seed(rslt.updateSeed)
                    }
                    if (!tutorialFlag && !newCityModalFlag) {
                        popOverShareLayer(qid)
                    }
                    if (cm.feedTracking.get("shareQuestComplete") !== false && !cm.TutorialManager.inTutorialMode()) {
                        shareQuestComplete(qid)
                    }
                    removePopOverLayer()
                } else {
                    if (rslt.tracker) {
                        var msgObj = {
                            type: "knight",
                            text: rslt.msg
                        };
                        Modal.showTrackerAlert(msgObj)
                    } else {
                        Modal.showAlert(printLocalError((rslt.error_code || null), (rslt.msg || null), (rslt.feedback || null)))
                    }
                }
            },
            onFailure: function () {}
        })
    }
}
function popOverShareLayer(b) {
    var a = [];
    a.push("<div class='sharewrap' id='shareQuestWrapper'>");
    a.push("<div class='questname'>");
    a.push(questlist["q" + b].name);
    a.push("</div>");
    a.push("<div class='sharetitle'>");
    a.push(g_js_strings.popOverShareLayer.sharetitle);
    a.push("</div>");
    a.push("<div class='sharedesc'>");
    a.push(g_js_strings.popOverShareLayer.sharedesc);
    a.push("</div>");
    a.push("<div class='shareimg'>");
    a.push("</div>");
    a.push("<div class='questbtn clearfix'>");
    a.push("<a class='share selfish' onclick='removePopOverLayer();return false;'>");
    a.push("<div class='ga'>");
    a.push(g_js_strings.commonstr.skip);
    a.push("</div>");
    a.push("</a>");
    a.push("<a class='share' onclick='shareQuestComplete(" + b + ");return false;'>");
    a.push("<div class='ga'>");
    a.push(g_js_strings.pop_treasure_chest_modal.sharewithfriends);
    a.push("</div>");
    a.push("</a>");
    a.push("</div>");
    a.push("</div>");
    if ($("modal_quests_questbody")) {
        $("modal_quests_questbody").insert(a.join(""))
    }
}
function removePopOverLayer() {
    if ($("shareQuestWrapper")) {
        $("shareQuestWrapper").remove()
    }
}
function shareQuestComplete(b) {
    cm.feedTracking.setFalse("shareQuestComplete");
    var a = new Array();
    a.push(["REPLACE_AsSeTiD", b]);
    a.push(["REPLACE_QuEsTnAmE", questlist["q" + b].name]);
    a.push(["REPLACE_AwArDnAmE", questlist["q" + b].name]);
    common_postToProfile("84", Object.cloneFeed(template_data_84), Object.cloneFeed(actionlink_data_84), continuation_84, a);
    removePopOverLayer()
}
function quest_check_objective(l) {
    var g = parseInt(questlist["q" + l].objective[0]);
    var f = parseInt(questlist["q" + l].objective[1]);
    var e = parseInt(questlist["q" + l].objective[2]);
    var c = 1;
    if (g == 1) {
        var a = new Array();
        var o = Object.keys(seed.buildings["city" + currentcityid]);
        for (var d = 0; d < o.length; d++) {
            var m = seed.buildings["city" + currentcityid][o[d]];
            if (a["b" + m[0]] == null) {
                a["b" + m[0]] = parseInt(m[1])
            } else {
                a["b" + m[0]] = (m[1] > a["b" + m[0]]) ? m[1] : a["b" + m[0]]
            }
        }
        if (a["b" + f]) {
            if (parseInt(a["b" + f]) < e) {
                return 0
            }
        } else {
            return 0
        }
    } else {
        if (g == 2) {
            if (parseInt(seed.tech["tch" + f]) < e) {
                return 0
            }
        } else {
            if (g == 3) {
                if (parseInt(seed.units["city" + currentcityid]["unt" + f]) < e) {
                    return 0
                }
            } else {
                if (g == 4) {} else {
                    if (g == 5) {
                        if (f == 0) {
                            if (parseInt(seed.citystats["city" + currentcityid].gold[0]) < e) {
                                return 0
                            }
                        } else {
                            if (f == 5) {
                                if (parseInt(seed.citystats["city" + currentcityid].pop[0]) < e) {
                                    return 0
                                }
                            } else {
                                if (parseInt(seed.resources["city" + currentcityid]["rec" + f][0]) < e) {
                                    return 0
                                }
                            }
                        }
                    } else {
                        if (g == 6) {
                            if (f == 0) {
                                if (parseInt(seed.citystats["city" + currentcityid].gold[1]) * 0.01 * parseInt(seed.citystats["city" + currentcityid].pop[0]) < e) {
                                    return 0
                                }
                            } else {
                                if (f == 5) {
                                    if (parseInt(seed.citystats["city" + currentcityid].pop[1]) < e) {
                                        return 0
                                    }
                                } else {
                                    if ((parseInt(seed.resources["city" + currentcityid]["rec" + f][2]) - 100) < e) {
                                        return 0
                                    }
                                }
                            }
                        } else {
                            if (g == 7) {
                                var p = false;
                                var k = Object.keys(seed.wilderness);
                                for (var d = 0; d < k.length; d++) {
                                    var q = Object.keys(seed.wilderness[k[d]]);
                                    for (var b = 0; b < q.length; b++) {
                                        if (f != -1) {
                                            if (parseInt(seed.wilderness[k[d]][q[b]].tileType) == f && parseInt(seed.wilderness[k[d]][q[b]].tileLevel) >= e) {
                                                p = true;
                                                break
                                            }
                                        } else {
                                            if (parseInt(seed.wilderness[k[d]][q[b]].tileLevel) >= e) {
                                                p = true;
                                                break
                                            }
                                        }
                                    }
                                }
                                if (!p) {
                                    return 0
                                }
                            } else {
                                if (g == 15) {
                                    var n = 0;
                                    var o = Object.keys(seed.buildings["city" + currentcityid]);
                                    for (var d = 0; d < o.length; d++) {
                                        var m = seed.buildings["city" + currentcityid][o[d]];
                                        if ((parseInt(m[0]) == f) && (parseInt(m[1]) > 0)) {
                                            n++
                                        }
                                    }
                                    if (n < e) {
                                        return 0
                                    }
                                } else {
                                    if (g == 999) {
                                        if (l == 1502) {
                                            if (seed.cities.length < 2) {
                                                return 0
                                            }
                                        } else {
                                            if (l >= 11002 && l <= 11060) {
                                                if (parseInt(seed.player.might) < parseInt(e)) {
                                                    return 0
                                                }
                                            } else {
                                                if (l == 999001) {
                                                    if (!seed.knights["city" + currentcityid]) {
                                                        return 0
                                                    }
                                                } else {
                                                    if (l == 999002) {
                                                        if (!seed.leaders["city" + currentcityid]) {
                                                            return 0
                                                        } else {
                                                            if (parseInt(seed.leaders["city" + currentcityid].combatKnightId) == 0 && parseInt(seed.leaders["city" + currentcityid].intelligenceKnightId) == 0 && parseInt(seed.leaders["city" + currentcityid].politicsKnightId) == 0 && parseInt(seed.leaders["city" + currentcityid].resourcefulnessKnightId) == 0) {
                                                                return 0
                                                            }
                                                        }
                                                    } else {
                                                        if (l == 999010) {
                                                            if (parseInt(seed.citystats["city" + currentcityid].gold[1]) != 20) {
                                                                return 0
                                                            }
                                                        } else {
                                                            if (l == 8002) {
                                                                if (($("panel_friendlist").select(".friend").length < 10) && !(parseInt(seed.items.i1202) > 0)) {
                                                                    return 0
                                                                }
                                                            } else {
                                                                if (l == 8003) {
                                                                    if ((!(parseInt(seed.items.i1101) >= 4) || !(parseInt(seed.items.i1102) >= 2) || !(parseInt(seed.items.i1103) >= 1)) && !(parseInt(seed.items.i1203) > 0)) {
                                                                        return 0
                                                                    }
                                                                } else {
                                                                    if (l == 8004) {
                                                                        if ((!(parseInt(seed.items.i1103) >= 4) || !(parseInt(seed.items.i1104) >= 3) || !(parseInt(seed.items.i1105) >= 1)) && !(parseInt(seed.items.i1204) > 0)) {
                                                                            return 0
                                                                        }
                                                                    } else {
                                                                        if (l == 8005) {
                                                                            if ((!(parseInt(seed.items.i1106) >= 4) || !(parseInt(seed.items.i1107) >= 3) || !(parseInt(seed.items.i1108) >= 2)) && !(parseInt(seed.items.i1205) > 0)) {
                                                                                return 0
                                                                            }
                                                                        } else {
                                                                            if (l == 8006) {
                                                                                if ((!(parseInt(seed.items.i1109) >= 4) || !(parseInt(seed.items.i1110) >= 3) || !(parseInt(seed.items.i1111) >= 2)) && !(parseInt(seed.items.i1206) > 0)) {
                                                                                    return 0
                                                                                }
                                                                            } else {
                                                                                if (l == 8007) {
                                                                                    if ((!(parseInt(seed.items.i1112) >= 4) || !(parseInt(seed.items.i1113) >= 3) || !(parseInt(seed.items.i1114) >= 2)) && !(parseInt(seed.items.i1207) > 0)) {
                                                                                        return 0
                                                                                    }
                                                                                } else {
                                                                                    if (l == 12001) {
                                                                                        if ((parseInt(seed.player.usedSpeedup) == 0)) {
                                                                                            return 0
                                                                                        }
                                                                                    } else {
                                                                                        if (l == 12002) {
                                                                                            if ((parseInt(seed.player.spentFiveGems) == 0)) {
                                                                                                return 0
                                                                                            }
                                                                                        } else {
                                                                                            if (l == 7901) {
                                                                                                var h = 0;
                                                                                                for (var d = 0; d < seed.cities.length; d++) {
                                                                                                    var q = Object.keys(seed.wilderness["city" + seed.cities[d][0]]);
                                                                                                    for (var b = 0; b < q.length; b++) {
                                                                                                        if (modal_wilderness_buildcity_citybuildcheck(seed.wilderness["city" + seed.cities[d][0]][q[b]].xCoord, seed.wilderness["city" + seed.cities[d][0]][q[b]].yCoord)) {
                                                                                                            h = 1
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                                if (parseInt(seed.cities.length) > 1) {
                                                                                                    h = 1
                                                                                                }
                                                                                                return h
                                                                                            } else {
                                                                                                return 0
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    return c
}
function quest_string_objective(h) {
    var e = parseInt(questlist["q" + h].objective[0]);
    var c = parseInt(questlist["q" + h].objective[1]);
    var a = parseInt(questlist["q" + h].objective[2]);
    var g = "";
    if (e == 1) {
        g = g_js_strings.quest_string_objective.areachlvlb.replace("%1$s", buildingcost["bdg" + c][0]).replace("%2$s", a)
    } else {
        if (e == 2) {
            g = g_js_strings.quest_string_objective.areachlvlb.replace("%1$s", techcost["tch" + c][0]).replace("%2$s", a)
        } else {
            if (e == 3) {
                var d = "";
                if (c == 2) {
                    d = g_js_strings.commonstr.militiamen
                } else {
                    if (c == 4) {
                        d = g_js_strings.commonstr.pikemen
                    } else {
                        if (c == 5) {
                            d = g_js_strings.commonstr.swordsmen
                        } else {
                            if (c == 10) {
                                d = g_js_strings.commonstr.ballistae
                            } else {
                                if (c == 7 || c == 8) {
                                    d = unitcost["unt" + c][0]
                                } else {
                                    d = unitcost["unt" + c][0]
                                }
                            }
                        }
                    }
                }
                g = g_js_strings.commonstr.train + " " + addCommas(a) + " " + d + "."
            } else {
                if (e == 4) {
                    g = g_js_strings.commonstr.build + " " + addCommas(a) + " " + unitcost["unt" + c][0] + "."
                } else {
                    if (e == 5) {
                        var f = "";
                        if (c == 0) {
                            f = resourceinfo.rec0
                        } else {
                            if (c == 5) {
                                f = resourceinfo.rec5
                            } else {
                                f = resourceinfo["rec" + c]
                            }
                        }
                        g = g_js_strings.commonstr.obtain + " " + addCommas(a) + " " + f + "."
                    } else {
                        if (e == 6) {
                            if (c == 0) {
                                g = g_js_strings.quest_string_objective.raisegolda.replace("%1$s", addCommas(a))
                            } else {
                                if (c == 5) {
                                    g = g_js_strings.quest_string_objective.raisepopa.replace("%1$s", addCommas(a))
                                } else {
                                    g = g_js_strings.quest_string_objective.increaseaprodb.replace("%1$s", resourceinfo["rec" + c]).replace("%2$s", addCommas(a))
                                }
                            }
                        } else {
                            if (e == 7) {
                                var b = g_js_strings.commonstr.wilderness;
                                if (c == 50) {
                                    b = g_js_strings.commonstr.plain
                                }
                                g = g_js_strings.quest_string_objective.conqueraofb.replace("%1$s", b).replace("%2$s", addCommas(a))
                            } else {
                                if (e == 15) {
                                    g = g_js_strings.quest_string_objective.constructabbdgs.replace("%1$s", a).replace("%2$s", buildingcost["bdg" + c][0])
                                } else {
                                    if (e == 999) {
                                        if (h == 1502) {
                                            g = g_js_strings.quest_string_objective.buildsecond
                                        } else {
                                            if (h >= 11002 && h <= 11060) {
                                                g = g_js_strings.quest_string_objective.mightreachesa.replace("%1$s", addCommas(parseInt(a)))
                                            } else {
                                                if (h == 999001) {
                                                    g = g_js_strings.quest_string_objective.appointfriendknight
                                                } else {
                                                    if (h == 999002) {
                                                        g = g_js_strings.quest_string_objective.appointknightrole
                                                    } else {
                                                        if (h == 999010) {
                                                            g = g_js_strings.quest_string_objective.changetaxrate
                                                        } else {
                                                            if (h == 8002) {
                                                                g = g_js_strings.quest_string_objective.secondcity.replace("%1$s", itemlist.i1202.name)
                                                            } else {
                                                                if (h == 8003) {
                                                                    g = g_js_strings.quest_string_objective.obtain4a2b1c.replace("%1$s", itemlist.i1101.name).replace("%2$s", itemlist.i1102.name).replace("%2$s", itemlist.i1103.name)
                                                                } else {
                                                                    if (h == 8004) {
                                                                        g = g_js_strings.quest_string_objective.obtain4a3b1c.replace("%1$s", itemlist.i1103.name).replace("%2$s", itemlist.i1104.name).replace("%2$s", itemlist.i1105.name)
                                                                    } else {
                                                                        if (h == 8005) {
                                                                            g = g_js_strings.quest_string_objective.obtain4a3b2c.replace("%1$s", itemlist.i1106.name).replace("%2$s", itemlist.i1107.name).replace("%2$s", itemlist.i1108.name)
                                                                        } else {
                                                                            if (h == 7901) {
                                                                                g = g_js_strings.quest_string_objective.citybuildreinforce.replace("%1$s", g_js_strings.commonstr.plain).replace("%2$s", unitcost.unt1[0]).replace("%3$s", resourceinfo[0]).replace("%4$s", resourceinfo[1]).replace("%5$s", resourceinfo[2]).replace("%6$s", resourceinfo[3]).replace("%7$s", resourceinfo[4])
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    return g
}
function quest_give_award(c) {
    var a = questlist["q" + c].reward;
    if (parseInt(a[0][0]) != 0) {
        seed.citystats["city" + currentcityid].gold[0] = parseInt(seed.citystats["city" + currentcityid].gold[0]) + parseInt(a[0][0]);
        update_gold()
    }
    if (parseInt(a[0][5]) != 0) {
        seed.citystats["city" + currentcityid].pop[0] = parseInt(seed.citystats["city" + currentcityid].pop[0]) + parseInt(a[0][5])
    }
    for (var b = 1; b < 5; b++) {
        if (parseInt(a[0][b]) != 0) {
            seed.resources["city" + currentcityid]["rec" + b][0] = parseInt(seed.resources["city" + currentcityid]["rec" + b][0]) + parseInt(a[0][b]) * 3600
        }
    }
    if (a[1].length > 0) {
        for (var b = 0; b < a[1].length; b++) {
            seed.units["city" + currentcityid]["unt" + a[1][b][0]] = parseInt(seed.units["city" + currentcityid]["unt" + a[1][b][0]]) + parseInt(a[1][b][1])
        }
    }
    if (a[2].length > 0) {
        for (var b = 0; b < a[2].length; b++) {
            if (seed.items["i" + a[2][b][0]]) {
                if (parseInt(a[2][b][0]) < 1202 || parseInt(a[2][b][0]) > 1210) {
                    seed.items["i" + a[2][b][0]] = parseInt(seed.items["i" + a[2][b][0]]) + parseInt(a[2][b][1]);
                    ksoItems[a[2][b][0]].add(parseInt(a[2][b][1]))
                }
            } else {
                seed.items["i" + a[2][b][0]] = parseInt(a[2][b][1]);
                ksoItems[a[2][b][0]] = parseInt(a[2][b][1])
            }
        }
    }
    if (parseInt(a[3][0]) != 0) {
        seed.player.gems = parseInt(seed.player.gems) + parseInt(a[3][0]);
        $("kochead_gems").innerHTML = seed.player.gems
    }
    if (parseInt(a[3][1]) != 0) {
        seed.player.might = parseInt(seed.player.might) + parseInt(a[3][1]);
        $("topnav_might").innerHTML = seed.player.might
    }
    if (parseInt(a[3][2]) != 0) {
        seed.player.title = a[3][2];
        $("topnav_level").innerHTML = seed.player.title
    }
    return true
}
function quest_string_award(d) {
    var c = new Array();
    var a = questlist["q" + d].reward;
    if (parseInt(a[0][0]) != 0) {
        c.push("<div class='item'><img src='");
        c.push(stimgUrl);
        c.push("img/gold_qa.png'/><div class='iteminfo'><div class='ttl'>" + resourceinfo.rec0 + "</div><div>");
        c.push(addCommas(a[0][0]));
        c.push("</div></div></div>")
    }
    if (parseInt(a[0][5]) != 0) {
        c.push("<div class='item'><img src='");
        c.push(stimgUrl);
        c.push("img/population_qa.png'/><div class='iteminfo'><div class='ttl'>" + resourceinfo.rec5 + "</div><div>");
        c.push(addCommas(a[0][5]));
        c.push("</div></div></div>")
    }
    for (var b = 1; b < 5; b++) {
        if (parseInt(a[0][b]) != 0) {
            c.push("<div class='item'><img src='");
            c.push(stimgUrl);
            c.push("img/rec");
            c.push(b);
            c.push("_qa.png'/><div class='iteminfo'><div class='ttl'>");
            c.push(resourceinfo["rec" + b]);
            c.push("</div><div>");
            c.push(addCommas(a[0][b]));
            c.push("</div></div></div>")
        }
    }
    if (a[1].length > 0) {
        for (var b = 0; b < a[1].length; b++) {
            c.push("<div class='item'><img src='");
            c.push(stimgUrl);
            c.push("img/units/unit_");
            c.push(a[1][b][0]);
            c.push("_50.jpg'/><div class='iteminfo'><div class='ttl'>");
            c.push(unitcost["unt" + a[1][b][0]][0]);
            c.push("</div><div>");
            c.push(addCommas(a[1][b][1]));
            c.push("</div></div></div>")
        }
    }
    if (a[2].length > 0) {
        for (var b = 0; b < a[2].length; b++) {
            c.push("<div class='item'><img src='");
            c.push(stimgUrl);
            c.push("img/items/70/");
            c.push(a[2][b][0]);
            c.push(".jpg?5c10831'/><div class='iteminfo'><div class='ttl'>");
            c.push(itemlist["i" + a[2][b][0]].name);
            c.push("</div><div>");
            c.push(addCommas(a[2][b][1]));
            c.push("</div></div></div>")
        }
    }
    if (parseInt(a[3][0]) != 0) {
        c.push("Gems " + addCommas(a[3][0]) + "<br/>")
    }
    if (parseInt(a[3][1]) != 0) {
        c.push("<div class='item'><img src='");
        c.push(stimgUrl);
        c.push("img/might_qa.png'/><div class='iteminfo'><div class='ttl'>" + g_js_strings.commonstr.might + "</div><div>");
        c.push(addCommas(a[3][1]));
        c.push("</div></div></div>")
    }
    if (parseInt(a[3][2]) != 0) {
        c.push("<div class='item'><img src='");
        c.push(stimgUrl);
        c.push("img/title_qa.png'/><div class='iteminfo'><div class='ttl'>" + g_js_strings.commonstr.title + "</div><div>");
        c.push(titlenames[a[3][2]]);
        c.push("</div></div></div>")
    }
    return c.join("")
}
function quests_validquests() {
    var b = Object.keys(questlist);
    var e = new Object();
    var a = new Array();
    var f = 9999;
    var h = 0;
    for (var d = 0; d < b.length; d++) {
        var k = parseInt(b[d].substring(1));
        if (k >= 11061 && k <= 11090 && !cm.WorldSettings.hasKeyValuePair("LevelUpPopupEnabled", "true")) {
            continue
        }
        if (!seed.quests[b[d]]) {
            if (questlist[b[d]].prerequisite == "") {
                a.push(b[d].split("q")[1]);
                if (parseInt(questlist[b[d]].preferredorder) < f) {
                    f = parseInt(questlist[b[d]].preferredorder);
                    h = b[d].split("q")[1]
                } else {
                    if (h == 0) {
                        h = b[d].split("q")[1]
                    }
                }
            } else {
                var g = questlist[b[d]].prerequisite.split(",");
                var l = true;
                for (var c = 0; c < g.length; c++) {
                    if (seed.quests["q" + g[c]] != 1) {
                        l = false;
                        break
                    }
                }
                if (l) {
                    a.push(b[d].split("q")[1]);
                    if (parseInt(questlist[b[d]].preferredorder) < f) {
                        f = parseInt(questlist[b[d]].preferredorder);
                        h = b[d].split("q")[1]
                    } else {
                        if (h == 0) {
                            h = b[d].split("q")[1]
                        }
                    }
                }
            }
        }
    }
    e.valid = a;
    e.recommended = h;
    return e
};

function modal_openRallypoint() {
    var b = new Array();
    b.push("<div id='modal_rallypoint'>");
    b.push("<div class='tabsbar' id='modal_rallypoint_tabs'>");
    b.push("<a class='tab selected' onclick='modal_openRallypoint_tab(\"mytroops\",1);return false;' id='modal_rallypoint_tab_mytroops'><span>" + g_js_strings.modal_openRallypoint.mytroops + "</span></a>");
    b.push("<a class='tab' onclick='modal_openRallypoint_tab(\"movement\",2);return false;' id='modal_rallypoint_tab_movement'><span>" + g_js_strings.modal_openRallypoint.troopmove + "</span></a>");
    b.push("<a class='button20' onclick='Modal.hideModalAll();modal_attack(4,\"\",\"\");return false;'><span>" + g_js_strings.modal_openRallypoint.marchtroops + "</span></a>");
    b.push("</div>");
    b.push("<div class='rallypointwrap'>");
    b.push("<div class='mytroops clearfix' id='modal_rallypoint_mytroops'>");
    for (var c = 1; c < 13; c++) {
        b.push("<div class='unit'><img src='");
        b.push(stimgUrl);
        b.push("img/units/unit_");
        b.push(c);
        b.push("_50.jpg?6545'/><div class='unitinfo'>");
        b.push("<div><b>");
        b.push(unitcost["unt" + c][0]);
        b.push("</b></div>");
        b.push("<div>");
        b.push(seed.units["city" + currentcityid]["unt" + c]);
        b.push("</div>");
        b.push("</div>");
        b.push("</div>")
    }
    b.push("</div>");
    b.push("<div class='troopmovement' id='modal_rallypoint_movement' style='display:none;'>");
    b.push("</div>");
    b.push("</div>");
    b.push("</div>");
    $("modal_build_content").innerHTML = b.join("");
    if ("on" == cm.features.AUTO_ATTACK) {
        var a = new cm.AutoAttackManagerModel();
        new cm.AutoAttackManagerController(a, new cm.AutoAttackManagerView(a))
    }
}
function modal_openRallypoint_tab(b, a) {
    $("modal_rallypoint_tabs").select(".selected")[0].removeClassName("selected");
    $("modal_rallypoint_tab_" + b).className = "tab selected";
    $("modal_build").className = "tab" + a;
    $("modal_rallypoint").select(".rallypointwrap > div").each(function (c) {
        c.hide()
    });
    $("modal_rallypoint_" + b).show();
    switch (a) {
    case 2:
        modal_openRallypoint_movement();
        break
    }
}
function modal_openRallypoint_movement() {
    var e = new Array();
    e.push("<table cellpadding='0' cellspacing='0'>");
    e.push("<thead><tr><td class='typecol'><div>" + g_js_strings.modal_openRallypoint_movement.marchtype + "</div></td><td class='statuscol'><div>" + g_js_strings.commonstr.status + "</div></td><td class='targetcol'><div>" + g_js_strings.modal_openRallypoint_movement.tgtloc + "</div></td><td class='actionscol'><div>" + g_js_strings.commonstr.actions + "</div></td></tr></thead><tbody>");
    var f = seed.queue_atkp["city" + currentcityid];
    var a = unixtime();
    if (!Object.isArray(f)) {
        var h = Object.keys(f);
        for (var d = 0; d < h.length; d++) {
            var g = f[h[d]];
            var j = parseInt(g.marchStatus);
            var c = parseInt(g.marchType);
            if (c == cm.MARCH_TYPES.MARCH_TYPE_BOT_BARBARIAN && (j == cm.MARCH_STATUS.MARCH_STATUS_STOPPED || j == cm.MARCH_STATUS.MARCH_STATUS_RESTING)) {
                continue
            }
            e.push("<tr");
            if (d % 2 == 0) {
                e.push(" class='stripe'")
            }
            e.push("><td class='typecol'><div>");
            switch (c) {
            case cm.MARCH_TYPES.MARCH_TYPE_TRANSPORT:
                e.push(g_js_strings.commonstr.transport);
                break;
            case cm.MARCH_TYPES.MARCH_TYPE_REINFORCE:
                e.push(g_js_strings.commonstr.reinforce);
                break;
            case cm.MARCH_TYPES.MARCH_TYPE_SCOUT:
                e.push(g_js_strings.commonstr.scout);
                break;
            case cm.MARCH_TYPES.MARCH_TYPE_ATTACK:
                e.push(g_js_strings.commonstr.attack);
                break;
            case cm.MARCH_TYPES.MARCH_TYPE_REASSIGN:
                e.push(g_js_strings.commonstr.reassign);
                break;
            case cm.MARCH_TYPES.MARCH_TYPE_BOT_BARBARIAN:
                e.push(g_js_strings.commonstr.raid);
                break
            }
            e.push("</div></td><td class='statuscol'><div>");
            switch (j) {
            case cm.MARCH_STATUS.MARCH_STATUS_OUTBOUND:
                e.push(g_js_strings.commonstr.marching);
                break;
            case cm.MARCH_STATUS.MARCH_STATUS_DEFENDING:
                e.push(g_js_strings.commonstr.defending);
                break;
            case cm.MARCH_STATUS.MARCH_STATUS_RETURNING:
                e.push(g_js_strings.commonstr.returning);
                break;
            case cm.MARCH_STATUS.MARCH_STATUS_ABORTING:
                e.push(g_js_strings.commonstr.aborting);
                break
            }
            e.push("</div></td><td class='targetcol'><div>");
            var b = new cm.utils.CoordinateLink(g.toXCoord, g.toYCoord);
            b.setClassName("coordinateLink");
            e.push(b.getHTML());
            e.push("</div></td><td class='actionscol'><div class='clearfix'>");
            if (g.marchType == cm.MARCH_TYPES.MARCH_TYPE_BOT_BARBARIAN) {
                e.push("</div></td></tr>");
                continue
            }
            if (j == cm.MARCH_STATUS.MARCH_STATUS_OUTBOUND) {
                e.push("<a href='#' class='button20' onclick='cm.recall.ask(");
                e.push(h[d].split("m")[1]);
                e.push(", " + currentcityid + ");return false;'>");
                e.push("<span>" + g_js_strings.commonstr.recall + "</span></a>")
            }
            if (j == cm.MARCH_STATUS.MARCH_STATUS_DEFENDING) {
                e.push("<a href='#' class='button20' onclick='attack_recall(");
                e.push(h[d].split("m")[1]);
                e.push(",1," + currentcityid + ");return false;'>");
                e.push("<span>" + g_js_strings.commonstr.recall + "</span></a>")
            }
            e.push("<a href='#' class='button20' onclick='view_march(");
            e.push(h[d].split("m")[1]);
            e.push(");return false;'>");
            e.push("<span>" + g_js_strings.commonstr.view + "</span></a>");
            if (cm.features && cm.features.speedupMarch == "on") {
                if ((j == 1 && a < parseInt(g.destinationUnixTime)) || (j == 8 && a < parseInt(g.returnUnixTime))) {
                    e.push('<a href="#" class="inlineButton red20" onclick="modal_speedup(\'');
                    e.push(h[d] + "," + currentcityid);
                    e.push("',0,undefined,'" + g_js_strings.commonstr.march);
                    e.push(" (" + g.toXCoord + "," + g.toYCoord + ")');return false;\">");
                    e.push("<span>" + g_js_strings.commonstr.speedup + "</span></a>")
                }
            }
            e.push("</div></td></tr>")
        }
    }
    e.push("</tbody></table>");
    $("modal_rallypoint_movement").innerHTML = e.join("")
}
cm.recall = function (a) {
    return {
        ask: function (c, d) {
            Modal.multiButton({
                buttons: [{
                    txt: g_js_strings.commonstr.recall,
                    exe: function b() {
                        attack_recall(c, 2, d);
                        cm.log.l("marchId=" + c + "   cid=" + d);
                        Modal.hideModal()
                    }
                }, {
                    txt: g_js_strings.commonstr.cancel,
                    exe: function () {
                        Modal.hideModal()
                    }
                }],
                body: "<strong>" + g_js_strings.recall.header + "</strong><br><br>" + g_js_strings.recall.ask
            })
        }
    }
}(jQuery);

function attack_recall(marchid, type, cid) {
    var params = Object.clone(g_ajaxparams);
    params.cid = cid;
    params.mid = marchid;
    var recall = parseInt(type) == 1 ? "ajax/undefend.php" : "ajax/cancelMarch.php";
    new Ajax.Request(g_ajaxpath + recall + g_ajaxsuffix, {
        method: "post",
        parameters: params,
        onSuccess: function (transport) {
            var rslt = eval("(" + transport.responseText + ")");
            if (rslt.ok) {
                if (rslt.updateSeed) {
                    seed.queue_atkp["city" + params.cid]["m" + params.mid].marchStatus = 8;
                    var marchtime = parseInt(seed.queue_atkp["city" + params.cid]["m" + params.mid].returnUnixTime) - parseInt(seed.queue_atkp["city" + params.cid]["m" + params.mid].destinationUnixTime);
                    var ut = unixtime();
                    if (seed.playerEffects.returnExpire > unixtime()) {
                        marchtime *= 0.5
                    }
                    seed.queue_atkp["city" + cid]["m" + marchid].destinationUnixTime = rslt.destinationUnixTime || ut;
                    seed.queue_atkp["city" + cid]["m" + marchid].returnUnixTime = rslt.returnUnixTime || ut + marchtime * rslt.returnMultiplier;
                    seed.queue_atkp["city" + cid]["m" + marchid].marchStatus = 8;
                    cm.log.l("city=" + cid + "  rslt.destinationUnixTime=" + rslt.destinationUnixTime + "  return unix time=" + rslt.returnUnixTime + "  time=" + (unixtime() - rslt.returnUnixTime));
                    update_seed(rslt.updateSeed)
                }
                if (parseInt(type) == 1 || parseInt(type) == 2) {
                    modal_openRallypoint_tab("movement", 2)
                }
                if (parseInt(type) == 2) {
                    for (var j = 1; j < 13; j++) {
                        seed.queue_atkp["city" + cid]["m" + marchid]["unit" + j + "Return"] = parseInt(seed.queue_atkp["city" + cid]["m" + marchid]["unit" + j + "Count"])
                    }
                }
            } else {
                if (parseInt(rslt.error_code) == 253) {
                    Modal.showAlert(g_js_strings.recall.error)
                }
            }
        },
        onFailure: function () {}
    })
}
function view_march(marchid) {
    var msghtml = new Array();
    var params = Object.clone(g_ajaxparams);
    params.rid = marchid;
    new Ajax.Request(g_ajaxpath + "ajax/fetchMarch.php" + g_ajaxsuffix, {
        method: "post",
        parameters: params,
        onSuccess: function (message) {
            var rslt = eval("(" + message.responseText + ")");
            if (rslt.ok) {
                msghtml.push("<div class='modal_march_info_top'>");
                msghtml.push("</div>");
                msghtml.push("<div class='modal_march_body'>");
                msghtml.push("<div style='position:relative'>");
                msghtml.push("<div class='modal_march_header_left'>");
                msghtml.push("<div class='modal_march_info_knight'>");
                msghtml.push(g_js_strings.commonstr.knight + ": ");
                if (rslt.march["knightName"] == null) {
                    msghtml.push("None")
                } else {
                    msghtml.push(rslt.march["knightName"])
                }
                msghtml.push("</div>");
                msghtml.push("<div class='modal_march_info_knight'>");
                msghtml.push(g_js_strings.commonstr.type + ": ");
                switch (parseInt(rslt.march["marchType"])) {
                case 1:
                    msghtml.push(g_js_strings.commonstr.transport);
                    break;
                case 2:
                    msghtml.push(g_js_strings.commonstr.reinforce);
                    break;
                case 3:
                    msghtml.push(g_js_strings.commonstr.scout);
                    break;
                case 4:
                    msghtml.push(g_js_strings.commonstr.attack);
                    break;
                case 5:
                    msghtml.push(g_js_strings.commonstr.reassign);
                    break
                }
                msghtml.push("</div>");
                msghtml.push("<div class='modal_march_info_knight'>");
                msghtml.push(g_js_strings.commonstr.status + ": ");
                switch (parseInt(rslt.march["marchStatus"])) {
                case 1:
                    msghtml.push(g_js_strings.commonstr.marching);
                    break;
                case 2:
                    msghtml.push(g_js_strings.commonstr.defending);
                    break;
                case 8:
                    msghtml.push(g_js_strings.commonstr.returning);
                    break;
                case 9:
                    msghtml.push(g_js_strings.commonstr.aborting);
                    break;
                default:
                    msghtml.push(g_js_strings.commonstr.undefined);
                    break
                }
                msghtml.push("</div>");
                msghtml.push("</div>");
                msghtml.push("<div class='modal_march_header_right modal_march_info_text'>");
                msghtml.push(g_js_strings.commonstr.target + ": " + rslt.march["xCoord"] + "," + rslt.march["yCoord"]);
                msghtml.push("</div>");
                msghtml.push("</div>");
                msghtml.push("<br style='clear:both'>");
                msghtml.push("<div style='position:relative'>");
                msghtml.push("<div class='modal_march_info_left'>");
                msghtml.push("<div class='modal_march_info_text'>");
                msghtml.push(g_js_strings.commonstr.troops + ":");
                msghtml.push("</div>");
                msghtml.push("<table cellpadding='0' cellspacing='0' class=''>");
                msghtml.push("<thead><tr><td>&nbsp;</td><td class='modal_march_table_cell'>" + g_js_strings.commonstr.nametx + "</td><td class='modal_march_table_cell'>" + g_js_strings.commonstr.quantity + "</td></tr></thead><tbody>");
                for (var i = 0; i < 13; i++) {
                    if (rslt.march["unit" + i + "Count"] > 0) {
                        msghtml.push("<tr><td><img src='../src/img/units/unit_" + i + "_30.jpg'></td>");
                        msghtml.push("<td class='modal_march_table_cell'>" + unitcost["unt" + i][0] + "</td>");
                        msghtml.push("<td class='modal_march_table_cell'>" + rslt.march["unit" + i + "Count"] + "</td></tr>")
                    }
                }
                msghtml.push("</tbody></table>");
                msghtml.push("</div>");
                msghtml.push("<div class='modal_march_info_right'>");
                msghtml.push("<div class='modal_march_info_text'>");
                msghtml.push(g_js_strings.view_march.rescarr + ":");
                msghtml.push("</div>");
                msghtml.push("<table cellpadding='0' cellspacing='0' class=''>");
                msghtml.push("<thead><tr><td>&nbsp;</td><td class='modal_march_table_cell'>" + g_js_strings.commonstr.nametx + "</td><td class='modal_march_table_cell'>" + g_js_strings.commonstr.quantity + "</td></tr></thead><tbody>");
                msghtml.push("<tr><td>");
                msghtml.push("<img src='../src/img/gold_30.png'>");
                msghtml.push("</td><td class='modal_march_table_cell'>");
                msghtml.push(g_js_strings.commonstr.gold);
                msghtml.push("</td><td class='modal_march_table_cell'>");
                msghtml.push(rslt.march["gold"] + "<br/>");
                msghtml.push("</tr>");
                for (var j = 1; j < 5; j++) {
                    switch (j) {
                    case 1:
                        image = "food";
                        break;
                    case 2:
                        image = "wood";
                        break;
                    case 3:
                        image = "stone";
                        break;
                    case 4:
                        image = "iron";
                        break
                    }
                    msghtml.push("<tr><td>");
                    msghtml.push("<img src='../src/img/" + image + "_30.png'>");
                    msghtml.push("</td><td class='modal_march_table_cell'>");
                    msghtml.push(resourceinfo["rec" + j]);
                    msghtml.push("</td><td class='modal_march_table_cell'>");
                    msghtml.push(rslt.march["resource" + j] + "<br/>");
                    msghtml.push("</tr>")
                }
                msghtml.push("</tbody></table>");
                msghtml.push("</div>");
                msghtml.push("</div>");
                msghtml.push("<br style='clear:both'>");
                msghtml.push("</div>");
                msghtml.push("<br style='clear:both'>");
                msghtml.push("<div class='modal_march_info_bottom'>&nbsp;</div>")
            }
            Modal.showModal(740, 400, 10, 10, g_js_strings.modaltitles.marchinformation, msghtml.join(""))
        },
        onFailure: function () {}
    })
};
var cm = cm || {};
cm.ReinforcedReportTemplateLoader = function (b) {
    var a = function () {
            cm.REINFORCED_REPORT_PRESENTATION_MODEL = g_js_strings.modal_messages_viewreinforcedreports;
            cm.REINFORCED_REPORT_PRESENTATION_MODEL.troops = g_js_strings.commonstr.troops;
            cm.REINFORCED_REPORT_PRESENTATION_MODEL.backtoreports = g_js_strings.modal_messages_viewreports_view.backtoreports;
            cm.REINFORCED_REPORT_RULE = {
                self: null,
                reinforced_troops: null,
                "reinforced_troops[*]": null
            };
            cm.ClientSideTemplate.getTemplate("jsonT/reinforcedReport.html", c, function () {})
        };
    var c = function (e) {
            var d = e.responseText.split("<!---->");
            if (d.length < 3) {
                cm.log.l("Reinforced report template is corrupted.")
            }
            cm.REINFORCED_REPORT_RULE.self = d[0];
            cm.REINFORCED_REPORT_RULE.reinforced_troops = d[1];
            cm.REINFORCED_REPORT_RULE["reinforced_troops[*]"] = d[2]
        };
    b(document).ready(a);
    return {}
}(jQuery);
cm.ReinforcedReportLoader = function (b) {
    var c = function (f, j, d, l, i, h, e, o, n, m, k) {
            var g = Object.clone(g_ajaxparams);
            g.rid = j;
            g.side = 0;
            new Ajax.Request(g_ajaxpath + "ajax/fetchReport.php" + g_ajaxsuffix, {
                method: "post",
                parameters: g,
                onSuccess: function (D) {
                    var y = D.responseText.evalJSON();
                    b("#modal_msg_list_pagination").hide();
                    if (undefined == y.unts) {
                        Modal.showAlert(printLocalError((y.error_code || null), (y.msg || null), (y.feedback || null)))
                    } else {
                        var t = null;
                        var A = [];
                        var w = null;
                        var B = 0;
                        var s = 0;
                        for (var z in y.unts) {
                            w = parseInt(z.substr(1));
                            B = parseInt(y.unts[z]);
                            A.push({
                                unitid: w,
                                unitname: unitcost["unt" + w][0],
                                reinforced: y.unts[z]
                            });
                            s += B
                        }
                        var x = {
                            date: y.mTimestamp,
                            city: {
                                id: d,
                                name: l,
                                number: i
                            },
                            member: {
                                id: h,
                                name: e,
                                city_id: o,
                                city_name: n,
                                cordx: m,
                                cordy: k
                            },
                            reinforced_troops: A,
                            stimgurl: stimgUrl,
                            total_troops: s,
                            march_id: null,
                            upkeep: 0
                        };
                        do {
                            x.march_id = y.mid;
                            var p = seed.queue_atkinc["m" + y.mid];
                            if (!p || p.marchStatus != 2) {
                                break
                            }
                            var q = 0;
                            for (var v = 0; v < A.length; ++v) {
                                cm.log.l(p["unit" + A[v].unitid + "Return"] + ", " + unitupkeeps[A[v].unitid]);
                                q += parseInt(p["unit" + A[v].unitid + "Return"]) * parseInt(unitupkeeps[A[v].unitid])
                            }
                            x.upkeep = q
                        } while (false);
                        var C = new cm.ReinforcedReportView(x);
                        var u = new cm.ReinforcedReportController(x, C);
                        var r = b("#modal_msg_list");
                        r.html("");
                        r.append(C.getHTMLElement());
                        seed.newReportCount = parseInt(seed.newReportCount) - 1;
                        messages_notify_bug()
                    }
                },
                onFailure: function () {}
            })
        };
    var a = function () {
            b("#modal_msg_body").live("viewReinforcedReport", c)
        };
    b(document).ready(a)
}(jQuery);
cm.ReinforcedReportView = function (a) {
    if (!cm.REINFORCED_REPORT_RULE.self || !cm.REINFORCED_REPORT_RULE.reinforced_troops || !cm.REINFORCED_REPORT_RULE["reinforced_troops[*]"]) {
        throw "Reinforced Report Template failed to load.";
        return
    }
    var d = null;
    var c = null;
    var e = null;
    var b = function (f) {
            a.PRESENTATION_MODEL = cm.REINFORCED_REPORT_PRESENTATION_MODEL;
            d = document.createElement("div");
            d.innerHTML = jsonT(a, cm.REINFORCED_REPORT_RULE);
            c = f(d).find(".blue20");
            e = f(d).find(".brown20");
            if (null == a.march_id) {
                e.addClass("unmet")
            }
        };
    this.getHTMLElement = function () {
        return d
    };
    this.getButtons = function () {
        return {
            back_to_report: c,
            send_troops_home: e
        }
    };
    b(jQuery)
};
cm.ReinforcedReportController = function (model, view) {
    var myself = this;
    var model_ = model;
    var view_ = view;
    var onBackToReportButtonClick_ = function (e) {
            loadPage_pagination("modal_msg_list_pagination", pageNavigatorModel.getCurrentPage(), "modal_messages_viewreports", pageNavigatorModel.getPageCount());
            location.replace("#mainbody")
        };
    var onSendTroopsHomeButtonClick_ = function (e) {
            Modal.confirm({
                title: g_js_strings.modal_messages_viewreinforcedreports.sendtroopshome,
                text: g_js_strings.modal_messages_viewreinforcedreports.sendtroopshomeconfirm.replace(/%1\$s/g, model_.total_troops).replace(/%2\$s/g, model_.member.name).replace(/%3\$s/g, model_.member.city_name),
                okay: onSendTroopsHomeConfirmButtonClick_
            })
        };
    var onSendTroopsHomeConfirmButtonClick_ = function (e) {
            var params = Object.clone(g_ajaxparams);
            params.mid = model.march_id;
            params.cid = model.city.id;
            params.fromUid = model.member.id;
            params.fromCid = model.member.city_id;
            new Ajax.Request(g_ajaxpath + "ajax/kickoutReinforcements.php" + g_ajaxsuffix, {
                method: "post",
                parameters: params,
                onSuccess: function (transport) {
                    var rslt = eval("(" + transport.responseText + ")");
                    if (rslt.ok) {
                        if (rslt.updateSeed) {
                            update_seed(rslt.updateSeed)
                        }
                        onTroopsSentHome_()
                    } else {
                        Modal.showAlert(printLocalError(rslt.error_code || null, rslt.msg || null, rslt.feedback || null))
                    }
                },
                onFailure: function () {}
            })
        };
    var onTroopsSentHome_ = function () {
            do {
                var march = seed.queue_atkinc["m" + model_.march_id];
                if (!march || march.marchStatus != 2) {
                    break
                }
                seed.resources["city" + model_.city.id].rec1[3] = parseInt(seed.resources["city" + model_.city.id].rec1[3]) - model_.upkeep;
                delete seed.queue_atkinc["m" + model_.march_id]
            } while (false);
            setTimeout(function () {
                Modal.showAlert(g_js_strings.kickout_allies.troopshome)
            }, 50)
        };
    var init_ = function () {
            var buttons = view_.getButtons();
            buttons.back_to_report.click(onBackToReportButtonClick_);
            if (model.march_id) {
                buttons.send_troops_home.click(onSendTroopsHomeButtonClick_)
            }
        };
    init_()
};
var cm = cm || {};
cm.ResearchSpeedupController = new function () {
    var c = function (g) {
            var f = Event.element(g);
            while (!f.name) {
                f = f.parentNode
            }
            var d = f.name;
            return d
        };
    var a = "Speedup_Research_Click";
    var b = "tch";
    this.queueClick = function (g, f) {
        var d = c(g);
        modal_speedup(b, d, undefined, f);
        cm.MixPanelTracker.track(a, {
            from: "queue"
        })
    };
    this.popupClick = function (f) {
        var d = c(f);
        modal_speedup(b, d);
        cm.MixPanelTracker.track(a, {
            from: "popup"
        })
    }
};
cm.ResearchController = function (b, a) {
    var c = this;
    var d = b;
    var e = a;
    this.researchButtonClicked = function (j) {
        var i = Event.findElement(j, "a");
        var f = i.name;
        var g = d.researches[f];
        var h = g.getHelped() ? 1 : 0;
        upg_tch(f, g.getCurrentLevel() + 1, h)
    };
    this.checkboxChanged = function (j) {
        var i = j.srcElement ? j.srcElement : j.target;
        var f = i.name;
        var g = cm.SpeedUpType.research;
        cm.ClientSideCookieManager.setCookie(g, i.checked);
        for (var f in d.researches) {
            var h = d.researches[f];
            h.setHelped(i.checked);
            e.getElement(f, "checkboxId").checked = h.getHelped();
            e.getElement(f, "timeTextId").innerHTML = h.getTime()
        }
    }
};
cm.ResearchModel = function (f) {
    var b = f.baseTime;
    var a = f.speedTime;
    var c = f.helped;
    var d = f.techId;
    var e = f.currentLevel;
    this.setHelped = function (g) {
        c = g
    };
    this.getHelped = function () {
        return c
    };
    this.getTime = function () {
        return c ? a : b
    };
    this.getCurrentLevel = function () {
        return e
    }
};
cm.ResearchCollectionModel = function (b) {
    var a = this;
    this.researches = {};
    for (techId in b) {
        var c = b[techId];
        c.techId = techId;
        this.researches[techId] = new cm.ResearchModel(c)
    }
};
cm.ResearchView = function (b, f) {
    var c = this;
    var a = b;
    var e = f;
    var d = function () {
            for (var g in e.researches) {
                var h = e.researches[g];
                c.getElement(g, "checkboxId").checked = h.getHelped();
                c.getElement(g, "timeTextId").innerHTML = h.getTime()
            }
        };
    this.getElement = function (h, g) {
        return $(a[h.toString()][g])
    };
    d()
};
cm.ResearchView.BUTTON_PREFIX = "techButton";
cm.ResearchView.TIMETEXT_PREFIX = "timeText";
cm.ResearchView.CHECKBOX_PREFIX = "techCheckbox";
var researchCollectionModel;
var researchController;
var researchView;
if (!window.Research) {
    var Research = new Object()
}
Research.Properties = {};
Research.Methods = {
    openAlchemy: function () {
        removeTooltip();
        var o = new Array();
        o.push("<div class='alchemymodal' id='alchemymodal'>");
        o.push("<div class='tabsbar'>");
        o.push("<a class='tab selected'><span>" + g_js_strings.modal_openAlchemy.resitms + "</span></a>");
        o.push("</div>");
        o.push("<div class='alchemywrap' id='alchemywrap'>");
        o.push("<div class='tableheader'><table cellpadding='0' cellspacing='0'><thead><tr><td class='tch'><div>" + g_js_strings.commonstr.technology + "</div></td><td class='res'><div>" + g_js_strings.commonstr.resource + "</div></td><td class='req'><div>" + g_js_strings.commonstr.required + "</div></td><td class='own'><div>" + g_js_strings.commonstr.youown + "</div></td></tr></thead></table></div>");
        o.push("<div class='techlist'>");
        var f = Object.keys(techcost);
        o.push("<table cellpadding='0' cellspacing='0'><tbody>");
        var B = 0;
        if (seed.queue_tch["city" + currentcityid].length > 0) {
            B = parseInt(seed.queue_tch["city" + currentcityid][0][0])
        }
        var b = new Array();
        var d = Object.keys(seed.queue_tch);
        for (var u = 0; u < d.length; u++) {
            if (d[u] != "city" + currentcityid) {
                if (seed.queue_tch[d[u]].length > 0) {
                    b.push(parseInt(seed.queue_tch[d[u]][0][0]))
                }
            }
        }
        var a = new Object();
        var z = new Object();
        var e = cm.SpeedUpType.research;
        var y = cm.ClientSideCookieManager.getCookie(e);
        var k = y == null || y == "true";
        for (var u = 0; u < f.length; u++) {
            var A = techcost[f[u]];
            var m = parseInt(f[u].split("tch")[1]);
            var w = parseInt(seed.tech[f[u]]);
            var x = checkreq("tch", m, (parseInt(seed.tech[f[u]]) + 1));
            var s = new Array();
            var l = new Array();
            var q = new Array();
            var p = true;
            if ((m == 6 && w < 10) || (m != 6 && w < 11)) {
                for (var t = 0; t < x[0].length; t++) {
                    s.push("<div>");
                    s.push(x[0][t]);
                    s.push("</div>");
                    if (x[3][t] == 0) {
                        p = false;
                        l.push("<div class='unmet'>")
                    } else {
                        l.push("<div class='met'>")
                    }
                    if (parseInt(x[1][t]) > 0) {
                        l.push(addCommas(parseInt(x[1][t])))
                    } else {
                        l.push(x[1][t])
                    }
                    l.push("</div>");
                    q.push("<div>");
                    if (parseInt(x[2][t]) > 0) {
                        q.push(addCommas(parseInt(x[2][t])))
                    } else {
                        q.push(x[2][t])
                    }
                    q.push("</div>")
                }
            } else {
                p = false
            }
            if (u % 2 == 1) {
                o.push("<tr class='stripe'>")
            } else {
                o.push("<tr>")
            }
            o.push("<td class='tchlist_img'><img src='");
            o.push(stimgUrl);
            o.push("img/tech/");
            o.push(m);
            o.push(".png'/></td>");
            o.push("<td class='tchlist_info'>");
            o.push("<div class='techhd'>");
            o.push(A[0]);
            o.push(" (" + g_js_strings.commonstr.lv + " ");
            o.push(seed.tech[f[u]]);
            o.push(")</div>");
            o.push("<div class='desc'>");
            o.push(techcost[f[u]][10]);
            o.push("</div>");
            var n = false;
            for (var t = 0; t < b.length; t++) {
                if (m == b[t]) {
                    n = true;
                    t = b.length
                }
            }
            if (n) {
                o.push("<div class='btns clearfix'><b>" + g_js_strings.modal_openAlchemy.currentlyres + "</b></div>")
            } else {
                if (parseInt(seed.tech[f[u]]) < 11 && B == 0 && p) {
                    var v = 0;
                    var c = seed.knights["city" + currentcityid];
                    if (c) {
                        c = c["knt" + seed.leaders["city" + currentcityid].intelligenceKnightId];
                        if (c) {
                            v = parseInt(c.intelligence);
                            v = ((parseInt(c.intelligenceBoostExpireUnixtime) - unixtime()) > 0) ? (v * 1.25) : v
                        }
                    }
                    var r = "";
                    var g = Math.pow(2, parseInt(seed.tech[f[u]]));
                    var h = parseInt(techcost[f[u]][7] * g * (1 / (1 + 0.005 * v)));
                    z[m.toString()] = {
                        buttonId: cm.ResearchView.BUTTON_PREFIX + m,
                        timeTextId: cm.ResearchView.TIMETEXT_PREFIX + m,
                        checkboxId: cm.ResearchView.CHECKBOX_PREFIX + m
                    };
                    a[m.toString()] = {
                        currentLevel: w,
                        baseTime: timestr(h),
                        speedTime: timestr(Math.max(h - 600, 0)),
                        helped: k
                    };
                    o.push("<div class='buttonRow'>");
                    o.push("<a class='buttonDown20' id='" + z[m.toString()].buttonId + "' name='" + m + "' onclick='researchController.researchButtonClicked(event);return false'>");
                    o.push("<span>" + g_js_strings.commonstr.research + "</span></a> ");
                    o.push("<span>" + g_js_strings.commonstr.time + ": <span class='timeText' id='" + z[m.toString()].timeTextId + "'>" + a[m.toString()].speedTime + "</span></span>");
                    o.push("</div>");
                    o.push("<div class='checkboxRow'>");
                    o.push("<div>");
                    o.push("<a class='helptext' onclick='Modal.showAlert(\"");
                    o.push(g_js_strings.modal_build.whatsthiscontent);
                    o.push("\");return false;'>");
                    o.push(g_js_strings.modal_build.whatsthis);
                    o.push("</a>");
                    o.push("</div>");
                    o.push("<div>");
                    o.push("<input id='" + z[m.toString()].checkboxId + "' name='" + m + "' type='checkbox' onclick='researchController.checkboxChanged(event)' />");
                    o.push("<label for='" + z[m.toString()].checkboxId + "'>");
                    o.push(g_js_strings.modal_build.sharemessagebuildorresearch);
                    o.push("</label>");
                    o.push("</div>");
                    o.push("</div>")
                } else {
                    if (m == B) {
                        o.push("<div class='btns clearfix'><a class='inlineButton20Red' name='" + m + "' onclick='cm.ResearchSpeedupController.popupClick(event)'>");
                        o.push("<span>" + g_js_strings.commonstr.speedup + "</span></a></div>");
                        o.push("<div class='timerem'>" + g_js_strings.commonstr.timeremaining + ": <span id='alchemymodal_tch");
                        o.push(m);
                        o.push("_queue_timeleft'>");
                        o.push(timestr(parseInt(seed.queue_tch["city" + currentcityid][0][3]) - unixtime()));
                        o.push("</span></b></div>");
                        if (getTechHelpEligible(m, currentcityid) == false) {
                            o.push("<div class='btns clearfix'><a class='button20' onclick='tch_gethelp(");
                            o.push(m);
                            o.push(");return false;'><span>" + g_js_strings.modal_quests.askhelp + "</span></a>");
                            o.push("<a class='helptext' onclick='Modal.showAlert(\"");
                            o.push(g_js_strings.modal_build.whatsthiscontent);
                            o.push("\");return false;'>");
                            o.push(g_js_strings.modal_build.whatsthis);
                            o.push("</a>");
                            o.push("</div>")
                        }
                    } else {
                        if (!p) {
                            if ((m == 6 && w < 10) || (m != 6 && w < 11)) {
                                o.push("<div class='btns clearfix'><b class='unmet'>" + g_js_strings.modal_openAlchemy.reqnotmet + "</b></div>")
                            } else {
                                o.push("<div class='btns clearfix'><b class='maxlv'>" + g_js_strings.modal_openAlchemy.maxres + "</b></div>")
                            }
                        }
                    }
                }
            }
            o.push("</td>");
            o.push("<td class='tchlist_res'>");
            o.push(s.join(""));
            o.push("</td>");
            o.push("<td class='tchlist_req'>");
            o.push(l.join(""));
            o.push("</td>");
            o.push("<td class='tchlist_own'>");
            o.push(q.join(""));
            o.push("</td>");
            o.push("</tr>")
        }
        o.push("</tbody></table>");
        o.push("</div>");
        o.push("</div>");
        o.push("</div>");
        $("modal_build_content").innerHTML = o.join("");
        researchCollectionModel = new cm.ResearchCollectionModel(a);
        researchView = new cm.ResearchView(z, researchCollectionModel);
        researchController = new cm.ResearchController(researchCollectionModel, researchView)
    },
    shareBtnTooltip: function (a) {
        var b = "<div>" + g_js_strings.modal_openAlchemy.reshelp_tooltip + "</div>";
        Tooltip.show(a, b)
    }
};
Object.extend(Research, Research.Methods);
Object.extend(Research, Research.Properties);

function modal_openAlchemy() {
    Research.openAlchemy()
};
cm.LevelUpReward = function () {
    cm.CustomEventDispatcher.call(this);
    var b = this;
    var c = function (d) {
            var e = new cm.RewardEvent(cm.RewardEvent.SUCCESS);
            b.dispatchCustomEvent(e)
        };
    var a = function () {
            var d = new cm.RewardEvent(cm.RewardEvent.FAILURE);
            b.dispatchCustomEvent(d)
        };
    this.claim = function (d) {
        var e = Object.clone(g_ajaxparams);
        e.cid = currentcityid;
        e.qid = d;
        new Ajax.Request(g_ajaxpath + "ajax/quest.php" + g_ajaxsuffix, {
            method: "post",
            parameters: e,
            onSuccess: function (g) {
                var f = g.responseText.evalJSON();
                if (f.ok) {
                    c(d);
                    update_seed(f.updateSeed)
                } else {
                    a()
                }
            },
            onFailure: function () {
                a()
            }
        })
    }
};
cm.OOP.inherits(cm.LevelUpReward, cm.CustomEventDispatcher);
var cm = cm || {};
cm.BaseItemService = function (c) {
    cm.CustomEventDispatcher.call(this);
    var b = this;
    var a;
    this.buyItem = function () {
        var g = a.getId();
        var f = Object.clone(g_ajaxparams);
        f.iid = g;
        f.original_quantity = seed.items["i" + g];
        var e = new cm.Profiler("ResponseTime", "buyItem.php");
        new Ajax.Request(g_ajaxpath + "ajax/buyItem.php" + g_ajaxsuffix, {
            method: "post",
            parameters: f,
            onSuccess: function (h) {
                e.stop();
                var i = new cm.ItemServiceEvent(cm.ItemServiceEvent.BUY_SUCCESS);
                i.setTarget(b);
                i.setResponse(h);
                b.dispatchCustomEvent(i)
            },
            onFailure: function () {
                e.stop();
                var h = new cm.ItemServiceEvent(cm.ItemServiceEvent.BUY_FAILED);
                b.DispatchCustomEvent(h)
            }
        })
    };
    var d = function () {
            if (c) {
                a = c
            }
        };
    d()
};
cm.OOP.inherits(cm.BaseItemService, cm.CustomEventDispatcher);
cm.CombatBoostItemService = function (a) {
    cm.BaseItemService.call(this, a);
    var c = this;
    var b;
    this.applyItem = function () {
        var e = Object.clone(g_ajaxparams);
        e.iid = b.getId();
        e.cid = currentcityid;
        new Ajax.Request(g_ajaxpath + "ajax/boostCombat.php" + g_ajaxsuffix, {
            method: "post",
            parameters: e,
            onSuccess: function (f) {
                var g = new cm.ItemServiceEvent(cm.ItemServiceEvent.APPLY_SUCCESS);
                g.setTarget(c);
                g.setResponse(f);
                c.dispatchCustomEvent(g)
            },
            onFailure: function () {
                var f = new cm.ItemServiceEvent(cm.ItemServiceEvent.APPLY_FAILED);
                c.DispatchCustomEvent(f)
            }
        })
    };
    var d = function () {
            b = a
        };
    d()
};
cm.OOP.inherits(cm.CombatBoostItemService, cm.BaseItemService);
cm.ItemServiceEvent = function (b) {
    cm.CustomEvent.call(this, b);
    var a;
    this.setResponse = function (c) {
        a = c
    };
    this.getResponse = function () {
        return a
    }
};
cm.OOP.inherits(cm.ItemServiceEvent, cm.CustomEvent);
cm.ItemServiceEvent.BUY_SUCCESS = "buySuccess";
cm.ItemServiceEvent.BUY_FAILED = "buyFailed";
cm.ItemServiceEvent.APPLY_SUCCESS = "applySuccess";
cm.ItemServiceEvent.APPLY_FAILED = "applyFailed";
cm.ServiceEvent = function (b) {
    cm.CustomEvent.call(this, b);
    var a;
    this.setResponse = function (c) {
        a = c
    };
    this.getResponse = function () {
        return a
    }
};
cm.OOP.inherits(cm.ItemServiceEvent, cm.CustomEvent);
cm.ServiceEvent.SUCCESS = "success";
cm.ServiceEvent.FAILED = "failed";
cm.PaymentXMLService = function (b) {
    cm.BaseItemService.call(this);
    var d = this;
    var e = b;
    var a;
    var c;
    this.getResult = function () {
        return c
    };
    this.getVersion = function () {
        return e
    };
    this.hasExpired = function () {
        var f = !c || !c.ok;
        if (!f && e == 2) {
            f = unixtime() > a
        }
        return f
    };
    this.makeRequest = function (g) {
        var f = new cm.Profiler("ResponseTime", "paymentXml.php");
        var i = Object.clone(g_ajaxparams);
        i.v = e;
        i.platform = seed.platform.type;
        for (key in g) {
            var h = g[key];
            i[key] = h
        }
        new Ajax.Request(g_ajaxpath + "ajax/paymentXml.php", {
            method: "post",
            parameters: i,
            onSuccess: function (j) {
                f.stop();
                a = unixtime() + 4 * 60;
                c = j.responseText.evalJSON(true);
                var k = new cm.ServiceEvent(cm.ServiceEvent.SUCCESS);
                k.setTarget(d);
                k.setResponse(j);
                d.dispatchCustomEvent(k)
            },
            onFailure: function () {
                f.stop();
                var j = new cm.ServiceEvent(cm.ServiceEvent.FAILED);
                d.DispatchCustomEvent(j)
            }
        })
    }
};
cm.OOP.inherits(cm.PaymentXMLService, cm.BaseItemService);
cm.BootLoader.add(function () {
    var a = 1;
    if (!window.g_devPaymentVersion) {
        a = g_paymentVersion
    } else {
        a = g_devPaymentVersion
    }
    var b = {
        v: a
    };
    cm.PreloadedPaymentXMLService = new cm.PaymentXMLService(a)
});
cm = cm || {};
cm.ShopController = function ($) {
    var buy = function (itemId) {
            var item = ksoItems[itemId],
                gems = Number(seed.player.gems),
                isCourtItem;
            if (item.price > gems) {
                cm.ShopView.openGetMoreGemsModal()
            } else {
                var params = Object.clone(g_ajaxparams);
                params.iid = item.id;
                if (item.isOnSale) {
                    params.sale = 1
                }
                var profiler = new cm.Profiler("ResponseTime", "buyItem.php");
                new Ajax.Request(g_ajaxpath + "ajax/buyItem.php" + g_ajaxsuffix, {
                    method: "post",
                    parameters: params,
                    onSuccess: function (transport) {
                        var rslt = eval("(" + transport.responseText + ")");
                        if (rslt.ok) {
                            seed.player.gems = Number(seed.player.gems) - item.price;
                            var kso1 = seed.items["i" + item.id];
                            if (seed.items["i" + item.id]) {
                                seed.items["i" + item.id] = Number(seed.items["i" + item.id]) + 1
                            } else {
                                seed.items["i" + item.id] = 1
                            }
                            var kso2 = seed.items["i" + item.id];
                            item.add();
                            $("#shopGemQuantity").text(seed.player.gems);
                            var text = g_js_strings.modal_shop_buy.purchasealert.replace("%1$s", item.name);
                            $("#shopMessage").text(text);
                            $("#shopMessage").show();
                            $("#item" + item.id + "Count").text(item.count);
                            if (item.category == 6) {
                                cm.ShopView.removeItemFromShop(item.id)
                            }
                            if ((item.id >= 1202 && item.id <= 1210) || (item.id >= 700 && item.id <= 900) || item.id == 10018) {
                                if ($(".item").length === 0) {
                                    cm.ShopView.goPrevPage()
                                } else {
                                    cm.ShopView.organizeItems()
                                }
                                if (item.id == 10018) {
                                    common_postToProfile("20", Object.clone(template_data_20), Object.clone(actionlink_data_20), continuation_20, new Array())
                                }
                            }
                            if (item.id == 2) {
                                if (seed.player.spentFiveGems && seed.player.spentFiveGems == 0) {
                                    seed.player.spentFiveGems = 1
                                }
                            }
                            cm.MixPanelTracker.track("store_purchase", {
                                item: itemlist["i" + itemId].name,
                                cost: itemcost,
                                usr_gen: seed.player.g,
                                usr_byr: seed.player.y,
                                usr_ttl: titlenames[seed.player.title],
                                distinct_id: tvuid
                            })
                        }
                    }
                })
            }
        };
    var init_ = function () {};
    init_();
    return {
        buy: buy
    }
}(jQuery);
cm = cm || {};
cm.ShopView = function ($) {
    var tab0 = [],
        tab1 = [],
        tab2 = [],
        tab3 = [],
        tab4 = [],
        tab5 = [],
        tab6 = [],
        currentTab, currentPage, itemsPerPage = 9,
        shopOrder, featuredInfo, featuredOrder, lastTimeChecked = 0;
    var openShop = function (currentTab) {
            currentTab = currentTab || 0;
            currentPage = 1;
            var title = g_js_strings.modaltitles.shop,
                bannerMessage, bannerHTML, className;
            if (cm.WorldSettings.hasKeyValuePair("MIGRATION1", "true")) {
                bannerMessage = g_js_strings.modal_shop_buy_banner.banner_exclusiveitemsonkabam;
                if (seed.platform.type == "facebook") {
                    bannerHTML = "<div class='msg'><a href='" + seed.platform.url + "' target='_top'>" + bannerMessage + "</a></div>"
                } else {
                    bannerHTML = "<div class='msg'>" + bannerMessage + "</div>"
                }
                className = "new"
            } else {
                bannerMessage = "";
                bannerHTML = "<div class='msg'>" + bannerMessage + "</div>";
                className = "old"
            }
            var template = cm.Template.renderTemplate("Shop", "openShop", {
                gemsString: g_js_strings.commonstr.gems,
                getmoregemsString: g_js_strings.modaltitles.getmoregems,
                getmoreitemsString: g_js_strings.commonstr.inventory,
                featuredString: g_js_strings.commonstr.featured,
                generalString: g_js_strings.commonstr.general,
                speedupString: g_js_strings.commonstr.speedup,
                combatString: g_js_strings.commonstr.combat,
                resourcesString: g_js_strings.commonstr.resources,
                chestString: g_js_strings.commonstr.chest,
                courtString: g_js_strings.commonstr.court,
                type: seed.platform.type,
                url: seed.platform.type == "facebook" ? seed.platform.url : "#",
                gemsAmount: seed.player.gems,
                bannerHTML: bannerHTML,
                className: className
            });
            Modal.showModal(740, 400, 10, 10, title, template);
            if (cm.WorldSettings.hasKeyValuePair("MIGRATION1", "true")) {
                $("#shopBanner").addClass("fancy_banner")
            }
            var params = Object.clone(g_ajaxparams);
            new Ajax.Request(g_ajaxpath + "ajax/showShop.php" + g_ajaxsuffix, {
                method: "post",
                parameters: params,
                onSuccess: function (transport) {
                    var rslt = eval("(" + transport.responseText + ")");
                    if (rslt.ok) {
                        shopOrder = rslt.data.shopOrder;
                        featuredOrder = rslt.data.featuredOrder;
                        featuredInfo = rslt.data.featureInfo;
                        lastTimeChecked = unixtime();
                        openTab(currentTab)
                    }
                }
            })
        };
    var organizeItems = function () {
            var item;
            tab0 = [];
            tab1 = [];
            tab2 = [];
            tab3 = [];
            tab4 = [];
            tab5 = [];
            tab6 = [];
            var featuredIndex, item, newEnd, saleStart, saleEnd, now = unixtime();
            $.each(shopOrder, function (key, item) {
                item = ksoItems[Number(item)];
                if (item) {
                    item.featuredInfo = featuredInfo["i" + item.id];
                    item.setFeatured();
                    if (item.isFeatured) {
                        if (!(item.category === 6 && item.count > 0)) {
                            newEnd = item.featuredInfo[0];
                            saleStart = item.featuredInfo[1];
                            saleEnd = item.featuredInfo[2];
                            if ((newEnd && newEnd > now) || (saleStart && saleStart < now && saleEnd > now)) {
                                featuredIndex = featuredOrder.indexOf(item.id);
                                tab0[featuredIndex] = item.id
                            }
                        }
                    }
                    switch (item.category) {
                    case 1:
                        tab1.push(item.id);
                        break;
                    case 2:
                        tab2.push(item.id);
                        break;
                    case 3:
                        tab3.push(item.id);
                        break;
                    case 4:
                        tab4.push(item.id);
                        break;
                    case 5:
                        tab5.push(item.id);
                        break;
                    case 6:
                        if (item.count === 0) {
                            tab6.push(item.id)
                        }
                        break;
                    default:
                        tab1.push(item.id);
                        break
                    }
                }
            });
            injectItems()
        };
    var openTab = function (tabIndex) {
            $("#shopTabs").find("a").attr("disabled", true);
            var link = $("#shopTabs").find("a")[tabIndex];
            $(link).attr("onClick", "");
            $("#shopNextPageButton").attr("disabled", true);
            $("#shopNextPageButton").attr("onClick", "");
            $("#shopPrevPageButton").attr("disabled", true);
            $("#shopPrevPageButton").attr("onClick", "");
            currentPage = 1;
            $("div#shopMessage").hide();
            $("li#shopTab" + currentTab).removeClass("selected");
            currentTab = Number(tabIndex);
            $("li#shopTab" + currentTab).addClass("selected");
            organizeItems()
        };
    var injectItems = function () {
            var currentItems, sliceStart, sliceEnd;
            switch (currentTab) {
            case 0:
                currentItems = tab0;
                break;
            case 1:
                currentItems = tab1;
                break;
            case 2:
                currentItems = tab2;
                break;
            case 3:
                currentItems = tab3;
                break;
            case 4:
                currentItems = tab4;
                break;
            case 5:
                currentItems = tab5;
                break;
            case 6:
                currentItems = tab6;
                break;
            default:
                currentItems = tab1;
                break
            }
            if (currentPage < 0) {
                currentPage = 1
            }
            controlPaginationButtons(currentItems.length);
            controlPaginationList(currentItems.length);
            sliceStart = (currentPage - 1) * itemsPerPage;
            sliceEnd = currentPage * itemsPerPage;
            currentItems = currentItems.slice(sliceStart, sliceEnd);
            $("#shopItemsContainerList").empty();
            var costContent, item, className, templateId, templateArray = [];
            $.each(currentItems, function (key, item) {
                item = ksoItems[item];
                costContent = [];
                if (item.isOnSale) {
                    costContent.push("<span class='salePrice'>");
                    costContent.push(item.price);
                    costContent.push("</span>");
                    costContent.push("<span class='defaultPrice'>");
                    costContent.push(item.defaultPrice);
                    costContent.push("</span>")
                } else {
                    costContent.push("<span class='price'>");
                    costContent.push(item.price);
                    costContent.push("</span>")
                }
                if (item.isOnSale) {
                    className = "sale"
                } else {
                    if (item.isFeatured) {
                        className = "featured"
                    } else {
                        className = "normal"
                    }
                }
                var template = cm.Template.renderTemplate("Shop", "shopItem", {
                    id: item.id,
                    description: item.description,
                    name: item.name,
                    className: className,
                    costContent: costContent.join(""),
                    count: item.count,
                    ownedString: g_js_strings.commonstr.owned,
                    buyString: g_js_strings.commonstr.buy
                });
                templateArray.push(template)
            });
            $("#shopItemsContainerList").append(templateArray.join(""))
        };
    var controlPaginationList = function (totalItems) {
            var totalPages = Math.ceil(totalItems / itemsPerPage),
                html = [],
                liHtml = [];
            if (totalPages != 1) {
                for (var i = 1; i <= totalPages; ++i) {
                    liHtml.push("<li class='page'>");
                    if (i == currentPage) {
                        liHtml.push("<span class='current'>" + i + "</span>")
                    } else {
                        liHtml.push("<span onclick='cm.ShopView.goToPage(" + i + ");'>" + i + "</span>")
                    }
                    liHtml.push("</li>")
                }
                if ($("#shopPaginationList").length != 0) {
                    $("#shopPaginationList").empty();
                    $("#shopPaginationList").append(liHtml.join(""))
                } else {
                    html.push("<ul id='shopPaginationList'>");
                    html.push(liHtml.join(""));
                    html.push("</ul>");
                    $("#shopBanner").append(html.join(""))
                }
            } else {
                $("#shopPaginationList").remove()
            }
        };
    var controlPaginationButtons = function (totalItems) {
            var totalPages = Math.ceil(totalItems / itemsPerPage),
                prevButton = $("a#shopPrevPageButton"),
                nextButton = $("a#shopNextPageButton").hide();
            if (totalPages > 1) {
                if (currentPage > 1) {
                    if ((currentPage < totalPages) && (currentPage > 1)) {
                        prevButton.show();
                        nextButton.show()
                    } else {
                        if (currentPage == totalPages) {
                            prevButton.show();
                            nextButton.hide()
                        } else {
                            prevButton.hide();
                            nextButton.show()
                        }
                    }
                } else {
                    prevButton.hide();
                    nextButton.show()
                }
            } else {
                prevButton.hide();
                nextButton.hide()
            }
            $("#shopNextPageButton").attr("disabled", false);
            $("#shopNextPageButton").attr("onClick", "cm.ShopView.goNextPage();");
            $("#shopPrevPageButton").attr("disabled", false);
            $("#shopPrevPageButton").attr("onClick", "cm.ShopView.goPrevPage();");
            var links = $("#shopTabs").find("a");
            $.each(links, function (index, link) {
                if (currentTab == index) {
                    $(link).attr("disabled", true);
                    $(link).attr("onClick", "")
                } else {
                    $(link).attr("disabled", false);
                    $(link).attr("onClick", "cm.ShopView.openTab(" + index + ");")
                }
            })
        };
    var goNextPage = function () {
            $("#shopNextPageButton").attr("disabled", true);
            $("#shopNextPageButton").attr("onClick", "");
            $("#shopPrevPageButton").attr("disabled", true);
            $("#shopPrevPageButton").attr("onClick", "");
            ++currentPage;
            organizeItems()
        };
    var goPrevPage = function () {
            $("#shopNextPageButton").attr("disabled", true);
            $("#shopNextPageButton").attr("onClick", "");
            $("#shopPrevPageButton").attr("disabled", true);
            $("#shopPrevPageButton").attr("onClick", "");
            --currentPage;
            organizeItems()
        };
    var goToPage = function (pageNumber) {
            currentPage = pageNumber;
            organizeItems()
        };
    var showItemTooltip = function (tgt, evt) {
            showTooltip(tgt.getAttribute("name"), tgt, evt, "shopItemsContainer")
        };
    var removeItemFromShop = function (itemId) {
            var seedCount = seed.items["i" + itemId],
                ksoItemsCount = ksoItems[itemId].count;
            if (seedCount >= 1 && ksoItemsCount >= 1) {
                $("#item" + itemId).remove()
            } else {
                $("#item" + itemId + "Count").text(seed.items["i" + itemId].toString());
                $("#item" + itemId + "Count").text(ksoItems[itemId].count.toString())
            }
            if ($(".item").length === 0) {
                goPrevPage()
            } else {
                organizeItems()
            }
        };
    var openGetMoreGemsModal = function () {
            var title = g_js_strings.modaltitles.getmoregems;
            var template = cm.Template.renderTemplate("Shop", "getMoreGems", {
                content1: g_js_strings.modal_shop_buy_notenough.notenoughgems,
                content2: g_js_strings.modal_shop_buy_notenough.thatsokay,
                getMoreGemsString: g_js_strings.modal_shop_buy_notenough.getmoregems
            });
            Modal.showModal(500, 400, 130, 10, title, template)
        };
    var init_ = function () {};
    init_();
    return {
        showItemTooltip: showItemTooltip,
        openShop: openShop,
        openTab: openTab,
        goNextPage: goNextPage,
        goPrevPage: goPrevPage,
        goToPage: goToPage,
        openGetMoreGemsModal: openGetMoreGemsModal,
        removeItemFromShop: removeItemFromShop
    }
}(jQuery);

function modal_speedup(type, typeid, slotid, subjectCurrentlyBuilding) {
    var params = Object.clone(g_ajaxparams);
    new Ajax.Request(g_ajaxpath + "ajax/showShop.php" + g_ajaxsuffix, {
        method: "post",
        parameters: params,
        onSuccess: function (transport) {
            var rslt = eval("(" + transport.responseText + ")");
            if (rslt.ok) {
                do_modal_speedup(type, typeid, slotid, subjectCurrentlyBuilding, rslt.data.featureInfo)
            } else {
                Modal.showAlert(printLocalError((rslt.error_code || null), (rslt.msg || null), (rslt.feedback || null)))
            }
        },
        onFailure: function () {}
    })
}
function do_modal_speedup(d, a, b, c, s) {
    cm.speedUpModalTimer.saveLastSpeedUpModal({
        type: d,
        typeid: a,
        slotid: b,
        subjectCurrentlyBuilding: c
    });
    var m = new Array();
    update_queue();
    var p = cm.speedUpModalTimer.getTimeLeft(d);
    var q = cm.intelligentOrdering.get(seed.items, p);
    var h = false;
    cm.speedUpModalTimer.open(d);
    if (d == "bdg") {
        h = getBuildHelpEligible(a, currentcityid)
    } else {
        if (d == "tch") {
            h = getTechHelpEligible(a, currentcityid)
        } else {
            if (("frt" == d) || d.match(/^m\d+,\d+$/)) {
                h = true
            }
        }
    }
    m.push("<div id='modal_speedup'>");
    m.push("<div class='itemlist'><div class='speedUpModalTimeLeft'></div>");
    var n = 0;
    for (n = 0; n < q.length; n++) {
        q[n] = q[n].substr(1);
        addHelp(n, h, m, d, a);
        var o = (parseInt(seed.items["i" + q[n]]) > 0) ? parseInt(seed.items["i" + q[n]]) : 0;
        m.push("<div class='item " + (n == 0 ? "instantFinish" : "") + " clearfix'>");
        m.push("<img class='itemIcon' src='");
        m.push(stimgUrl);
        m.push("img/items/70/");
        m.push(q[n]);
        m.push(".jpg'/>");
        m.push("<div class='iteminfo'>");
        m.push("<div class='itemhd'>");
        m.push(itemlist["i" + q[n]].name);
        var k = 'modal_speedup_apply("' + d + '","' + q[n] + '", ' + a + ");return false;";
        var t = o == 0 ? "return false;" : k;
        var g = o == 0 ? "greyedout" : "";
        if (n == 0 && p < (4 * 24 * 3600)) {
            m.push("<a  class='button20 " + g + "' onclick='" + t + "'><span>" + (n == 0 ? g_js_strings.commonstr.instantfinish : g_js_strings.commonstr.apply) + "</span></a></div>")
        } else {
            m.push("<a  class='button20 " + g + "' onclick='" + t + "'><span>" + g_js_strings.commonstr.apply + "</span></a></div>")
        }
        m.push("<div class='itemdesc'>");
        m.push(itemlist["i" + q[n]].description);
        m.push("</div>");
        m.push("<div class='itemown'>" + g_js_strings.commonstr.youown + ": ");
        m.push(o);
        m.push("</div>");
        m.push("</div>" + price("i" + q[n], s));
        m.push("</div>")
    }
    if (q.length == 0 || q.length == 1) {
        n = 1
    }
    addHelp(n, h, m, d, a);
    m.push("</div><a class='buyMoreSpeedUps' onclick='cm.speedUpModalTimer.goToSpeedups();'>Buy More Speed Ups</a>");
    m.push("</div>");
    var j = "";
    if (c) {
        j = c
    } else {
        if (b) {
            var f = getMsg(b);
            j = f.substr(f.indexOf(">") + 1);
            j = j.substr(0, j.indexOf(")") + 1)
        }
    }
    var l = jQuery("#modal_speedup");
    if (l.length) {
        try {
            l.parents(".modalInner").find(".modalTitle").html(j + " " + g_js_strings.modaltitles.speedup);
            l.replaceWith(m.join(""));
            return
        } catch (r) {}
        Modal.hideModalAll()
    }
    Modal.show({
        winWidth: 400,
        winHeight: 400,
        winLeft: 180,
        winTop: 10,
        winTitle: j + " " + g_js_strings.modaltitles.speedup,
        winContent: m.join("")
    })
}
function addHelp(c, e, a, d, b) {
    if (c == 1 && e == false && d != "trn") {
        a.push("<div class='item askForHelp clearfix'>");
        a.push("<img class='itemIcon' src='");
        a.push(stimgUrl);
        a.push("img/war_horn.png'/>");
        a.push("<div class='iteminfo'>");
        a.push("<div class='itemhd'>" + g_js_strings.modal_speedup.askhelp + "<a  class='button20' onclick='");
        if (d == "bdg") {
            a.push("build_gethelp(");
            a.push(b);
            a.push(");Modal.hideModalAll();")
        } else {
            if (d == "tch") {
                a.push("tch_gethelp(");
                a.push(b);
                a.push(");")
            }
        }
        a.push("return false;'><span>" + g_js_strings.commonstr.sharetowall + "</span></a></div>");
        a.push("<div class='itemdesc'>" + g_js_strings.modal_speedup.buildresearchaskhelpdesc + "</div>");
        a.push("</div>");
        a.push("</div><div style='height: 77px;'></div>")
    }
}
function price(g, c) {
    var h = itemlist[g].price;
    var e = h;
    var a = false;
    if (c[g]) {
        var d = c[g];
        var f = unixtime();
        var j = parseInt(d[1]);
        var i = parseInt(d[2]);
        var b = parseInt(d[3]);
        if (j > 0 && j < f && i > 0 && i > f) {
            a = true;
            e = b
        }
    }
    return "<div class='buyitem'><a onclick='modal_shop_buy(\"" + g.substr(1) + '",' + e + ", \"redisplaySpeedUpModal\", event);return false;' class='buttonGreen20'><span>" + g_js_strings.commonstr.buyitem + "</span></a><div class='gemprice" + (a ? " onsale" : "") + "'>" + (a ? ("<span class='saleprice'>" + b + "</span>") : "") + "<span class='oldprice' id='modal_itemprice_" + g + "'>" + h + "</span><img  class='smallGreenGem' src='" + stimgUrl + "img/gem.png'/></div></div>"
}
function modal_speedup_getmore() {
    Modal.hideModalAll();
    modal_shop(3)
}
function modal_speedup_market(d, a, c) {
    var b = new Array();
    b.push("<div id='modal_speedup_market'>");
    b.push("<div class='itemlist'>");
    var e = (parseInt(seed.items["i" + 49]) > 0) ? parseInt(seed.items["i" + 49]) : 0;
    b.push("<div class='item clearfix'>");
    b.push("<img src='");
    b.push(stimgUrl);
    b.push("img/items/70/");
    b.push("49");
    b.push(".jpg'/>");
    b.push("<div class='iteminfo'>");
    b.push("<div class='itemhd'>");
    b.push(itemlist["i" + 49].name);
    if (e > 0) {
        b.push("<a  class='button20' onclick='modal_speedup_market_apply(");
        b.push(d + "," + a + "," + c);
        b.push(");return false;'><span>" + g_js_strings.commonstr.apply + "</span></a></div>")
    } else {
        b.push("<a  class='button20' onclick='Modal.hideModalAll();modal_shop(3);return false;'><span>" + g_js_strings.commonstr.getmore + "</span></a></div>")
    }
    b.push("<div class='itemdesc'>");
    b.push(itemlist["i" + 49].description);
    b.push("</div>");
    b.push("<div class='itemown'>" + g_js_strings.commonstr.youown + ": ");
    b.push(e);
    b.push(". <a  onclick='Modal.hideModalAll();modal_shop(3);return false;'>" + g_js_strings.commonstr.getmore + "</a></div>");
    b.push("</div>");
    b.push("</div>");
    b.push("</div>");
    b.push("</div>");
    Modal.showModal(400, 400, 180, 150, g_js_strings.modaltitles.speedup, b.join(""))
}
function modal_speedup_market_apply(tkey, ind, mktid) {
    var params = Object.clone(g_ajaxparams);
    params.mid = mktid;
    params.cid = currentcityid;
    params.iid = 49;
    new Ajax.Request(g_ajaxpath + "ajax/speedupTrade.php" + g_ajaxsuffix, {
        method: "post",
        parameters: params,
        onSuccess: function (transport) {
            var rslt = eval("(" + transport.responseText + ")");
            if (rslt.ok) {
                seed.items.i49 = parseInt(seed.items.i49) - 1;
                ksoItems[49].subtract();
                Modal.hideModal();
                if (seed.queue_mkt["city" + currentcityid][tkey][ind]) {
                    seed.queue_mkt["city" + currentcityid][tkey][ind].eventUnixTime = "1"
                }
            } else {
                Modal.showAlert(printLocalError((rslt.error_code || null), (rslt.msg || null), (rslt.feedback || null)))
            }
        },
        onFailure: function () {}
    })
}
function modal_speedup_apply(type, itemid, typeid) {
    var params = Object.clone(g_ajaxparams);
    params.cid = currentcityid;
    params.iid = itemid;
    var phppg = "";
    if (type == "bdg") {
        params.bid = typeid;
        phppg = "speedupConstruction"
    } else {
        if (type == "tch") {
            params.tid = typeid;
            phppg = "speedupResearch"
        } else {
            if (type == "trn") {
                params.uid = typeid;
                phppg = "speedupTraining"
            } else {
                if (type == "frt") {
                    params.fid = typeid;
                    phppg = "speedupFortify"
                } else {
                    if (type == "mkt") {
                        params.mid = typeid;
                        phppg = "speedupTrade"
                    } else {
                        if (type.match(/^m\d+,\d+$/)) {
                            var march_info = type.split(",");
                            params.mid = type.split(",")[0].split("m")[1];
                            phppg = "speedupMarch"
                        } else {
                            return
                        }
                    }
                }
            }
        }
    }
    new Ajax.Request(g_ajaxpath + "ajax/" + phppg + ".php" + g_ajaxsuffix, {
        method: "post",
        parameters: params,
        onSuccess: function (message) {
            var rslt = eval("(" + message.responseText + ")");
            if (rslt.ok) {
                var reduced = cm.intelligentOrdering.getReduceTime(itemid);
                seed.items["i" + itemid] = parseInt(seed.items["i" + itemid]) - 1;
                ksoItems[itemid].subtract();
                var qloc = 0;
                var timered = 0;
                var timeredarr = [60, 900, 3600, 9000, 28800, 54000, 86400, 216000, 0, 345600];
                if (type == "bdg") {
                    for (var i = 0; i < seed.queue_con["city" + currentcityid].length; i++) {
                        if (parseInt(seed.queue_con["city" + currentcityid][i][0]) == parseInt(typeid)) {
                            qloc = i;
                            break
                        }
                    }
                    var utstart = parseInt(seed.queue_con["city" + currentcityid][qloc][3]);
                    var uteta = parseInt(seed.queue_con["city" + currentcityid][qloc][4])
                } else {
                    if (type == "tch") {
                        var utstart = parseInt(seed.queue_tch["city" + currentcityid][0][2]);
                        var uteta = parseInt(seed.queue_tch["city" + currentcityid][0][3])
                    } else {
                        if (type == "trn") {
                            seed.queue_unt["city" + currentcityid][0][2] -= reduced;
                            seed.queue_unt["city" + currentcityid][0][3] -= reduced;
                            if (rslt.updateCityUnits) {
                                update_cityUnits(rslt.updateCityUnits)
                            }
                        } else {
                            if ("frt" == type) {
                                seed.queue_fort["city" + currentcityid][0][2] -= reduced;
                                seed.queue_fort["city" + currentcityid][0][3] -= reduced
                            }
                        }
                    }
                }
                timered = timeredarr[parseInt(itemid) - 1];
                if (type == "bdg") {
                    seed.queue_con["city" + currentcityid][qloc][3] = utstart - timered;
                    seed.queue_con["city" + currentcityid][qloc][4] = uteta - timered
                } else {
                    if (type == "tch") {
                        seed.queue_tch["city" + currentcityid][0][2] = utstart - timered;
                        seed.queue_tch["city" + currentcityid][0][3] = uteta - timered
                    } else {
                        if (type.match(/^m\d+,\d+$/)) {
                            var march = seed.queue_atkp["city" + currentcityid]["m" + params.mid];
                            march.destinationUnixTime = rslt.destinationUnixTime;
                            march.marchUnixTime = rslt.marchUnixTime;
                            march.returnUnixTime = rslt.returnUnixTime
                        }
                    }
                }
                if (rslt.updateSeed) {
                    update_seed(rslt.updateSeed)
                }
                if (seed.player.usedSpeedup && seed.player.usedSpeedup == 0) {
                    seed.player.usedSpeedup = 1
                }
                var lastHourGlassFinished = reduced > cm.speedUpModalTimer.getCurrentModalTimeLeft();
                if (lastHourGlassFinished) {
                    Modal.hideModalAll()
                } else {
                    cm.speedUpModalTimer.redisplayModal()
                }
                update_queue()
            } else {
                Modal.showAlert(printLocalError((rslt.error_code || null), (rslt.msg || null), (rslt.feedback || null)))
            }
        },
        onFailure: function () {}
    })
};
var swfobject = function () {
        var aq = "undefined",
            aD = "object",
            ab = "Shockwave Flash",
            X = "ShockwaveFlash.ShockwaveFlash",
            aE = "application/x-shockwave-flash",
            ac = "SWFObjectExprInst",
            ax = "onreadystatechange",
            af = window,
            aL = document,
            aB = navigator,
            aa = false,
            Z = [aN],
            aG = [],
            ag = [],
            al = [],
            aJ, ad, ap, at, ak = false,
            aU = false,
            aH, an, aI = true,
            ah = function () {
                var a = typeof aL.getElementById != aq && typeof aL.getElementsByTagName != aq && typeof aL.createElement != aq,
                    e = aB.userAgent.toLowerCase(),
                    c = aB.platform.toLowerCase(),
                    h = c ? /win/.test(c) : /win/.test(e),
                    j = c ? /mac/.test(c) : /mac/.test(e),
                    g = /webkit/.test(e) ? parseFloat(e.replace(/^.*webkit\/(\d+(\.\d+)?).*$/, "$1")) : false,
                    d = !+"\v1",
                    f = [0, 0, 0],
                    k = null;
                if (typeof aB.plugins != aq && typeof aB.plugins[ab] == aD) {
                    k = aB.plugins[ab].description;
                    if (k && !(typeof aB.mimeTypes != aq && aB.mimeTypes[aE] && !aB.mimeTypes[aE].enabledPlugin)) {
                        aa = true;
                        d = false;
                        k = k.replace(/^.*\s+(\S+\s+\S+$)/, "$1");
                        f[0] = parseInt(k.replace(/^(.*)\..*$/, "$1"), 10);
                        f[1] = parseInt(k.replace(/^.*\.(.*)\s.*$/, "$1"), 10);
                        f[2] = /[a-zA-Z]/.test(k) ? parseInt(k.replace(/^.*[a-zA-Z]+(.*)$/, "$1"), 10) : 0
                    }
                } else {
                    if (typeof af.ActiveXObject != aq) {
                        try {
                            var i = new ActiveXObject(X);
                            if (i) {
                                k = i.GetVariable("$version");
                                if (k) {
                                    d = true;
                                    k = k.split(" ")[1].split(",");
                                    f = [parseInt(k[0], 10), parseInt(k[1], 10), parseInt(k[2], 10)]
                                }
                            }
                        } catch (b) {}
                    }
                }
                return {
                    w3: a,
                    pv: f,
                    wk: g,
                    ie: d,
                    win: h,
                    mac: j
                }
            }(),
            aK = function () {
                if (!ah.w3) {
                    return
                }
                if ((typeof aL.readyState != aq && aL.readyState == "complete") || (typeof aL.readyState == aq && (aL.getElementsByTagName("body")[0] || aL.body))) {
                    aP()
                }
                if (!ak) {
                    if (typeof aL.addEventListener != aq) {
                        aL.addEventListener("DOMContentLoaded", aP, false)
                    }
                    if (ah.ie && ah.win) {
                        aL.attachEvent(ax, function () {
                            if (aL.readyState == "complete") {
                                aL.detachEvent(ax, arguments.callee);
                                aP()
                            }
                        });
                        if (af == top) {
                            (function () {
                                if (ak) {
                                    return
                                }
                                try {
                                    aL.documentElement.doScroll("left")
                                } catch (a) {
                                    setTimeout(arguments.callee, 0);
                                    return
                                }
                                aP()
                            })()
                        }
                    }
                    if (ah.wk) {
                        (function () {
                            if (ak) {
                                return
                            }
                            if (!/loaded|complete/.test(aL.readyState)) {
                                setTimeout(arguments.callee, 0);
                                return
                            }
                            aP()
                        })()
                    }
                    aC(aP)
                }
            }();

        function aP() {
            if (ak) {
                return
            }
            try {
                var b = aL.getElementsByTagName("body")[0].appendChild(ar("span"));
                b.parentNode.removeChild(b)
            } catch (a) {
                return
            }
            ak = true;
            var d = Z.length;
            for (var c = 0; c < d; c++) {
                Z[c]()
            }
        }
        function aj(a) {
            if (ak) {
                a()
            } else {
                Z[Z.length] = a
            }
        }
        function aC(a) {
            if (typeof af.addEventListener != aq) {
                af.addEventListener("load", a, false)
            } else {
                if (typeof aL.addEventListener != aq) {
                    aL.addEventListener("load", a, false)
                } else {
                    if (typeof af.attachEvent != aq) {
                        aM(af, "onload", a)
                    } else {
                        if (typeof af.onload == "function") {
                            var b = af.onload;
                            af.onload = function () {
                                b();
                                a()
                            }
                        } else {
                            af.onload = a
                        }
                    }
                }
            }
        }
        function aN() {
            if (aa) {
                Y()
            } else {
                am()
            }
        }
        function Y() {
            var d = aL.getElementsByTagName("body")[0];
            var b = ar(aD);
            b.setAttribute("type", aE);
            var a = d.appendChild(b);
            if (a) {
                var c = 0;
                (function () {
                    if (typeof a.GetVariable != aq) {
                        var e = a.GetVariable("$version");
                        if (e) {
                            e = e.split(" ")[1].split(",");
                            ah.pv = [parseInt(e[0], 10), parseInt(e[1], 10), parseInt(e[2], 10)]
                        }
                    } else {
                        if (c < 10) {
                            c++;
                            setTimeout(arguments.callee, 10);
                            return
                        }
                    }
                    d.removeChild(b);
                    a = null;
                    am()
                })()
            } else {
                am()
            }
        }
        function am() {
            var g = aG.length;
            if (g > 0) {
                for (var h = 0; h < g; h++) {
                    var c = aG[h].id;
                    var l = aG[h].callbackFn;
                    var a = {
                        success: false,
                        id: c
                    };
                    if (ah.pv[0] > 0) {
                        var i = aS(c);
                        if (i) {
                            if (ao(aG[h].swfVersion) && !(ah.wk && ah.wk < 312)) {
                                ay(c, true);
                                if (l) {
                                    a.success = true;
                                    a.ref = av(c);
                                    l(a)
                                }
                            } else {
                                if (aG[h].expressInstall && au()) {
                                    var e = {};
                                    e.data = aG[h].expressInstall;
                                    e.width = i.getAttribute("width") || "0";
                                    e.height = i.getAttribute("height") || "0";
                                    if (i.getAttribute("class")) {
                                        e.styleclass = i.getAttribute("class")
                                    }
                                    if (i.getAttribute("align")) {
                                        e.align = i.getAttribute("align")
                                    }
                                    var f = {};
                                    var d = i.getElementsByTagName("param");
                                    var k = d.length;
                                    for (var j = 0; j < k; j++) {
                                        if (d[j].getAttribute("name").toLowerCase() != "movie") {
                                            f[d[j].getAttribute("name")] = d[j].getAttribute("value")
                                        }
                                    }
                                    ae(e, f, c, l)
                                } else {
                                    aF(i);
                                    if (l) {
                                        l(a)
                                    }
                                }
                            }
                        }
                    } else {
                        ay(c, true);
                        if (l) {
                            var b = av(c);
                            if (b && typeof b.SetVariable != aq) {
                                a.success = true;
                                a.ref = b
                            }
                            l(a)
                        }
                    }
                }
            }
        }
        function av(b) {
            var d = null;
            var c = aS(b);
            if (c && c.nodeName == "OBJECT") {
                if (typeof c.SetVariable != aq) {
                    d = c
                } else {
                    var a = c.getElementsByTagName(aD)[0];
                    if (a) {
                        d = a
                    }
                }
            }
            return d
        }
        function au() {
            return !aU && ao("6.0.65") && (ah.win || ah.mac) && !(ah.wk && ah.wk < 312)
        }
        function ae(f, d, h, e) {
            aU = true;
            ap = e || null;
            at = {
                success: false,
                id: h
            };
            var a = aS(h);
            if (a) {
                if (a.nodeName == "OBJECT") {
                    aJ = aO(a);
                    ad = null
                } else {
                    aJ = a;
                    ad = h
                }
                f.id = ac;
                if (typeof f.width == aq || (!/%$/.test(f.width) && parseInt(f.width, 10) < 310)) {
                    f.width = "310"
                }
                if (typeof f.height == aq || (!/%$/.test(f.height) && parseInt(f.height, 10) < 137)) {
                    f.height = "137"
                }
                aL.title = aL.title.slice(0, 47) + " - Flash Player Installation";
                var b = ah.ie && ah.win ? "ActiveX" : "PlugIn",
                    c = "MMredirectURL=" + af.location.toString().replace(/&/g, "%26") + "&MMplayerType=" + b + "&MMdoctitle=" + aL.title;
                if (typeof d.flashvars != aq) {
                    d.flashvars += "&" + c
                } else {
                    d.flashvars = c
                }
                if (ah.ie && ah.win && a.readyState != 4) {
                    var g = ar("div");
                    h += "SWFObjectNew";
                    g.setAttribute("id", h);
                    a.parentNode.insertBefore(g, a);
                    a.style.display = "none";
                    (function () {
                        if (a.readyState == 4) {
                            a.parentNode.removeChild(a)
                        } else {
                            setTimeout(arguments.callee, 10)
                        }
                    })()
                }
                aA(f, d, h)
            }
        }
        function aF(a) {
            if (ah.ie && ah.win && a.readyState != 4) {
                var b = ar("div");
                a.parentNode.insertBefore(b, a);
                b.parentNode.replaceChild(aO(a), b);
                a.style.display = "none";
                (function () {
                    if (a.readyState == 4) {
                        a.parentNode.removeChild(a)
                    } else {
                        setTimeout(arguments.callee, 10)
                    }
                })()
            } else {
                a.parentNode.replaceChild(aO(a), a)
            }
        }
        function aO(b) {
            var d = ar("div");
            if (ah.win && ah.ie) {
                d.innerHTML = b.innerHTML
            } else {
                var e = b.getElementsByTagName(aD)[0];
                if (e) {
                    var a = e.childNodes;
                    if (a) {
                        var f = a.length;
                        for (var c = 0; c < f; c++) {
                            if (!(a[c].nodeType == 1 && a[c].nodeName == "PARAM") && !(a[c].nodeType == 8)) {
                                d.appendChild(a[c].cloneNode(true))
                            }
                        }
                    }
                }
            }
            return d
        }
        function aA(e, g, c) {
            var d, a = aS(c);
            if (ah.wk && ah.wk < 312) {
                return d
            }
            if (a) {
                if (typeof e.id == aq) {
                    e.id = c
                }
                if (ah.ie && ah.win) {
                    var f = "";
                    for (var i in e) {
                        if (e[i] != Object.prototype[i]) {
                            if (i.toLowerCase() == "data") {
                                g.movie = e[i]
                            } else {
                                if (i.toLowerCase() == "styleclass") {
                                    f += ' class="' + e[i] + '"'
                                } else {
                                    if (i.toLowerCase() != "classid") {
                                        f += " " + i + '="' + e[i] + '"'
                                    }
                                }
                            }
                        }
                    }
                    var h = "";
                    for (var j in g) {
                        if (g[j] != Object.prototype[j]) {
                            h += '<param name="' + j + '" value="' + g[j] + '" />'
                        }
                    }
                    a.outerHTML = '<object classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"' + f + ">" + h + "</object>";
                    ag[ag.length] = e.id;
                    d = aS(e.id)
                } else {
                    var b = ar(aD);
                    b.setAttribute("type", aE);
                    for (var k in e) {
                        if (e[k] != Object.prototype[k]) {
                            if (k.toLowerCase() == "styleclass") {
                                b.setAttribute("class", e[k])
                            } else {
                                if (k.toLowerCase() != "classid") {
                                    b.setAttribute(k, e[k])
                                }
                            }
                        }
                    }
                    for (var l in g) {
                        if (g[l] != Object.prototype[l] && l.toLowerCase() != "movie") {
                            aQ(b, l, g[l])
                        }
                    }
                    a.parentNode.replaceChild(b, a);
                    d = b
                }
            }
            return d
        }
        function aQ(b, d, c) {
            var a = ar("param");
            a.setAttribute("name", d);
            a.setAttribute("value", c);
            b.appendChild(a)
        }
        function aw(a) {
            var b = aS(a);
            if (b && b.nodeName == "OBJECT") {
                if (ah.ie && ah.win) {
                    b.style.display = "none";
                    (function () {
                        if (b.readyState == 4) {
                            aT(a)
                        } else {
                            setTimeout(arguments.callee, 10)
                        }
                    })()
                } else {
                    b.parentNode.removeChild(b)
                }
            }
        }
        function aT(a) {
            var b = aS(a);
            if (b) {
                for (var c in b) {
                    if (typeof b[c] == "function") {
                        b[c] = null
                    }
                }
                b.parentNode.removeChild(b)
            }
        }
        function aS(a) {
            var c = null;
            try {
                c = aL.getElementById(a)
            } catch (b) {}
            return c
        }
        function ar(a) {
            return aL.createElement(a)
        }
        function aM(a, c, b) {
            a.attachEvent(c, b);
            al[al.length] = [a, c, b]
        }
        function ao(a) {
            var b = ah.pv,
                c = a.split(".");
            c[0] = parseInt(c[0], 10);
            c[1] = parseInt(c[1], 10) || 0;
            c[2] = parseInt(c[2], 10) || 0;
            return (b[0] > c[0] || (b[0] == c[0] && b[1] > c[1]) || (b[0] == c[0] && b[1] == c[1] && b[2] >= c[2])) ? true : false
        }
        function az(b, f, a, c) {
            if (ah.ie && ah.mac) {
                return
            }
            var e = aL.getElementsByTagName("head")[0];
            if (!e) {
                return
            }
            var g = (a && typeof a == "string") ? a : "screen";
            if (c) {
                aH = null;
                an = null
            }
            if (!aH || an != g) {
                var d = ar("style");
                d.setAttribute("type", "text/css");
                d.setAttribute("media", g);
                aH = e.appendChild(d);
                if (ah.ie && ah.win && typeof aL.styleSheets != aq && aL.styleSheets.length > 0) {
                    aH = aL.styleSheets[aL.styleSheets.length - 1]
                }
                an = g
            }
            if (ah.ie && ah.win) {
                if (aH && typeof aH.addRule == aD) {
                    aH.addRule(b, f)
                }
            } else {
                if (aH && typeof aL.createTextNode != aq) {
                    aH.appendChild(aL.createTextNode(b + " {" + f + "}"))
                }
            }
        }
        function ay(a, c) {
            if (!aI) {
                return
            }
            var b = c ? "visible" : "hidden";
            if (ak && aS(a)) {
                aS(a).style.visibility = b
            } else {
                az("#" + a, "visibility:" + b)
            }
        }
        function ai(b) {
            var a = /[\\\"<>\.;]/;
            var c = a.exec(b) != null;
            return c && typeof encodeURIComponent != aq ? encodeURIComponent(b) : b
        }
        var aR = function () {
                if (ah.ie && ah.win) {
                    window.attachEvent("onunload", function () {
                        var a = al.length;
                        for (var b = 0; b < a; b++) {
                            al[b][0].detachEvent(al[b][1], al[b][2])
                        }
                        var d = ag.length;
                        for (var c = 0; c < d; c++) {
                            aw(ag[c])
                        }
                        for (var e in ah) {
                            ah[e] = null
                        }
                        ah = null;
                        for (var f in swfobject) {
                            swfobject[f] = null
                        }
                        swfobject = null
                    })
                }
            }();
        return {
            registerObject: function (a, e, c, b) {
                if (ah.w3 && a && e) {
                    var d = {};
                    d.id = a;
                    d.swfVersion = e;
                    d.expressInstall = c;
                    d.callbackFn = b;
                    aG[aG.length] = d;
                    ay(a, false)
                } else {
                    if (b) {
                        b({
                            success: false,
                            id: a
                        })
                    }
                }
            },
            getObjectById: function (a) {
                if (ah.w3) {
                    return av(a)
                }
            },
            embedSWF: function (k, e, h, f, c, a, b, i, g, j) {
                var d = {
                    success: false,
                    id: e
                };
                if (ah.w3 && !(ah.wk && ah.wk < 312) && k && e && h && f && c) {
                    ay(e, false);
                    aj(function () {
                        h += "";
                        f += "";
                        var q = {};
                        if (g && typeof g === aD) {
                            for (var o in g) {
                                q[o] = g[o]
                            }
                        }
                        q.data = k;
                        q.width = h;
                        q.height = f;
                        var n = {};
                        if (i && typeof i === aD) {
                            for (var p in i) {
                                n[p] = i[p]
                            }
                        }
                        if (b && typeof b === aD) {
                            for (var l in b) {
                                if (typeof n.flashvars != aq) {
                                    n.flashvars += "&" + l + "=" + b[l]
                                } else {
                                    n.flashvars = l + "=" + b[l]
                                }
                            }
                        }
                        if (ao(c)) {
                            var m = aA(q, n, e);
                            if (q.id == e) {
                                ay(e, true)
                            }
                            d.success = true;
                            d.ref = m
                        } else {
                            if (a && au()) {
                                q.data = a;
                                ae(q, n, e, j);
                                return
                            } else {
                                ay(e, true)
                            }
                        }
                        if (j) {
                            j(d)
                        }
                    })
                } else {
                    if (j) {
                        j(d)
                    }
                }
            },
            switchOffAutoHideShow: function () {
                aI = false
            },
            ua: ah,
            getFlashPlayerVersion: function () {
                return {
                    major: ah.pv[0],
                    minor: ah.pv[1],
                    release: ah.pv[2]
                }
            },
            hasFlashPlayerVersion: ao,
            createSWF: function (a, b, c) {
                if (ah.w3) {
                    return aA(a, b, c)
                } else {
                    return undefined
                }
            },
            showExpressInstall: function (b, a, d, c) {
                if (ah.w3 && au()) {
                    ae(b, a, d, c)
                }
            },
            removeSWF: function (a) {
                if (ah.w3) {
                    aw(a)
                }
            },
            createCSS: function (b, a, c, d) {
                if (ah.w3) {
                    az(b, a, c, d)
                }
            },
            addDomLoadEvent: aj,
            addLoadEvent: aC,
            getQueryParamValue: function (b) {
                var a = aL.location.search || aL.location.hash;
                if (a) {
                    if (/\?/.test(a)) {
                        a = a.split("?")[1]
                    }
                    if (b == null) {
                        return ai(a)
                    }
                    var c = a.split("&");
                    for (var d = 0; d < c.length; d++) {
                        if (c[d].substring(0, c[d].indexOf("=")) == b) {
                            return ai(c[d].substring((c[d].indexOf("=") + 1)))
                        }
                    }
                }
                return ""
            },
            expressInstallCallback: function () {
                if (aU) {
                    var a = aS(ac);
                    if (a && aJ) {
                        a.parentNode.replaceChild(aJ, a);
                        if (ad) {
                            ay(ad, true);
                            if (ah.ie && ah.win) {
                                aJ.style.display = "block"
                            }
                        }
                        if (ap) {
                            ap(at)
                        }
                    }
                    aU = false
                }
            }
        }
    }();
cm = cm || {};
cm.Template = function () {
    var e = null,
        d = null,
        c = null;
    var f = function (h) {
            var i = this;
            new Ajax.Request("html/" + h + ".html", {
                asynchronous: false,
                method: "get",
                onSuccess: function (j) {
                    e = j.responseText
                },
                onFailure: function () {
                    e = "Cannot load " + i.templateFile
                }
            })
        };
    var a = function (i) {
            var m, h, j, l, k;
            j = "<!--" + i + "-->";
            l = "<!--/" + i + "-->";
            m = e.indexOf(j) + j.length;
            h = e.indexOf("<!--/" + i + "-->");
            if (m >= 0 && h >= 0 && m < h) {
                k = e.substring(m, h);
                k.replace("\n", " ");
                k.replace("\t", " ");
                k.replace("'", "'");
                k.replace(/\\'/g, "'");
                return unescape(k)
            } else {
                return i + " not found in " + d
            }
        };
    var b = function (i, k, j) {
            d = i;
            c = k;
            f(d);
            var h = a(c);
            return new Template(h).evaluate(j)
        };
    var g = function () {};
    g();
    return {
        renderTemplate: b
    }
}();
cm = cm || {};
cm.Tooltip = (function (a) {
    var c = function (d) {
            if (d.data.proxyElement) {
                showTooltip(d.data.tooltip, d.data.proxyElement, d.originalEvent, "mainbody")
            } else {
                showTooltip(d.data.tooltip, d.target, d.originalEvent, "mainbody")
            }
            d.stopPropagation()
        };
    var b = function (d) {
            removeTooltip();
            d.stopPropagation()
        };
    return {
        setTooltip: function (e) {
            var d = a(e.htmlElement);
            delete e.htmlElement;
            d.mouseenter(e, c);
            d.mouseout(b)
        }
    }
})(jQuery);

function showTooltip(d, o, j, u) {
    Event.extend(j);
    var i = j.pointerX();
    var h = j.pointerY();
    removeTooltip();
    var s = o;
    Element.extend(s);
    var c = document.createElement("div");
    Element.extend(c);
    var p = s.hasClassName("slot");
    var n = $(u);
    var k = s.cumulativeOffset()[0];
    var g = s.cumulativeOffset()[1] - n.cumulativeOffset()[1];
    var e = s.getWidth();
    var f = s.getHeight();
    c.id = "tooltip";
    c.className = (p) ? "maptooltip" : "tooltip";
    var r = new Array();
    r.push("<div class='box'>");
    r.push(unescape(d));
    r.push("</div>");
    c.innerHTML = r.join("");
    n.appendChild(c);
    var l = c.getHeight();
    var q = c.getWidth();
    var t = k + e;
    var b = g + 20;
    var a = n.getWidth() - q;
    var m = n.getHeight() + n.positionedOffset()[1] - l;
    if (t > a) {
        t = Math.max(0, k - q)
    }
    if (b > m) {
        b = Math.max(0, g - l)
    }
    if (b < 0) {
        b = 60
    }
    t = t + "px";
    b = b + "px";
    c.style.top = b;
    c.style.left = t;
    c.style.position = "absolute"
}
function removeTooltip() {
    if ($("tooltip")) {
        $("tooltip").remove()
    }
}
var Tooltip = {
    tooltipDiv: "kofcNewTooltipDiv",
    cssStyles: {
        padding: "5px",
        backgroundColor: "#d5a461",
        border: "2px solid #a56631",
        width: "180px",
        maxWidth: "290px",
        fontFamily: 'lucida grande",tahoma,verdana,arial,sans-serif',
        fontSize: "11px",
        color: "#000",
        zIndex: 200000,
        position: "absolute",
        top: "0px",
        left: "0px"
    },
    resetCSS: function (a) {
        $(a).setStyle(this.cssStyles)
    },
    show: function (g, n, b, l) {
        var j = 0;
        var h = 0;
        var m;
        var f = Event.element(g);
        var k = 10;
        var d = 10;
        if ($(this.tooltipDiv)) {
            m = $(this.tooltipDiv)
        } else {
            var i = document.createElement("div");
            i.id = this.tooltipDiv;
            $$("body")[0].insert(i);
            m = $(this.tooltipDiv);
            this.resetCSS(m)
        }
        if (l) {
            m.setStyle(l);
            var c = this;
            f.observe("mouseout", function () {
                c.resetCSS(m)
            })
        }
        f.observe("mouseout", this.hide.bind(this));
        var a = f.viewportOffset();
        if (b) {
            k = b[0];
            d = b[1]
        }
        j = a[0] + f.getWidth() + k;
        h = a[1] - d;
        m.setStyle({
            top: h + "px",
            left: j + "px"
        });
        m.update(n);
        m.style.display = "block"
    },
    hide: function () {
        $(this.tooltipDiv).style.display = "none"
    }
};

function modal_tournaments() {
    var a = new Array();
    a.push("<div class='modal_tourny_container'>");
    a.push("<div id='modal_tourny_body' class='tournywrap' name='1'><div class='modal_tourny_hd'>&nbsp;</div>");
    a.push("<div class='tabsbar clearfix' id='modal_tourny_tabs'>");
    a.push("<a  id='modal_tourny_tab1' onclick='modal_tourny_changetab(1);return false;' class='tab selected'><span>" + g_js_strings.commonstr.tournament + "</span></a>");
    a.push("<a  id='modal_tourny_tab2' onclick='modal_tourny_changetab(2);return false;' class='tab'><span>" + g_js_strings.commonstr.previous + " 1</span></a>");
    a.push("<a  id='modal_tourny_tab3' onclick='modal_tourny_changetab(3);return false;' class='tab'><span>" + g_js_strings.commonstr.previous + " 2</span></a>");
    a.push("<a  id='modal_tourny_tab4' onclick='modal_tourny_changetab(4);return false;' class='tab'><span>" + g_js_strings.commonstr.previous + " 3</span></a>");
    a.push("<a  id='modal_tourny_tab5' onclick='modal_tourny_changetab(5);return false;' class='tab'><span>" + g_js_strings.commonstr.previous + " 4</span></a>");
    a.push("</div>");
    a.push("<div id='modal_tourny_content'></div>");
    a.push("</div>");
    a.push("</div>");
    Modal.showModal(740, 740, 10, 10, g_js_strings.modaltitles.tournaments, a.join(""), "");
    modal_tourny_changetab(1)
}
function modal_tourny_changetab(newtab) {
    var oldtab = $("modal_tourny_body").getAttribute("name");
    $("modal_tourny_tabs").select(".selected")[0].removeClassName("selected");
    $("modal_tourny_tab" + newtab).addClassName("selected");
    $("modal_tourny_body").setAttribute("name", newtab);
    var params = Object.clone(g_ajaxparams);
    params.format = 2;
    params.tournyPos = parseInt(newtab) - 1;
    new Ajax.Request(g_ajaxpath + "ajax/getLeaderboard.php" + g_ajaxsuffix, {
        method: "post",
        parameters: params,
        onSuccess: function (transport) {
            var rslt = eval("(" + transport.responseText + ")");
            if (rslt.ok) {
                if (!rslt.data) {
                    $("modal_tourny_content").innerHTML = "<div class='tourny_modal_upsell'>" + g_js_strings.modal_tourny_changetab.notourny + "</div><div class='closebtn clearfix'><a  onclick='Modal.hideModal();return false;' class='button20'><span>" + g_js_strings.commonstr.close + "</span></a></div>"
                } else {
                    var tournyhtml = new Array();
                    if (rslt.name) {
                        tournyhtml.push("<div class='tournymodaltitle'>" + rslt.name + "</div>")
                    } else {
                        tournyhtml.push("<div class='tournymodaltitle'>" + g_js_strings.commonstr.tournament + "</div>")
                    }
                    if (rslt.description) {
                        tournyhtml.push("<div class='tournymodaldesc'>" + rslt.description + "</div>")
                    }
                    tournyhtml.push("<div class='tournylistwrap'>");
                    tournyhtml.push("<table class='tourny_list_table' cellpadding='0' cellspacing='0' border='0'>");
                    tournyhtml.push("<thead>");
                    tournyhtml.push("<tr>");
                    tournyhtml.push("<td class='rankcol'>");
                    tournyhtml.push("<div>" + g_js_strings.commonstr.ranking + "</div>");
                    tournyhtml.push("</td>");
                    tournyhtml.push("<td>");
                    tournyhtml.push("<div>" + g_js_strings.modal_tourny_changetab.lordladyname + "</div>");
                    tournyhtml.push("</td>");
                    tournyhtml.push("<td>");
                    tournyhtml.push("<div>" + g_js_strings.commonstr.alliance + "</div>");
                    tournyhtml.push("</td>");
                    tournyhtml.push("<td>");
                    tournyhtml.push("<div>" + rslt.contestcategory + "</div>");
                    tournyhtml.push("</td>");
                    tournyhtml.push("<td>");
                    tournyhtml.push("<div>" + g_js_strings.commonstr.reward + "</div>");
                    tournyhtml.push("</td>");
                    tournyhtml.push("</tr>");
                    tournyhtml.push("</thead>");
                    tournyhtml.push("</tbody>");
                    for (var i = 0; i < rslt.data.length; i++) {
                        var row = rslt.data[i];
                        var rewardString = row.itemCount + " ";
                        if (row.itemType == 0) {
                            rewardString += g_js_strings.commonstr.gems
                        } else {
                            rewardString += itemlist["i" + row.itemType].name
                        }
                        if (i % 2 == 1) {
                            tournyhtml.push("<tr>")
                        } else {
                            tournyhtml.push("<tr class='stripe'>")
                        }
                        tournyhtml.push("<td class='rankcol'>");
                        tournyhtml.push("<div>" + row.ranking + "</div>");
                        tournyhtml.push("</td>");
                        tournyhtml.push("<td>");
                        tournyhtml.push("<div>" + row.name + "</div>");
                        tournyhtml.push("</td>");
                        tournyhtml.push("<td>");
                        tournyhtml.push("<div>" + (row.alliance || "----") + "</div>");
                        tournyhtml.push("</td>");
                        tournyhtml.push("<td>");
                        tournyhtml.push("<div>" + row.contestValue + "</div>");
                        tournyhtml.push("</td>");
                        tournyhtml.push("<td>");
                        tournyhtml.push("<div>" + rewardString + "</div>");
                        tournyhtml.push("</td>");
                        tournyhtml.push("</tr>")
                    }
                    tournyhtml.push("</tbody>");
                    tournyhtml.push("</table>");
                    tournyhtml.push("</div>");
                    if (rslt.startdate && rslt.enddate) {
                        var startTime = rslt.startdate;
                        var endTime = rslt.enddate;
                        var now = parseInt(new Date().getTime() / 1000);
                        tournyhtml.push("<div class='timebar'>");
                        tournyhtml.push("<div class='elapsedtime' style='width:");
                        if (endTime <= now) {
                            tournyhtml.push("500px;'")
                        } else {
                            var perc = parseInt(((now - startTime) / (endTime - startTime)) * 100) * 5;
                            tournyhtml.push(perc + "px;'")
                        }
                        tournyhtml.push(">");
                        tournyhtml.push("</div>");
                        tournyhtml.push("</div>");
                        tournyhtml.push("<div class='datefooter clearfix'>");
                        tournyhtml.push("<div class='startdate'>");
                        tournyhtml.push("Start: " + new Date(startTime * 1000).toGMTString());
                        tournyhtml.push("</div>");
                        tournyhtml.push("<div class='enddate'>");
                        tournyhtml.push("End: " + new Date(endTime * 1000).toGMTString());
                        tournyhtml.push("</div>");
                        tournyhtml.push("</div>");
                        tournyhtml.push("<div class='closebtn clearfix'><a  onclick='Modal.hideModal();return false;' class='button20'><span>" + g_js_strings.commonstr.close + "</span></a></div>")
                    }
                    $("modal_tourny_content").innerHTML = tournyhtml.join("")
                }
            } else {
                Modal.showAlert(printLocalError((rslt.error_code || null), (rslt.msg || null), (rslt.feedback || null)))
            }
        },
        onFailure: function () {}
    })
};
cm.TownCrierCaravan = function (d, e) {
    var c = this;
    var b = e;
    b.className = d.getCount() > 0 ? "crier" : "crier noMessage";
    var a = function () {
            b.className = d.getCount() > 0 ? "crier" : "crier noMessage"
        };
    this.getHtmlElement = function () {
        return b
    };
    d.addEventListener(cm.CollectionEvent.ELEMENT_ADDED, a);
    d.addEventListener(cm.CollectionEvent.ELEMENT_REMOVED, a)
};
cm.TownCrierCaravanController = function (d, c) {
    var e = function (h) {
            if (d.getCount() > 0) {
                var g = new cm.TownCrierMessageDialog(d);
                g.show();
                var i = new cm.TownCrierFooterNav(d);
                var f = new cm.FooterNavController(d, i, g);
                g.setFooter(i.getHtmlElement())
            } else {
                Modal.showAlert(g_js_strings.towncrier.noannouncements)
            }
        };
    var b = function (g) {
            var f = g.srcElement || g.target;
            showTooltip(g_js_strings.towncrier.annoucementcaravan, f, g, "mod_maparea")
        };
    var a = function (f) {
            removeTooltip()
        };
    Event.observe(c.getHtmlElement(), "click", e);
    Event.observe(c.getHtmlElement(), "mouseover", b);
    Event.observe(c.getHtmlElement(), "mouseout", a)
};
var cm = cm || {};
cm.TownCrierMessageEvent = function (a) {
    cm.CustomEvent.call(this, a)
};
cm.OOP.inherits(cm.TownCrierMessageEvent, cm.CustomEvent);
cm.TownCrierMessageEvent.READ = "read";
var cm = cm || {};
cm.TownCrierFooterNav = function (h, f) {
    var a;
    var b = [];
    var e;
    var i;
    var c = function (l) {
            var k = l.getTarget();
            var j = h.getElementPosition(k);
            b[j].className = "navItem read"
        };
    var g = function (m) {
            var l = m.getTarget();
            var n = l.previousPosition;
            b[n].className = "navItem read";
            var k = h.getElementAtCurrentPosition();
            var j = l.currentPosition;
            b[j].className = "navItem current" + (k.isRead() ? " read" : "")
        };
    this.getHtmlElement = function () {
        return a
    };
    this.getPrevButton = function () {
        return e
    };
    this.getNextButton = function () {
        return i
    };
    this.getElements = function () {
        return b
    };
    var d = function () {
            a = document.createElement("div");
            a.className = "navContainer";
            e = document.createElement("a");
            e.className = "navButton";
            e.innerHTML = '<img src="img/crier/button_arrow_left.png" />';
            a.appendChild(e);
            var m, n;
            var j = h.getCount();
            var k = h.getCurrentPosition();
            for (m = 0; m < j; m++) {
                n = h.getElementAtPosition(m);
                n.addEventListener(cm.TownCrierMessageEvent.READ, c);
                var l = document.createElement("a");
                l.className = n.isRead() ? "navItem read" : "navItem";
                l.className += m == k ? " current" : "";
                l.innerHTML = m + 1;
                a.appendChild(l);
                b.push(l)
            }
            i = document.createElement("a");
            i.className = "navButton";
            i.innerHTML = '<img src="img/crier/button_arrow_right.png" />';
            a.appendChild(i);
            h.addEventListener(cm.CollectionEvent.POSITION_CHANGED, g)
        };
    d()
};
cm.FooterNavController = function (i, c, k) {
    var h;
    var j;
    var b;
    var g = function (l) {
            if (i.hasPrevious()) {
                i.previous()
            }
        };
    var a = function (l) {
            if (i.hasNext()) {
                i.next()
            }
        };
    var d = function (n) {
            var m = n.srcElement ? n.srcElement : n.target;
            var l = parseInt(m.innerHTML) - 1;
            if (!isNaN(l)) {
                i.jumpTo(l)
            }
        };
    var f = function () {
            Event.stopObserving(h, "click", g);
            Event.stopObserving(j, "click", a);
            var m, l;
            for (m = 0; m < b.length; m++) {
                l = b[m];
                Event.stopObserving(l, "click", d)
            }
            k.removeEventListener(cm.DialogEvent.CLOSE, f)
        };
    var e = function () {
            k.addEventListener(cm.DialogEvent.CLOSE, f);
            h = c.getPrevButton();
            Event.observe(h, "click", g);
            j = c.getNextButton();
            Event.observe(j, "click", a);
            b = c.getElements();
            var m, l;
            for (m = 0; m < b.length; m++) {
                l = b[m];
                Event.observe(l, "click", d)
            }
        };
    e()
};
var cm = cm || {};
cm.TownCrierFetcher = new function () {
    var a = function (d, c) {
            var f = new Date((d.start <= 0 ? d.created : d.start) * 1000);
            var e = new Date((c.start <= 0 ? c.created : c.start) * 1000);
            return e.getTime() - f.getTime()
        };
    this.fetchAnnoucements = function () {
        var c = Object.clone(g_ajaxparams);
        var b = new Ajax.Request(g_ajaxpath + "ajax/getMotd.php" + g_ajaxsuffix, {
            method: "post",
            parameters: c,
            onSuccess: function (j) {
                var f = j.responseText.evalJSON();
                f.sort(a);
                var h = new cm.BaseCollection();
                var g = new cm.TownCrierNotificationCollectionController(h);
                var r = new cm.BaseCollection();
                var p = null;
                for (var n = 0; n < f.length; n++) {
                    var e = f[n];
                    var k = cm.TownCrierMessage.COOKIE_PREFIX + "_" + user_id + "_" + e.id;
                    var m = cm.ClientSideCookieManager.getCookie(k);
                    e.read = m == "true";
                    var s = new cm.TownCrierMessage(e);
                    r.add(s);
                    if (!s.isRead()) {
                        h.add(s);
                        if (!p) {
                            p = s;
                            var q = new cm.TownCrierNotificationDialog(p, h);
                            var d = new cm.TownCrierNotificationDialogController(p, r, q);
                            cm.NotificationDialogManager.popup(q)
                        }
                    }
                }
                var l = new cm.TownCrierCaravan(h, document.getElementById("townCrier"));
                var o = new cm.TownCrierCaravanController(r, l)
            }
        })
    }
}();
cm.TownCrierMessageDialog = function (p) {
    cm.BaseDialog.call(this);
    var h = this;
    var g;
    var r;
    var j;
    var k;
    var n;
    var c;
    var o;
    var m;
    var a = function (t) {
            var s = t.getTarget();
            if (s == o && s.isRead()) {
                j.className = "marker read"
            }
        };
    var q = function () {
            j.className = o.isRead() ? "marker read" : "marker";
            k.innerHTML = o.getDate();
            n.innerHTML = o.getTitle();
            c.innerHTML = o.getBodyHTML()
        };
    var e = function (s) {
            o.setRead(true);
            o.removeEventListener(cm.TownCrierMessageEvent.READ, a);
            o = p.getElementAtCurrentPosition();
            o.addEventListener(cm.TownCrierMessageEvent.READ, a);
            q()
        };
    var b = function () {
            Modal.hideModal();
            o.setRead(true);
            o.removeEventListener(cm.TownCrierMessageEvent.READ, a);
            h.close()
        };
    var l = function (s) {
            b()
        };
    var f = function () {
            g = h.getHtmlElement();
            o = p.getElementAtCurrentPosition();
            o.addEventListener(cm.TownCrierMessageEvent.READ, a);
            p.addEventListener(cm.CollectionEvent.POSITION_CHANGED, e);
            g.className = "dialogContainer";
            var x = document.createElement("div");
            x.className = $("crossPromoBarContainer") ? "notificationMessageDialog xPromo" : "notificationMessageDialog";
            g.appendChild(x);
            var s = document.createElement("div");
            s.className = "messageHeader";
            x.appendChild(s);
            var w = document.createElement("div");
            w.className = "headerTop";
            s.appendChild(w);
            j = document.createElement("div");
            j.className = "marker read";
            j.innerHTML = '<img src="img/crier/new_icon.png" />';
            w.appendChild(j);
            var t = document.createElement("div");
            t.className = "topRow";
            w.appendChild(t);
            var u = document.createElement("a");
            u.href = "javascript:void(0)";
            u.className = "closeButton";
            t.appendChild(u);
            k = document.createElement("div");
            k.className = "date";
            t.appendChild(k);
            n = document.createElement("div");
            n.className = "titleRow";
            w.appendChild(n);
            var v = document.createElement("div");
            v.className = "headerBottom";
            s.appendChild(v);
            var y = document.createElement("div");
            y.className = "messageBody";
            x.appendChild(y);
            c = document.createElement("div");
            c.className = "content";
            y.appendChild(c);
            r = document.createElement("div");
            r.className = "messageFooter";
            x.appendChild(r);
            q();
            Event.observe(u, "click", l)
        };
    var d = this.show;
    var i = function () {
            h.close()
        };
    this.show = function () {
        Modal.onCloseCallback = i;
        Modal.showModal(201, 101, 400, 300, "", "");
        $("modalControlsClose" + Modal.modalid).hide();
        d()
    };
    this.setFooter = function (s) {
        r.appendChild(s)
    };
    f()
};
cm.OOP.inherits(cm.TownCrierMessageDialog, cm.BaseDialog);
var cm = cm || {};
cm.TownCrierMessage = function (a) {
    cm.CustomEventDispatcher.call(this);
    var f = this;
    var g = false;
    var h = null;
    var c = null;
    var i = null;
    var e = null;
    var b = null;
    this.getId = function () {
        return e
    };
    this.getKey = function () {
        return e.toString()
    };
    this.getTitle = function () {
        return h
    };
    this.getBodyHTML = function () {
        return c
    };
    this.getDate = function () {
        return i
    };
    this.isRead = function () {
        return g
    };
    this.setRead = function (m) {
        if (g != m) {
            g = m;
            var k = new Date();
            k.setTime(k.getTime() + (7 * 24 * 60 * 60 * 1000));
            var j = cm.TownCrierMessage.COOKIE_PREFIX + "_" + user_id + "_" + e;
            cm.ClientSideCookieManager.setCookie(j, (g ? "true" : "false"), k);
            var l = new cm.TownCrierMessageEvent(cm.TownCrierMessageEvent.READ);
            l.setTarget(f);
            f.dispatchCustomEvent(l)
        }
    };
    this.getReadCSSClass = function () {
        return g ? " read" : ""
    };
    var d = function () {
            g = a.read;
            h = a.title;
            c = a.bodyHTML;
            i = a.date;
            e = a.id;
            b = a.expires
        };
    d()
};
cm.OOP.inherits(cm.TownCrierMessage, cm.CustomEventDispatcher);
cm.TownCrierMessage.COOKIE_PREFIX = "announcementRead";
cm.TownCrierMessageManagerClass = function () {
    cm.CustomEventDispatcher.call(this);
    var d = this;
    var e = [];
    var a = 0;
    var c = 0;
    this.add = function (f) {
        e.push(f)
    };
    var b = function () {
            var f = new cm.TownCrierMessageManagerEvent(cm.TownCrierMessageManagerEvent.INDEX_CHANGE);
            f.setTarget(d);
            d.dispatchCustomEvent(f)
        };
    this.gotoPrev = function () {
        if (c > 0) {
            a = c;
            c--;
            b()
        }
    };
    this.gotoNext = function () {
        if (c < e.length - 1) {
            a = c;
            c++;
            b()
        }
    };
    this.gotoMessage = function (f) {
        if (f >= 0 && f < e.length && c != f) {
            a = c;
            c = f;
            b()
        }
    };
    this.findMessageIndex = function (h) {
        var f, g;
        for (f = 0; f < e.length; f++) {
            g = e[f];
            if (h.getId() == g.getId()) {
                return f
            }
        }
        return -1
    };
    this.getCurrentMessage = function () {
        return e[c]
    };
    this.getMessages = function () {
        return e
    };
    this.getCurrentIndex = function () {
        return c
    };
    this.getLastMessage = function () {
        return e[a]
    };
    this.getLastIndex = function () {
        return a
    };
    this.getMessageCount = function () {
        return e.length
    }
};
cm.TownCrierMessageManagerClass.prototype = new cm.CustomEventDispatcher();
cm.TownCrierMessageManagerClass.prototype.constructor = cm.TownCrierMessageManagerClass;
cm.TownCrierMessageManager = new cm.TownCrierMessageManagerClass();
cm.TownCrierNotificationCollectionController = function (b) {
    var d = this;
    var c = function (h) {
            var g = h.getTarget();
            g.removeEventListener(cm.TownCrierMessageEvent.READ, f)
        };
    var a = function (h) {
            var g = h.getTarget();
            g.addEventListener(cm.TownCrierMessageEvent.READ, f)
        };
    var f = function (h) {
            var g = h.getTarget();
            b.remove(g)
        };
    var e = function () {
            b.addEventListener(cm.CollectionEvent.ELEMENT_ADDED, a);
            b.addEventListener(cm.CollectionEvent.ELEMENT_REMOVED, c)
        };
    e()
};
var cm = cm || {};
cm.TownCrierNotificationDialog = function (l, b) {
    cm.BaseDialog.call(this);
    var j = this;
    var c = this.getHtmlElement();
    var k = l;
    var d = null;
    var g = null;
    var m = function () {
            var n = 1;
            var o = b.getCount();
            d.innerHTML = n + " / " + o
        };
    this.getLink = function () {
        return g
    };
    var f = function (n) {
            if (b.getCount() > 0) {
                m()
            } else {
                j.close()
            }
        };
    var a;
    var i = function (n) {
            a()
        };
    var e = function (n) {
            a()
        };
    a = function () {
        k.removeEventListener(cm.TownCrierMessageEvent.READ, e);
        j.close()
    };
    var h = function () {
            k.addEventListener(cm.TownCrierMessageEvent.READ, e);
            c.className = "announcementContainer";
            var p = document.createElement("div");
            p.className = "notificationDialog";
            c.appendChild(p);
            var q = document.createElement("div");
            q.className = "titleBar";
            p.appendChild(q);
            var o = document.createElement("a");
            o.className = "closeButton";
            q.appendChild(o);
            d = document.createElement("div");
            d.className = "count";
            q.appendChild(d);
            var n = document.createElement("div");
            n.className = "dialogTitle";
            n.innerHTML = g_js_strings.towncrier.newannoucement;
            q.appendChild(n);
            var r = document.createElement("div");
            r.className = "dialogBody";
            p.appendChild(r);
            g = document.createElement("a");
            g.href = "javascript:void(0)";
            var s = k.getTitle();
            g.innerHTML = cm.StringFormatter.ellipsis(s, 34);
            g.setAttribute("title", s);
            r.appendChild(g);
            m();
            b.addEventListener(cm.CollectionEvent.ELEMENT_ADDED, f);
            b.addEventListener(cm.CollectionEvent.ELEMENT_REMOVED, f);
            Event.observe(o, "click", i)
        };
    h()
};
cm.OOP.inherits(cm.TownCrierNotificationDialog, cm.BaseDialog);
cm.TownCrierNotificationDialog.prototype.getPriority = function () {
    return 1
};
cm.TownCrierNotificationDialogController = function (e, d, a) {
    var c = a.getLink();
    var g = a;
    var h = function (l) {
            var j = d.getElementPosition(e);
            d.jumpTo(e.position);
            var k = new cm.TownCrierMessageDialog(d);
            k.show();
            var m = new cm.TownCrierFooterNav(d);
            var i = new cm.FooterNavController(d, m, k);
            k.setFooter(m.getHtmlElement())
        };
    var b = function (i) {
            g.removeEventListener(cm.DialogEvent.CLOSE, b);
            Event.stopObserving(c, "click", h)
        };
    var f = function () {
            g.addEventListener(cm.DialogEvent.CLOSE, b);
            Event.observe(c, "click", h)
        };
    f()
};
cm.TownCrierNotificationManagerClass = function () {
    cm.CustomEventDispatcher.call(this);
    var c = this;
    var e = [];
    var g = 0;
    var f = {};
    var d = function (m) {
            var k = m.getMessage();
            var l = cm.TownCrierMessageManager.findMessageIndex(k);
            cm.TownCrierMessageManager.gotoMessage(l);
            var j = new cm.TownCrierMessageDialog(cm.TownCrierMessageManager);
            var n = new cm.TownCrierFooterNav(cm.TownCrierMessageManager);
            var i = new cm.FooterNavController(cm.TownCrierMessageManager, n);
            j.setFooter(n.getHtmlElement());
            j.show()
        };
    var a = function () {
            var i = new cm.TownCrierNotificationDialog(c);
            i.addEventListener(cm.TownCrierDialogEvent.OK, d);
            i.show()
        };
    var b = function (j) {
            var i = j.getMessage();
            if (i.isRead()) {
                if (g < e.length) {
                    a()
                }
            } else {
                if (g < e.length - 1) {
                    g++;
                    a()
                }
            }
        };
    var h = function (m) {
            var n = m.getTarget().getId();
            var l, j;
            for (j = 0; j < e.length; j++) {
                l = e[j];
                if (l.getId() == n) {
                    e.splice(j, 1);
                    g = Math.min(g, e.length - 1);
                    var k = new cm.TownCrierNotificationManagerEvent(cm.TownCrierNotificationManagerEvent.COUNT_DECREASE);
                    k.setTarget(c);
                    c.dispatchCustomEvent(k)
                }
            }
        };
    this.add = function (j) {
        if (!j.isRead()) {
            e.push(j);
            j.addEventListener(cm.TownCrierMessageEvent.READ, h);
            if (e.length == 1) {
                a()
            }
            var i = new cm.TownCrierNotificationManagerEvent(cm.TownCrierNotificationManagerEvent.COUNT_INCREASE);
            i.setTarget(c);
            c.dispatchCustomEvent(i)
        }
    };
    this.getMessageCount = function () {
        return e.length
    };
    this.getMessage = function () {
        return e[g]
    };
    this.getIndex = function () {
        return g
    }
};
cm.TownCrierNotificationManagerClass.prototype = new cm.CustomEventDispatcher();
cm.TownCrierNotificationManagerClass.prototype.constructor = cm.TownCrierNotificationManagerClass;
cm.TownCrierNotificationManager = new cm.TownCrierNotificationManagerClass();

function viral_tracking(serverId, tracking_code, userid, other) {
    var params = Object.clone(g_ajaxparams);
    params.tracking_code = tracking_code;
    params.serverId = serverId;
    params.userId = userid;
    params.other = other;
    new Ajax.Request(g_ajaxpath + "ajax/tracking.php" + g_ajaxsuffix, {
        method: "post",
        parameters: params,
        onSuccess: function (response) {
            var rslt = eval("(" + response.responseText + ")");
            if (rslt.ok) {} else {}
        },
        onFailure: function () {}
    })
};

function cancelTraining(c, h, i, a, n, f, g) {
    var o = new Array();
    var k = new Array();
    o.push("<div id='modal_lv10'>");
    o.push("<div class='lv10 clearfix'>");
    o.push("<div class='info' style='margin-left: 10px; width: 340px;'><div class='ttl'>");
    o.push(g_js_strings.cancelTraining.canceltrainingtakes);
    o.push("<table cellpadding='2' cellspacing='0'><tbody><tr>");
    var e = ["Food", "Wood", "Stone", "Ore"];
    var b = 1;
    var m = checkreq("unt", i, 1);
    for (var d = 0; d < m[0].length; d++) {
        if (e.indexOf(m[0][d]) != -1) {
            var l = new Array();
            l.push("<td class='rec'>" + m[0][d] + "</td>");
            if (parseInt(m[1][d]) > 0) {
                l.push("<td class='rec'>" + addCommas(parseInt(m[1][d]) * a / 2) + "</td>")
            } else {
                l.push("<td class='rec'>" + m[1][d] * a / 2 + "</td>")
            }
            if (b % 2 == 0) {
                o.push(l.join("") + "</tr>")
            } else {
                o.push(l.join(""))
            }
            b++
        }
    }
    o.push("</tbody></table>");
    o.push("</div></div>");
    o.push("</div>");
    o.push("<div class='btns clearfix'>");
    o.push("<a  class='button20' onclick='removeTraining(" + c + "," + h + "," + i + "," + a + "," + n + "," + f + "," + g + ");return false;'><span>" + g_js_strings.cancelTraining.canceltraining + "</span></a>");
    o.push("<a  class='cancel' onclick='Modal.hideModal();return false;'>" + g_js_strings.commonstr.cancel + "</a>");
    o.push("</div></div>");
    Modal.showModal(400, 400, 130, 130, g_js_strings.cancelTraining.canceltrainingtitle, o.join(""))
}
function removeTraining(trainingId, cityId, typetrn, numtrptrn, trnETA, trnTmp, trnNeeded, speedUpTraining) {
    var params = Object.clone(g_ajaxparams);
    params.requestType = "CANCEL_TRAINING";
    params.cityId = cityId;
    params.typetrn = typetrn;
    params.numtrptrn = numtrptrn;
    params.trnETA = trnETA;
    params.trnTmp = trnTmp;
    params.trnNeeded = trnNeeded;
    new Ajax.Request(g_ajaxpath + (speedUpTraining ? "ajax/speedupTraining.php" : "ajax/cancelTraining.php") + g_ajaxsuffix, {
        method: "post",
        parameters: params,
        onSuccess: function (message) {
            var rslt = eval("(" + message.responseText + ")");
            if (rslt.ok) {
                update_seed_ajax(true, function () {
                    var k = 0;
                    for (var j = 0; j < seed.queue_unt["city" + cityId].length; j++) {
                        if (j > trainingId) {
                            seed.queue_unt["city" + cityId][j][2] = parseInt(rslt.dateTraining[k]["start"]);
                            seed.queue_unt["city" + cityId][j][3] = parseInt(rslt.dateTraining[k]["end"]);
                            k++
                        }
                    }
                    seed.queue_unt["city" + cityId].splice(trainingId, 1);
                    for (var i = 1; i < 5; i++) {
                        var totalReturn = parseInt(unitcost["unt" + typetrn][i]) * parseInt(numtrptrn) * 3600 / 2;
                        seed.resources["city" + cityId]["rec" + i][0] = parseInt(seed.resources["city" + cityId]["rec" + i][0]) + totalReturn
                    }
                    Modal.hideModalAll()
                })
            } else {
                Modal.showAlert(printLocalError((rslt.error_code || null), (rslt.msg || null), (rslt.feedback || null)))
            }
        },
        onFailure: function () {}
    })
}
function cancelFortifications(b, g, f, l, a, i, h, k) {
    var p = new Array();
    var m = new Array();
    p.push("<div id='modal_lv10'>");
    p.push("<div class='lv10 clearfix'>");
    p.push("<div class='info' style='margin-left: 10px; width: 340px;'><div class='ttl'>");
    p.push(g_js_strings.cancelFortification.cancelfortificationtakes);
    p.push("<table cellpadding='2' cellspacing='0'><tbody><tr>");
    var e = ["Food", "Wood", "Stone", "Ore"];
    var c = 1;
    var o = checkreq("frt", f, 1);
    for (var d = 0; d < o[0].length; d++) {
        if (e.indexOf(o[0][d]) != -1) {
            var n = new Array();
            n.push("<td class='rec'>" + o[0][d] + "</td>");
            if (parseInt(o[1][d]) > 0) {
                n.push("<td class='rec'>" + addCommas(parseInt(o[1][d]) * l / 2) + "</td>")
            } else {
                n.push("<td class='rec'>" + o[1][d] * l / 2 + "</td>")
            }
            if (c % 2 == 0) {
                p.push(n.join("") + "</tr>")
            } else {
                p.push(n.join(""))
            }
            c++
        }
    }
    p.push("</tbody></table>");
    p.push("</div></div>");
    p.push("</div>");
    p.push("<div class='btns clearfix'>");
    p.push("<a  class='button20' onclick='removeFortifications(" + b + "," + g + "," + f + "," + l + "," + a + "," + i + "," + h + "," + k + ");return false;'><span>" + g_js_strings.cancelFortification.cancelfortification + "</span></a>");
    p.push("<a  class='cancel' onclick='Modal.hideModal();return false;'>" + g_js_strings.commonstr.cancel + "</a>");
    p.push("</div></div>");
    Modal.showModal(400, 400, 130, 130, g_js_strings.cancelFortification.cancelfortificationtitle, p.join(""))
}
function removeFortifications(queueId, cityId, typefrt, numtrpfrt, frtETA, frtTmp, frtNeeded, frtid) {
    var params = Object.clone(g_ajaxparams);
    params.requestType = "CANCEL_FORTIFICATIONS";
    params.cityId = cityId;
    params.typefrt = typefrt;
    params.numtrpfrt = numtrpfrt;
    params.frtETA = frtETA;
    params.frtTmp = frtTmp;
    params.frtNeeded = frtNeeded;
    params.frtid = frtid;
    new Ajax.Request(g_ajaxpath + "ajax/cancelFortifications.php" + g_ajaxsuffix, {
        method: "post",
        parameters: params,
        onSuccess: function (message) {
            var rslt = eval("(" + message.responseText + ")");
            if (rslt.ok) {
                var k = 0;
                for (var j = 0; j < seed.queue_fort["city" + cityId].length; j++) {
                    if (j > queueId) {
                        seed.queue_fort["city" + cityId][j][2] = parseInt(rslt.dateFortifications[k]["start"]);
                        seed.queue_fort["city" + cityId][j][3] = parseInt(rslt.dateFortifications[k]["end"]);
                        k++
                    }
                }
                seed.queue_fort["city" + cityId].splice(queueId, 1);
                for (var i = 1; i < 5; i++) {
                    var totalReturn = parseInt(fortcost["frt" + typefrt][i]) * parseInt(numtrpfrt) * 3600 / 2;
                    seed.resources["city" + cityId]["rec" + i][0] = parseInt(seed.resources["city" + cityId]["rec" + i][0]) + totalReturn
                }
                Modal.hideModalAll()
            } else {
                Modal.showAlert(printLocalError((rslt.error_code || null), (rslt.msg || null), (rslt.feedback || null)))
            }
        },
        onFailure: function () {}
    })
};
var cm = cm || {};
var cm = function (a) {
        var b = a.TutorialKeyController = a.TutorialKeyController || {};
        var c = function (f) {
                var d = f.keyCode ? f.keyCode : f.which ? f.which : f.charCode;
                if (d == 8 || d == 9) {
                    f.cancelBubble = true;
                    f.returnValue = false;
                    if (f.stopPropagation) {
                        f.stopPropagation();
                        f.preventDefault()
                    }
                }
            };
        b.disableKeys = function () {
            Event.observe(document, "keydown", c)
        };
        b.enableKeys = function () {
            Event.stopObserving(document, "keydown", c)
        };
        return a
    }(cm);

function tutorialMerlinTutorial(c) {
    cm.TutorialKeyController.disableKeys();
    tutorialClear();
    var a = new Array();
    var d = g_showNewTutorial ? "bltutorial" : "merlintutorial";
    switch (c) {
    case 0:
        if (g_showNewTutorial) {
            a.push("<div class='content'>");
            a.push("<div class='desc'>" + g_js_strings.tutorialMerlinTutorial.merlin0a.replace("%1$s", seed.player.prefix) + "</div>");
            a.push("<div class='buttonrow clearfix'>");
            a.push("<a class='brownButton' onclick='tutorialMerlinTutorial(10);return false;'>" + g_js_strings.commonstr.nothanks + "</a>");
            a.push("<a class='blueButton' onclick='tutorialMerlinTutorial(2);return false;'>" + g_js_strings.commonstr.next + "</a></div>");
            a.push("</div>")
        } else {
            a.push("<div class='content'>");
            a.push("<div class='desc'>" + g_js_strings.tutorialMerlinTutorial.merlin0.replace("%1$s", seed.player.prefix) + "</div>");
            a.push("<div class='buttonrow clearfix'>");
            a.push("<a class='button20' onclick='tutorialMerlinTutorial(1);return false;'><span>" + g_js_strings.commonstr.next + "</span></a><a class='textlink' onclick='tutorialMerlinTutorial(10);return false;'>" + g_js_strings.commonstr.nothanks + "</a></div>");
            a.push("</div>")
        }
        cm.ConversionTracker.track(g_tutorialEntryTag, "FTE Tutorial v3-Merlin Intro-1" + seed.player.g);
        cm.ConversionTracker.track(g_tutorialEntryTag, "FTE Tutorial v3 Skip-Merlin Intro-1" + seed.player.g);
        cm.MixPanelTracker.trackFunnel("FTE Tutorial v3", 1, "Merlin Intro", {
            usr_gen: seed.player.g,
            usr_byr: seed.player.y,
            usr_ttl: titlenames[seed.player.title],
            distinct_id: tvuid
        });
        cm.MixPanelTracker.trackFunnel("FTE Tutorial v3 Skip", 1, "Merlin Intro", {
            usr_gen: seed.player.g,
            usr_byr: seed.player.y,
            usr_ttl: titlenames[seed.player.title],
            distinct_id: tvuid
        });
        if (numWorlds == 1) {
            cm.ConversionTracker.track("", "fte_conv_merlin_intro");
            fteConversionTracker("fte_conv_merlin_intro")
        }
        break;
    case 1:
        a.push("<div class='content'>");
        a.push("<div class='desc'>" + g_js_strings.tutorialMerlinTutorial.merlin1 + "</div>");
        a.push("<div class='buttonrow clearfix'>");
        a.push("<a class='button20' onclick='tutorialMerlinTutorial(2);return false;'><span>" + g_js_strings.commonstr.next + "</span></a></div>");
        a.push("</div>");
        cm.ConversionTracker.track(g_tutorialEntryTag, "FTE Tutorial v3-Merlin Increase Might-2");
        cm.MixPanelTracker.trackFunnel("FTE Tutorial v3", 2, "Merlin Increase Might", {
            usr_gen: seed.player.g,
            usr_byr: seed.player.y,
            usr_ttl: titlenames[seed.player.title],
            distinct_id: tvuid
        });
        if (numWorlds == 1) {
            cm.ConversionTracker.track("", "fte_conv_merlin_increase_might");
            fteConversionTracker("fte_conv_merlin_increase_might")
        }
        break;
    case 2:
        if (g_showNewTutorial) {
            seed.tutorial.t1 = 13;
            tutorialCheck(13)
        } else {
            seed.tutorial.t1 = 12;
            tutorialCheck(12)
        }
        return;
        break;
    case 3:
        a.push("<div class='content'>");
        a.push("<div class='desc'>" + g_js_strings.tutorialMerlinTutorial.merlin3 + "</div>");
        a.push("<div class='buttonrow clearfix'>");
        a.push("<a class='button20' onclick='seed.tutorial.t1=12;tutorialCheck(12);return false;'><span>" + g_js_strings.commonstr.next + "</span></a></div>");
        a.push("</div>");
        break;
    case 4:
        a.push("<div class='content'>");
        a.push("<div class='desc'>" + g_js_strings.tutorialMerlinTutorial.merlin4 + "</div>");
        a.push("<div class='buttonrow clearfix'>");
        a.push("<a class='button20' onclick='seed.tutorial.t1=19;tutorialCheck(19);return false;'><span>" + g_js_strings.commonstr.next + "</span></a>");
        if (seed.player.entryTag == "fb884") {
            a.push("<img src='http://offerpal.go2jump.org/aff_l?offer_id=500' width='1' height='1'/>")
        }
        a.push("</div>");
        a.push("</div>");
        cm.ConversionTracker.track(g_tutorialEntryTag, "FTE Tutorial v3-Merlin Build Cottage-4");
        cm.MixPanelTracker.trackFunnel("FTE Tutorial v3", 4, "Merlin Build Cottage", {
            usr_gen: seed.player.g,
            usr_byr: seed.player.y,
            usr_ttl: titlenames[seed.player.title],
            distinct_id: tvuid
        });
        if (numWorlds == 1) {
            cm.ConversionTracker.track("", "fte_conv_merlin_build_cottage");
            fteConversionTracker("fte_conv_merlin_build_cottage")
        }
        break;
    case 5:
        if (g_showNewTutorial) {
            d = "bltutorial ending";
            a.push("<div class='content'>");
            a.push("<div class='desc'>" + g_js_strings.tutorialMerlinTutorial.merlin5a + "</div>");
            a.push("<div class='buttonrow'>");
            a.push("<a class='blueButton' onclick='tutorialMerlinOver();return false;'><span>" + g_js_strings.commonstr.next + "</span></a><br clear='all' /></div>");
            a.push("</div>")
        } else {
            a.push("<div class='content'>");
            a.push("<div class='desc'>" + g_js_strings.tutorialMerlinTutorial.merlin5 + "</div>");
            a.push("<div class='buttonrow clearfix'>");
            a.push("<a class='button20' onclick='tutorialMerlinTutorial(6);return false;'><span>" + g_js_strings.commonstr.next + "</span></a></div>");
            a.push("</div>")
        }
        cm.ConversionTracker.track(g_tutorialEntryTag, "FTE Tutorial v3-Merlin Level Up-5");
        cm.MixPanelTracker.trackFunnel("FTE Tutorial v3", 5, "Merlin Level Up", {
            usr_gen: seed.player.g,
            usr_byr: seed.player.y,
            usr_ttl: titlenames[seed.player.title],
            distinct_id: tvuid
        });
        if (numWorlds == 1) {
            cm.ConversionTracker.track("", "fte_conv_merlin_level_up");
            fteConversionTracker("fte_conv_merlin_level_up")
        }
        break;
    case 6:
        a.push("<div class='content'>");
        a.push("<div class='desc'>" + g_js_strings.tutorialMerlinTutorial.merlin7 + "</div>");
        a.push("<div class='buttonrow clearfix'>");
        a.push("<a class='button20' onclick=\"tutorialMerlinOver();return false;\"><span>" + g_js_strings.commonstr.ok + "</span></a></div>");
        a.push("</div>");
        cm.ConversionTracker.track(g_tutorialEntryTag, "FTE Tutorial v3-Merlin End-6");
        cm.MixPanelTracker.trackFunnel("FTE Tutorial v3", 6, "Merlin End", {
            usr_gen: seed.player.g,
            usr_byr: seed.player.y,
            usr_ttl: titlenames[seed.player.title],
            distinct_id: tvuid
        });
        if (numWorlds == 1) {
            cm.ConversionTracker.track("", "fte_conv_merlin_end");
            fteConversionTracker("fte_conv_merlin_end")
        }
        break;
    case 10:
        if (g_showNewTutorial) {
            a.push("<div class='content'>");
            a.push("<div class='desc'>" + g_js_strings.tutorialMerlinTutorial.merlin10a + "</div>");
            a.push("<div class='buttonrow clearfix'>");
            a.push("<a class='brownButton' onclick='tutorialNoShow();return false;'>" + g_js_strings.tutorialMerlinTutorial.skiptutorial + "</span></a>");
            a.push("<a class='blueButton' onclick='tutorialMerlinTutorial(0);return false;'><span>" + g_js_strings.commonstr.cancel + "</span></a>");
            a.push("</div>");
            a.push("</div>")
        } else {
            a.push("<div class='content'>");
            a.push("<div class='desc'>" + g_js_strings.tutorialMerlinTutorial.merlin10 + "</div>");
            a.push("<div class='buttonrow clearfix'>");
            a.push("<a class='button20' onclick='tutorialNoShow();return false;'><span>" + g_js_strings.tutorialMerlinTutorial.skiptutorial + "</span></a>");
            a.push("<a class='button20' onclick='tutorialMerlinTutorial(0);return false;'><span>" + g_js_strings.commonstr.cancel + "</span></a>");
            a.push("</div>");
            a.push("</div>")
        }
        break;
    default:
        break
    }
    var b = document.createElement("div");
    b.id = "modal_tutorial_merlin";
    b.className = d;
    document.getElementsByTagName("body")[0].appendChild(b);
    b.innerHTML = a.join("");
    Modal.showCurtain();
    if (c == 3) {
        $("modalCurtain0").setOpacity(0.3)
    }
}
cm.MerlinTutorialDialog = function (a) {
    var b = document.createElement("div");
    b.id = "modal_tutorial_merlin";
    b.className = "merlintutorial";
    b.innerHTML = a;
    this.show = function () {
        document.getElementsByTagName("body")[0].appendChild(b);
        Modal.showCurtain()
    }
};
cm.BLTutorialDialog = function (a) {
    var b = document.createElement("div");
    b.id = "modal_tutorial_merlin";
    b.className = "bltutorial";
    b.innerHTML = a;
    this.show = function () {
        document.getElementsByTagName("body")[0].appendChild(b);
        Modal.showCurtain()
    };
    this.setClassName = function (c) {
        b.className = c
    }
};

function tutorialMerlinOver() {
    cm.TutorialKeyController.enableKeys();
    tutorialClear();
    tutorialAdvance(1, 50);
    jQuery(document).trigger("tutorialEnd");
    ProgressBar.initializeProgressBar(1, true)
}
function tutorialNoShow() {
    cm.TutorialKeyController.enableKeys();
    seed.tutorial.t1 = 99;
    tutorialAdvance(1, 99);
    tutorialClear();
    Modal.hideModalAll();
    jQuery(document).trigger("tutorialEnd");
    ProgressBar.initializeProgressBar(1, true);
    cm.ConversionTracker.track(g_tutorialEntryTag, "FTE Tutorial v3 Skip-Merlin Skipped-2" + seed.player.g);
    cm.MixPanelTracker.trackFunnel("FTE Tutorial v3 Skip", 2, "Merlin Skipped", {
        usr_gen: seed.player.g,
        usr_byr: seed.player.y,
        usr_ttl: titlenames[seed.player.title],
        distinct_id: tvuid
    });
    cm.ConversionTracker.track("biftetracking", 1800, 1)
}
function tutorialClear() {
    $("arrowtip").hide();
    $("tutorialCover").className = "tutorialcover";
    $("tutorialCover").hide();
    Modal.hideCurtain();
    if ($("modal_tutorial_merlin")) {
        $("modal_tutorial_merlin").remove()
    }
}
function tutorialDecree() {
    Modal.hideModalAll();
    var a = new Array();
    a.push("<div class='tutimg'><img src='");
    a.push(stimgUrl);
    a.push("img/tutorial/b5.jpg'/></div>");
    a.push("<div class='clearfix getreward'>");
    a.push("<a  class='button25' onclick='tutorialDecreeOk();return false;'><span>" + g_js_strings.tutorialDecree.getrwd + "</span></a></div>");
    a.push("<div class='noshow' style='display:none;'><input type='checkbox' id='modal_tutorialdecree_check'/>" + g_js_strings.tutorialDecree.donotshowtut + "</div>");
    var b = document.createElement("div");
    b.id = "modal_tutorialdecree";
    b.innerHTML = a.join("");
    document.getElementsByTagName("body")[0].appendChild(b);
    Modal.showCurtain()
}
function tutorialDecreeOk() {
    if ($("modal_tutorialdecree_check").checked) {} else {
        tutorialDone(1);
        tutorialCheck(2)
    }
    document.getElementsByTagName("body")[0].removeChild($("modal_tutorialdecree"));
    Modal.hideCurtain()
}
function tutorialDone(a) {
    if (a == parseInt(seed.tutorial.t1)) {
        tutorialAdvance(1, a + 1);
        seed.tutorial.t1 = a + 1
    }
}
function tutorialAdvance(step, state) {
    if (state == 10) {
        var params = Object.clone(g_ajaxparams);
        params.action = g_tutorial_start;
        params.serverId = g_server;
        params.uid = tvuid;
        new Ajax.Request(g_ajaxpath + "ajax/funnelTracking.php" + g_ajaxsuffix, {
            method: "post",
            parameters: params,
            onSuccess: function () {},
            onFailure: function () {}
        })
    }
    if (state > 21) {
        var params = Object.clone(g_ajaxparams);
        params.action = g_tutorial_end;
        params.serverId = g_server;
        params.uid = tvuid;
        new Ajax.Request(g_ajaxpath + "ajax/funnelTracking.php" + g_ajaxsuffix, {
            method: "post",
            parameters: params,
            onSuccess: function () {},
            onFailure: function () {}
        })
    }
    var params = Object.clone(g_ajaxparams);
    params.step = step;
    params.state = state;
    new Ajax.Request(g_ajaxpath + "ajax/progressTutorial.php" + g_ajaxsuffix, {
        method: "post",
        parameters: params,
        onSuccess: function (transport) {
            var rslt = eval("(" + transport.responseText + ")");
            if (rslt.ok) {
                if (parseInt(step) != 1) {
                    seed.tutorial["t" + step] = state
                }
            } else {
                Modal.showAlert(printLocalError((rslt.error_code || null), (rslt.msg || null), (rslt.feedback || null)))
            }
        },
        onFailure: function () {}
    })
}
function tutorialCheck(b) {
    if (b && b != parseInt(seed.tutorial.t1)) {
        tutorialClear();
        return false
    }
    tutorialClear();
    var a = Object.keys(seed.buildings["city" + currentcityid]);
    for (var c = 0; c < a.length; c++) {
        if (parseInt(seed.buildings["city" + currentcityid][a[c]][0]) == 5) {
            seed.tutorial.t1 = 22
        }
    }
    switch (parseInt(seed.tutorial.t1)) {
    case 0:
        if (g_showNewTutorial) {
            $("arrowtip").innerHTML = "<div class='arrowdown'><div width='width:200px;'>" + g_js_strings.tutorialCheck.clickforcott_a + "</div></div>"
        } else {
            $("arrowtip").innerHTML = "<div class='arrowdown'><div>" + g_js_strings.tutorialCheck.clickforcott + "</div></div>"
        }
        $("arrowtip").style.top = "260px";
        $("arrowtip").style.left = "385px";
        $("arrowtip").show();
        $("tutorialCover").addClassName("cottage");
        $("tutorialCover").show();
        break;
    case 1:
        $("arrowtip").hide();
        tutorialDecree();
        break;
    case 2:
        if (g_showNewTutorial) {
            $("arrowtip").innerHTML = "<div class='arrowup'><div style='width:200px;'>" + g_js_strings.tutorialCheck.clickforquests_a + "</div></div>"
        } else {
            $("arrowtip").innerHTML = "<div class='arrowup'><div>" + g_js_strings.tutorialCheck.clickforquests + "</div></div>"
        }
        $("arrowtip").style.top = "55px";
        $("arrowtip").style.left = "285px";
        $("arrowtip").show();
        $("tutorialCover").addClassName("quest");
        $("tutorialCover").show();
        break;
    case 3:
        if ($("modal_quests")) {
            if ($("modal_quests").visible()) {
                $("arrowtip").innerHTML = "<div class='arrowleft'></div>";
                $("arrowtip").style.top = "298px";
                $("arrowtip").style.left = "480px";
                $("arrowtip").show()
            }
        }
        break;
    case 4:
        $("arrowtip").innerHTML = "<div class='arrowup'><div>" + g_js_strings.tutorialCheck.clickforfield + "</div></div>";
        $("arrowtip").style.top = "239px";
        $("arrowtip").style.left = "49px";
        $("arrowtip").show();
        $("tutorialCover").addClassName("fieldview");
        $("tutorialCover").show();
        return true;
        break;
    case 5:
        tutorialClear();
        if ($("maparea_fields").visible()) {
            if (g_showNewTutorial) {
                $("arrowtip").innerHTML = "<div class='arrowdown'><div style='width:200px;'>" + g_js_strings.tutorialCheck.clickforsawmill_a + "</div></div>"
            } else {
                $("arrowtip").innerHTML = "<div class='arrowdown'><div>" + g_js_strings.tutorialCheck.clickforsawmill + "</div></div>"
            }
            $("arrowtip").style.top = "170px";
            $("arrowtip").style.left = "300px";
            $("arrowtip").show();
            $("tutorialCover").addClassName("sawmill");
            $("tutorialCover").show()
        }
        break;
    case 10:
        if (seed.items.i10020) {
            $("arrowtip").innerHTML = "<div class='arrowup'><div>" + g_js_strings.tutorialCheck.clickformyitems + "</div></div>";
            $("arrowtip").style.top = "100px";
            $("arrowtip").style.left = "483px";
            $("arrowtip").show();
            $("tutorialCover").addClassName("myitems");
            tutorialUpdateCover(50, 105);
            $("tutorialCover").show();
            if (numWorlds == 1) {
                cm.ConversionTracker.track("", "fte_conv_my_items");
                fteConversionTracker("fte_conv_my_items")
            }
            break
        } else {
            tutorialAdvance(1, 12);
            break
        }
    case 11:
        if (seed.items.i10020) {
            $("arrowtip").innerHTML = "<div class='arrowleft'><div>" + g_js_strings.tutorialCheck.clickopenchest + "</div></div>";
            $("arrowtip").style.top = "211px";
            $("arrowtip").style.left = "279px";
            $("arrowtip").show();
            $("tutorialCover").addClassName("startchest");
            $("tutCovTop").setStyle({
                height: "190px"
            });
            $("tutCovLeft").setStyle({
                top: "190px"
            });
            $("tutCovRight").setStyle({
                top: "190px"
            });
            $("tutCovBottom").setStyle({
                top: "301px"
            });
            $("tutorialCover").show();
            if (numWorlds == 1) {
                cm.ConversionTracker.track("", "fte_conv_new_city_chest");
                fteConversionTracker("fte_conv_new_city_chest")
            }
            break
        } else {
            tutorialAdvance(1, 12);
            break
        }
    case 12:
        if (seed.buildings["city" + currentcityid]["pos107"]) {
            tutorialAdvance(1, 16);
            break
        } else {
            tutorialAdvance(1, 12);
            $("arrowtip").innerHTML = "<div class='arrowup'><div>" + g_js_strings.tutorialCheck.clickforfield + "</div></div>";
            $("arrowtip").style.top = "139px";
            $("arrowtip").style.left = "49px";
            $("arrowtip").show();
            $("tutorialCover").addClassName("fieldview");
            tutorialUpdateCover(109, 143);
            $("tutorialCover").show();
            if (numWorlds == 1) {
                cm.ConversionTracker.track("", "fte_conv_field_view");
                fteConversionTracker("fte_conv_field_view")
            }
            return true;
            break
        }
    case 13:
        if (seed.buildings["city" + currentcityid]["pos107"]) {
            tutorialAdvance(1, 16);
            break
        } else {
            tutorialAdvance(1, 13);
            if (!$("maparea_fields").visible()) {
                changeview_fields($("mod_views_field"))
            }
            if (g_showNewTutorial) {
                $("arrowtip").innerHTML = "<div class='arrowdown'><div style='margin-top:-80px;width:200px;'>" + g_js_strings.tutorialCheck.clickforsawmill_a + "</div></div>";
                $("arrowtip").style.top = "210px"
            } else {
                $("arrowtip").innerHTML = "<div class='arrowdown'><div>" + g_js_strings.tutorialCheck.clickforsawmill + "</div></div>";
                $("arrowtip").style.top = "217px"
            }
            $("arrowtip").style.left = "300px";
            $("arrowtip").show();
            $("tutorialCover").addClassName("sawmill");
            tutorialUpdateCover(314, 369);
            $("tutorialCover").show();
            if (numWorlds == 1) {
                cm.ConversionTracker.track("", "fte_conv_start_sawmill");
                fteConversionTracker("fte_conv_start_sawmill")
            }
            break
        }
    case 14:
        if (seed.buildings["city" + currentcityid]["pos107"]) {
            tutorialAdvance(1, 16);
            break
        } else {
            if (g_showNewTutorial) {
                $("arrowtip").innerHTML = "<div class='arrowleft'><div>" + g_js_strings.tutorialCheck.clickheresawmill_a + "</div></div>"
            } else {
                $("arrowtip").innerHTML = "<div class='arrowleft'><div>" + g_js_strings.tutorialCheck.clickheresawmill + "</div></div>"
            }
            $("arrowtip").style.top = "251px";
            $("arrowtip").style.left = "244px";
            $("arrowtip").show();
            $("tutorialCover").addClassName("clicksawmill");
            tutorialUpdateCover(117, 306);
            $("tutorialCover").show();
            if (numWorlds == 1) {
                cm.ConversionTracker.track("", "fte_conv_select_sawmill");
                fteConversionTracker("fte_conv_select_sawmill")
            }
            break
        }
    case 15:
        if (seed.buildings["city" + currentcityid]["pos107"]) {
            if (seed.queue_con["city" + currentcityid] && seed.queue_con["city" + currentcityid].length > 0) {
                if (g_showNewTutorial) {
                    $("arrowtip").innerHTML = "<div class='arrowdown'><div style='margin-top:-150px;width:150px;'>" + g_js_strings.tutorialCheck.buildingtimeline + "</div></div>"
                } else {
                    $("arrowtip").innerHTML = "<div class='arrowdown'></div>"
                }
                $("arrowtip").style.top = "465px";
                $("arrowtip").style.left = "500px";
                $("arrowtip").show();
                Modal.showCurtain();
                $("modalCurtain0").setOpacity(0.3)
            } else {
                tutorialAdvance(1, 16)
            }
        } else {
            if (g_showNewTutorial) {
                $("arrowtip").innerHTML = "<div class='arrowdown'><div>" + g_js_strings.tutorialCheck.clickbuildnohelp_a + "</div></div>"
            } else {
                $("arrowtip").innerHTML = "<div class='arrowdown'><div>" + g_js_strings.tutorialCheck.clickbuildnohelp + "</div></div>"
            }
            $("arrowtip").style.top = "175px";
            $("arrowtip").style.left = "379px";
            $("arrowtip").show();
            Modal.showCurtain();
            if (numWorlds == 1) {
                cm.ConversionTracker.track("", "fte_conv_build_sawmill");
                fteConversionTracker("fte_conv_build_sawmill")
            }
        }
        break;
    case 16:
        if (seed.quests.q1021 && parseInt(seed.quests.q1021) > 0) {
            tutorialAdvance(1, 18);
            break
        } else {
            tutorialAdvance(1, 16);
            Modal.hideModalAll();
            if (g_showNewTutorial) {
                $("arrowtip").innerHTML = "<div class='arrowup'><div style='width:200px;'>" + g_js_strings.tutorialCheck.clickforquests_a + "</div></div>"
            } else {
                $("arrowtip").innerHTML = "<div class='arrowup'><div>" + g_js_strings.tutorialCheck.clickforquests + "</div></div>"
            }
            $("arrowtip").style.top = "100px";
            $("arrowtip").style.left = "279px";
            $("arrowtip").show();
            $("tutorialCover").addClassName("quest");
            tutorialUpdateCover(50, 105);
            $("tutorialCover").show();
            if (numWorlds == 1) {
                cm.ConversionTracker.track("", "fte_conv_click_quest");
                fteConversionTracker("fte_conv_click_quest")
            }
            break
        }
    case 17:
        if (seed.quests.q1021 && parseInt(seed.quests.q1021) > 0) {
            tutorialAdvance(1, 18);
            break
        } else {
            $("arrowtip").innerHTML = "<div class='arrowright'><div>" + g_js_strings.tutorialCheck.clickforreward + "</div></div>";
            $("arrowtip").style.top = "497px";
            $("arrowtip").style.left = "340px";
            $("arrowtip").show();
            Modal.showCurtain();
            if (numWorlds == 1) {
                cm.ConversionTracker.track("", "fte_conv_get_quest_reward");
                fteConversionTracker("fte_conv_get_quest_reward")
            }
            break
        }
    case 18:
        if (g_showNewTutorial) {
            seed.tutorial.t1 = 19;
            tutorialCheck(19);
            tutorialAdvance(1, 19)
        } else {
            tutorialAdvance(1, 18);
            tutorialMerlinTutorial(4)
        }
        break;
    case 19:
        tutorialAdvance(1, 19);
        if (g_showNewTutorial) {
            $("arrowtip").innerHTML = "<div class='arrowup'><div style='width:200px;'>" + g_js_strings.tutorialCheck.clickforcity_a + "</div></div>"
        } else {
            $("arrowtip").innerHTML = "<div class='arrowup'><div>" + g_js_strings.tutorialCheck.clickforcity + "</div></div>"
        }
        $("arrowtip").style.top = "148px";
        $("arrowtip").style.left = "6px";
        $("arrowtip").show();
        $("tutorialCover").addClassName("cityview");
        tutorialUpdateCover(109, 150);
        $("tutorialCover").show();
        if (numWorlds == 1) {
            cm.ConversionTracker.track("", "fte_conv_city_view");
            fteConversionTracker("fte_conv_city_view")
        }
        break;
    case 20:
        tutorialAdvance(1, 20);
        if (g_showNewTutorial) {
            $("arrowtip").innerHTML = "<div class='arrowdown'><div style='margin-top:-80px;width:200px;'>" + g_js_strings.tutorialCheck.clickforcott_a + "</div></div>"
        } else {
            $("arrowtip").innerHTML = "<div class='arrowdown'><div>" + g_js_strings.tutorialCheck.clickforcott + "</div></div>"
        }
        $("arrowtip").style.top = "236px";
        $("arrowtip").style.left = "240px";
        $("arrowtip").show();
        $("tutorialCover").addClassName("cottage");
        tutorialUpdateCover(329, 388);
        $("tutorialCover").show();
        if (numWorlds == 1) {
            cm.ConversionTracker.track("", "fte_conv_start_cottage");
            fteConversionTracker("fte_conv_start_cottage")
        }
        break;
    case 21:
        if (g_showNewTutorial) {
            $("arrowtip").innerHTML = "<div class='arrowleft'><div>" + g_js_strings.tutorialCheck.clickherecottage_a + "</div></div>"
        } else {
            $("arrowtip").innerHTML = "<div class='arrowleft'><div>" + g_js_strings.tutorialCheck.clickherecottage + "</div></div>"
        }
        $("arrowtip").style.top = "252px";
        $("arrowtip").style.left = "130px";
        $("arrowtip").show();
        $("tutorialCover").addClassName("clickcottage");
        tutorialUpdateCover(117, 306);
        $("tutorialCover").show();
        if (numWorlds == 1) {
            cm.ConversionTracker.track("", "fte_conv_select_cottage");
            fteConversionTracker("fte_conv_select_cottage")
        }
        break;
    case 22:
        tutorialAdvance(1, 22);
        tutorialMerlinTutorial(5);
        break;
    default:
        tutorialClear();
        return true
    }
}
function tutorialDecreeCheckBdg(a) {
    a = parseInt(a);
    switch (a) {
    case 0:
        tutorialDecreeCheck(3, a);
        break;
    case 1:
        tutorialDecreeCheck(17, a);
        break;
    case 2:
        tutorialDecreeCheck(16, a);
        break;
    case 3:
        tutorialDecreeCheck(18, a);
        break;
    case 4:
        tutorialDecreeCheck(19, a);
        break;
    case 5:
        break;
    case 6:
        tutorialDecreeCheck(26, a);
        break;
    case 7:
        tutorialDecreeCheck(4, a);
        break;
    case 8:
        tutorialDecreeCheck(9, a);
        break;
    case 9:
        tutorialDecreeCheck(5, a);
        break;
    case 10:
        tutorialDecreeCheck(8, a);
        break;
    case 11:
        tutorialDecreeCheck(7, a);
        break;
    case 12:
        tutorialDecreeCheck(20, a);
        break;
    case 13:
        tutorialDecreeCheck(6, a);
        break;
    case 14:
        tutorialDecreeCheck(23, a);
        break;
    case 15:
        tutorialDecreeCheck(22, a);
        break;
    case 16:
        tutorialDecreeCheck(21, a);
        break;
    case 17:
        tutorialDecreeCheck(24, a);
        break;
    default:
        return true
    }
}
function tutorialDecreeCheck(a, b) {
    if (parseInt(seed.tutorial["t" + a]) != 1) {
        switch (a) {
        case 2:
            break;
        case 3:
            tutorialDecreeDispBdg(b);
            break;
        case 4:
            tutorialDecreeDispBdg(b);
            break;
        case 5:
            tutorialDecreeDispBdg(b);
            break;
        case 6:
            tutorialDecreeDispBdg(b);
            break;
        case 7:
            tutorialDecreeDispBdg(b);
            break;
        case 8:
            tutorialDecreeDispBdg(b);
            break;
        case 9:
            tutorialDecreeDispBdg(b);
            break;
        case 10:
            break;
        case 11:
            break;
        case 12:
            tutorialDecreeDisp(g_js_strings.tutorialDecreeCheck.scoutdecree);
            break;
        case 13:
            tutorialDecreeDisp(g_js_strings.tutorialDecreeCheck.plunderdecree);
            break;
        case 14:
            break;
        case 15:
            tutorialDecreeDisp(g_js_strings.tutorialDecreeCheck.courtdecree);
            break;
        case 16:
            tutorialDecreeDispBdg(b);
            break;
        case 17:
            tutorialDecreeDispBdg(b);
            break;
        case 18:
            tutorialDecreeDispBdg(b);
            break;
        case 19:
            tutorialDecreeDispBdg(b);
            break;
        case 20:
            tutorialDecreeDispBdg(b);
            break;
        case 21:
            tutorialDecreeDispBdg(b);
            break;
        case 22:
            tutorialDecreeDispBdg(b);
            break;
        case 23:
            tutorialDecreeDispBdg(b);
            break;
        case 24:
            tutorialDecreeDispBdg(b);
            break;
        case 25:
            tutorialDecreeDispBdg(b);
            break;
        case 26:
            tutorialDecreeDispBdg(b);
            break;
        default:
            return true
        }
        tutorialAdvance(a, 1);
        seed.tutorial["t" + a] = 1
    } else {
        return true
    }
}
function tutorialFTE(a) {
    if (a != parseInt(seed.tutorial.t1)) {
        tutorialClear();
        return false
    }
    tutorialClear();
    switch (a) {
    case 0:
        changeview_fields($("mod_views_field"));
        tutorialDecreeDispViews(2);
        cm.MixPanelTracker.trackFunnel("FTE Tutorial", 1, "Field Decree", {
            usr_gen: seed.player.g,
            usr_byr: seed.player.y,
            usr_ttl: titlenames[seed.player.title],
            distinct_id: tvuid
        });
        break;
    case 1:
        $("arrowtip").innerHTML = "<div class='arrowdown'><div>" + g_js_strings.tutorialFTE.clickforsawmill + "</div></div>";
        $("arrowtip").style.top = "205px";
        $("arrowtip").style.left = "300px";
        $("arrowtip").show();
        $("tutorialCover").addClassName("sawmill");
        $("tutorialCover").show();
        cm.MixPanelTracker.trackFunnel("FTE Tutorial", 2, "Sawmill Arrow", {
            usr_gen: seed.player.g,
            usr_byr: seed.player.y,
            usr_ttl: titlenames[seed.player.title],
            distinct_id: tvuid
        });
        break;
    case 2:
        if (seed.player.entryTag == "fb884") {
            $("arrowtip").innerHTML = "<div class='arrowup'><div>" + g_js_strings.tutorialFTE.clickforquests + "</div></div><img src='http://offerpal.go2jump.org/aff_l?offer_id=500' width='1' height='1'/>"
        } else {
            $("arrowtip").innerHTML = "<div class='arrowup'><div>" + g_js_strings.tutorialFTE.clickforquests + "</div></div>"
        }
        $("arrowtip").style.top = "90px";
        $("arrowtip").style.left = "285px";
        $("arrowtip").show();
        $("tutorialCover").addClassName("quest");
        $("tutorialCover").show();
        cm.MixPanelTracker.trackFunnel("FTE Tutorial", 3, "Quest Button Arrow", {
            usr_gen: seed.player.g,
            usr_byr: seed.player.y,
            usr_ttl: titlenames[seed.player.title],
            distinct_id: tvuid
        });
        break;
    case 3:
        tutorialDecreeDispViews(4);
        cm.MixPanelTracker.trackFunnel("FTE Tutorial", 4, "Quest Decree", {
            usr_gen: seed.player.g,
            usr_byr: seed.player.y,
            usr_ttl: titlenames[seed.player.title],
            distinct_id: tvuid
        });
        break;
    case 4:
        $("arrowtip").innerHTML = "<div class='arrowup'></div>";
        $("arrowtip").style.top = "550px";
        $("arrowtip").style.left = "390px";
        $("arrowtip").show();
        cm.MixPanelTracker.trackFunnel("FTE Tutorial", 5, "Quest Reward Arrow", {
            usr_gen: seed.player.g,
            usr_byr: seed.player.y,
            usr_ttl: titlenames[seed.player.title],
            distinct_id: tvuid
        });
        break;
    case 5:
        $("arrowtip").innerHTML = "<div class='arrowup'><div>" + g_js_strings.tutorialFTE.clickforcity + "</div></div>";
        $("arrowtip").style.top = "145px";
        $("arrowtip").style.left = "6px";
        $("arrowtip").show();
        $("tutorialCover").addClassName("cityview");
        $("tutorialCover").show();
        cm.MixPanelTracker.trackFunnel("FTE Tutorial", 6, "City Arrow", {
            usr_gen: seed.player.g,
            usr_byr: seed.player.y,
            usr_ttl: titlenames[seed.player.title],
            distinct_id: tvuid
        });
        break;
    case 6:
        tutorialDecreeDispViews(1);
        cm.MixPanelTracker.trackFunnel("FTE Tutorial", 7, "City Decree", {
            usr_gen: seed.player.g,
            usr_byr: seed.player.y,
            usr_ttl: titlenames[seed.player.title],
            distinct_id: tvuid
        });
        break;
    case 7:
        $("arrowtip").innerHTML = "<div class='arrowdown'><div>" + g_js_strings.tutorialFTE.clickforcott + "</div></div>";
        $("arrowtip").style.top = "215px";
        $("arrowtip").style.left = "240px";
        $("arrowtip").show();
        $("tutorialCover").addClassName("cottage");
        $("tutorialCover").show();
        cm.MixPanelTracker.trackFunnel("FTE Tutorial", 7, "Cottage Arrow", {
            usr_gen: seed.player.g,
            usr_byr: seed.player.y,
            usr_ttl: titlenames[seed.player.title],
            distinct_id: tvuid
        });
        break
    }
}
function tutorialFTE1() {
    tutorialAdvance(1, 1);
    seed.tutorial.t1 = 1;
    tutorialFTE(1)
}
function tutorialFTE4() {
    tutorialAdvance(1, 4);
    seed.tutorial.t1 = 4;
    tutorialFTE(4)
}
function tutorialFTE7() {
    tutorialAdvance(1, 7);
    seed.tutorial.t1 = 7;
    tutorialFTE(7)
}
function tutorialDecreeDispViews(b) {
    var d = Object.clone(g_ajaxparams);
    d.action = g_tutorial_start;
    d.serverId = g_server;
    d.uid = tvuid;
    new Ajax.Request(g_ajaxpath + "ajax/funnelTracking.php" + g_ajaxsuffix, {
        method: "post",
        parameters: d,
        onSuccess: function () {},
        onFailure: function () {}
    });
    var a = new Array();
    a.push("<div class='bdginfo'><div class='pic'><img src='");
    a.push(stimgUrl);
    a.push("img/tutorial/");
    if (b == 2) {
        a.push("FieldView.png");
        a.push("'/></div><div class='clearfix btn'><a  class='getaward' onclick='tutorialDecreeDispOk();tutorialFTE1();return false;'>" + g_js_strings.commonstr.ok + "</a></div>")
    } else {
        if (b == 1) {
            a.push("cityView.png");
            a.push("'/></div><div class='clearfix btn'><a  class='getaward' onclick='tutorialDecreeDispOk();tutorialFTE7();return false;'>" + g_js_strings.commonstr.ok + "</a></div>")
        } else {
            if (b == 4) {
                a.push("questTutorial.jpg");
                a.push("'/></div><div class='clearfix btn'><a  class='getaward' onclick='tutorialDecreeDispOk();tutorialFTE4();return false;'>" + g_js_strings.commonstr.ok + "</a></div>")
            }
        }
    }
    a.push("</div>");
    var c = document.createElement("div");
    c.id = "modal_tutorialdecree_disp";
    c.innerHTML = a.join("");
    tutorialClear();
    document.getElementsByTagName("body")[0].appendChild(c);
    Modal.showCurtain(101100)
}
function tutorialDecreeDispBdg(c) {
    if (parseInt(c) == 2) {
        Modal.hideModalAll()
    }
    var a = new Array();
    a.push("<div class='bdginfo'><div class='pic'><img src='");
    a.push(stimgUrl);
    a.push("img/tutorial/b");
    a.push(c);
    a.push(".jpg'/></div><div class='clearfix btn'><a class='getaward' onclick='tutorialDecreeDispOk();");
    if (parseInt(seed.tutorial.t1) == 2) {
        a.push("tutorialFTE(2);")
    }
    a.push("return false;'>" + g_js_strings.commonstr.ok + "</a></div>");
    a.push("</div>");
    var b = document.createElement("div");
    b.id = "modal_tutorialdecree_disp";
    b.innerHTML = a.join("");
    tutorialClear();
    document.getElementsByTagName("body")[0].appendChild(b);
    Modal.showCurtain(101100)
}
function tutorialDecreeDisp(b) {
    var a = new Array();
    a.push("<div class='txinfo'>");
    a.push(b);
    a.push("<div class='clearfix'><a  class='okbtn' onclick='tutorialDecreeDispOk();return false;'>" + g_js_strings.commonstr.ok + "</a></div>");
    a.push("</div>");
    var c = document.createElement("div");
    c.id = "modal_tutorialdecree_disp";
    c.innerHTML = a.join("");
    tutorialClear();
    document.getElementsByTagName("body")[0].appendChild(c);
    Modal.showCurtain(101100)
}
function tutorialDecreeDispOk() {
    document.getElementsByTagName("body")[0].removeChild($("modal_tutorialdecree_disp"));
    Modal.hideCurtain();
    Modal.modalid--
}
function tutorialUpdateCover(d, b) {
    var c = Element.positionedOffset($("kochead")).top;
    d = d + c;
    b = b + c;
    $("tutCovTop").setStyle({
        height: d + "px"
    });
    $("tutCovLeft").setStyle({
        top: d + "px"
    });
    $("tutCovRight").setStyle({
        top: d + "px"
    });
    $("tutCovBottom").setStyle({
        top: b + "px"
    });
    var a = parseInt($("arrowtip").getStyle("top"));
    $("arrowtip").setStyle({
        top: (a + c) + "px"
    })
}
function tutorialUpdateCover2(a, g, b, e) {
    var d = Element.positionedOffset($("kochead")).top;
    a += d;
    g += d;
    var f = document.body.offsetHeight;
    $("tutCovTop").setStyle({
        height: g + "px"
    });
    $("tutCovLeft").setStyle({
        top: g + "px",
        width: a + "px",
        left: "0px",
        height: (f - g) + "px"
    });
    $("tutCovRight").setStyle({
        top: g + "px",
        width: (760 - b - a) + "px",
        left: (a + b) + "px",
        height: (f - g) + "px"
    });
    $("tutCovBottom").setStyle({
        top: (g + e) + "px",
        width: b + "px",
        left: a + "px",
        height: (f - g - e) + "px"
    });
    var c = parseInt($("arrowtip").getStyle("top"));
    $("arrowtip").setStyle({
        top: (c + d) + "px"
    })
}
var cm = cm || {};
cm.TutorialStep = function (b) {
    var c = this;
    var a = null;
    this.onEnter = null;
    this.onExit = null;
    this.name = null;
    this.begin = function () {
        tutorialClear();
        cm.TutorialEventDispatcher.dispatchTutorialEvent("enter", c.name)
    };
    var d = function () {
            var f, g;
            for (var e in b) {
                g = b[e];
                c[e] = g
            }
        };
    d()
};
cm.TutorialProgressChecker = new function () {
    this.isSawmillPositionOccupied = function () {
        return seed.buildings["city" + currentcityid]["pos107"]
    };
    this.isSawmillBuilding = function () {
        return !this.isSawmillRewardClaimed() && seed.queue_con["city" + currentcityid] && seed.queue_con["city" + currentcityid].length > 0
    };
    this.isSawmillRewardClaimed = function () {
        return seed.quests.q1021 && parseInt(seed.quests.q1021) > 0
    };
    this.isCottagePositionOccupied = function () {
        return seed.buildings["city" + currentcityid]["pos6"]
    }
};
cm.TutorialManager = new function () {
    var d = false;
    var f = null;
    var h = null;
    var c = null;
    var b = {};
    var g = function (i) {
            if (!f) {
                f = i
            }
            if (!h) {
                h = i
            }
            if (c && !c.nextStepName) {
                c.nextStepName = i.name
            }
            c = i;
            b[i.name.toString()] = i
        };
    var a = function () {
            cm.TutorialEventDispatcher.clearAll();
            for (var i in h.events) {
                cm.TutorialEventDispatcher.addEventListener(i, h)
            }
        };
    this.getCurrentStep = function () {
        return h
    };
    this.startFromBeginning = function () {
        d = true;
        h = f;
        a();
        h.begin()
    };
    this.inTutorialMode = function () {
        return d
    };
    this.end = function () {
        d = false;
        e()
    };
    this.gotoNextStep = function () {
        h = b[h.nextStepName];
        a();
        h.begin()
    };
    this.gotoStep = function (i) {
        if (b[i]) {
            h = b[i];
            a();
            h.begin()
        }
    };
    this.init = function (m) {
        var k, j, l;
        for (k = 0; k < m.length; k++) {
            j = m[k];
            l = new cm.TutorialStep(j);
            g(l)
        }
    };
    var e = function () {
            for (var i in b) {
                delete b[i]
            }
            cm.TutorialEventDispatcher.clearAll()
        }
};
cm.TutorialEventDispatcher = new function () {
    var a = this;
    var b = {};
    this.addEventListener = function (d, c) {
        b[d] = c
    };
    this.dispatchTutorialEvent = function (e, c) {
        var d = b[e];
        if (d && d.name == c) {
            var f = d.events[e];
            if (typeof (f) == "function") {
                f()
            }
        }
    };
    this.clearAll = function () {
        for (var c in b) {
            delete b[c]
        }
    }
};
var g_update_seed_ajax_do = false;

function update_seed_ajax(marchForceUpdateFlag, updateSeedDoneCallback) {
    if (g_update_seed_ajax_do) {
        return false
    }
    g_update_seed_ajax_do = true;
    var params = Object.clone(g_ajaxparams);
    if (marchForceUpdateFlag) {
        params.forceUpdate = true
    } else {
        params.forceUpdate = false
    }
    var startTime = cm.util.clientTime();
    var profiler = null;
    if (Math.random() < 0.01) {
        profiler = new cm.Profiler("ResponseTime", "updateSeed.php" + (marchForceUpdateFlag ? "_ForceUpdate" : ""))
    }
    new Ajax.Request(g_ajaxpath + "ajax/updateSeed.php" + g_ajaxsuffix, {
        method: "post",
        parameters: params,
        onSuccess: function (message) {
            if (profiler) {
                profiler.stop();
                cm.log.l("UpdateSeed is timed.")
            }
            var endTime = cm.util.clientTime();
            g_update_seed_ajax_do = false;
            var rslt = eval("(" + message.responseText + ")");
            if (rslt.ok) {
                cm.epochTimeOffset.update(rslt.reqmicrotime, endTime - startTime);
                if (rslt.victoryTokenId) {
                    pop_treasure_chest_modal(rslt.victoryTokenId.m)
                }
                if (rslt.updateMarch) {
                    update_march(rslt.updateMarch)
                }
                if (rslt.updateInventory) {
                    update_inventory(rslt.updateInventory)
                }
                if (rslt.updateWildDef) {
                    update_wild_def(rslt.updateWildDef)
                }
                if (rslt.updateSeed) {
                    update_seed(rslt.updateSeed)
                }
                var msgbug = false;
                if (rslt.additionalNewTradeReportCnt) {
                    seed.newTradeReports = parseInt(seed.newTradeReports) + parseInt(rslt.additionalNewTradeReportCnt);
                    msgbug = true
                }
                if (rslt.newReportCount) {
                    seed.newReportCount = parseInt(rslt.newReportCount);
                    seed.newDisasterReportCount = parseInt(rslt.newDisasterReportCount);
                    msgbug = true
                }
                if (rslt.newMailCount) {
                    seed.newMailCount = parseInt(rslt.newMailCount);
                    msgbug = true
                }
                if (msgbug) {
                    messages_notify_bug()
                }
                if (rslt.updateHelpConstruct) {
                    update_help_construct(rslt.updateHelpConstruct)
                }
                if (rslt.updateHelpResearch) {
                    update_help_research(rslt.updateHelpResearch)
                }
                if (rslt.allianceDiplomacies) {
                    seed.allianceDiplomacies = rslt.allianceDiplomacies
                }
                if (rslt.updateMight) {
                    seed.player.might = parseInt(rslt.updateMight);
                    update_might()
                }
                if (rslt.updateCityUnits) {
                    update_cityUnits(rslt.updateCityUnits)
                }
                if (undefined != rslt.truceExpireUnixTime) {
                    seed.player.truceExpireUnixTime = rslt.truceExpireUnixTime
                } else {
                    delete seed.player.truceExpireUnixTime
                }
                if (updateSeedDoneCallback) {
                    updateSeedDoneCallback()
                }
            } else {
                Modal.showAlert(printLocalError((rslt.error_code || null), (rslt.msg || null), (rslt.feedback || null)))
            }
            if (rslt.arthurCheckArray) {
                arthurCheck(rslt.arthurCheckArray)
            }
        },
        onFailure: function () {
            if (profiler) {
                profiler.stop();
                cm.log.l("UpdateSeed is timed.")
            }
            g_update_seed_ajax_do = false
        }
    })
}
function update_wild_def(a) {
    var c = Object.keys(a);
    for (var b = 0; b < c.length; b++) {
        seed.wildDef[c[b]] = a[c[b]]
    }
}
function update_inventory(b) {
    var c = Object.keys(b);
    for (var a = 0; a < c.length; a++) {
        if (seed.items["i" + c[a]]) {
            seed.items["i" + c[a]] = parseInt(seed.items["i" + c[a]]) + 1;
            ksoItems[c[a]].add()
        } else {
            seed.items["i" + c[a]] = 1
        }
    }
}
function update_cityUnits(a) {
    var g = Object.keys(a);
    for (var c = 0; c < g.length; c++) {
        var f = Object.keys(a[g[c]]);
        var e = g[c].split("c")[1];
        for (var b = 0; b < f.length; b++) {
            var d = f[b].split("u")[1];
            seed.units["city" + e]["unt" + d] = parseInt(a[g[c]][f[b]])
        }
    }
    if ($("cityinfo_3").visible()) {
        cityinfo_changetab(3)
    }
}
function update_help_research(m) {
    var a = Object.keys(m)[0];
    var e = m[a];
    var l = Object.keys(e)[0];
    var c = parseInt(e[l].t);
    var o = parseInt(e[l].n) + parseInt(e[l].a);
    var k = parseInt(seed.updateHelpResearch[a][l].a) + parseInt(seed.updateHelpResearch[a][l].n);
    if (k > 0) {
        o = o - k
    }
    seed.updateHelpResearch[a] = e;
    var n = Object.keys(seed.queue_tch);
    for (var g = 0; g < n.length; g++) {
        for (var f = 0; f < seed.queue_tch[n[g]].length; f++) {
            if (parseInt(seed.queue_tch[n[g]][f][0]) == c) {
                var b = parseInt(seed.queue_tch[n[g]][f][3]) - parseInt(seed.queue_tch[n[g]][f][2]);
                var d = parseInt(b * 0.01);
                var h = 60;
                var p = Math.max(d, h);
                seed.queue_tch[n[g]][f][2] = parseInt(seed.queue_tch[n[g]][f][2]) - p * o;
                seed.queue_tch[n[g]][f][3] = parseInt(seed.queue_tch[n[g]][f][3]) - p * o;
                break
            }
        }
    }
}
function update_help_construct(p) {
    var a = Object.keys(p)[0];
    var l = p[a];
    var d = Object.keys(l)[0];
    var f = parseInt(l[d].b);
    var n = parseInt(l[d].n) + parseInt(l[d].a);
    var k = parseInt(seed.updateHelpConstruct[a][d].a) + parseInt(seed.updateHelpConstruct[a][d].n);
    if (k > 0) {
        n = n - k
    }
    seed.updateHelpConstruct[a] = l;
    var m = Object.keys(seed.queue_con);
    for (var g = 0; g < m.length; g++) {
        for (var e = 0; e < seed.queue_con[m[g]].length; e++) {
            if (parseInt(seed.queue_con[m[g]][e][2]) == f) {
                var b = parseInt(seed.queue_con[m[g]][e][4]) - parseInt(seed.queue_con[m[g]][e][3]);
                var c = parseInt(b * 0.01);
                var h = 60;
                var o = Math.max(c, h);
                seed.queue_con[m[g]][e][3] = parseInt(seed.queue_con[m[g]][e][3]) - o * n;
                seed.queue_con[m[g]][e][4] = parseInt(seed.queue_con[m[g]][e][4]) - o * n;
                break
            }
        }
    }
}
function update_march(d) {
    var g = Object.keys(d);
    for (var G = 0; G < g.length; G++) {
        var I = Object.keys(d[g[G]]);
        for (var F = 0; F < I.length; F++) {
            var n = d[g[G]][I[F]];
            for (var s = 0; s < n.length; s++) {
                var L = d[g[G]][I[F]][s];
                var o = parseInt(L.marchStatus);
                var q = g[G].split("c")[1];
                var M = I[F].split("m")[1];
                var J = "city" + q;
                var a = I[F];
                var f;
                var h = L.marchType;
                if (L.score != undefined && !seed.queue_atkp["city" + q][I[F]]) {
                    if (Object.isArray(seed.queue_atkinc)) {
                        seed.queue_atkinc = new Object
                    }
                    seed.queue_atkinc[I[F]] = L;
                    f = new cm.IncomingAttack(L);
                    cm.IncomingAttackManager.add(f);
                    if (L.players) {
                        var E = L.players;
                        var x = Object.keys(E)[0];
                        if (!seed.players[x]) {
                            seed.players[x] = E[x]
                        }
                    }
                } else {
                    if (seed.queue_atkinc[a] && (o == cm.MARCH_STATUS.MARCH_STATUS_INACTIVE || o == cm.MARCH_STATUS.MARCH_STATUS_ABORTING)) {
                        var N = cm.IncomingAttackManager.getAllAttacks();
                        if (N) {
                            f = N.getElementByKey(M.toString());
                            if (f) {
                                f.setMarchStatus(L.marchStatus)
                            }
                        }
                        if (seed.queue_atkinc[a]) {
                            delete seed.queue_atkinc[a];
                            if (Object.keys(seed.queue_atkinc).length == 0) {
                                seed.queue_atkinc = []
                            }
                        }
                    } else {
                        if (L.updateAttackInc) {
                            seed.queue_atkinc[I[F]].departureTime = L.marchUnixTime;
                            seed.queue_atkinc[I[F]].arrivalTime = L.destinationUnixTime;
                            seed.queue_atkinc[I[F]].returnUnixTime = L.returnUnixTime
                        } else {
                            if (L.transportUnitReturn) {
                                if (seed.queue_atkp["city" + q]["m" + M]) {
                                    seed.queue_atkp["city" + q]["m" + M]["unit9Return"] = L.transportUnitReturn
                                }
                            }
                            if (L.fght) {
                                var p = L.fght.s1;
                                var c = Object.keys(p);
                                for (var D = 0; D < c.length; D++) {
                                    if (seed.queue_atkp["city" + q]["m" + M]) {
                                        seed.queue_atkp["city" + q]["m" + M]["unit" + (c[D].split("u")[1]) + "Return"] = p[c[D]][1]
                                    } else {
                                        seed.units["city" + q]["unt" + c[D].split("u")[1]] = parseInt(seed.units["city" + q]["unt" + c[D].split("u")[1]]) + parseInt(p[c[D]][1])
                                    }
                                }
                            }
                            if (L.conquered && parseInt(L.conquered) == 1) {
                                if (Object.isArray(seed.queue_atkp["city" + q]) || !seed.queue_atkp["city" + q]["m" + M]) {
                                    seed.queue_atkp["city" + q]["m" + M] = {
                                        marchStatus: cm.MARCH_STATUS.MARCH_STATUS_DEFENDING
                                    }
                                } else {
                                    seed.queue_atkp["city" + q]["m" + M].marchStatus = cm.MARCH_STATUS.MARCH_STATUS_DEFENDING
                                }
                                if (seed.queue_atkp["city" + q]["m" + M] && parseInt(seed.queue_atkp["city" + q]["m" + M].toTileType) != cm.TILE_TYPES.TILE_TYPE_CITY && parseInt(seed.queue_atkp["city" + q]["m" + M].toTileType) != cm.TILE_TYPES.TILE_TYPE_RUIN) {
                                    var C = seed.queue_atkp["city" + q]["m" + M].toTileId;
                                    if (Object.isArray(seed.wilderness)) {
                                        seed.wilderness = {}
                                    }
                                    if (!seed.wilderness["city" + q]) {
                                        seed.wilderness["city" + q] = {}
                                    }
                                    if (!seed.wilderness["city" + q]["t" + C]) {
                                        seed.wilderness["city" + q]["t" + C] = {
                                            tileId: C,
                                            xCoord: seed.queue_atkp["city" + q]["m" + M].toXCoord,
                                            yCoord: seed.queue_atkp["city" + q]["m" + M].toYCoord,
                                            tileType: seed.queue_atkp["city" + q]["m" + M].toTileType,
                                            tileLevel: seed.queue_atkp["city" + q]["m" + M].toTileLevel
                                        }
                                    }
                                }
                                g_mapObject.getMoreSlots()
                            } else {
                                if (o == cm.MARCH_STATUS.MARCH_STATUS_DEFENDING) {
                                    if (seed.queue_atkp["city" + q]["m" + M]) {
                                        seed.queue_atkp["city" + q]["m" + M].marchStatus = cm.MARCH_STATUS.MARCH_STATUS_DEFENDING;
                                        for (var D = 1; D < 13; D++) {
                                            seed.queue_atkp["city" + q]["m" + M]["unit" + D + "Return"] = seed.queue_atkp["city" + q]["m" + M]["unit" + D + "Count"]
                                        }
                                    }
                                } else {
                                    if (o == cm.MARCH_STATUS.MARCH_STATUS_INACTIVE) {
                                        var m = seed.queue_atkp["city" + q]["m" + M];
                                        if (m) {
                                            var u = 0;
                                            for (var D = 0; D < seed.cities.length; D++) {
                                                if (parseInt(seed.cities[D][2]) == parseInt(m.toXCoord) && parseInt(seed.cities[D][3]) == parseInt(m.toYCoord)) {
                                                    u = seed.cities[D][0];
                                                    D = seed.cities.length
                                                }
                                            }
                                            if (u != 0) {
                                                for (var D = 1; D < 13; D++) {
                                                    seed.units["city" + u]["unt" + D] = parseInt(seed.units["city" + u]["unt" + D]) + parseInt(m["unit" + D + "Count"])
                                                }
                                                if (parseInt(m.knightId) != 0) {
                                                    seed.knights["city" + u] = seed.knights["city" + u] || {};
                                                    seed.knights["city" + u]["knt" + m.knightId] = seed.knights["city" + m.fromCityId]["knt" + m.knightId];
                                                    seed.knights["city" + u]["knt" + m.knightId].knightStatus = 1;
                                                    delete seed.knights["city" + m.fromCityId]["knt" + m.knightId]
                                                }
                                                seed.citystats["city" + u].gold[0] = parseInt(seed.citystats["city" + u].gold[0]) + parseInt(m.gold);
                                                for (var D = 1; D < 5; D++) {
                                                    seed.resources["city" + u]["rec" + D][0] = parseInt(seed.resources["city" + u]["rec" + D][0]) + (3600 * parseInt(seed.queue_atkp["city" + q]["m" + M]["resource" + D]))
                                                }
                                            }
                                            seed.queue_atkp["city" + q]["m" + M].hasUpdated = true;
                                            if (Object.keys(seed.queue_atkp["city" + q]).length == 0) {
                                                seed.queue_atkp["city" + q] = []
                                            }
                                        }
                                    } else {
                                        if (o == cm.MARCH_STATUS.MARCH_STATUS_RESTING || o == cm.MARCH_STATUS.MARCH_STATUS_STOPPED) {
                                            var m = seed.queue_atkp["city" + q]["m" + M];
                                            if (m) {
                                                m.marchStatus = o
                                            }
                                        } else {
                                            if (L.fromPlayerId == tvuid) {
                                                try {
                                                    var v = Object.keys(L);
                                                    var B = L.fromCityId;
                                                    if (L.marchType == cm.MARCH_TYPES.MARCH_TYPE_BOT_BARBARIAN && o == cm.MARCH_STATUS.MARCH_STATUS_OUTBOUND) {
                                                        var K = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
                                                        for (var y = K.length - 1; y >= 0; --y) {
                                                            var r = parseInt(L["unit" + y + "Count"]);
                                                            if (!isNaN(r)) {
                                                                K[y] = r
                                                            }
                                                        }
                                                        attach_addoutgoingmarch(L.marchId, Math.floor(L.marchTimestamp), Math.floor(L.destinationEta), L.toXCoord, L.toYCoord, K, cm.MARCH_TYPES.MARCH_TYPE_BOT_BARBARIAN, L.knightId, [0, 0, 0, 0, 0], L.toTileId, L.toTileType, L.toTileLevel, B, false)
                                                    }
                                                    for (var b = 0; b < v.length; b++) {
                                                        if (typeof (seed.queue_atkp["city" + B][I[F]][v[b]]) == "undefined") {
                                                            seed.queue_atkp["city" + B][I[F]][v[b]] = L[v[b]]
                                                        }
                                                    }
                                                    var w = I[F].substring(1);
                                                    seed.queue_atkp["city" + B][I[F]]["marchId"] = w
                                                } catch (H) {}
                                            } else {
                                                if (!L.marchUnixTime || parseInt(seed.queue_atkp["city" + q]["m" + M].marchUnixTime) == parseInt(L.marchUnixTime)) {
                                                    try {
                                                        var m = seed.queue_atkp["city" + q]["m" + M];
                                                        m.marchStatus = cm.MARCH_STATUS.MARCH_STATUS_RETURNING;
                                                        m.hasUpdated = true;
                                                        var t = parseInt(m.marchType);
                                                        if (t == cm.MARCH_TYPES.MARCH_TYPE_TRANSPORT) {
                                                            for (var D = 1; D < 13; D++) {
                                                                m["unit" + D + "Return"] = m["unit" + D + "Count"]
                                                            }
                                                        } else {
                                                            if (t == cm.MARCH_TYPES.MARCH_TYPE_REINFORCE || t == cm.MARCH_TYPES.MARCH_TYPE_BOT_BARBARIAN) {
                                                                for (var D = 1; D < 13; D++) {
                                                                    if (L["unit" + D + "Return"] != undefined) {
                                                                        m["unit" + D + "Return"] = parseInt(L["unit" + D + "Return"])
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        if (seed.playerEffects.returnExpire > unixtime()) {
                                                            var l = parseInt(seed.queue_atkp["city" + q]["m" + M].returnUnixTime);
                                                            var A = parseInt(seed.queue_atkp["city" + q]["m" + M].destinationUnixTime);
                                                            seed.queue_atkp["city" + q]["m" + M].returnUnixTime = parseInt(0.5 * (l - A)) + A
                                                        }
                                                    } catch (H) {}
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    return true
}
function update_seed(k) {
    if (k == null || (Object.isArray(k) && k.length == 0)) {
        return false
    }
    var h = Object.keys(k.city);
    var a = unixtime();
    for (var e = 0; e < h.length; e++) {
        var g = h[e];
        var f = k.city[g].production;
        if (f.population) {
            seed.citystats["city" + g].pop[0] = parseInt(f.population)
        }
        if (f.populationCap) {
            seed.citystats["city" + g].pop[1] = parseInt(f.populationCap)
        }
        if (f.gold) {
            seed.citystats["city" + g].gold[0] = parseInt(f.gold)
        }
        for (var d = 1; d < 5; d++) {
            if (f["resource" + d + "x3600"] != undefined) {
                seed.resources["city" + g]["rec" + d][0] = parseInt(f["resource" + d + "x3600"])
            }
            if (f["resource" + d + "Productivity"] != undefined) {
                seed.resources["city" + g]["rec" + d][2] = parseInt(f["resource" + d + "Productivity"])
            }
            if (f["resource" + d + "Capx3600"] != undefined) {
                seed.resources["city" + g]["rec" + d][1] = parseInt(f["resource" + d + "Capx3600"])
            }
            if (f["resource" + d + "Upkeep"] != undefined) {
                var c = 1;
                if ((d == 1) && (seed.playerEffects.troopUpkeepReductExp > a)) {
                    c = 0.5
                }
                var b = parseInt(f["resource" + d + "Upkeep"]) * c;
                seed.resources["city" + g]["rec" + d][3] = b
            }
        }
        if (f.happiness) {
            seed.citystats["city" + g].pop[2] = parseInt(f.happiness)
        }
    }
    update_gold();
    update_pop();
    return true
}
cm.epochTimeOffset = function () {
    var a = 10;
    return {
        update: function (c, b) {
            if (b < a) {
                cm.log.l("old g_timeoff=" + g_timeoff);
                g_timeoff = parseInt(c - cm.util.clientTime());
                a = b
            }
        }
    }
}();
if (!window.UserEngagement) {
    var UserEngagement = new Object()
}
UserEngagement.Properties = {
    exa: null,
    viralModal: false
};
UserEngagement.Methods = {
    popup: function (b) {
        if (b) {
            this.exa = b
        }
        if ((Modal.modalid && Modal.modalid > 0) || (cm.TutorialManager.inTutorialMode())) {
            return false
        } else {
            if (Math.floor(Math.random() * 2) == 1) {
                var a = getNextAvailableCase();
                if (!a) {
                    if (!readCookie("uep_court") && !readCookie("uep_feed")) {
                        if (Math.floor(Math.random() * 2) == 1) {
                            pop_friend_court()
                        } else {
                            pop_action_feed_modal()
                        }
                    }
                } else {
                    pop_information_message(a)
                }
            } else {
                return false
            }
        }
    },
    popCastleTwoModal: function () {
        var b = g_js_strings.pop_castle_two_modal.castledesc;
        var c = "<img src='" + stimgUrl + "img/alliance_icon.png' />";
        var a = "<a onclick='Modal.hideModal();return false;' class='inlineButton brown20'><span>" + g_js_strings.commonstr.skip + "</span></a>";
        a += "<a onclick='Modal.hideModal();cm.invite.load(cm.InviteTypes.INVITE_TYPE_CASTLE_LV_2);cm.invite.open();' class='inlineButton blue20'><span>" + g_js_strings.pop_castle_two_modal.castlerecommend + "</span></a>";
        Modal.showModalUEP2(b, a, c)
    },
    popSuggestInviteModal: function () {
        if (cm.feedTracking.get("popSuggestInviteModal") !== false) {
            var b = g_js_strings.pop_suggest_invite_modal.invitedesc;
            var c = "<img src='" + stimgUrl + "img/alliance_icon.png' />";
            var a = "<a onclick='Modal.hideModal();cm.invite.load(cm.InviteTypes.INVITE_TYPE_SUGGEST_INVITE);cm.invite.open();' class='button20'><span>" + g_js_strings.pop_suggest_invite_modal.invitefriend + "</span></a>";
            cm.feedTracking.setFalse("popSuggestInviteModal");
            Modal.showModalUEP(b, a, c)
        }
    },
    popActionFeedModal: function () {
        var params = Object.clone(g_ajaxparams);
        new Ajax.Request(g_ajaxpath + "ajax/rollFriendChance.php" + g_ajaxsuffix, {
            method: "post",
            parameters: params,
            onSuccess: function (transport) {
                var rslt = eval("(" + transport.responseText + ")");
                if (rslt.ok && parseInt(rslt.feedType) > 0) {
                    switch (parseInt(rslt.feedType)) {
                    case 201:
                        var evtdesc = g_js_strings.pop_action_feed_modal.fairedesc2;
                        var evtbtns = "<a onclick='Modal.hideModal();pop_action_feed();return false;' class='button20 sendfriendbtn' style='width:158px;'><span>" + g_js_strings.pop_action_feed_modal.faireShareButton + "</span></a>";
                        var evtimg = "<img src='" + stimgUrl + "img/traveling_faire_icon.png' />";
                        break;
                    default:
                        var evtdesc = "";
                        var evtbtns = "";
                        var evtimg = "";
                        break
                    }
                    if (evtdesc != "" && cm.feedTracking.get("fairedesc2") !== false) {
                        cm.feedTracking.setFalse("fairedesc2");
                        Modal.showModalUEP(evtdesc, evtbtns, evtimg);
                        createCookie("uep_feed", "uep_feed", 15)
                    }
                }
            },
            onFailure: function () {}
        })
    },
    popActionFeed: function () {
        var params = Object.clone(g_ajaxparams);
        new Ajax.Request(g_ajaxpath + "ajax/postFriendChance.php" + g_ajaxsuffix, {
            method: "post",
            parameters: params,
            onSuccess: function (transport) {
                var rslt = eval("(" + transport.responseText + ")");
                if (rslt.ok) {
                    var replarr = new Array();
                    replarr.push(["REPLACE_fEeDiD", rslt.feedId]);
                    var clonedTemp = Object.cloneFeed(template_data_201);
                    var clonedAction = Object.cloneFeed(actionlink_data_201);
                    common_postToProfile("201", clonedTemp, clonedAction, continuation_201, replarr)
                }
            },
            onFailure: function () {}
        })
    },
    popInformationMessage: function (a) {
        Modal.showModalUEP(a.evtdesc, a.evtbtns, a.evtimg);
        createCookie("uep_" + a.evtid, "uep_" + a.evtid, (24 * 60))
    },
    popFriendCourt: function () {
        if (seed.appFriends) {
            var friendlist = Object.keys(seed.appFriends);
            var qualFriends = new Array();
            for (var i = 0; i < friendlist.length; i++) {
                if (seed.appFriends[friendlist[i]].userId && !seed.appFriends[friendlist[i]].dailyActionFlag) {
                    qualFriends.push(seed.appFriends[friendlist[i]])
                }
            }
            if (qualFriends.length > 0) {
                var randomIdx = Math.floor(Math.random() * qualFriends.length);
                var params = Object.clone(g_ajaxparams);
                params.pid = qualFriends[randomIdx].userId;
                new Ajax.Request(g_ajaxpath + "ajax/viewCourt.php" + g_ajaxsuffix, {
                    method: "post",
                    parameters: params,
                    onSuccess: function (transport) {
                        var rslt = eval("(" + transport.responseText + ")");
                        if (rslt.ok) {
                            if (rslt.dailyActionFlag == 0) {
                                var imgUrl = qualFriends[randomIdx].realPhoto || "http://static.ak.facebook.com/pics/s_default.jpg";
                                var friendImg = "<div class='imgframe'><img src='" + imgUrl + "'/></div>";
                                var friendTxt = (qualFriends[randomIdx].playerSex == "M") ? g_js_strings.commonstr.lord : g_js_strings.commonstr.lady;
                                friendTxt += " ";
                                friendTxt += g_js_strings.pop_action_feed_modal.cordialvisitcourtdesc.replace("%1$s", qualFriends[randomIdx].displayName);
                                var friendBtns = "<a class='button25' onclick='Modal.hideModal();changeview_court(" + qualFriends[randomIdx].userId + ");return false;'><span>" + g_js_strings.commonstr.visit + "</span></a>";
                                Modal.showModalUEP(friendTxt, friendBtns, friendImg);
                                createCookie("uep_court", "uep_court", 15)
                            } else {
                                seed.appFriends[qualFriends[randomIdx].userId].dailyActionFlag = true;
                                pop_action_feed_modal()
                            }
                        } else {
                            pop_action_feed_modal()
                        }
                    },
                    onFailure: function () {
                        pop_action_feed_modal()
                    }
                })
            } else {
                pop_action_feed_modal()
            }
        } else {
            pop_action_feed_modal()
        }
    },
    popViralModalUEP: function (pos) {
        if (this.viralModal && !readCookie("uep_viral_action")) {
            if ((cm.TutorialManager.inTutorialMode())) {
                return false
            } else {
                var params = Object.clone(g_ajaxparams);
                new Ajax.Request(g_ajaxpath + "ajax/pickViralUEP.php" + g_ajaxsuffix, {
                    method: "post",
                    parameters: params,
                    onSuccess: function (transport) {
                        var rslt = eval("(" + transport.responseText + ")");
                        if (rslt.ok) {
                            if (rslt.type == 3) {
                                UserEngagement.popGiftReminder(pos)
                            } else {
                                if (rslt.type == 2) {
                                    UserEngagement.popAttractAllies(pos)
                                } else {
                                    if (rslt.type == 1) {
                                        UserEngagement.popInviteFriends(pos)
                                    }
                                }
                            }
                            createCookie("uep_viral_action", "uep_viral_action", (4 * 60))
                        }
                    },
                    onFailure: function () {}
                })
            }
        }
    },
    popInviteFriends: function (c) {
        var b = g_js_strings.popViralModalUEP.invitedesc;
        var a = "<a onclick='Modal.hideModal();return false;' class='buttonDown20' style='margin-left:10px;'><span>" + g_js_strings.commonstr.skip + "</span></a>";
        a += "<a onclick='Modal.hideModal();cm.invite.load(cm.InviteTypes.INVITE_TYPE_VIRALUEP_0);cm.invite.open();' class='button20'><span>" + g_js_strings.popViralModalUEP.inviteyourfriends + "</span></a>";
        Modal.showModalUEP(b, a, "", c)
    },
    popAttractAllies: function (c) {
        var b = g_js_strings.popViralModalUEP.attractalliesdesc;
        var a = "<a onclick='Modal.hideModal();return false;' class='buttonDown20' style='margin-left:10px;'><span>" + g_js_strings.commonstr.skip + "</span></a>";
        a += "<a onclick='Modal.hideModal();cm.invite.load(cm.InviteTypes.INVITE_TYPE_VIRALUEP_1);cm.invite.open();' class='button20'><span>" + g_js_strings.popViralModalUEP.inviteyourfriends + "</span></a>";
        Modal.showModalUEP(b, a, "", c)
    },
    popGiftReminder: function (c) {
        var b = g_js_strings.popViralModalUEP.giftreminddesc;
        var a = "<a onclick='Modal.hideModal();return false;' class='buttonDown20' style='margin-left:10px;'><span>" + g_js_strings.commonstr.skip + "</span></a>";
        a += "<a target='_top' href='" + viralGiftReminderUrl + "' onclick='Modal.hideModal();' class='button20'><span>" + g_js_strings.popViralModalUEP.sendfreegifts + "</span></a>";
        Modal.showModalUEP(b, a, "", c)
    },
    popTreasureChestModal: function (a) {
        if (cm.feedTracking.get("popTreasureChestModal") === false) {
            return false
        }
        if (Modal.modalid && Modal.modalid > 0) {
            return false
        } else {
            cm.feedTracking.setFalse("popTreasureChestModal");
            var c = g_js_strings.pop_treasure_chest_modal.chestdesc;
            var b = "<a onclick='Modal.hideModal();pop_treasure_chest(" + parseInt(a) + ");return false;' class='button20'><span>" + g_js_strings.pop_treasure_chest_modal.sharewithfriends + "</span></a>";
            var d = "<img src='" + stimgUrl + "img/treasurechest_icon.png' />";
            Modal.showModalUEP(c, b, d)
        }
    },
    popTreasureChest: function (tid) {
        var mid = tid;
        var params = Object.clone(g_ajaxparams);
        params.tid = tid;
        new Ajax.Request(g_ajaxpath + "ajax/postFriendVictoryTokenShare.php" + g_ajaxsuffix, {
            method: "post",
            parameters: params,
            onSuccess: function (transport) {
                var rslt = eval("(" + transport.responseText + ")");
                if (rslt.ok) {
                    var replarr = new Array();
                    var tileName = (seed.queue_atkp["city" + currentcityid]["m" + mid].toTileType == 51) ? "Barbarian Camp" : g_mapObject.types[parseInt(seed.queue_atkp["city" + currentcityid]["m" + mid].toTileType)].capitalize();
                    replarr.push(["REPLACE_TiLeNaMe", tileName]);
                    replarr.push(["REPLACE_fEeDiD", rslt.feedId]);
                    replarr.push(["REPLACE_tOkEnId", rslt.tokenId]);
                    var clonedTemp = Object.cloneFeed(template_data_118);
                    var clonedAction = Object.cloneFeed(actionlink_data_118);
                    common_postToProfile("118", clonedTemp, clonedAction, continuation_118, replarr)
                } else {
                    Modal.showAlert(printLocalError((rslt.error_code || null), (rslt.msg || null), (rslt.feedback || null)))
                }
            },
            onFailure: function () {}
        })
    },
    getBuildCompleteInviteQual: function (e) {
        return false;
        var c = false;
        var f = false;
        if (feeds_sent.indexOf("13") >= 0) {
            c = true
        } else {
            var a = Object.keys(seed.buildings);
            for (var b = 0; b < a.length; b++) {
                var d = new Hash(seed.buildings[a[b]]);
                d.each(function (i) {
                    if (i.value[0] != 0) {
                        var h = Math.pow(2, parseInt(i.value[1]));
                        var g = buildingcost["bdg" + i.value[0]][7] * h;
                        if (g > 60) {
                            f = true
                        }
                    }
                })
            }
        }
        if (e) {
            if (c || f) {
                return false
            } else {
                return true
            }
        } else {
            if (c || !f) {
                return false
            } else {
                return true
            }
        }
    },
    getNextAvailableCase: function () {
        var H = 0;
        var g = new Array();
        var y = 60 * 60 * 24;
        var f = unixtime() - seed.player.datejoinUnixTime;
        var t = (!seed.allianceDiplomacies && f > (y * 2) && f < (y * 14)) ? true : false;
        var I = ((!seed.appFriends || !Object.keys(seed.appFriends) || Object.keys(seed.appFriends).length < 10) && !seed.items.i1202) ? true : false;
        var e = (seed.cities.length < 2 && f > (y * 5) && seed.items.i1202) ? true : false;
        var v = (seed.cities.length == 2 && f > (y * 10) && (seed.items.i1203 || (parseInt(seed.items.i1101) > 4 && parseInt(seed.items.i1102) > 2 && parseInt(seed.items.i1103) > 1))) ? true : false;
        var n = getBuildCompleteInviteQual();
        var w = true;
        var a = Object.keys(seed.wilderness);
        for (var D = 0; D < a.length; D++) {
            if (!Object.isArray(seed.wilderness[a[D]])) {
                w = false
            }
        }
        var k = Object.isArray(seed.knights) ? true : false;
        if (k) {
            var b = false;
            var z = 0;
            var h = Object.keys(seed.buildings);
            for (var D = 0; D < h.length; D++) {
                var q = new Hash(seed.buildings[h[D]]);
                q.each(function (i) {
                    if (i.value[0] == 7) {
                        b = true;
                        z = parseInt(i.value[2])
                    }
                })
            }
            if (!b) {
                k = false
            }
        }
        var d = false;
        var j = 0;
        var A = false;
        var h = Object.keys(seed.buildings);
        var G = 0;
        for (var D = 0; D < h.length; D++) {
            var q = new Hash(seed.buildings[h[D]]);
            q.each(function (i) {
                if (i.value[0] == 13) {
                    j++;
                    G = parseInt(i.value[2]);
                    if (parseInt(i.value[1]) >= 2) {
                        A = true
                    }
                }
            })
        }
        if (A || j >= 2) {
            if (parseInt(seed.player.might) < 100000) {
                d = true;
                var r = Object.keys(seed.units);
                for (var D = 0; D < r.length; D++) {
                    var E = new Hash(seed.units[r[D]]);
                    E.each(function (i) {
                        if (parseInt(i.value) > 0) {
                            d = false
                        }
                    })
                }
            }
        }
        var F = false;
        if (f > y) {
            var l = false;
            var m = 0;
            var p = seed.buildings["city" + currentcityid];
            for (var s in p) {
                if (p[s][0] == 11) {
                    l = true;
                    m = parseInt(p[s][2]);
                    break
                }
            }
            if (l) {
                var B = 0;
                var o = Object.keys(techcost);
                for (var D = 0; D < o.length; D++) {
                    if (parseInt(seed.tech[o[D]]) > 0) {
                        B++
                    }
                }
                if (B == 0) {
                    F = true
                }
            }
        }
        if (t) {
            var u = {
                evtid: 1,
                evtimg: "<img src='" + stimgUrl + "img/alliance_icon.png' />",
                evtdesc: g_js_strings.getNextAvailableCase.allidesc,
                evtbtns: "<a onclick='Modal.hideModal();modal_alliance();return false;' class='button20'><span>" + g_js_strings.commonstr.alliances + "</span></a>"
            };
            g.push(u)
        }
        if (I) {
            var u = {
                evtid: 2,
                evtimg: "<img src='" + stimgUrl + "img/second_city_icon.png' />",
                evtdesc: g_js_strings.getNextAvailableCase.frienddesc,
                evtbtns: "<a onclick='Modal.hideModal();return false;' class='buttonDown20'><span>" + g_js_strings.commonstr.skip + "</span></a><a onclick='Modal.hideModal();invite_friends_popup();return false;' class='button20'><span>" + g_js_strings.getNextAvailableCase.invitefriends + "</span></a>"
            };
            g.push(u)
        }
        if (e) {
            var u = {
                evtid: 3,
                evtimg: "<img src='" + stimgUrl + "img/second_city_icon.png' />",
                evtdesc: g_js_strings.getNextAvailableCase.expanddesc,
                evtbtns: "<a onclick='Modal.hideModal();return false;' class='button20'><span>" + g_js_strings.commonstr.ok + "</span></a>"
            };
            g.push(u)
        } else {
            if (v) {
                var u = {
                    evtid: 4,
                    evtimg: "<img src='" + stimgUrl + "img/third_city_icon.png' />",
                    evtdesc: g_js_strings.getNextAvailableCase.expanddesc,
                    evtbtns: "<a onclick='Modal.hideModal();return false;' class='button20'><span>" + g_js_strings.commonstr.ok + "</span></a>"
                };
                g.push(u)
            }
        }
        if (w) {
            var u = {
                evtid: 5,
                evtimg: "<img src='" + stimgUrl + "img/higher_level_wood_icon.png' />",
                evtdesc: g_js_strings.getNextAvailableCase.resourcedesc,
                evtbtns: "<a onclick='Modal.hideModal();return false;' class='button20'><span>" + g_js_strings.commonstr.ok + "</span></a>"
            };
            g.push(u)
        }
        if (k) {
            var u = {
                evtid: 6,
                evtimg: "<img src='" + stimgUrl + "img/knight_icon.png' />",
                evtdesc: g_js_strings.getNextAvailableCase.appointdesc,
                evtbtns: "<a onclick='Modal.hideModal();modal_build(" + z + ");return false;' class='button20'><span>" + g_js_strings.openKnights.appknights + "</span></a>"
            };
            g.push(u)
        }
        if (d) {
            var u = {
                evtid: 7,
                evtimg: "<img src='" + stimgUrl + "img/militiaman_icon.png' />",
                evtdesc: g_js_strings.getNextAvailableCase.troopdesc,
                evtbtns: "<a onclick='Modal.hideModal();modal_build(" + G + ");return false;' class='button20'><span>" + g_js_strings.modal_openBarracks.trainttl + "</span></a>"
            };
            g.push(u)
        }
        if (F) {
            var u = {
                evtid: 8,
                evtimg: "<img src='" + stimgUrl + "img/potion_brewing.png' />",
                evtdesc: g_js_strings.getNextAvailableCase.researchdesc,
                evtbtns: "<a onclick='Modal.hideModal();modal_build(" + m + ");return false;' class='button20'><span>" + g_js_strings.commonstr.research + "</span></a>"
            };
            g.push(u)
        }
        if (n) {
            var u = {
                evtid: 9,
                evtimg: "<img src='" + stimgUrl + "img/alliance_icon.png' />",
                evtdesc: g_js_strings.pop_suggest_invite_modal.invitedesc,
                evtbtns: "<a onclick='Modal.hideModal();cm.invite.load(cm.InviteTypes.INVITE_TYPE_SUGGEST_INVITE);cm.invite.open();' class='button20'><span>" + g_js_strings.pop_suggest_invite_modal.invitefriend + "</span></a><a onclick='Modal.hideModal();return false;' class='button20'><span>" + g_js_strings.commonstr.nothanks + "</span></a>"
            };
            g.push(u)
        }
        if (g.length > 1) {
            var C = true;
            var c = 0;
            while (C) {
                c = Math.floor(Math.random() * g.length);
                if (readCookie("uep_" + g[c].evtid)) {
                    g.splice(c, 1);
                    if (g.length == 0) {
                        return null
                    }
                } else {
                    C = false;
                    return g[c]
                }
            }
        }
        return null
    },
    testUEP: function (c) {
        var a = "<select onchange='eval(this.value)'>";
        var b = $(this.Methods);
        b.each(function (d) {
            var e = d[0];
            if (e == "testUEP" || e == "popup" || e == "popTreasureChest" || e == "getNextAvailableCase" || e == "getBuildCompleteInviteQual" || e == "popInformationMessage") {} else {
                a += "<option value='UserEngagement." + e + "()'>" + d[0] + "</option>"
            }
        });
        a += "</select>";
        $(c).update(a);
        $(c).onclick = "";
        return a
    }
};
Object.extend(UserEngagement, UserEngagement.Methods);
Object.extend(UserEngagement, UserEngagement.Properties);

function user_engagement_popup(a) {
    return UserEngagement.popup(a)
}
function pop_castle_two_modal() {
    UserEngagement.popCastleTwoModal()
}
function pop_suggest_invite_modal() {
    UserEngagement.popSuggestInviteModal()
}
function pop_action_feed_modal() {
    UserEngagement.popActionFeedModal()
}
function pop_action_feed() {
    UserEngagement.popActionFeed()
}
function pop_information_message(a) {
    UserEngagement.popInformationMessage(a)
}
function pop_friend_court() {
    UserEngagement.popFriendCourt()
}
function pop_treasure_chest_modal(a) {
    UserEngagement.popTreasureChestModal(a)
}
function pop_treasure_chest(a) {
    UserEngagement.popTreasureChest(a)
}
function getBuildCompleteInviteQual(a) {
    return UserEngagement.getBuildCompleteInviteQual(a)
}
function getNextAvailableCase() {
    return UserEngagement.getNextAvailableCase()
};

function getUserSettings() {
    var params = Object.clone(g_ajaxparams);
    new Ajax.Request(g_ajaxpath + "ajax/manageChatOptions.php" + g_ajaxsuffix, {
        method: "post",
        parameters: params,
        onSuccess: function (transport) {
            var rslt = eval("(" + transport.responseText + ")");
            if (rslt.ok) {
                var ignorelist = rslt.chatdata;
                var ignoreHtml = new Array();
                if (Object.keys(ignorelist) && Object.keys(ignorelist).length > 0) {
                    var idlist = Object.keys(ignorelist);
                    for (var i = 0; i < idlist.length; i++) {
                        ignoreHtml.push("<div class='userrow clearfix' id='igList_" + idlist[i] + "'>");
                        ignoreHtml.push("<div class='name'>" + ignorelist[idlist[i]] + "</div>");
                        ignoreHtml.push("<a class='button14' onclick='removeFromIgnoreList(" + idlist[i] + ");return false;'><span>" + g_js_strings.commonstr.remove + "</span></a>");
                        ignoreHtml.push("</div>")
                    }
                }
                var blocklist = rslt.msgdata;
                var blockHtml = new Array();
                if (Object.keys(blocklist) && Object.keys(blocklist).length > 0) {
                    var bidlist = Object.keys(blocklist);
                    for (var i = 0; i < bidlist.length; i++) {
                        blockHtml.push("<div class='userrow clearfix' id='blList_" + bidlist[i] + "'>");
                        blockHtml.push("<div class='name'>" + blocklist[bidlist[i]] + "</div>");
                        blockHtml.push("<a class='button14' onclick='removeFromBlockList(" + bidlist[i] + ");return false;'><span>" + g_js_strings.commonstr.remove + "</span></a>");
                        blockHtml.push("</div>")
                    }
                }
                if (seed.playerSettings.s1 == "g") {
                    var gchat = "checked";
                    var achat = ""
                } else {
                    var gchat = "";
                    var achat = "checked"
                }
                var userHtml = new Array();
                userHtml.push("<div class='usersettingbox'>");
                userHtml.push("<div class='userupperbox'>");
                userHtml.push("<div class='clearfix'>");
                userHtml.push("<div class='userlangwrap'>");
                userHtml.push("<div class='usersubtitle'>");
                userHtml.push(g_js_strings.getUserSettings.changelang);
                userHtml.push("</div>");
                userHtml.push("<div class='langdd clearfix'>");
                userHtml.push("<select id='userLanguage'>");
                userHtml.push("<option value='en' " + ((g_ajaxparams.lang == "en") ? "selected" : "") + ">English</option>");
                userHtml.push("<option value='es' " + ((g_ajaxparams.lang == "es") ? "selected" : "") + ">Espa&#241;ol</option>");
                userHtml.push("<option value='de' " + ((g_ajaxparams.lang == "de") ? "selected" : "") + ">Deutsch</option>");
                userHtml.push("<option value='fr' " + ((g_ajaxparams.lang == "fr") ? "selected" : "") + ">Fran&#231;ais</option>");
                userHtml.push("<option value='it' " + ((g_ajaxparams.lang == "it") ? "selected" : "") + ">Italiano</option>");
                userHtml.push("<option value='sv' " + ((g_ajaxparams.lang == "sv") ? "selected" : "") + ">Svenska</option>");
                userHtml.push("<option value='da' " + ((g_ajaxparams.lang == "da") ? "selected" : "") + ">Dansk</option>");
                userHtml.push("<option value='tr' " + ((g_ajaxparams.lang == "tr") ? "selected" : "") + ">T&#252;rk&#231;e</option>");
                userHtml.push("<option value='ko' " + ((g_ajaxparams.lang == "ko") ? "selected" : "") + ">&#54620;&#44397;&#50612;</option>");
                userHtml.push("<option value='ja' " + ((g_ajaxparams.lang == "ja") ? "selected" : "") + ">&#26085;&#26412;&#35486;</option>");
                userHtml.push("<option value='zh-Hant' " + ((g_ajaxparams.lang == "zh-Hant") ? "selected" : "") + ">&#32321;&#39636;&#20013;&#25991;</option>");
                userHtml.push("<option value='zh-Hans' " + ((g_ajaxparams.lang == "zh-Hans") ? "selected" : "") + ">&#31616;&#20307;&#20013;&#25991;</option>");
                userHtml.push("<option value='nl' " + ((g_ajaxparams.lang == "nl") ? "selected" : "") + ">Nederlands</option>");
                userHtml.push("</select>");
                userHtml.push("<a class='button20' href='#' onclick='saveLanguage();return false;'><span>" + g_js_strings.getUserSettings.savelang + "</span></a>");
                userHtml.push("</div>");
                userHtml.push("</div>");
                userHtml.push("<div class='userchatwrap'>");
                userHtml.push("<div class='usersubtitle'>");
                userHtml.push(g_js_strings.getUserSettings.defaultchat);
                userHtml.push("</div>");
                userHtml.push("<div class='usertabs'>");
                userHtml.push("<input type='radio' " + gchat + " name='dchat' onclick='changeDefaultChat(0);'>");
                userHtml.push("<span>");
                userHtml.push(g_js_strings.commonstr.global);
                userHtml.push("</span>");
                userHtml.push("<input type='radio' " + achat + " name='dchat' onclick='changeDefaultChat(1);'>");
                userHtml.push("<span>");
                userHtml.push(g_js_strings.commonstr.alliance);
                userHtml.push("</span>");
                userHtml.push("</div>");
                userHtml.push("</div>");
                userHtml.push("</div>");
                userHtml.push("</div>");
                userHtml.push("<div class='userlowerbox clearfix'>");
                userHtml.push("<div class='userlistside'>");
                userHtml.push("<div class='listtitle'>");
                userHtml.push(g_js_strings.getUserSettings.chatignore);
                userHtml.push("</div>");
                userHtml.push("<div class='userlistbox'>");
                userHtml.push(ignoreHtml.join(""));
                userHtml.push("</div>");
                userHtml.push("</div>");
                userHtml.push("<div class='userlistside'>");
                userHtml.push("<div class='listtitle'>");
                userHtml.push(g_js_strings.getUserSettings.msgblock);
                userHtml.push("</div>");
                userHtml.push("<div class='userlistbox'>");
                userHtml.push(blockHtml.join(""));
                userHtml.push("</div>");
                userHtml.push("</div>");
                userHtml.push("</div>");
                userHtml.push("</div>");
                Modal.showModal(500, 400, 130, 75, g_js_strings.modaltitles.usersettings, userHtml.join(""))
            } else {
                Modal.showAlert(printLocalError((rslt.error_code || null), (rslt.msg || null), (rslt.feedback || null)))
            }
        },
        onFailure: function () {}
    })
}
function saveLanguage() {
    var langco = $("userLanguage").value;
    var params = Object.clone(g_ajaxparams);
    params.lang = langco;
    new Ajax.Request(g_ajaxpath + "ajax/changeLanguage.php" + g_ajaxsuffix, {
        method: "post",
        parameters: params,
        onSuccess: function (transport) {
            var rslt = eval("(" + transport.responseText + ")");
            if (rslt.ok) {
                top.location = appUrl + "?lang=" + langco
            } else {
                Modal.showAlert(printLocalError((rslt.error_code || null), (rslt.msg || null), (rslt.feedback || null)))
            }
        },
        onFailure: function () {}
    })
}
function changeDefaultChat(type) {
    var params = Object.clone(g_ajaxparams);
    params.settingid = 1;
    params.settingvalue = (type == 0 ? "g" : "a");
    new Ajax.Request(g_ajaxpath + "ajax/changeUserSettings.php" + g_ajaxsuffix, {
        method: "post",
        parameters: params,
        onSuccess: function (transport) {
            var rslt = eval("(" + transport.responseText + ")");
            if (rslt.ok) {
                seed.playerSettings.s1 = (type == 0 ? "g" : "a")
            } else {
                Modal.showAlert(printLocalError((rslt.error_code || null), (rslt.msg || null), (rslt.feedback || null)))
            }
        },
        onFailure: function () {}
    })
}
function removeFromBlockList(uid) {
    var params = Object.clone(g_ajaxparams);
    params.pid = uid;
    new Ajax.Request(g_ajaxpath + "ajax/unignore.php" + g_ajaxsuffix, {
        method: "post",
        parameters: params,
        onSuccess: function (transport) {
            var rslt = eval("(" + transport.responseText + ")");
            if (rslt.ok) {
                $("blList_" + uid).remove()
            } else {
                Modal.showAlert(printLocalError((rslt.error_code || null), (rslt.msg || null), (rslt.feedback || null)))
            }
        },
        onFailure: function () {}
    })
}
function removeFromIgnoreList(uid) {
    var params = Object.clone(g_ajaxparams);
    params.ignoreId = uid;
    params.set = 0;
    new Ajax.Request(g_ajaxpath + "ajax/ignore.php" + g_ajaxsuffix, {
        method: "post",
        parameters: params,
        onSuccess: function (transport) {
            var rslt = eval("(" + transport.responseText + ")");
            if (rslt.ok) {
                $("igList_" + uid).remove();
                if (ignored["u" + uid]) {
                    delete ignored["u" + uid];
                    if (Object.keys(ignored) && Object.keys(ignored).length == 0) {
                        ignored = []
                    }
                }
            } else {
                Modal.showAlert(printLocalError((rslt.error_code || null), (rslt.msg || null), (rslt.feedback || null)))
            }
        },
        onFailure: function () {}
    })
};

function addCommas(b) {
    b += "";
    x = b.split(".");
    x1 = x[0];
    x2 = x.length > 1 ? "." + x[1] : "";
    var a = /(\d+)(\d{3})/;
    while (a.test(x1)) {
        x1 = x1.replace(a, "$1,$2")
    }
    return x1 + x2
}
function truncateStringAddEllipsis(c, b) {
    var a = c.toString(10);
    if (a.length <= parseInt(b)) {
        return a
    } else {
        return a.substr(0, (parseInt(b) - 3)) + "..."
    }
}
function isEmpty(a) {
    for (var b in a) {
        if (a.hasOwnProperty(b)) {
            return false
        }
    }
    return true
}
function validateEmails(f) {
    var d = f.split(",");
    var e = /^[a-z0-9_\+-]+(\.[a-z0-9_\+-]+)*@[a-z0-9-]+(\.[a-z0-9-]+)*\.([a-z]{2,4})$/i;
    var c = /^[a-z0-9,!#\$%&'\*\+/=\?\^_`\{\|}~-]+(\.[a-z0-9,!#\$%&'\*\+/=\?\^_`\{\|}~-]+)*@[a-z0-9-]+(\.[a-z0-9-]+)*\.([a-z]{2,})$/i;
    for (var b = 0; b < d.length; b++) {
        var a = d[b];
        if (!a.match(e) && !a.match(c)) {
            return false
        }
    }
    return true
}
function createCookie(c, e, d) {
    if (d) {
        var b = new Date();
        b.setTime(b.getTime() + (d * 60 * 1000));
        var a = "; expires=" + b.toGMTString()
    } else {
        var a = ""
    }
    document.cookie = c + "=" + e + a + "; path=/"
}
function readCookie(b) {
    var e = b + "=";
    var a = document.cookie.split(";");
    for (var d = 0; d < a.length; d++) {
        var f = a[d];
        while (f.charAt(0) == " ") {
            f = f.substring(1, f.length)
        }
        if (f.indexOf(e) == 0) {
            return f.substring(e.length, f.length)
        }
    }
    return null
}
function eraseCookie(a) {
    createCookie(a, "", -1)
}
function arthurCheck(a) {
    var b = false;
    for (var c = 0; c < a.length; c++) {
        if ($(unescape(a[c]))) {
            b = true;
            break
        }
    }
    if (b) {
        AjaxCall.gPostRequest("ajax/funnelTracking.php", {
            action: 1300,
            serverId: g_server,
            uid: tvuid
        })
    }
}
function getTemplate(b, c) {
    var d = unescape($(b).innerHTML.replace(/_tid_/g, ""));
    var a = new Template(d).evaluate(c);
    return a
}
var roman = Array("I", "II", "III", "IV", "V", "VI", "VII", "VIII");
var cm = cm || {};
cm.utils = cm.utils || {};
cm.utils.CoordinateLink = function (a, b) {
    _htmlElement = document.createElement("a");
    _htmlElement.href = "javascript:void(0)";
    _htmlElement.setAttribute("onclick", "cm.utils.CoordinateLinkController.onClick(event)");
    _htmlElement.innerHTML = "(" + a + "," + b + ")";
    Event.observe(_htmlElement, "onclick", cm.utils.CoordinateLinkController.onClick);
    this.setClassName = function (c) {
        _htmlElement.className = c
    };
    this.getHTMLElement = function () {
        return _htmlElement
    };
    this.getHTML = function () {
        var c = document.createElement("div");
        c.appendChild(_htmlElement);
        var d = c.innerHTML;
        c.removeChild(_htmlElement);
        return d
    }
};
cm.utils.CoordinateLinkController = new function () {
    this.onClick = function (c) {
        var b = c.srcElement ? c.srcElement : c.target;
        var d = b.innerHTML.split(",");
        var a = d[0].substr(1);
        var f = d[1].substr(0, d[1].length - 1);
        Modal.hideModalAll();
        changeview_map(b);
        $("mapXCoor").value = a;
        $("mapYCoor").value = f;
        reCenterMapWithCoor()
    }
};
cm.utils.ScrollbarWidthCalculator = function (c) {
    var b = 0;
    var a = function () {
            if (!b) {
                if (c.browser.msie) {
                    var f = c('<textarea cols="10" rows="2"></textarea>').css({
                        position: "absolute",
                        top: -1000,
                        left: -1000
                    }).appendTo("body"),
                        e = c('<textarea cols="10" rows="2" style="overflow: hidden;"></textarea>').css({
                            position: "absolute",
                            top: -1000,
                            left: -1000
                        }).appendTo("body");
                    b = f.width() - e.width();
                    f.add(e).remove()
                } else {
                    var d = c("<div />").css({
                        width: 100,
                        height: 100,
                        overflow: "auto",
                        position: "absolute",
                        top: -1000,
                        left: -1000
                    }).prependTo("body").append("<div />").find("div").css({
                        width: "100%",
                        height: 200
                    });
                    b = 100 - d.width();
                    d.parent().remove()
                }
            }
            return b
        };
    return {
        get: a
    }
}(jQuery);
var cm = cm || {};
cm.voltron = (function (c) {
    function a() {
        var d = c(".group").size();
        var e = parseInt(c("#groupsindex").attr("value"), 10);
        var f = e + 1;
        if (f > c(".group").size() - 1) {
            f = 0
        }
        c("#groupsindex").attr("value", f);
        c(".group").hide();
        c("#voltron .la").die();
        c("#voltron .ra").die();
        c("#g" + f).show(500, function () {
            c("#voltron .la").live("click", a);
            c("#voltron .ra").live("click", b)
        })
    }
    function b() {
        var d = c(".group").size();
        var e = parseInt(c("#groupsindex").attr("value"), 10);
        var f = e - 1;
        if (f < 0) {
            f = c(".group").size() - 1
        }
        c("#groupsindex").attr("value", f);
        c(".group").hide();
        c("#voltron .la").die();
        c("#voltron .ra").die();
        c("#g" + f).show(500, function () {
            c("#voltron .la").live("click", a);
            c("#voltron .ra").live("click", b)
        })
    }
    return {
        voltronInit: function (f) {
            var e = this;
            var d = "kso";
            c("#voltron").append('<form> <input id="groupsindex" type="hidden"> </input> </form> <div id="groups"> </div> <div class="la ar"> <span>&laquo;</span> </div> <div class="ra ar"> <span>&raquo;</span> </div>');
            c.each(f, function (h) {
                c("#groups").append('<div class="group" id="g' + h + '"></div>');
                c.each(f[h], function (g) {
                    c("#groups #g" + h).append('<div class="item i' + g + " s" + this.SIZE + '"><a href="' + this.URL + '" target="_blank"><img src="' + this.IMG + '"/></a></div>');
                    e.gameUrl = this.URL
                })
            });
            c(".item").live("click", function () {
                var g = c(this).attr("class");
                c.post("ajax/voltronTracking.php", {
                    data: "class=" + g + "&url=" + e.gameUrl
                })
            });
            if (f.length > 0) {
                c("#voltron").show();
                c("#g0").show();
                c("#groupsindex").attr("value", 0)
            }
            if (f.length > 1) {
                c("#voltron .la").live("click", a);
                c("#voltron .ra").live("click", b)
            }
        }
    }
})(jQuery);

function modal_openWalls() {
    var e = new Array();
    e.push("<div class='tabsbar clearfix barracksmodaltabs' id='barracksModalTabs'>");
    e.push("<a class='tab selected' onclick='changeWallsModalTabs(0);return false;'><span>");
    e.push(g_js_strings.modal_openWalls.builddefenses);
    e.push("</span></a>");
    e.push("<a class='tab' onclick='changeWallsModalTabs(1);return false;'><span>");
    e.push(g_js_strings.modal_openWalls.defqueue);
    e.push("</span></a>");
    var a = 0;
    var c = parseInt(seed.buildings["city" + currentcityid].pos1[1]);
    for (var b = 1; b < (c + 1); b++) {
        a += (b * 1000)
    }
    var d = modal_walls_spacecalc(1);
    e.push("<div class='wallspacetaken'>");
    e.push("<span>");
    e.push(d[0]);
    e.push("</span>");
    e.push("/<b>");
    e.push(a / 2);
    e.push("</b> " + g_js_strings.modal_openWalls.walldef);
    e.push("<span class='fielddefense'>");
    e.push(d[1]);
    e.push("</span>");
    e.push("/<b>");
    e.push(a / 2);
    e.push("</b> " + g_js_strings.modal_openWalls.fielddef);
    e.push("</div>");
    e.push("</div>");
    e.push("<div id='barracks_0' class='barrackswrap'>");
    e.push("<div class='unitlist clearfix'>");
    var g = Object.keys(fortcost);
    for (var b = 0; b < g.length; b++) {
        var f = g[b].split("frt")[1];
        e.push("<div class='unit'>");
        e.push("<img src='");
        e.push(stimgUrl);
        e.push("img/units/unit_");
        e.push(f);
        e.push("_68.jpg?6545'/>");
        e.push("<div class='unitinfo'>");
        e.push("<div class='unitnm'>");
        e.push(fortcost[g[b]][0]);
        e.push("</div>");
        e.push("<div class='unitdesc'>");
        e.push(fortcost[g[b]][10]);
        e.push("</div>");
        e.push("<div class='unitcount'><b>" + g_js_strings.commonstr.youown + ":</b> ");
        e.push(seed.fortifications["city" + currentcityid]["fort" + f]);
        e.push("</div>");
        e.push("<div class='clearfix btn'><a class='button20' onclick='modal_walls_train(");
        e.push(f);
        e.push(");return false;'><span>" + g_js_strings.commonstr.build + "</span></a>");
        e.push("</div>");
        e.push("</div>");
        e.push("</div>")
    }
    e.push("</div>");
    e.push("</div>");
    e.push("<div id='barracks_1' style='display:none;' class='barrackswrap'>");
    e.push("<div class='trainboxwrap'>");
    e.push("<div class='trainbox'>");
    e.push("<div class='trainhd'><span>" + g_js_strings.modal_openWalls.underconstruct + "</span></div><div id='modal_currentlytraining'>");
    e.push("</div>");
    e.push("</div>");
    e.push("<div class='trainbox'>");
    e.push("<div class='trainhd'><span>" + g_js_strings.modal_openWalls.waitforconstruct + "</span></div>");
    e.push("<div id='modal_trainingqueue'>");
    e.push("</div>");
    e.push("</div>");
    e.push("</div>");
    e.push("</div>");
    $("modal_build_content").innerHTML = e.join("")
}
function modal_walls_spacecalc(e) {
    var d = seed.fortifications["city" + currentcityid];
    var a = Object.keys(d);
    var g = [0, 0];
    for (var c = 0; c < a.length; c++) {
        var f = parseInt(a[c].split("fort")[1]);
        if (f < 60) {
            g[0] += (parseInt(fortstats["unt" + f][5]) * parseInt(d[a[c]]))
        } else {
            g[1] += (parseInt(fortstats["unt" + f][5]) * parseInt(d[a[c]]))
        }
    }
    if (e == 2) {
        var b = seed.queue_fort["city" + currentcityid];
        for (var c = 0; c < b.length; c++) {
            var f = parseInt(b[c][0]);
            if (f < 60) {
                g[0] += (parseInt(fortstats["unt" + f][5]) * parseInt(b[c][1]))
            } else {
                g[1] += (parseInt(fortstats["unt" + f][5]) * parseInt(b[c][1]))
            }
        }
    }
    return g
}
function modal_walls_trainingtab() {
    if (seed.queue_fort["city" + currentcityid].length > 0) {
        var b = new Array();
        var f = seed.queue_fort["city" + currentcityid][0];
        b.push("<div class='clearfix traincur'>");
        b.push("<div class='piccol'><img src='");
        b.push(stimgUrl);
        b.push("img/units/unit_");
        b.push(f[0]);
        b.push("_50.jpg'/></div>");
        b.push("<div class='infocol'><div class='untnm'>");
        b.push(fortcost["frt" + f[0]][0]);
        b.push("</div><div>");
        b.push(f[1]);
        b.push("</div></div>");
        b.push("</div>");
        b.push("<div class='btnrow clearfix'><div class='est'>" + g_js_strings.modal_walls_trainingtab.estdtime + ": <b id='underconstruction_estimatedtimeremain'>");
        var e = unixtime();
        var c = parseInt(f[3]) - e;
        b.push(timestr(c));
        b.push("</b></div>");
        b.push("<div style='float:right;'>");
        b.push('<a class="inlineButton red20" onclick="modal_speedup(');
        b.push(["'frt'", f[0], 0, "'" + g_js_strings.commonstr.fortification + "'", f[2]].join(","));
        b.push(');return false;">');
        b.push("<span>" + g_js_strings.commonstr.speedup + "</span></a>");
        b.push("</div>");
        b.push("<div style='float:right;' id='button_construction_cancel'>");
        b.push("<a href='#' class='button20' onclick='cancelFortifications(");
        b.push("0," + currentcityid + "," + f[0] + "," + f[1] + "," + f[3] + "," + f[2] + "," + f[5] + "," + f[6]);
        b.push(");return false;'>");
        b.push("<span>" + g_js_strings.commonstr.cancel + "</span></a>");
        b.push("</div>");
        b.push("</div>");
        $("modal_currentlytraining").innerHTML = b.join("");
        CountDown.addCountDown("underconstruction_estimatedtimeremain", c, function () {
            update_seed_ajax(true, function () {
                $("underconstruction_estimatedtimeremain").innerHTML = g_js_strings.modal_barracks_trainingtab.completetxt;
                $("button_construction_cancel").hide();
                modal_walls_trainingtab()
            })
        });
        if (seed.queue_fort["city" + currentcityid].length > 1) {
            var a = new Array();
            for (var d = 1; d < seed.queue_fort["city" + currentcityid].length; d++) {
                a.push("<div class='clearfix queueitem'>");
                a.push("<div class='piccol'><img src='");
                a.push(stimgUrl);
                a.push("img/units/unit_");
                a.push(seed.queue_fort["city" + currentcityid][d][0]);
                a.push("_50.jpg'/></div>");
                a.push("<div class='infocol'><div><b>");
                a.push(fortcost["frt" + seed.queue_fort["city" + currentcityid][d][0]][0]);
                a.push(":</b> ");
                a.push(seed.queue_fort["city" + currentcityid][d][1]);
                a.push("</div><div><b>" + g_js_strings.modal_walls_trainingtab.estdtime + ":</b> ");
                a.push(timestr(parseInt(seed.queue_fort["city" + currentcityid][d][3]) - parseInt(seed.queue_fort["city" + currentcityid][d][2])));
                a.push("</div></div>");
                a.push("<div style='float:right;margin-top:40px'>");
                a.push("<a href='#' class='button20' onclick='cancelFortifications(");
                a.push(+d + "," + currentcityid + "," + seed.queue_fort["city" + currentcityid][d][0] + "," + seed.queue_fort["city" + currentcityid][d][1] + "," + seed.queue_fort["city" + currentcityid][d][3] + "," + seed.queue_fort["city" + currentcityid][d][2] + "," + seed.queue_fort["city" + currentcityid][d][5] + "," + seed.queue_fort["city" + currentcityid][d][6]);
                a.push(");return false;'>");
                a.push("<span>" + g_js_strings.commonstr.cancel + "</span></a>");
                a.push("</div>");
                a.push("</div>")
            }
            $("modal_trainingqueue").innerHTML = a.join("")
        } else {
            $("modal_trainingqueue").update("")
        }
    } else {
        $("modal_currentlytraining").update("")
    }
}
function changeWallsModalTabs(a) {
    var c = $("barracksModalTabs").select("a");
    for (var b = 0; b < c.length; b++) {
        c[b].className = "tab";
        $("barracks_" + b).hide()
    }
    $("barracks_" + a).show();
    c[a].addClassName("selected");
    if (a == 0) {
        $("modal_build").className = "tab1"
    } else {
        $("modal_build").className = "tab2";
        modal_walls_trainingtab()
    }
}
function modal_walls_train(e) {
    var b = new Array();
    b.push("<div id='barracks_train' class='clearfix'>");
    b.push("<img src='");
    b.push(stimgUrl);
    b.push("img/units/unit_");
    b.push(e);
    b.push("_215.jpg?6545'/>");
    b.push("<div class='unitinfo'>");
    b.push("<div class='unitnm'>");
    b.push(fortcost["frt" + e][0]);
    b.push("</div>");
    b.push("<div class='unitdesc'>");
    b.push(fortcost["frt" + e][10]);
    b.push("</div>");
    b.push("<div class='unitstats'>");
    b.push("<table cellpadding='0' cellspacing='0'>");
    b.push("<tr><td><b>" + g_js_strings.commonstr.attack + ":</b> ");
    b.push(fortstats["unt" + e][1]);
    b.push("</td><td><b>" + g_js_strings.commonstr.speed + ":</b> ");
    b.push(fortstats["unt" + e][3]);
    b.push("</td></tr>");
    b.push("<tr><td><b>" + g_js_strings.commonstr.defense + ":</b> ");
    b.push(fortstats["unt" + e][2]);
    b.push("</td><td><b>" + g_js_strings.commonstr.range + ":</b> ");
    b.push(fortstats["unt" + e][4]);
    b.push("</td></tr>");
    b.push("<tr><td><b>" + g_js_strings.commonstr.life + ":</b> ");
    b.push(fortstats["unt" + e][0]);
    b.push("</td><td><b>" + g_js_strings.commonstr.space + ":</b> ");
    b.push(fortstats["unt" + e][5]);
    b.push("</td></tr>");
    b.push("</table>");
    b.push("</div>");
    b.push("<div class='unitreqs'>");
    b.push("<table cellpadding='0' cellspacing='0'><thead><tr><td class='res'>" + g_js_strings.commonstr.resource + "</td><td class='req'>" + g_js_strings.commonstr.required + "</td><td class='own'>" + g_js_strings.commonstr.youown + "</td></tr></thead><tbody>");
    var a = checkreq("frt", e, 1);
    var d = false;
    for (var c = 0; c < a[0].length; c++) {
        b.push("<tr><td class='res'>");
        b.push(a[0][c]);
        b.push("</td><td class='req ");
        if (a[3][c] == 0) {
            b.push("unmet");
            d = true
        } else {
            b.push("met")
        }
        b.push("'>");
        b.push(addCommas(a[1][c]));
        b.push("</td><td class='own'>");
        b.push(addCommas(a[2][c]));
        b.push("</td></tr>")
    }
    b.push("</tbody></table>");
    b.push("</div>");
    b.push("<div class='unit_youown'><b>" + g_js_strings.commonstr.youown + ":</b> ");
    b.push(seed.fortifications["city" + currentcityid]["fort" + e]);
    b.push("</div>");
    b.push("<div class='unit_max'><b>" + g_js_strings.commonstr.maximum + ":</b> <span id='modal_barracks_max_num'>");
    if (d) {
        b.push(0)
    } else {
        b.push(modal_walls_train_max(e))
    }
    b.push("</span></div>");
    b.push("<div class='unit_numtrain'><b>" + g_js_strings.modal_walls_train.numdefbuild + ":</b><input type='text' id='modal_barracks_num' onkeyup='modal_walls_train_timecalc(this,");
    b.push(e);
    b.push(");'/><a  class='inlineButton blue14' onclick='modal_walls_train_maxbtn(");
    b.push(e);
    b.push(");return false;'><span>" + g_js_strings.commonstr.max + "</span></a></div>");
    b.push("<div class='unit_time'><b>" + g_js_strings.modal_walls_train.consttime + ":</b> <span id='modal_barracks_traintime'></span></div>");
    b.push("<div class='unit_speedup clearfix'><input type='checkbox' id='modal_barracks_tut'/><div class='hlp'><div>" + g_js_strings.modal_walls_train.usesiege + " <span id='modal_barracks_tutred'>0 sec</span>.</div><div>" + g_js_strings.commonstr.youown + ": ");
    b.push((seed.items.i26 == null) ? 0 : seed.items.i26);
    b.push(". <a  onclick='modal_barracks_getmoreshop();return false;'>" + g_js_strings.commonstr.getmore + "</a></div></div></div>");
    b.push("<div class='unit_btns clearfix'><a  class='button25");
    if (d) {
        b.push(" unmet")
    }
    b.push("' id='unit_btns_start' onclick='");
    if (!d) {
        b.push("modal_walls_train_action(");
        b.push(e);
        b.push(");")
    }
    b.push("return false;'><span>" + g_js_strings.modal_walls_train.starttrain + "</span></a></div>");
    b.push("</div>");
    b.push("</div>");
    b.push("<div></div>");
    Modal.showModal(500, 400, 120, 20, fortcost["frt" + e][0], b.join(""))
}
function modal_walls_train_maxbtn(a) {
    $("modal_barracks_num").value = parseInt($("modal_barracks_max_num").innerHTML);
    modal_walls_train_timecalc($("modal_barracks_num"), a)
}
function modal_walls_train_max(b) {
    var g = new Array();
    var h = new Array();
    for (var c = 1; c < 5; c++) {
        g.push(parseInt(fortcost["frt" + b][c]) * 3600);
        h.push(parseInt(seed.resources["city" + currentcityid]["rec" + c][0]))
    }
    var f = h[0] / g[0];
    for (var c = 1; c < g.length; c++) {
        f = Math.min(f, h[c] / g[c])
    }
    f = parseInt(f);
    var e = 0;
    var d = parseInt(seed.buildings["city" + currentcityid].pos1[1]);
    for (var c = 1; c < (d + 1); c++) {
        e += (c * 1000)
    }
    e = e / 2;
    var j = modal_walls_spacecalc(2);
    var a = 0;
    if (parseInt(b) < 60) {
        a = parseInt((e - j[0]) / parseInt(fortstats["unt" + b][5]))
    } else {
        a = parseInt((e - j[1]) / parseInt(fortstats["unt" + b][5]))
    }
    if (a < f) {
        f = a
    }
    return f || 0
}
function modal_walls_train_action(b) {
    if (!$("unit_btns_start").hasClassName("unmet")) {
        var a = parseInt($("modal_barracks_num").value);
        if (a <= modal_walls_train_max(b) && a > 0) {
            var c = 0;
            if ($("modal_barracks_tut").checked) {
                if (parseInt(seed.items.i26) > 0) {
                    c = 26
                }
            }
            walls_train_defense(b, a, c)
        }
    }
}
function modal_walls_train_timecalc(d, b) {
    var c = parseInt(d.value);
    if (c) {
        if (c > parseInt($("modal_barracks_max_num").innerHTML)) {
            c = parseInt($("modal_barracks_max_num").innerHTML);
            d.value = parseInt($("modal_barracks_max_num").innerHTML)
        } else {
            if (c < 0) {
                c = 0;
                d.value = 0
            }
        }
        var a = modal_walls_traintime(b, c);
        $("modal_barracks_traintime").innerHTML = timestr(a, 1);
        $("modal_barracks_tutred").innerHTML = timestr(parseInt(a * 0.3), 1)
    } else {
        $("modal_barracks_traintime").innerHTML = "0sec";
        $("modal_barracks_tutred").innerHTML = "0sec"
    }
}
function modal_walls_traintime(d, e) {
    var b = parseInt(parseInt(fortcost["frt" + d][7])) * e;
    var f = 1;
    f += 0.1 * parseInt(seed.tech.tch16);
    var a = 0;
    var c = seed.knights["city" + currentcityid];
    if (c) {
        c = c["knt" + seed.leaders["city" + currentcityid].politicsKnightId];
        if (c) {
            a = parseInt(c.combat);
            newkntlv = ((parseInt(c.politicsBoostExpireUnixtime) - unixtime()) > 0) ? (a * 1.25) : a;
            f = f + (0.005 * newkntlv)
        }
    }
    b = Math.max(1, Math.ceil(b / f));
    return b
}
function walls_train_defense(tid, num, iid) {
    for (var i = 1; i < 5; i++) {
        seed.resources["city" + currentcityid]["rec" + i][0] = parseInt(seed.resources["city" + currentcityid]["rec" + i][0]) - parseInt(fortcost["frt" + tid][i]) * 3600 * parseInt(num)
    }
    seed.citystats["city" + currentcityid].gold[0] = parseInt(seed.citystats["city" + currentcityid].gold[0]) - parseInt(fortcost["frt" + tid][5]) * parseInt(num);
    seed.citystats["city" + currentcityid].pop[0] = parseInt(seed.citystats["city" + currentcityid].pop[0]) - parseInt(fortcost["frt" + tid][6]) * parseInt(num);
    var time = modal_walls_traintime(tid, num);
    if (iid == 26) {
        time = parseInt(time * 0.7)
    }
    var params = Object.clone(g_ajaxparams);
    params.cid = currentcityid;
    params.type = tid;
    params.quant = num;
    params.items = iid;
    var profiler = new cm.Profiler("ResponseTime", "fortify.php");
    new Ajax.Request(g_ajaxpath + "ajax/fortify.php" + g_ajaxsuffix, {
        method: "post",
        parameters: params,
        onSuccess: function (transport) {
            profiler.stop();
            var rslt = eval("(" + transport.responseText + ")");
            if (rslt.ok) {
                seed.queue_fort["city" + currentcityid].push([tid, num, rslt.initTS, parseInt(rslt.initTS) + time, 0, time, rslt.fortifyId]);
                Modal.hideModal();
                changeWallsModalTabs(1);
                queue_changetab_train();
                if (iid == 26) {
                    seed.items.i26 = parseInt(seed.items.i26) - 1;
                    ksoItems[26].subtract()
                }
                if (rslt.updateSeed) {
                    update_seed(rslt.updateSeed)
                }
            } else {
                Modal.showAlert(printLocalError((rslt.error_code || null), (rslt.msg || null), (rslt.feedback || null)))
            }
        },
        onFailure: function () {
            profiler.stop()
        }
    })
};
cm.WatchTower = function (d) {
    cm.CustomEventDispatcher.call(this);
    var c = this;
    var g;
    var a;
    var f;
    var b;
    this.getBuildingId = function () {
        return g
    };
    this.getCityId = function () {
        return a
    };
    this.getSlot = function () {
        return f
    };
    this.getLevel = function () {
        return b
    };
    this.setLevel = function (h) {
        b = h
    };
    this.demolish = function () {
        var h = b;
        b = 0;
        if (h > 0) {
            var i = new cm.WatchTowerEvent(cm.WatchTowerEvent.DEMOLISHED);
            i.setTarget(c);
            this.dispatchCustomEvent(i)
        }
    };
    var e = function () {
            g = d.buildingId;
            a = d.cityId;
            f = d.slot;
            b = d.level
        };
    e()
};
cm.OOP.inherits(cm.WatchTower, cm.CustomEventDispatcher);
cm.WatchTowerEvent = function (a) {
    cm.CustomEvent.call(this, a)
};
cm.OOP.inherits(cm.WatchTowerEvent, cm.CustomEvent);
cm.WatchTowerEvent.LEVEL_INCREASED = "watchTower_levelIncreased";
cm.WatchTowerEvent.DEMOLISHED = "watchTower_demolished";
cm.WatchTowerController = function (a) {
    var c = function (h) {
            a.removeEventListener(cm.WatchTowerEvent.DEMOLISHED, c);
            cm.WatchTowerList.remove(a);
            var f = cm.IncomingAttackManager.getAttacksByCity(currentcityid);
            var g = f ? f.getCount() : 0;
            var d;
            while (g > 0) {
                d = f.getElementAtPosition(0);
                d.setMarchStatus(cm.MARCH_STATUS.MARCH_STATUS_INACTIVE);
                g = f.getCount()
            }
        };
    var b = function () {
            a.addEventListener(cm.WatchTowerEvent.DEMOLISHED, c)
        };
    b()
};
cm.BootLoader.add(function () {
    cm.WatchTowerList = new function (c) {
        var b = this;
        var a = {};
        this.add = function (e) {
            if (e) {
                var f = new cm.WatchTowerController(e);
                a[e.getCityId()] = e
            }
        };
        this.remove = function (e) {
            if (e) {
                delete a[e.getCityId()]
            }
        };
        this.getCityWatchTower = function (e) {
            return a[e.toString()]
        };
        var d = function () {
                if (!(c instanceof Array) && typeof (c) == "object") {
                    var g, i, k, j, l, m, h, o, f, e, n;
                    for (g in c) {
                        j = c[g];
                        if (!(j instanceof Array) && typeof (j) == "object") {
                            for (k in j) {
                                l = j[k];
                                m = parseInt(l[0]);
                                if (m === cm.BUILDING_TYPES.WATCH_TOWER) {
                                    h = parseInt(l[1]);
                                    o = l[2];
                                    f = l[3];
                                    i = g.substring(4);
                                    n = {
                                        buildingId: f,
                                        cityId: i,
                                        slot: o,
                                        level: h
                                    };
                                    e = new cm.WatchTower(n);
                                    b.add(e);
                                    break
                                }
                            }
                        }
                    }
                }
            };
        d()
    }(seed.buildings)
}, null, 1);
var cm = cm || {};
cm.WatchTowerTimerView = function (l, d) {
    var m = this;
    var b;
    var e;
    var a;
    var n;
    var p;
    var k;
    this.getHtmlElement = function () {
        return a
    };
    var o = function () {
            var r = n.getArrivalTime();
            var q = r ? cm.TimeFormatter.format(n.getArrivalTime() - unixtime()) : "attack";
            b.nodeValue = q
        };
    var i = function (r) {
            var q = n.getMarchStatus();
            if (q === cm.MARCH_STATUS.MARCH_STATUS_INACTIVE || q === cm.MARCH_STATUS.MARCH_STATUS_ABORTING) {
                m.remove()
            }
        };
    var c = function (q) {
            o()
        };
    var f = function (q) {
            if (p.getElementAtPosition(0).getId() != n.getId()) {
                m.remove()
            }
        };
    var h = function (q) {
            m.remove()
        };
    var g = function (q) {
            m.remove()
        };
    var j = function () {
            k = false;
            n = l;
            n.addEventListener(cm.IncomingAttackEvent.STATUS_CHANGED, i);
            n.addEventListener(cm.IncomingAttackEvent.ARRIVAL_TIME_CHANGED, c);
            p = d;
            p.addEventListener(cm.CollectionEvent.ELEMENT_ADDED, f);
            cm.CitySwitch.addEventListener(cm.CitySwitchEvent.CITY_CHANGED, h);
            cm.CitySwitch.addEventListener(cm.CitySwitchEvent.VIEW_CHANGED, g);
            a = document.createElement("div");
            a.className = "watchTowerTimer";
            b = document.createTextNode("");
            a.appendChild(b);
            o()
        };
    this.setParentElement = function (q) {
        e = q
    };
    this.show = function () {
        k = true;
        e.insertBefore(a, e.firstChild)
    };
    this.isActive = function () {
        return k
    };
    this.remove = function () {
        k = false;
        if (e) {
            try {
                e.removeChild(a)
            } catch (q) {}
        }
        n.removeEventListener(cm.IncomingAttackEvent.STATUS_CHANGED, i);
        n.removeEventListener(cm.IncomingAttackEvent.ARRIVAL_TIME_CHANGED, c);
        p.removeEventListener(cm.CollectionEvent.ELEMENT_ADDED, f);
        cm.CitySwitch.removeEventListener(cm.CitySwitchEvent.CITY_CHANGED, h);
        cm.CitySwitch.removeEventListener(cm.CitySwitchEvent.VIEW_CHANGED, g)
    };
    j()
};
cm.CurrentWatchTowerTimer = null;
cm.WatchTowerUtil = {
    findSlotInCity: function (f) {
        var b = seed.buildings["city" + f];
        var a, d, c, e;
        for (a in b) {
            d = b[a];
            c = d[0];
            if (c == cm.BUILDING_TYPES.WATCH_TOWER) {
                e = d[2];
                return e
            }
        }
        return -1
    }
};
cm.CitySwitch = new function () {
    cm.CustomEventDispatcher.call(this);
    var b;
    var a;
    this.setCurrentCity = function (e) {
        var d = b;
        b = e;
        var c = new cm.CitySwitchEvent(cm.CitySwitchEvent.CITY_CHANGED);
        c.setTarget({
            currentCity: b,
            previousCity: d
        });
        this.dispatchCustomEvent(c)
    };
    this.setView = function (d) {
        if (a != d) {
            var e = a;
            a = d;
            var c = new cm.CitySwitchEvent(cm.CitySwitchEvent.VIEW_CHANGED);
            c.setTarget({
                currentView: a,
                previousView: e
            });
            this.dispatchCustomEvent(c)
        }
    };
    this.init = function (d, c) {
        b = d;
        a = c
    }
}();
cm.OOP.inherits(cm.CitySwitch, cm.CustomEventDispatcher);
cm.CitySwitchEvent = function (a) {
    cm.CustomEvent.call(this, a)
};
cm.OOP.inherits(cm.CitySwitchEvent, cm.CustomEvent);
cm.CitySwitchEvent.CITY_CHANGED = "cityChanged";
cm.CitySwitchEvent.VIEW_CHANGED = "viewChanged";
if (!window.WildDefense) {
    var WildDefense = new Object()
}
WildDefense.Properties = {
    c_trapCost: 200,
    c_mercenaryList: ["", g_js_strings.commonstr.novices, g_js_strings.commonstr.intermediates, g_js_strings.commonstr.veterans],
    c_mercenaryCost: [0, 200, 400, 1000],
    tileId: 0,
    cityId: 0,
    gold: 0,
    ownedTraps: 0,
    maxTraps: 0,
    currMercenaryIdx: 0,
    newMercenaryIdx: 0,
    feError: {
        noMercChange: g_js_strings.WildDefense.nochange,
        notEnoughGold: g_js_strings.WildDefense.nogold,
        notValidNumber: g_js_strings.WildDefense.validnumber
    },
    castleFlag: false
};
WildDefense.Methods = {
    fillData: function () {
        if (!seed.wildDef["t" + this.tileId]) {
            seed.wildDef["t" + this.tileId] = Object.clone(wilddeftemplate);
            seed.wildDef["t" + this.tileId].tileId = this.tileId
        }
        this.gold = seed.citystats["city" + currentcityid].gold[0];
        this.cityId = currentcityid;
        this.maxTraps = parseInt(seed.wilderness["city" + currentcityid]["t" + this.tileId].tileLevel) * 100;
        this.ownedTraps = seed.wildDef["t" + this.tileId].fort60Count;
        this.currMercenaryIdx = seed.wildDef["t" + this.tileId].mercLevel;
        (this.currMercenaryIdx == 90) && (this.currMercenaryIdx = 0)
    },
    defenseModal: function (g, e) {
        this.castleFlag = (e) ? true : false;
        this.tileId = g;
        this.fillData();
        var f = {
            text_traptitle: g_js_strings.commonstr.traps,
            text_trapdesc: g_js_strings.WildDefense.trapdesc,
            data_owned_ratio: this.ownedTraps + "/" + this.maxTraps,
            rtext_cost: g_js_strings.WildDefense.costeach.replace("%1$s", this.c_trapCost),
            text_build: g_js_strings.commonstr.build,
            text_merctitle: g_js_strings.commonstr.mercenaries,
            text_mercdesc: g_js_strings.WildDefense.mercdesc,
            text_set: g_js_strings.commonstr.set,
            text_mercnone: g_js_strings.WildDefense.mercnone,
            text_mercnov: this.c_mercenaryList[1],
            rtext_costhr_none: g_js_strings.WildDefense.costhour.replace("%1$s", this.c_mercenaryCost[0]),
            rtext_costhr_nov: g_js_strings.WildDefense.costhour.replace("%1$s", this.c_mercenaryCost[1]),
            text_mercinter: this.c_mercenaryList[2],
            rtext_costhr_inter: g_js_strings.WildDefense.costhour.replace("%1$s", this.c_mercenaryCost[2]),
            text_mercvet: this.c_mercenaryList[3],
            rtext_costhr_vet: g_js_strings.WildDefense.costhour.replace("%1$s", this.c_mercenaryCost[3])
        };
        var a = getTemplate("wilddefense_defensemodal", f);
        Modal.showModal(500, 580, 90, 10, g_js_strings.modaltitles.wildernessdefense, a);
        if (this.ownedTraps >= this.maxTraps) {
            $("wildBuildTrapBtn") && disableActionButton($("wildBuildTrapBtn"))
        }
        var d = $("mercListForm").merclist;
        for (var b = 0; b < d.length; b++) {
            (d[b].value == this.currMercenaryIdx) && (d[b].checked = true)
        }
        var c = $("wildDefenseMain").select(".merc");
        for (var b = 0; b <= 3; b++) {
            if (this.c_mercenaryCost[b] > this.gold) {
                c[b].setOpacity(0.5);
                c[b].select("input")[0].disabled = true
            }
        }
    },
    trapModal: function () {
        var b = {
            text_youhave: g_js_strings.WildDefense.youhave + ":",
            text_max: g_js_strings.commonstr.max,
            rtext_traps: g_js_strings.WildDefense.atraps.replace("%1$s", this.ownedTraps + "/" + this.maxTraps),
            rtext_gold: g_js_strings.WildDefense.agold.replace("%1$s", addCommas(this.gold)),
            rtext_cost: g_js_strings.commonstr.cost + ": " + g_js_strings.WildDefense.costeach.replace("%1$s", this.c_trapCost),
            text_tobuild: g_js_strings.WildDefense.tobuild,
            text_build: g_js_strings.commonstr.build
        };
        var a = getTemplate("wilddefense_trapsmodal", b);
        Modal.showModal(400, 580, 90, 10, g_js_strings.commonstr.traps, a)
    },
    buyTraps: function () {
        var b = $("trapCount").value;
        if (this.qualifyTrapsPurchase(b) == "invalid") {
            $("trapPurchaseError").innerHTML = this.feError.notValidNumber;
            $("trapPurchaseError").show();
            return false
        } else {
            if (this.qualifyTrapsPurchase(b) == "gold") {
                $("trapPurchaseError").innerHTML = this.feError.notEnoughGold;
                $("trapPurchaseError").show();
                return false
            } else {
                if (!isNaN(this.qualifyTrapsPurchase(b))) {
                    b = this.qualifyTrapsPurchase(b)
                }
            }
        }
        $("trapPurchaseError").innerHTML = "";
        $("trapPurchaseError").hide();
        $("trapCount").value = b;
        var a = {};
        a.quant = b;
        a.tid = this.tileId;
        a.cid = this.cityId;
        AjaxCall.gPostRequest("ajax/buyWildTraps.php", a, function (c) {
            if (c.ok) {
                seed.wildDef["t" + WildDefense.tileId].fort60Count = parseInt(seed.wildDef["t" + WildDefense.tileId].fort60Count) + parseInt(b);
                if (c.updateSeed) {
                    update_seed(c.updateSeed)
                }
                if (WildDefense.castleFlag) {
                    Modal.hideModalAll();
                    buildslot($("slot_0"));
                    changeCastleModalTabs(2);
                    WildDefense.defenseModal(WildDefense.tileId, 1)
                } else {
                    Modal.hideModalAll();
                    WildDefense.defenseModal(WildDefense.tileId)
                }
            } else {
                Modal.showAlert(printLocalError((c.error_code || null), (c.msg || null), (c.feedback || null)))
            }
        })
    },
    qualifyTrapsPurchase: function (a) {
        if (isNaN(a) || parseInt(a) <= 0) {
            return "invalid"
        } else {
            if (parseInt(a) * this.c_trapCost > this.gold) {
                return "gold"
            } else {
                if ((parseInt(a) + parseInt(this.ownedTraps)) > this.maxTraps) {
                    return (this.maxTraps - parseInt(this.ownedTraps))
                } else {
                    return "passed"
                }
            }
        }
    },
    fillMaxTraps: function () {
        var a = parseInt(this.maxTraps) - parseInt(this.ownedTraps);
        var b = parseInt(this.gold / this.c_trapCost);
        a = (a > b) ? b : a;
        $("trapCount").value = a
    },
    mercenaryModal: function () {
        var c = $("mercListForm").merclist;
        var e = this.currMercenaryIdx;
        for (var b = 0; b < c.length; b++) {
            (c[b].checked) && (e = c[b].value)
        }
        if (e == this.currMercenaryIdx) {
            Modal.showAlert(this.feError.noMercChange);
            return false
        }
        this.newMercenaryIdx = e;
        var d = {
            c_mercenaryList: ["", g_js_strings.commonstr.novices, g_js_strings.commonstr.intermediates, g_js_strings.commonstr.veterans],
            c_mercenaryCost: [0, 200, 400, 1000],
            rtext_desc: (e == 0) ? g_js_strings.WildDefense.mercconfirmnone : g_js_strings.WildDefense.mercconfirm.replace("%1$s", this.c_mercenaryCost[e]).replace("%2$s", this.c_mercenaryCost[e]).replace("%3$s", this.c_mercenaryList[e]),
            text_cancel: g_js_strings.commonstr.cancel,
            text_hire: g_js_strings.commonstr.hire
        };
        var a = getTemplate("wilddefense_mercmodal", d);
        Modal.showModal(400, 580, 90, 10, g_js_strings.commonstr.mercenaries, a)
    },
    hireMercs: function () {
        var a = {};
        a.cid = this.cityId;
        a.tid = this.tileId;
        a.lv = this.newMercenaryIdx;
        a.olv = this.currMercenaryIdx;
        AjaxCall.gPostRequest("ajax/hireWildMerc.php", a, function (b) {
            if (b.ok) {
                if (b.updateSeed) {
                    update_seed(b.updateSeed)
                }
                seed.wildDef["t" + WildDefense.tileId].mercLevel = WildDefense.newMercenaryIdx;
                if (WildDefense.castleFlag) {
                    Modal.hideModalAll();
                    buildslot($("slot_0"));
                    WildDefense.defenseModal(WildDefense.tileId, 1)
                } else {
                    Modal.hideModalAll();
                    WildDefense.defenseModal(WildDefense.tileId)
                }
            } else {
                Modal.showAlert(printLocalError((b.error_code || null), (b.msg || null), (b.feedback || null)))
            }
        })
    }
};
Object.extend(WildDefense, WildDefense.Methods);
Object.extend(WildDefense, WildDefense.Properties);